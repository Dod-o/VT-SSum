{
    "id": "j4btp6qoubadoilaoizuhare6es4z3vk",
    "title": "Porting Contiki OS to VSN",
    "info": {
        "author": [
            "Miha Smolnikar, Department of Communication Systems, Jo\u017eef Stefan Institute"
        ],
        "published": "Nov. 16, 2010",
        "recorded": "October 2010",
        "category": [
            "Top->Computers->Networking"
        ]
    },
    "url": "http://videolectures.net/wsn2010_smolnikar_pcos/",
    "segmentation": [
        [
            "Welcome also from my side.",
            "I sure hope you will make this presentation interesting, although I'm not presenting my work because I'm presenting here instead of Eric per tote who did this for his diploma, but he's unfortunately not with us today.",
            "So Marco presented our platform the hardware part and software development tools we're using.",
            "I will present something that Eric did.",
            "What we're starting is to port Quantity Operating system today."
        ],
        [
            "Platform, so here's the outline of my talk.",
            "It's divided into 2 parts.",
            "1st I will speak about Contiki.",
            "I will give some details.",
            "That Maria didn't mention.",
            "So some introduction features and what communication protocols does Kentucky offer, and then I will move to our experiences importing contact to the platform.",
            "So first, just.",
            "Comparison between Contiki and Tiny OS and then the environment we were using for the time of his diploma porting and what is that we?"
        ],
        [
            "Make so far.",
            "So Contiki is a light way operating system distinct for sensor networks.",
            "It was developed mostly by Adam Dunkels from Swedish Institute of Computer Science and these available as an open source project under the BSD license.",
            "The first version was published in 2003 and the last version which we were reporting was published in spring 2010 and this is the version 2.4.",
            "So implementation buys the Kontiki is written in C programming language and if we just compare it to the other two.",
            "Operating systems that were.",
            "Built purposely for sensor networks, these are tiny OS and mantis.",
            "The footprint of the Contiki is bigger than Tiny OS.",
            "While it's smaller than the mantis will get to the details about this later.",
            "But mostly the reason for this is in this that the tiny OS is purely event driven while Mantis is preemptive multithreaded operating system while the KONTIKI combines these two principles and therefore.",
            "Reason is a hybrid version of the operating system and also offers.",
            "Best maybe best things of the both 2 principles, so achieving this can be tricky."
        ],
        [
            "It was 42 since it's written in C programming language, it was ported to several platforms.",
            "MSP 430 from Texas Instruments and Atmel AVR platforms and are the most well known for Contiki ports.",
            "But there are also several other other platforms.",
            "So what we are doing and what I represent is porting Contiki to the SD platform.",
            "So which has an ARM Cortex entry core?",
            "Also available open source are simulators of Contiki Khoja is Java based simulator while the MSP seam is a library which we can use in order to simulate hardware specific things of the Texas Instruments MSP 430 platform.",
            "It also offers a file system.",
            "It's named coffee and it has some memory management capabilities since it's dynamically linked operating system.",
            "This goes to both ROM and RAM.",
            "So for the program code and for the day."
        ],
        [
            "Later.",
            "Oh the image, so the firmware of the kontiki is modular, so we can.",
            "We can divide it into the court and loadable programs and the core is usually.",
            "Doesn't change for the time of 1 deployment while the program scan can be changed and dynamically loaded and this means that we can on runtime change individual programs or services running on the sensor node.",
            "Here I've stated that the core cannot be modified after no deployment.",
            "This means that Contiki as an operating system doesn't offer this, but using a special boot loader we would be able also to do this.",
            "But this would mean that we would need to send all the firmware to the scenes are not reset it and rebuild the whole the whole memory for the program and this would mean that we would exchange the quantity.",
            "So the core would be replaced for loadable programs.",
            "We can also use over the air programming which is done so that we sent on link to link basis the programs to the.",
            "Concentrator note or the coordinator, however, recalled, and then from this node we broadcast the programs to the neighboring sensor nodes.",
            "Um?",
            "So I'll come to that later, but just to mention it here, only core and this support for loading the programs is.",
            "Represents the the kernel of the of the operating system, which means that Kentucky doesn't have any power saving mechanisms implemented in the kernel.",
            "But in order to support this because this is crucial in sensor networks, so saving with the energy the kernel let's application specific parts of the system to implement these mechanisms by.",
            "By this, the kernel exposes the size of the queue of the events to the applications running.",
            "On top of the Contiki curve."
        ],
        [
            "So I've started this a bit.",
            "So what does Kentucky consists of?",
            "It consists of kernel program loader libraries and the set of processes.",
            "So Kernel offers only CPU multiplexing.",
            "The code of the kernel is non platform specific.",
            "This means that we can port it to different platforms.",
            "And does not provide any hardware abstraction layers.",
            "But let's device drivers in the applications communicate directly with the hardware and this is what we're mostly dealing with, so it's developing support packages for our platform in order to rank on tick unit program loader.",
            "This is what I mentioned in the previous slide is so that we can load programs which you want to run on the scenes or not.",
            "Later on Wednesday, when the kernel is already on the system libraries, of course I are also compiled and induced in order to run the applications, while the processes that are running can be application programs or services.",
            "That's how they call it in Kentucky, and the service means that service is a process which implement some functionality that is used by more than one application process.",
            "For instance, this is the services of communication and also communication between the process is always goes through the kernel.",
            "So this is the hierarchy presented in can't."
        ],
        [
            "These are mentioned in the first slide.",
            "The Kontiki is a hybrid model of event driven hybrid model of operating system with event driven kernel which supports also preemptive multithreading.",
            "So how this is implemented in contiguous so process is in implemented as event handlers.",
            "That run to completition so the processes cannot be.",
            "This processes cannot be blocked but on top of these processes we can have preemptive multithreading.",
            "And this is implemented as a library, so it can be called in a process if it needs it, and for instance, long computations are processes that needs.",
            "I don't know, maybe.",
            "Some CRC checksum's or something like this can be can be implemented.",
            "Using these libraries so.",
            "This allows threaded programs to run on top of event based kernel.",
            "And doesn't require the multithreading to be implemented.",
            "So in the core of the in the kernel of the operating system."
        ],
        [
            "So just to sum up this this sentences so event driven kernel.",
            "Doesn't it is nonpreemptive so?",
            "Only by interrupts, no preemption, only by interrupts.",
            "The preemptive multithreading can be used on a per process basis.",
            "It's implemented as a library and also this memory management functions are.",
            "Offered is a library and Additionally to this Kontiki also offers proto threats, which are threadlike constructs that can be also used on top of event driven."
        ],
        [
            "Now to.",
            "Since you want to use kontiki in viruses on Network now to communication protocols that Contiki offers.",
            "So also these are implemented as a service and can be can be called.",
            "And also, since the program is dynamically linked, can be replaced or their individual parts can be replaced during the runtime.",
            "So there are more or less 4 protocols.",
            "Text supporters within the Contiki project.",
            "But there is some other open source projects implementing different protocols texts but can be used within the using in combination with Contiki.",
            "So but the ones provided with configure rhyme.",
            "So.",
            "This is small version of IP Micro IP and My Micro IP version 6."
        ],
        [
            "So right now is a protocol stack with extremely thin layers.",
            "It's not fully modular, but.",
            "Yeah, when when compiled it really uses a small full footprint on the program memory and requires really low.",
            "Data memory.",
            "And it can be combined also with the micro IP.",
            "Lightweight IP is IPV 4 compatible and the protocols that are implemented are UDP, TCP, ICMP, and IP, and it's modular and allows extension with additional protocols and therefore it also requires a bit larger footprint."
        ],
        [
            "Awful memory.",
            "Micro IP claimed to be the world's smallest TCP IP stack.",
            "It was published in 2001 and its IP V4 compatible also requires really really small footprint.",
            "The implements only only the really required set of features, and the protocols that we can use our TCP, ICMP, and IP, so there's no UDP support.",
            "In 2008 they presented this IPV 6, MCR IPV 6.",
            "Which of course supports IPV 6 addressing as an extension of this protocol requires a bit larger footprint of memory, and also additional to TCP.",
            "ICMP IP has also UDP protocol."
        ],
        [
            "So this this concludes this first part, where are some?",
            "I've given some details about Contiki operating system in general.",
            "Now to our experiences so far with porting it to the versatile sensor network platform.",
            "Since I'm not platform."
        ],
        [
            "If I first go to to requirements, So what we're thinking in selecting the operating system, so we wanted to use the.",
            "Operating system which would be able to run on a large scale systems composed of heterogeneous sensor sensor nodes.",
            "So this is our wish and.",
            "It has to have.",
            "It has to support different platforms so it has to be portable to different platforms.",
            "So this is from this heterogeneous sensors.",
            "If you want to compile it on different platforms, of course it had to be written in C. It has to offer ipip.",
            "Indication, and since it's distinct to run on a large scale network, we would like it to be remotely reprogrammable, so that we can change, change some some parts of the application, or some protocols running."
        ],
        [
            "Note so in research area there are more or less 2 operating systems that we could choose from.",
            "The first is Contiki and the other is Tiny OS and I just compare them using these three bullet.",
            "So the most simple comparison that I could make so it is written in C and therefore it can be ported to many many platforms.",
            "And as I mentioned before, the most known are Texas Instruments platform and Atmel.",
            "So this ports exist.",
            "On the other hand, Tiny OS is written in SC and at least to my knowledge only the port to Atmel AVR consist.",
            "So we can only get the compilers for the Atmel platform.",
            "Tiny OS is a kind of the operating system is event driven and does not offer any multithreading.",
            "On the other hand, I just explained the Contiki offers multithreading on top of the event driven kernel.",
            "And to offer this, it has to be dynamically linked so that we can change parts of the program while the tiny OS is always statically linked.",
            "Also, here exist some solutions for reprogramming, but we have to replace the whole firmware of the node."
        ],
        [
            "So.",
            "When we download the.",
            "The kontiki project.",
            "The this is part of the of the directory structure and we are modifying the the Directory core CPU and and this one platform and also in the apps we are writing some some test application.",
            "So in the core what we're mostly dealing with is is developing device drivers and this device drivers at the moment means that we are developing.",
            "Drivers for the radio chips chips CC 11014 sub giga Hertz frequencies and CC.",
            "2500 for the 2.4 GHz band, and we want to use the SPI interface, not the UART interface, so.",
            "In this directory of Contiki there are drivers written.",
            "I think for the CC-2420 and this uses the UART interface and.",
            "On our hardware, would like to use the SPI because it's it's more general.",
            "We have more options, but of course it needs some time to develop.",
            "We're not touching at the moment the network drivers, so we are testing the solutions only using the right network protocol, while in the CPU folder.",
            "We are using the libraries for the our chips, so this is STM 32 F 103 and in the platform we are of course writing this support packages for the versatile scenes of node platform version 1.2, which is the one that you will be also working on during the hands-on and this.",
            "We have the first Test application that was written by Eric."
        ],
        [
            "Oh, so how we were doing it.",
            "So for the times of Eric's diploma he were still using the professional development environment for the SD family of the chips.",
            "So for this ARM cortex entry and this means using Microvision IDE and Kyle debuggers, although as Mark explained, we now move to Eclipse and to open source debuggers in order to.",
            "Enable some crowdsourcing because these tools are quite expensive, so.",
            "So this Microvision integrated development environment offers everything from project management.",
            "Editing the code, then compiling the code for the platform and also debugging the program.",
            "So.",
            "We were porting on the cheap Contiki version 2.4 at the moment only the kernel so this non OS specific things using the RAM protocol stack and the system Clock in event timers forearm.",
            "So this is the library that we were using but this one we found in some earlier version of the project dated March 2010.",
            "So mixing a bit different versions of the project in order to get the first working version.",
            "And the drivers provided by St Word version three, point 1.2."
        ],
        [
            "So what what added for his diploma he implemented in Kentucky?",
            "This main function, which initializes the versatile scenes or node and also the contiki.",
            "Which means initializes this test processes and Ryan protocol stack.",
            "And then then he used two sensor nodes and one coordinator with the sensor nodes.",
            "Repeatedly sending temperature and humidity measurements to the core by broadcasting.",
            "This message is using the event timer, so this was on a periodic basis and then on the on the central node or on the coordinator.",
            "This packets were received and process process and the.",
            "We we had some problems with communication so it was difficult to get to get the whole packets.",
            "There are problems with the buffer sizes and this.",
            "This is what we are at the moment dealing with."
        ],
        [
            "And this is just a how the taste but look like so it was put together in a controlled environment of a laboratory.",
            "So it's it's not something running somewhere life.",
            "And this is how how Eric confirmed the program is working well by observing the messages received only coordinator and then printed out through the serial port."
        ],
        [
            "I think this concludes my presentation.",
            "Thanks for the attention.",
            "Is there any questions I can try to answer them otherwise?",
            "Later on online with the with Eric, Thanks.",
            "Any questions?",
            "Everything clear.",
            "Thank you."
        ]
    ],
    "summarization": {
        "clip_0": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Welcome also from my side.",
                    "label": 0
                },
                {
                    "sent": "I sure hope you will make this presentation interesting, although I'm not presenting my work because I'm presenting here instead of Eric per tote who did this for his diploma, but he's unfortunately not with us today.",
                    "label": 0
                },
                {
                    "sent": "So Marco presented our platform the hardware part and software development tools we're using.",
                    "label": 0
                },
                {
                    "sent": "I will present something that Eric did.",
                    "label": 0
                },
                {
                    "sent": "What we're starting is to port Quantity Operating system today.",
                    "label": 0
                }
            ]
        },
        "clip_1": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Platform, so here's the outline of my talk.",
                    "label": 0
                },
                {
                    "sent": "It's divided into 2 parts.",
                    "label": 0
                },
                {
                    "sent": "1st I will speak about Contiki.",
                    "label": 1
                },
                {
                    "sent": "I will give some details.",
                    "label": 0
                },
                {
                    "sent": "That Maria didn't mention.",
                    "label": 0
                },
                {
                    "sent": "So some introduction features and what communication protocols does Kentucky offer, and then I will move to our experiences importing contact to the platform.",
                    "label": 0
                },
                {
                    "sent": "So first, just.",
                    "label": 0
                },
                {
                    "sent": "Comparison between Contiki and Tiny OS and then the environment we were using for the time of his diploma porting and what is that we?",
                    "label": 1
                }
            ]
        },
        "clip_2": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Make so far.",
                    "label": 0
                },
                {
                    "sent": "So Contiki is a light way operating system distinct for sensor networks.",
                    "label": 1
                },
                {
                    "sent": "It was developed mostly by Adam Dunkels from Swedish Institute of Computer Science and these available as an open source project under the BSD license.",
                    "label": 1
                },
                {
                    "sent": "The first version was published in 2003 and the last version which we were reporting was published in spring 2010 and this is the version 2.4.",
                    "label": 0
                },
                {
                    "sent": "So implementation buys the Kontiki is written in C programming language and if we just compare it to the other two.",
                    "label": 0
                },
                {
                    "sent": "Operating systems that were.",
                    "label": 1
                },
                {
                    "sent": "Built purposely for sensor networks, these are tiny OS and mantis.",
                    "label": 0
                },
                {
                    "sent": "The footprint of the Contiki is bigger than Tiny OS.",
                    "label": 0
                },
                {
                    "sent": "While it's smaller than the mantis will get to the details about this later.",
                    "label": 0
                },
                {
                    "sent": "But mostly the reason for this is in this that the tiny OS is purely event driven while Mantis is preemptive multithreaded operating system while the KONTIKI combines these two principles and therefore.",
                    "label": 0
                },
                {
                    "sent": "Reason is a hybrid version of the operating system and also offers.",
                    "label": 0
                },
                {
                    "sent": "Best maybe best things of the both 2 principles, so achieving this can be tricky.",
                    "label": 0
                }
            ]
        },
        "clip_3": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "It was 42 since it's written in C programming language, it was ported to several platforms.",
                    "label": 1
                },
                {
                    "sent": "MSP 430 from Texas Instruments and Atmel AVR platforms and are the most well known for Contiki ports.",
                    "label": 1
                },
                {
                    "sent": "But there are also several other other platforms.",
                    "label": 0
                },
                {
                    "sent": "So what we are doing and what I represent is porting Contiki to the SD platform.",
                    "label": 0
                },
                {
                    "sent": "So which has an ARM Cortex entry core?",
                    "label": 1
                },
                {
                    "sent": "Also available open source are simulators of Contiki Khoja is Java based simulator while the MSP seam is a library which we can use in order to simulate hardware specific things of the Texas Instruments MSP 430 platform.",
                    "label": 0
                },
                {
                    "sent": "It also offers a file system.",
                    "label": 0
                },
                {
                    "sent": "It's named coffee and it has some memory management capabilities since it's dynamically linked operating system.",
                    "label": 1
                },
                {
                    "sent": "This goes to both ROM and RAM.",
                    "label": 0
                },
                {
                    "sent": "So for the program code and for the day.",
                    "label": 0
                }
            ]
        },
        "clip_4": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Later.",
                    "label": 0
                },
                {
                    "sent": "Oh the image, so the firmware of the kontiki is modular, so we can.",
                    "label": 0
                },
                {
                    "sent": "We can divide it into the court and loadable programs and the core is usually.",
                    "label": 1
                },
                {
                    "sent": "Doesn't change for the time of 1 deployment while the program scan can be changed and dynamically loaded and this means that we can on runtime change individual programs or services running on the sensor node.",
                    "label": 0
                },
                {
                    "sent": "Here I've stated that the core cannot be modified after no deployment.",
                    "label": 1
                },
                {
                    "sent": "This means that Contiki as an operating system doesn't offer this, but using a special boot loader we would be able also to do this.",
                    "label": 0
                },
                {
                    "sent": "But this would mean that we would need to send all the firmware to the scenes are not reset it and rebuild the whole the whole memory for the program and this would mean that we would exchange the quantity.",
                    "label": 0
                },
                {
                    "sent": "So the core would be replaced for loadable programs.",
                    "label": 0
                },
                {
                    "sent": "We can also use over the air programming which is done so that we sent on link to link basis the programs to the.",
                    "label": 0
                },
                {
                    "sent": "Concentrator note or the coordinator, however, recalled, and then from this node we broadcast the programs to the neighboring sensor nodes.",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "So I'll come to that later, but just to mention it here, only core and this support for loading the programs is.",
                    "label": 1
                },
                {
                    "sent": "Represents the the kernel of the of the operating system, which means that Kentucky doesn't have any power saving mechanisms implemented in the kernel.",
                    "label": 0
                },
                {
                    "sent": "But in order to support this because this is crucial in sensor networks, so saving with the energy the kernel let's application specific parts of the system to implement these mechanisms by.",
                    "label": 1
                },
                {
                    "sent": "By this, the kernel exposes the size of the queue of the events to the applications running.",
                    "label": 0
                },
                {
                    "sent": "On top of the Contiki curve.",
                    "label": 0
                }
            ]
        },
        "clip_5": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So I've started this a bit.",
                    "label": 0
                },
                {
                    "sent": "So what does Kentucky consists of?",
                    "label": 0
                },
                {
                    "sent": "It consists of kernel program loader libraries and the set of processes.",
                    "label": 1
                },
                {
                    "sent": "So Kernel offers only CPU multiplexing.",
                    "label": 0
                },
                {
                    "sent": "The code of the kernel is non platform specific.",
                    "label": 0
                },
                {
                    "sent": "This means that we can port it to different platforms.",
                    "label": 1
                },
                {
                    "sent": "And does not provide any hardware abstraction layers.",
                    "label": 0
                },
                {
                    "sent": "But let's device drivers in the applications communicate directly with the hardware and this is what we're mostly dealing with, so it's developing support packages for our platform in order to rank on tick unit program loader.",
                    "label": 0
                },
                {
                    "sent": "This is what I mentioned in the previous slide is so that we can load programs which you want to run on the scenes or not.",
                    "label": 0
                },
                {
                    "sent": "Later on Wednesday, when the kernel is already on the system libraries, of course I are also compiled and induced in order to run the applications, while the processes that are running can be application programs or services.",
                    "label": 1
                },
                {
                    "sent": "That's how they call it in Kentucky, and the service means that service is a process which implement some functionality that is used by more than one application process.",
                    "label": 1
                },
                {
                    "sent": "For instance, this is the services of communication and also communication between the process is always goes through the kernel.",
                    "label": 0
                },
                {
                    "sent": "So this is the hierarchy presented in can't.",
                    "label": 0
                }
            ]
        },
        "clip_6": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "These are mentioned in the first slide.",
                    "label": 0
                },
                {
                    "sent": "The Kontiki is a hybrid model of event driven hybrid model of operating system with event driven kernel which supports also preemptive multithreading.",
                    "label": 1
                },
                {
                    "sent": "So how this is implemented in contiguous so process is in implemented as event handlers.",
                    "label": 0
                },
                {
                    "sent": "That run to completition so the processes cannot be.",
                    "label": 0
                },
                {
                    "sent": "This processes cannot be blocked but on top of these processes we can have preemptive multithreading.",
                    "label": 0
                },
                {
                    "sent": "And this is implemented as a library, so it can be called in a process if it needs it, and for instance, long computations are processes that needs.",
                    "label": 1
                },
                {
                    "sent": "I don't know, maybe.",
                    "label": 0
                },
                {
                    "sent": "Some CRC checksum's or something like this can be can be implemented.",
                    "label": 0
                },
                {
                    "sent": "Using these libraries so.",
                    "label": 0
                },
                {
                    "sent": "This allows threaded programs to run on top of event based kernel.",
                    "label": 1
                },
                {
                    "sent": "And doesn't require the multithreading to be implemented.",
                    "label": 0
                },
                {
                    "sent": "So in the core of the in the kernel of the operating system.",
                    "label": 0
                }
            ]
        },
        "clip_7": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So just to sum up this this sentences so event driven kernel.",
                    "label": 0
                },
                {
                    "sent": "Doesn't it is nonpreemptive so?",
                    "label": 0
                },
                {
                    "sent": "Only by interrupts, no preemption, only by interrupts.",
                    "label": 1
                },
                {
                    "sent": "The preemptive multithreading can be used on a per process basis.",
                    "label": 1
                },
                {
                    "sent": "It's implemented as a library and also this memory management functions are.",
                    "label": 0
                },
                {
                    "sent": "Offered is a library and Additionally to this Kontiki also offers proto threats, which are threadlike constructs that can be also used on top of event driven.",
                    "label": 0
                }
            ]
        },
        "clip_8": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Now to.",
                    "label": 0
                },
                {
                    "sent": "Since you want to use kontiki in viruses on Network now to communication protocols that Contiki offers.",
                    "label": 0
                },
                {
                    "sent": "So also these are implemented as a service and can be can be called.",
                    "label": 1
                },
                {
                    "sent": "And also, since the program is dynamically linked, can be replaced or their individual parts can be replaced during the runtime.",
                    "label": 0
                },
                {
                    "sent": "So there are more or less 4 protocols.",
                    "label": 1
                },
                {
                    "sent": "Text supporters within the Contiki project.",
                    "label": 0
                },
                {
                    "sent": "But there is some other open source projects implementing different protocols texts but can be used within the using in combination with Contiki.",
                    "label": 0
                },
                {
                    "sent": "So but the ones provided with configure rhyme.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "This is small version of IP Micro IP and My Micro IP version 6.",
                    "label": 0
                }
            ]
        },
        "clip_9": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So right now is a protocol stack with extremely thin layers.",
                    "label": 1
                },
                {
                    "sent": "It's not fully modular, but.",
                    "label": 0
                },
                {
                    "sent": "Yeah, when when compiled it really uses a small full footprint on the program memory and requires really low.",
                    "label": 0
                },
                {
                    "sent": "Data memory.",
                    "label": 0
                },
                {
                    "sent": "And it can be combined also with the micro IP.",
                    "label": 0
                },
                {
                    "sent": "Lightweight IP is IPV 4 compatible and the protocols that are implemented are UDP, TCP, ICMP, and IP, and it's modular and allows extension with additional protocols and therefore it also requires a bit larger footprint.",
                    "label": 1
                }
            ]
        },
        "clip_10": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Awful memory.",
                    "label": 0
                },
                {
                    "sent": "Micro IP claimed to be the world's smallest TCP IP stack.",
                    "label": 1
                },
                {
                    "sent": "It was published in 2001 and its IP V4 compatible also requires really really small footprint.",
                    "label": 1
                },
                {
                    "sent": "The implements only only the really required set of features, and the protocols that we can use our TCP, ICMP, and IP, so there's no UDP support.",
                    "label": 1
                },
                {
                    "sent": "In 2008 they presented this IPV 6, MCR IPV 6.",
                    "label": 1
                },
                {
                    "sent": "Which of course supports IPV 6 addressing as an extension of this protocol requires a bit larger footprint of memory, and also additional to TCP.",
                    "label": 0
                },
                {
                    "sent": "ICMP IP has also UDP protocol.",
                    "label": 0
                }
            ]
        },
        "clip_11": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So this this concludes this first part, where are some?",
                    "label": 0
                },
                {
                    "sent": "I've given some details about Contiki operating system in general.",
                    "label": 1
                },
                {
                    "sent": "Now to our experiences so far with porting it to the versatile sensor network platform.",
                    "label": 0
                },
                {
                    "sent": "Since I'm not platform.",
                    "label": 0
                }
            ]
        },
        "clip_12": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "If I first go to to requirements, So what we're thinking in selecting the operating system, so we wanted to use the.",
                    "label": 0
                },
                {
                    "sent": "Operating system which would be able to run on a large scale systems composed of heterogeneous sensor sensor nodes.",
                    "label": 1
                },
                {
                    "sent": "So this is our wish and.",
                    "label": 0
                },
                {
                    "sent": "It has to have.",
                    "label": 0
                },
                {
                    "sent": "It has to support different platforms so it has to be portable to different platforms.",
                    "label": 0
                },
                {
                    "sent": "So this is from this heterogeneous sensors.",
                    "label": 0
                },
                {
                    "sent": "If you want to compile it on different platforms, of course it had to be written in C. It has to offer ipip.",
                    "label": 0
                },
                {
                    "sent": "Indication, and since it's distinct to run on a large scale network, we would like it to be remotely reprogrammable, so that we can change, change some some parts of the application, or some protocols running.",
                    "label": 0
                }
            ]
        },
        "clip_13": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Note so in research area there are more or less 2 operating systems that we could choose from.",
                    "label": 0
                },
                {
                    "sent": "The first is Contiki and the other is Tiny OS and I just compare them using these three bullet.",
                    "label": 1
                },
                {
                    "sent": "So the most simple comparison that I could make so it is written in C and therefore it can be ported to many many platforms.",
                    "label": 1
                },
                {
                    "sent": "And as I mentioned before, the most known are Texas Instruments platform and Atmel.",
                    "label": 1
                },
                {
                    "sent": "So this ports exist.",
                    "label": 1
                },
                {
                    "sent": "On the other hand, Tiny OS is written in SC and at least to my knowledge only the port to Atmel AVR consist.",
                    "label": 1
                },
                {
                    "sent": "So we can only get the compilers for the Atmel platform.",
                    "label": 0
                },
                {
                    "sent": "Tiny OS is a kind of the operating system is event driven and does not offer any multithreading.",
                    "label": 0
                },
                {
                    "sent": "On the other hand, I just explained the Contiki offers multithreading on top of the event driven kernel.",
                    "label": 0
                },
                {
                    "sent": "And to offer this, it has to be dynamically linked so that we can change parts of the program while the tiny OS is always statically linked.",
                    "label": 0
                },
                {
                    "sent": "Also, here exist some solutions for reprogramming, but we have to replace the whole firmware of the node.",
                    "label": 0
                }
            ]
        },
        "clip_14": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "When we download the.",
                    "label": 0
                },
                {
                    "sent": "The kontiki project.",
                    "label": 0
                },
                {
                    "sent": "The this is part of the of the directory structure and we are modifying the the Directory core CPU and and this one platform and also in the apps we are writing some some test application.",
                    "label": 0
                },
                {
                    "sent": "So in the core what we're mostly dealing with is is developing device drivers and this device drivers at the moment means that we are developing.",
                    "label": 1
                },
                {
                    "sent": "Drivers for the radio chips chips CC 11014 sub giga Hertz frequencies and CC.",
                    "label": 0
                },
                {
                    "sent": "2500 for the 2.4 GHz band, and we want to use the SPI interface, not the UART interface, so.",
                    "label": 0
                },
                {
                    "sent": "In this directory of Contiki there are drivers written.",
                    "label": 1
                },
                {
                    "sent": "I think for the CC-2420 and this uses the UART interface and.",
                    "label": 1
                },
                {
                    "sent": "On our hardware, would like to use the SPI because it's it's more general.",
                    "label": 0
                },
                {
                    "sent": "We have more options, but of course it needs some time to develop.",
                    "label": 0
                },
                {
                    "sent": "We're not touching at the moment the network drivers, so we are testing the solutions only using the right network protocol, while in the CPU folder.",
                    "label": 0
                },
                {
                    "sent": "We are using the libraries for the our chips, so this is STM 32 F 103 and in the platform we are of course writing this support packages for the versatile scenes of node platform version 1.2, which is the one that you will be also working on during the hands-on and this.",
                    "label": 0
                },
                {
                    "sent": "We have the first Test application that was written by Eric.",
                    "label": 0
                }
            ]
        },
        "clip_15": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Oh, so how we were doing it.",
                    "label": 0
                },
                {
                    "sent": "So for the times of Eric's diploma he were still using the professional development environment for the SD family of the chips.",
                    "label": 0
                },
                {
                    "sent": "So for this ARM cortex entry and this means using Microvision IDE and Kyle debuggers, although as Mark explained, we now move to Eclipse and to open source debuggers in order to.",
                    "label": 0
                },
                {
                    "sent": "Enable some crowdsourcing because these tools are quite expensive, so.",
                    "label": 0
                },
                {
                    "sent": "So this Microvision integrated development environment offers everything from project management.",
                    "label": 1
                },
                {
                    "sent": "Editing the code, then compiling the code for the platform and also debugging the program.",
                    "label": 1
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "We were porting on the cheap Contiki version 2.4 at the moment only the kernel so this non OS specific things using the RAM protocol stack and the system Clock in event timers forearm.",
                    "label": 1
                },
                {
                    "sent": "So this is the library that we were using but this one we found in some earlier version of the project dated March 2010.",
                    "label": 0
                },
                {
                    "sent": "So mixing a bit different versions of the project in order to get the first working version.",
                    "label": 0
                },
                {
                    "sent": "And the drivers provided by St Word version three, point 1.2.",
                    "label": 0
                }
            ]
        },
        "clip_16": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So what what added for his diploma he implemented in Kentucky?",
                    "label": 0
                },
                {
                    "sent": "This main function, which initializes the versatile scenes or node and also the contiki.",
                    "label": 1
                },
                {
                    "sent": "Which means initializes this test processes and Ryan protocol stack.",
                    "label": 0
                },
                {
                    "sent": "And then then he used two sensor nodes and one coordinator with the sensor nodes.",
                    "label": 1
                },
                {
                    "sent": "Repeatedly sending temperature and humidity measurements to the core by broadcasting.",
                    "label": 1
                },
                {
                    "sent": "This message is using the event timer, so this was on a periodic basis and then on the on the central node or on the coordinator.",
                    "label": 0
                },
                {
                    "sent": "This packets were received and process process and the.",
                    "label": 0
                },
                {
                    "sent": "We we had some problems with communication so it was difficult to get to get the whole packets.",
                    "label": 0
                },
                {
                    "sent": "There are problems with the buffer sizes and this.",
                    "label": 0
                },
                {
                    "sent": "This is what we are at the moment dealing with.",
                    "label": 0
                }
            ]
        },
        "clip_17": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And this is just a how the taste but look like so it was put together in a controlled environment of a laboratory.",
                    "label": 0
                },
                {
                    "sent": "So it's it's not something running somewhere life.",
                    "label": 0
                },
                {
                    "sent": "And this is how how Eric confirmed the program is working well by observing the messages received only coordinator and then printed out through the serial port.",
                    "label": 0
                }
            ]
        },
        "clip_18": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "I think this concludes my presentation.",
                    "label": 0
                },
                {
                    "sent": "Thanks for the attention.",
                    "label": 0
                },
                {
                    "sent": "Is there any questions I can try to answer them otherwise?",
                    "label": 0
                },
                {
                    "sent": "Later on online with the with Eric, Thanks.",
                    "label": 0
                },
                {
                    "sent": "Any questions?",
                    "label": 0
                },
                {
                    "sent": "Everything clear.",
                    "label": 0
                },
                {
                    "sent": "Thank you.",
                    "label": 0
                }
            ]
        }
    }
}