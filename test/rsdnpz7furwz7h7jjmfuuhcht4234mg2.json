{
    "id": "rsdnpz7furwz7h7jjmfuuhcht4234mg2",
    "title": "HPC Python Programming (Part 2)",
    "info": {
        "author": [
            "Ramses van Zon, University of Toronto"
        ],
        "published": "Sept. 19, 2016",
        "recorded": "June 2016",
        "category": [
            "Top->Computer Science",
            "Top->Computers->Programming"
        ]
    },
    "url": "http://videolectures.net/ihpcss2016_van_zon_HPC_python_part2/",
    "segmentation": [
        [
            "So before we start, if you guys want to try out the executables so the compiled language versions, it turns out there's a typo in the setup scripts.",
            "Slash should be a period.",
            "The issues made it so she don't care about the sea important version fine.",
            "Otherwise just recopy.",
            "The script that specifically called setup Dash bridges to the.",
            "This should be the code directory in HPC 5.",
            "Then and you re run setup you should be OK.",
            "So.",
            "HB C5 very cold.",
            "Sorry for that, then you can manage it now.",
            "Don't do it this coming to me later it's or you can do the whole copying again if if you so desire.",
            "That's possible to copy the whole directory is in the instructions and I'll get the new version, but.",
            "OK, where were we?",
            "Yeah, 100 times faster we should stop right?"
        ],
        [
            "Attack.",
            "That was kind of the equivalent of open MP, right?",
            "It's on node, shared memory, threaded execution.",
            "Let's see how close we can get to sort of MPI multiple processes, and there's a couple of ways, and I'm going to show some that are a little bit historic.",
            "Just because the interface student is still being used in more modern packages.",
            "So one of these goes in the name of forking."
        ],
        [
            "Which is a typical Linux thing, so not so.",
            "Not only is it an old way to do things, it's also platform specific.",
            "The way Linux can start a new process is essentially by cloning an old one, but rather than calling it cloning it 'cause it's working.",
            "So it sounds like you're making threats, but in fact you're making process is.",
            "It turns out so you can do this from Python as well.",
            "Back in around long enough that they wanted to be able to do this, and So what happens when you fork a process is that you will have your.",
            "That's called the mother process with the parent process and then the child process.",
            "At first, those two start off in a similar state.",
            "Some of the resources are the same, but after their fork they can go their own ways.",
            "The thing is, they don't.",
            "They don't really.",
            "Have joining the way threads do.",
            "These processes could exit separately depending a little bit on how you set it up, all of which are details that I don't really want to go into, but I don't want to give you an example so.",
            "Here's an example, so you have to call and you don't have to call, so I've got a function here that will be called by the child process, but not apparent, so they're going to process is.",
            "Then when I start I'm in the parent process.",
            "All of this is operating systems dependent, so I import OS.",
            "It's the operating system and I'm going to fork it, and this is kind of funny.",
            "When?",
            "Python.",
            "It's this fork.",
            "Suddenly there are two processes, both of which continue at that point, so it is very open and be like, but they are processes.",
            "So how?",
            "Wood.",
            "Those processes know whether they are the child or the parents, because they start off as being identical, and so the way they find it out is by the return value from this OS for function.",
            "When that return value is 0.",
            "They are the child when it's not that return value is actually the PID.",
            "The process identifier of the child, so.",
            "It's a very low level way of doing it, and it's kind of how Linux does it under the hood.",
            "At.",
            "But it's a way that you could use it also invite so this is the you're not going to do this, But this is this is but you have seen this model but you have a parent process.",
            "It's bombs or Forks off a child.",
            "The child can do one thing that parents could do something else.",
            "Communication been created, two is cumbersome.",
            "They kind of share what they had in common before, but they don't share anything you, so it's a very annoying way to program.",
            "And while you can do it, it's typically not something you do."
        ],
        [
            "At so, if you were to run it, you'd see get a hello from the parent and the parent knows who's child who is the child and the child gives its pid and actually keeps doing that until you press Q.",
            "So this raw input if you've never seen it, input from the command line."
        ],
        [
            "So you could even do completely different code run by the child.",
            "There's a function for that called X LP.",
            "This executes a completely new process, so since it's not set, not said that it starts as Python.",
            "This process could be, you know, your web browser.",
            "For all it knows, so if it isn't by some process, you have to give it.",
            "Tell it that it is a Python process and you have to give it a name.",
            "It makes sense to have approaches have the name of the executable, but this is actually not mandatory.",
            "So you can do kind of fancy things.",
            "By their very low level.",
            "You you do not want to do this and the reason that.",
            "The reason that all these frameworks exists for parallel programming for motes are because this is just."
        ],
        [
            "Not very nice if you're going to use it.",
            "Just make sure that you wait for your children to finish before you kill yourself.",
            "See these analogies at some point, just stop right.",
            "They can call them parents and children and then send some of the things that you do to them make you go.",
            "This should stop.",
            "Let's just call him something else but alright.",
            "I also make sure that you call OS Dot_exit when you exit Ng from the child, otherwise you actually clean up every every possible resource, some of which might still be used by your parents.",
            "So you can imagine that using fork is just a hard way to go about, but it is."
        ],
        [
            "Still with what is happening under the hood, often right?",
            "So when when you have approaches that sponsors other process, it is doing that so it's nice, nice to know, but.",
            "You're not gonna really do that.",
            "So little tricky."
        ],
        [
            "So, but it's a way to use.",
            "Process is and it's it's the most low level way and you could build up anything from there if you wanted to see a few things that are built up where you don't have to worry about these things.",
            "So that would so from that we could build an MPI implementation and just go about.",
            "So some of you could base their PhD doing that.",
            "Don't do that already done, but before we go into how that works, let's look at the other possibility of making threats.",
            "So we start threads within a mix, but it was only in that expression.",
            "How about threads in Python?",
            "Does bison have threads?",
            "Who here thinks that my son has threats?",
            "But you're wrong.",
            "It does have friends."
        ],
        [
            "South threats are light armor lightweights.",
            "They're not there, they follow the same sort of spawning ideas as four, but if they're still part of the same process, that's why they can still share memory among one one another.",
            "And that's why they're a little bit easier to program.",
            "Python comes with a fully fledged.",
            "Thread mechanism and the threads share the same memory space so they can address space.",
            "I mean that you can see the same variables very easy to communicate, you just put something in a variable.",
            "The other thread checks if it's there.",
            "Wonderful so you think, well, let's just bomb threats and then how do we do?"
        ],
        [
            "Well, I mean OK, so some more about spreads, lightweights, simpler to program, share memory.",
            "The way threads have been written and baked into the Python language and their portables.",
            "Now you're not just restricted to Linux.",
            "Also good."
        ],
        [
            "So here's how you would use it and I just realized that this is oddly factor.",
            "The serial version is in is the last one here, but they're all.",
            "So this is.",
            "These are two codes are both called a function called my summer.",
            "Summer, because it's a summer school here, they just do some counting.",
            "It counts.",
            "From start to stop at the serial version doesn't do much.",
            "The threads are actually not there.",
            "This should be gone and it just.",
            "Counts to what it is.",
            "550 million about 10 times and sees how how long that is.",
            "The threaded version uses threads, so the way that goes is.",
            "Similar to the forking, where you basically say OK, I'm rather than four to say start a thread.",
            "Or I should create a thread.",
            "The thread is given a function so Spencer lightweights are not full fledged.",
            "Full fledged process is and you can kind of see it because when you give them to execute is a function is like a function call as.",
            "So this function is called my my summer that target means what function is.",
            "Is there going to call?",
            "What are the arguments to that function?",
            "Then I'm putting that that in a list and I'm starting the thread so T is a handle on that thread.",
            "It's been prepared here but it's not running yet.",
            "Then I appended to a list because I want to keep track of it and I started and then S as it started.",
            "I'll just wait.",
            "4 hours and finish in this joint.",
            "So this is an explicit way of doing spawning threads and joining them together.",
            "If you follow the classical track, your only parallel starts this and you only end parallel is to join.",
            "This is not OK, so this way of programming.",
            "But then in C, is the way you used to have to do threaded programming.",
            "A little bit more elaborate.",
            "As you can see.",
            "But you're starting two threads.",
            "One is 1 is executing my summer on that thread and the other is doing.",
            "What's doing?",
            "Where is it?",
            "What you doing be doing it somewhere else too.",
            "So which one is faster, you think?",
            "Spread it cereal.",
            "I got it, I got."
        ],
        [
            "So some people have looked at, I'm sure, so the serial is faster.",
            "11 seconds versus 38 seconds."
        ],
        [
            "So more complicated and slower.",
            "Now many open MP.",
            "Attempts our parallelization stems with shared memory start off in this exact spot, you take a serial code.",
            "You had some open MP pragmas.",
            "Sexy true for open SC2.",
            "Had an open seat bregma and your program actually becomes slower.",
            "So you follow the advice of the classical or accelerator track and you work on it and you notice the bottlenecks you removed him and now is faster.",
            "Not so in Python.",
            "In Python it's impossible to make this any faster.",
            "It turns out Python, or at least C Python, which is the one that everybody uses, has a thing called the global interpreter lock.",
            "So I think it's an interpreter.",
            "Only one Python is running.",
            "There might be separate separate threads, but only one Python is running only one interpret, so.",
            "This interpreter basically can only do one thing at a time.",
            "It will not respond to instruction the same time.",
            "This is not a restriction on the Python language, it's a restriction on the Python implementation, but it's normal Mass Effect, so only one.",
            "So what you get with the threading is a nice interleaving.",
            "Of the.",
            "Of the of the statements in in both threads, but not a simelton activity.",
            "This could still be useful.",
            "Say you're writing a GUI and it has to be responsive, so you don't want it to wait for that graphics to be plotted.",
            "Value click on other things, the threads will interleave the drawing and checking for mouse clicks.",
            "Enter OK.",
            "It can be useful right for writing out to disk that happens behind the scenes once you've set right, and so that you can do in a thread.",
            "But the stuff we want to do, you cannot."
        ],
        [
            "So those were 2 ways that you can use cents an you can use process is that I would advise against threading is just slow.",
            "An forking is just rather inconvenient, so.",
            "The next the next item on the list.",
            "Is a package that kind of combines both and tries to make things workable and it's called."
        ],
        [
            "Multi processing.",
            "It works on windows too, so that is good for portability anyway.",
            "It's what it does it it creates processes that makes them seem like friends.",
            "So because it has just found out process is as far or start postseason.",
            "Forking process is a little bit more expensive than spawning threads takes a little bit more time to spawn these or to create these, but it creates multiple processes.",
            "On a single node anchor, and there's a way for them to share memory.",
            "Racist."
        ],
        [
            "And this is really the reason why I showed the threads in the 1st place because the interface to these processes has been modeled.",
            "To look like that of threads so you spawn process is, which is something you normally don't say in the multi processing module.",
            "And so I've got my my my my summer here again.",
            "I'm going to time things I'm going to collect all the process is in an array and then start like with threads.",
            "I create a process but I'm just preparing it so I'm running it.",
            "It's just sort of a.",
            "This is what I intend to do.",
            "My summer is the functionality calling the arguments are here again and they add this pre packaged task if you want to a list and then I started.",
            "And then I'm going to wait for all processes and join them together.",
            "So I don't know if you remember what the time was before, but it was something like 11 seconds.",
            "This multi processing takes.",
            "Porn 12 seconds.",
            "That seems unlikely.",
            "Wow fantastic.",
            "OK so.",
            "It's Frances expenses process is.",
            "Anne Anne, give him stuff to do.",
            "It's still kind of low level right?",
            "You have to give them a function to do.",
            "You probably will give different arguments and that's the way that you can have different threads to different things and it doesn't look anything like like a pragma or or directive based approach.",
            "It still looks very much like threading.",
            "But at least it works everywhere and ends.",
            "You can you can use shared memory."
        ],
        [
            "So.",
            "Sharing memory is done by using some special database.",
            "Value an array.",
            "So we have this special days that cold process that I used to create process is a value can store a value and when you give it as an argument to another multi process it can access that same variable and they share the same memory.",
            "So in essence you have a shared variable this shared variable.",
            "So here the shared variables V. The thing was valid with these shared very shared variables as well as a race is there they are strongly typed, so other than is different than another Python.",
            "Variables you have to say what kind of type it is.",
            "So in this case I want an integer to be shared and that's what his eye is doing here.",
            "So this creates a value of type integer zero.",
            "It breaks a little bit the pythonic nature, but if you want to share memory, you gotta know what how big it is.",
            "And so I guess that's that was the compromise.",
            "Dress is the same in that I have a function.",
            "That will be passed.",
            "His V is variable, and so to access the value of the variable, I have to say V dot value.",
            "So think of this.",
            "This shared variable this value with capital value as a sort of wrapper in which the value lives are image appointed, evaluates.",
            "So I can do this.",
            "I can pass them also here 10 processes are started.",
            "They will.",
            "Sleep for a little while and adds 52 to value.",
            "So I've got 10 processes adding.",
            "50 * 1 So.",
            "How much should I get at the end but should evaluate at the end if 10 process is count to 50?",
            "500 right?"
        ],
        [
            "Here, so it's pretty fast.",
            "I'll give it that.",
            "OK, .12 seconds, but 480 oh OK, closer now we're not scientists are or it's most of us are not good enough.",
            "What we have is race condition.",
            "If a if you've done the classical traction, you should have realized that if not, you really said now as to what happens is this process is there are all writing to the same value in the same location in memory at the same time.",
            "Some are sooner or later.",
            "Some overlap while they write an in true.",
            "Race condition spirit.",
            "The result is less than you expect."
        ],
        [
            "So.",
            "This can be hard to find, but it can be fixed.",
            "We have to fix the fact that we are accessing this memory.",
            "From all the processes at the same time, something has to make sure that only one does it at the same time."
        ],
        [
            "And so there's a lock.",
            "So this becomes a little bit more cumbersome, but this this like things like that.",
            "It would have to be done in shared memory every now and then.",
            "Anyway.",
            "You can create a lock, you give the lock also as an argument, and now the first thing you do when you want to update the function that the value is you will lock it and there this is a shorthand that is very useful to open and close a luxury or to grab a lot really.",
            "Makes it very easy.",
            "This is going to be slow though.",
            "Right, typically it's not so bad, but it's going to be having all this locking going on is definitely going to hamper things and all the things you've learned about shared memory programming.",
            "If you followed the classical track you should apply like you should use local variables etc and none of the nice cities of open MP are there, so this is still fairly low level or I shouldn't say low level.",
            "This is fairly hands off, right?"
        ],
        [
            "Then there are a similar thing holds for arrays.",
            "An just give it a.",
            "An umpire a.",
            "You say what?",
            "What type it is double precision in this case, and they can just use that array as a shared variable very much as a value.",
            "Again, it's typed, but so were known by arrays, so that actually matches quite nicely.",
            "Sharing empire.",
            "Race is not a problem here.",
            "The big downside though, is that you can only share one of the arrays that is.",
            "At the capital, A array is is a one the array, which is a bit unfortunate."
        ],
        [
            "So this one changes the sign of all of the.",
            "Variables.",
            "One per process.",
            "The best use of.",
            "Multiple horsemen."
        ],
        [
            "And then there's a whole bunch of other stuff you can do.",
            "There's ways to actually have these processes run on different nodes.",
            "I'm not even quite sure what it does with failures in the race.",
            "I'd have to look that up.",
            "You can do some event driven programming with multiprocessing.",
            "Other events and conditions were synchronized.",
            "Process is at.",
            "I don't have the time to go into all of them today, given that it's already a fairly.",
            "Laborious paid to do things, but this is the.",
            "The best.",
            "But last lists convenient way.",
            "Forking restricted to Linux, an another little clumsy threads, just not implemented well enough to give you any speed up.",
            "An multiprocessing is is the marriage of the two."
        ],
        [
            "What about MPI?",
            "I heard everybody ask.",
            "So.",
            "For some reason MPI is perfectly supported in Python And I'll show you how.",
            "Yet very rarely used.",
            "Now.",
            "We know Python is a little bit.",
            "An elaborate right, you gotta know where all your messages go, where they go.",
            "You gotta make sure you don't have deadlocks.",
            "All of that.",
            "There's a buffers or not buffering, and all these things are coming to play.",
            "Yes, and I guess maybe people don't like it because Python is supposed to be easy.",
            "But then multi processing doesn't make it that easy either so."
        ],
        [
            "Let's look at this.",
            "And see how it goes.",
            "'cause once you know MPI already.",
            "The Python API is actually very nice, a very elegant.",
            "For those of you that did the accelerator track, another little rusty on the MPI MPI send from message passing interface and it's a CF API, so you can pull it just functions in C and Fortran and.",
            "Can super sparse sort of derived from.",
            "See also from C++ whenever you want to get message from one process to the other, you send that message.",
            "So sends a message.",
            "That's what I mean.",
            "With messages, it's data that's being transferred.",
            "What you need to do?",
            "To run MPI.",
            "So complete.",
            "Mining should not be an issue because Python is not compiled language, but to run it would still have to start.",
            "Your process is and know where they are.",
            "So you have to set up your processor by running them through MPI Runner MPI.",
            "Exact depending on your MPI implementation and see how many you want and what notes there on, although usually that's automatic.",
            "Right, and then within the code you typically have to do MPI init.",
            "Basically, to gather the troops and they already know where everybody is.",
            "And it is still, and so look I'm using low level here.",
            "A little bit wrong.",
            "It's explicit in what gets end where, right?"
        ],
        [
            "Now, here's MPI for buy and it's it's a wrapper around the MPI library that it can do all the point to point communications, some collectives.",
            "Anne.",
            "Now we can see you wrote that the scientists wrote this.",
            "It is compatible.",
            "NUM, py and we'll see that if you don't use known by array, it's actually just certain amount of overhead of doing this, but.",
            "Essentially it's a wrapper.",
            "To know who here did the classical truck.",
            "So so most of you have an idea about MPI does and how, and they all should should know a little bit anyway.",
            "See where I was going here?"
        ],
        [
            "Yeah, so she don't.",
            "This is what it looks like in C++.",
            "Get your init, get your rank in size.",
            "Where am I?",
            "How many?",
            "How many are there in this particular little code in C or I think it's 2 plus plus we don't know where it said that 'cause it looks very much so.",
            "This is why I see out is something that's too plus plus.",
            "So.",
            "This is a code that sends each process sends the rank to the process left of it or underneath it of lower rank.",
            "So I've got a bunch of processes.",
            "Each node I rank.",
            "And they just tell their rank too.",
            "The neighbor, hence this and received left, writes all your regular stuff and it tells you who they are, right neighbors."
        ],
        [
            "Looks the same in Fortran.",
            "And it's come rank comcis send receive.",
            "If we had to finalize.",
            "So what does it look like in Python?"
        ],
        [
            "That's it.",
            "The convenience and conciseness and clarity of Python is present in the MPI four PY interface, and it's quite nice.",
            "It's actually very nice if you ever have to teach MPI to people that don't know compiled languages but know some Python And they want to know why.",
            "Or how?",
            "It's pretty convenient.",
            "OK, so how can I do that?",
            "Why is it so short?",
            "And it's it's partly because a lot of the.",
            "Things you have to do in MPI revolve around specifying your data types, how many elements you have, setting up buffers, all that.",
            "Ann, you have to specify the data type because it's the library, so the library can't look into your C or FORTRAN code and see, oh, this was a variable of that in that type.",
            "It's too late.",
            "It has to know that type when you call the function.",
            "But nothing is different by some can detect what type it is.",
            "Their design is.",
            "The type is sort of hanging on to the data, right?",
            "So we shouldn't have to specify what type it is, and in fact we don't.",
            "Same for arrays.",
            "Python perfect is perfectly capable of seeing how big an arrays.",
            "So if I give an array also, they should just send that array.",
            "I shouldn't have to say how many animals in their life and already knows.",
            "In addition, Python is object oriented, which gives it gives a slightly nicer flavor.",
            "If anybody else you have ever looked at the C++ bindings of MPI when they were still alive, they looked similar to this.",
            "And there's there's a nice to do that so.",
            "Getting to rank I do to get rank again, this that's called com rank would get rank here.",
            "But rather than having to put it in a variable I just assign it so I get the rank and it becomes a variable say with the size right left is no different and then send receive.",
            "Look how simple that became.",
            "The rank R which is supposed to rank of my right neighbor I guess bye.",
            "Sending my rank to the left and getting something from the source to the right.",
            "And under specified, a rank was an integer.",
            "I get it.",
            "I get the rank are out there, don't have to put it in a buffer.",
            "And I don't even have to put tags, and I can't put tags in.",
            "If you remember the actual MPI, I can the default in MPF replies.",
            "Just have to tag to be 0.",
            "Half the time they're not used, and since you can have optional arguments in Python, they use that for this.",
            "That's cute, right?",
            "How can it be so nice?",
            "Something must be up right?",
            "And something is a little bit up.",
            "Every effort by does to send this message is it it Pickles it.",
            "Anyone here know what pickling is?",
            "Alright, so let me explain.",
            "Pickling is intended as a way of saving or serializing an object so that it can be anything in Python can be a list.",
            "It could be hierarchy of list, it could be an integer.",
            "How about if you want to save that and you don't know what the length is of it?",
            "There's a way to encode that.",
            "Just me in a way that you could read it back.",
            "So it basically translates whatever data structure you have.",
            "Ghost, which reverses it somehow and makes it into a string.",
            "Literally, it's it's pretty much a strict.",
            "That string into.",
            "A file and then you could read it up.",
            "So that means that any object you have in Python you can save it to a file as ethical and they could read it in and it becomes that same object again.",
            "It could be any kind of structure, doesn't really matter.",
            "You can't have an open file handle and hope it's still open, but that data structures, yes, right?",
            "That's nice and every effort by just uses that if I can do that with any object or virtually any object, whatever object I give to amplify it just turns it into a pickle and then sends that pickle over.",
            "OK.",
            "But pickling isn't isn't free.",
            "Pickling is like writing in ASCII.",
            "If you have binary data or compressing your data, it takes computation.",
            "So for small messages this is probably a negligible amount.",
            "But if you have a million doubles to send over.",
            "Pickling them is like making them into an ASCII form and it can take like 100 times more than if you don't have to do this so.",
            "So that's kind of the downside."
        ],
        [
            "Of course, for every downside there's an upside.",
            "At with NUM Py you can you could you don't have to do this in the sense NUM PY arrays are perfectly suited to be sent by MPI.",
            "MPI wants to know where your buffer starts and how many are because that buffer should be contiguous.",
            "At least in the simplest case, and this is what number race too.",
            "So there's a special.",
            "Extra interface to MPI for \u03c0.",
            "That takes a NUM PY arrays and sends them as it's so you don't have this overhead of having to pickle them.",
            "And so in this in this case, that communication is going to be almost as fast as if you sent the MPI.",
            "Directly in in C or Fortran.",
            "There is a slight downside because now you do have to pre allocate buffers so nothing is for free."
        ],
        [
            "OK, so we have an example.",
            "Off of how you would use this.",
            "And this example computes the area under the curve.",
            "I had this example already, so I know that the integral that is this.",
            "This is your gift.",
            "The exact answer of 8.175 and I'm going to compute this doing a uniform grid and computing the sum of those things times the DX etc etc.",
            "So I can I can choose how fine I want my grid an because it's a sum over grid points, I could distribute that over.",
            "Yeah, over MPI this half each apply process do apart right?"
        ],
        [
            "So here's the.",
            "The code for that I guess it's not.",
            "It's not so difficult, I get my rank in my size.",
            "And in this case I want to be able to give the number of points on the command line.",
            "And that happens and you can get that in back home from sisters RV.",
            "And so it's asking for the number of points to use in your integration from the command line.",
            "And then I only want.",
            "I want to divide that by the total Sciences.",
            "Each process gets endpoints.",
            "This should start to look familiar if you've done the MPI one, how, how wide should each be?",
            "Where do I start for X is where where so I'm in an MPI process, so I need to know.",
            "Where do I start?",
            "An AC accumulation, so that's the integral, and then I'd go over the points, compute this form of the interference.",
            "Add it to A at.",
            "Go to the next X value and at the end I will have accumulated everything in A and to get things back I just want a reduction now.",
            "This this is again very simple enough.",
            "Yeah, you just say OK.",
            "I want to reduce a.",
            "The default reduction operators some, so basically I'm summing all the ages of each other processes and put it in be there, reduces only to process 0.",
            "So rank equals 0.",
            "You do realize all which happens to do what it does in MPI.",
            "So this is the standard.",
            "None, NUM py enables form and the thing to note, although it's strange to notice that.",
            "All the must called member functions for all of the things that come after the dots.",
            "In this case, just reduce our lower case an."
        ],
        [
            "So use the MPI version.",
            "I started my version.",
            "That will become an upper case.",
            "A very odd choice to make the distinction between something that gets pickled or not pickled based only on.",
            "The in uppercase or lowercase.",
            "Even worse, the way you called the upper case in the lower case ones, the arguments that have to go into it and the return types are completely different.",
            "These are two separate APIs, distinguished only by capitalization of the name, so I'm not quite sure if there was a clever decision decision that so it is OK it is.",
            "It is consistent, so you want to use the NUM.",
            "Py enable self everything that gets the capital and and most people stick to that.",
            "Exactly 2 to avoid the.",
            "The downside of having typical yours is your messages, so a lot of it is the same I have to now import NUM PY.",
            "That should not be a surprise.",
            "I have to import as array.",
            "Will see why the rest is the same, the same the same, but now I have to pre allocate a buffer for the result to living so.",
            "Since I'm not going to unpickle the result and put it somewhere.",
            "But I have to put it somewhere.",
            "Now I need a buffer so it's the old MPI stuff.",
            "You need a buffer to put to copy or something and it has to exist already, right?",
            "In Python everything is dynamic, but.",
            "But this this breaks that for for efficiency.",
            "So here's a video that fell off the slide, so be and then.",
            "The last thing is just a parenthesis, so I have to be here to accept the results.",
            "But an even the input has to be in array and a was just a regular Python variable, so I can with these capitalized ones I can only send NUM PY arrays back and forth, so I have an umpire array of size one that receives rolls, and I have to have an umpire a that I send, and so the easiest way to do that is to say.",
            "Now it's just convert A to an array with the function as array, which is part of number.",
            "So you can take any.",
            "You can take a list or you can take a scalar variable, regular Python variable and give it to that and it will try and create an empire rate.",
            "So other than that it works just fine.",
            "Of course, since B is now an array, when I print it, I have to print 0 value so it's it's a little bit funny, but that's so.",
            "This will avoid the overheads.",
            "Of pickling what?",
            "One floating point iPhone number, right?",
            "So let's see how much that's these things."
        ],
        [
            "So AUC stands for area under the curve.",
            "In areas pretty good.",
            "Took 15 seconds."
        ],
        [
            "And this is the one.",
            "With 28 processes.",
            "NPI run takes 3 seconds, pretty nice.",
            "I mean it's a simple problem.",
            "I don't quite expect too much speedup because the amount of work per process isn't that large, but.",
            "MPI MPI is working here.",
            "And you you can use it."
        ],
        [
            "How about the NUM?",
            "Py?",
            "So this is the one with the capitalized form of.",
            "MPI for PIE and it actually turns out to be slower.",
            "So.",
            "But that's because we had one variable, right?",
            "This is just."
        ],
        [
            "Not enough to do to see the difference in effect.",
            "Converting A to an array turns out to be more overhead than pickling one little double.",
            "I'm not quite sure why the balance works out that way, but.",
            "This would have been different.",
            "I think I miss, I hope in theory if we had a whole array to to send and this should be better.",
            "So this actually turns out to be not as.",
            "Not as big a deal.",
            "There might be a take home message here that sometimes you don't have to do, but you know what.",
            "It turns out at."
        ],
        [
            "Most of the documentation you find is on this side, and it's not so strange, but people using MPI are sensitive to performance, right so?",
            "If somebody has told him while this interface exists, but it snow in awhile and it goes through the fast one at it turns out of this case with one variable that's actually slower.",
            "Yep.",
            "Oh so just start MPI slide.",
            "This one so if I program.",
            "In the pickling way.",
            "I have a.",
            "A mixture of capitalization should get rank and get size of capitalized.",
            "Yeah, because there's no.",
            "Yeah exactly.",
            "It just seems weird.",
            "I thought that would have been consistent in the right hand.",
            "One would have been would have been the mix.",
            "Yeah, I think so yeah, OK.",
            "The what I found.",
            "More confusing 'cause when you try to access a member function as a name that it doesn't have, it will just give you a warning saying this doesn't exist, right?",
            "The right case is actually a lot safer program if I.",
            "'cause there's no way that I can accidentally.",
            "Put this in the wrong variable.",
            "So if I say C equals and they still have printed, will be.",
            "That can happen here the variable has to exist, so just there's a.",
            "You're sort of safety in that, but that's the same safety you get from any type language, really, that it's.",
            "Yeah you can.",
            "I can accidentally use wrong variables and the wrong type, and it might or might not swallow them.",
            "It's it depends a little bit I can give for instance in the right side I can give instead of as Ray just a an.",
            "It would seem OK, but it gives the wrong result rather than an error.",
            "Yeah.",
            "You you pay a bit of a price for the fact that it is similar.",
            "I kind of like the left way of doing things.",
            "I think it's it's a lot more easy to understand what you're doing when you say, well, reduce all the H2-AB rather than having that and we didn't have to use any types or anything, so it's kind of nice, but.",
            "Yeah."
        ],
        [
            "Alright, I'm not quite sure why we have we have.",
            "No, we have time we can try.",
            "We can try a hands-on.",
            "Then let me ask me with so the rest of the week and do a little we could play around with this a little bit.",
            "And then I think it would be nice.",
            "But then I have a section where we're going to talk about sort of map, reduce data sciency stuff where?",
            "The main point is not to get a tightly coupled computation as fast as possible, but to distribute work over that are like substantial over workers, and to make sure that you don't have too much data transport and those kind of things.",
            "So we're going to look at Spark and the thing calls I Python parallel.",
            "We could spend more time on that.",
            "An if people are interested or we could do the exercise here and need to sort of show how to use item multi processing on expert advice to choose to try and paralyze this code.",
            "Whose so?",
            "Let me ask who here I would really know, like to hear more about the the techniques used for data science.",
            "OK, and who OK?",
            "It keeps going OK who is more 40 parallelization part?",
            "They just signed this win.",
            "OK, so.",
            "If we have time, we'll come back to this.",
            "The hands-on.",
            "Is there like the idea was to do, so we'll skip it, but I'll tell you what the ideas.",
            "Take this same code.",
            "And rather than using MPI four PY take the serial version was fairly simple and see if you can use multi processing or Nomex for for the code.",
            "As in, see what the what kind of speed up you get, so not remember multiprocessing mates in the process is so you have to do is spawning stuff and then express you should be able to just take the expression whatever it was an I give it to nomics expert an have it compile and spread it for you and so very different approaches that would be nice to see which one would win.",
            "Yeah, that.",
            "In MPI four PY, how do you initialize the communication?",
            "Perfect perfect question.",
            "And the answer."
        ],
        [
            "It happens as soon as you import MPI for \u03c0.",
            "So it does it for you.",
            "You also notice that there's no finalize.",
            "I this is this sort of.",
            "It's just a little bit.",
            "Now.",
            "Here's to you.",
            "Got a property.",
            "Finalize your MPI that I got it right 'cause when your program is done, of course you want to finalize.",
            "What else are you going to do?",
            "So it's it?",
            "In a real or in a compiled MPI process or program, you could do things before the MPI in it, so long as there's no communication, you could do things after the MPI finalize, so the model is one of Noah in, in principle of no MPI.",
            "Now I can do my MPI communication and no more MPI, but you can't go in and out.",
            "You can't do it like twice, so it's a bit funny that it is even possible.",
            "So I'm baffled by just chose to say.",
            "Of course you want everything in communicating, so we'll do the MPI in it for you.",
            "And then maybe when the I want it tears down, it should do a finalize.",
            "I guess it is possible that if this gets interrupted, the MPI finalize is not cold, but the same is true for your.",
            "For your compiled code so.",
            "Yes, I'd like to say so.",
            "It's all.",
            "It's all automatic again.",
            "One less thing too.",
            "To worry about.",
            "Just have to hope it's all done right.",
            "You can still do all the thinking still mess around with Communicator.",
            "She could spit them up.",
            "You can have subgroups, etc.",
            "It's not that that's not in there, but the MPI init system.",
            "Any other questions about the?",
            "The."
        ],
        [
            "Realization part.",
            "OK.",
            "So.",
            "It is almost impossible not to have heard the words map reduce thrown at you usually in the same senses as data science.",
            "App.",
            "And not always that people that know what they're talking about, but but sometimes yes.",
            "We have heard talks about the struggles that some fields of research and some fields of business have with dealing with the amount of data that they get.",
            "So astronomy was one of them.",
            "Bioinformatics or genomics is definitely another one, so when that happens.",
            "Typically, what's the case you have you do have a lot of data.",
            "That you need to process.",
            "But they are sort of independent points.",
            "Think of you want to analyze the billion Twitter feeds.",
            "Its Twitter feed is more or less independent until you start doing the analysis.",
            "So if you want to know which filters filter feeds mentioned the IHP CSS.",
            "You just have to see count.",
            "Which ones do that all billion very parallel.",
            "So a lot of this stuff is at first massively parallel, so for all of these Twitter feeds, you need to know do they contain this string or not?",
            "And then you have to count on which is kind of like a reduction, right?",
            "You count how many of these actually happened, so it is a one if they have at the 0 not you reduce it.",
            "Now you should always thinking I can do that with MPI and you would be totally right but.",
            "Either because they didn't know or didn't want to do it compiled language.",
            "More and more frameworks were developed to do this map.",
            "That is to say, to distribute these millionaires where there's a billion tweets, two different processes or different nodes have them count.",
            "If they, or check if they could send a string and then collect him again and reject reduce it to.",
            "This is how many times is this thing was done so that paradigm of MapReduce is very common when you when you're talking about big data just because what they're doing.",
            "Isn't always as.",
            "Tightly coupled.",
            "It's a very different from, say, diffusion equation, very different from a lot of a lot of scientific computing, but very common when you're dealing with big data.",
            "That's why the two are, and it doesn't really like a billion.",
            "Isn't really all that much.",
            "The million is definitely small, So what is what is bigger, but it still depends more on how hard it is to extract any meaningful information from it that makes MapReduce useful is sort of a loose coupling."
        ],
        [
            "So other.",
            "Examples of this type of workflow.",
            "So we talked about reduction.",
            "So these are reductions that produces a reduction that has reduced in it.",
            "So you could you could think of that parameter sweeps.",
            "They're all independent.",
            "They were trying to optimize the shape of a wing.",
            "You try different parameters, defined it, final drag or lift or whatever is your criteria, and you just find the best one afterward that produce right so.",
            "It's a very common framework.",
            "You don't need a lot of communication.",
            "You don't have to be low level, you can afford.",
            "Some amount of inefficiency if you're just checking strings.",
            "And you have a lot of them.",
            "You might not care that things are 10 times slower per string comparison.",
            "Just have to get this thing done and every time you need you might need a slightly different function to be to be.",
            "Performed on each image item, so will look at two frameworks.",
            "One comes out of the Python stable, so it is Ipython parallel I Python if you might know is a slightly different interface to Python.",
            "It's meant to be more interactive and has a whole bunch of nice cities, but it also boils down to being a slightly different dialect from Python then pure Python, which is why I steered away from it here.",
            "'cause it just gets confusing and everything.",
            "Everything has to work both in I Python.",
            "Nearby some dialect, as in the official Python Islands.",
            "Turns out, on top of that, they built this parallel.",
            "Machinery that is now spun off into its own.",
            "So it's either it's actually not called Ipython parallel anymore, but I buy parallel.",
            "So depending on how you your iPhone distribution issue either import Ipython parallel or I barrel as this match will show.",
            "I'll show a bit of the architecture and an example of how to use it.",
            "And then I'll move to spark or officially Apache Spark, which is also a MapReduce framework, and I really want to show.",
            "How how to really similar and all these frameworks have a lot in common 'cause all they have to do is distribute work and get it back right distributed, get back and coordinate that somewhere.",
            "Anne.",
            "And in particular, there is an interface to spark called pyspark which is the Python interface which of course in this Python session is what we use."
        ],
        [
            "So.",
            "The typical way that map reduce applications are structures.",
            "If a massive process and worker process, the master specifies what needs to be done and then gets shipped out to workers, then they give it back, etc.",
            "You need the right type of workflow for this to be efficient, right?",
            "'cause you have this one point of failure to master one point.",
            "So if so, if you had a tightly coupled system, if everything has to go through the master, this is no good, but there's a lot of workloads we're talking about here.",
            "So, so that's why you can.",
            "You can get away with this, so the workflow then is that the data gets distributed over the workers, or ideally the workers would already have the data.",
            "So a lot of these frameworks can turn this whole thing upside down rather than distributing the work which we've been doing with MPI, Open MP and Open ACC.",
            "No, you did you distribute this massive data set and it probably doesn't even fit in each node, or you don't want to deal with all things and then the way to work is history with business goes OK. What work needs to be like?",
            "Where's the data?",
            "And I bring I bring the work back to it.",
            "If the data is already there.",
            "The distribution of work is that should be dictated by the data.",
            "Will see a few examples of that too.",
            "And then once the work is done, the results are sent back or filtered or somehow collected and then reels it goes back to the mastering and this could be repeated right?",
            "Because OK I do a partial selection on everything that mentions the International Summer School, but then I also see I check for keywords that have a positive connotation and I want to know the sentiment analysis of these Twitter feeds or so.",
            "As I said, you can have a lot of tightly couples communication between this works and the work chunks have to be substantial if it's just.",
            "Summing up the counting or something counting integers, giving one integer to increase to each worker.",
            "The infrastructure that you need to send it and get it back.",
            "In this work workflow system is."
        ],
        [
            "Sort of inappropriate.",
            "So let's let's first look at.",
            "I thought that I'm doing this partly because I passed.",
            "It will already come with your right.",
            "It's easy to install if you have Python already."
        ],
        [
            "Kind of natively there where spark requires a special installation.",
            "This doesn't really.",
            "So.",
            "Here's the.",
            "I parallel or formally I buy some peril way of doing things, so at first little bit confusing.",
            "There's a couple of moving parts here.",
            "The engine's on the bottom order are the workers that are wondering to work.",
            "So by the way, every framework has new names for all the things that are the same.",
            "So these are engines, although their workers.",
            "No, you can't help that the wheel has been invented a couple of times.",
            "In these cases, OK, so the engine started workers at the schedulers deliver, and if I'd work so they can see where the data lives in where it should go.",
            "Or just basically say OK, this is new data I have to make sure that that code for it cause an and then give the divider work.",
            "So they're the schedulers that that name makes sense, then the hub.",
            "This coordinates and logs that everything so that.",
            "It's the admin person and the client is the one that actually is running, so that's that's it's like the master.",
            "The master will give work to the engine's so.",
            "Which is good?",
            "'cause mastering analogy can go terribly wrong as well.",
            "So the client is the master in this case.",
            "No, the the client's always right.",
            "Anne Anne it.",
            "Executes are asked for certain work to be done that's given to the schedulers that separates the engine, and they eventually get that work back to the client and then just to make things extra complicated.",
            "And the schedule and help together are called a controller.",
            "And then the screen half plus the engine's.",
            "They're called the cluster now that part isn't so strange in the sense that the client connects to the cluster and they have the cluster as the cluster.",
            "Do something that I can think of cluster.",
            "Not quite sure, I just needed a name.",
            "OK so.",
            "That's the infrastructure.",
            "That's where things go.",
            "Pensions likely run on different nodes then the client, but obviously they don't have to.",
            "If you're on a multicore machine, you could get away with not having that."
        ],
        [
            "So how do we start this up?",
            "So we have to if we want to play with this and it should all work on bridges.",
            "There's there's some funny stuff that has to happen.",
            "Ann, it's the start of work, is a bit manual.",
            "We have to set up this cluster ourselves.",
            "Now there's just a command for that, so you go to.",
            "You should be on your interactive node.",
            "You change the code directory if not there instead of sources set up if you haven't already.",
            "In that case, you can just start this.",
            "I buy parallel cluster with IP cluster start and then the number of engineers.",
            "It's kind of like an MPI run, but it just has those those engines.",
            "Hang there and waiting for work.",
            "Because there waiting this terminal is done.",
            "It's just hanging there.",
            "It's now dedicated to showing log messages and error messages from the engine.",
            "So how do we connect to the cluster where we have to go back, SSH back into bridges?",
            "An SSH back to the node.",
            "That's why before you do that, make sure you type in host name so you know which notes to connect back to.",
            "There are better ways to set us up, I'm sure, but.",
            "That just means somebody automated this for you.",
            "This is this is going on.",
            "This is when I think fondly back of MPI MPI run this is it.",
            "Once you're back on that note here."
        ],
        [
            "Because she SSH back in.",
            "You have to source the setup again, make sure everything is in the path of the module loaded.",
            "It'll tell you now that all the things that have to be installed are installed, but at least they're not iaccessible type in Python And we're principle sets.",
            "We can now connect to the clients in my parallel and get them.",
            "So this is going to be our clients, which in the usual MapReduce framework was called the Master.",
            "So we import to clients or so.",
            "So the way this works slightly confusing.",
            "Of course we want to import I parallel.",
            "In particular, we want to be able to create a client.",
            "Remember, this client was just so so clients become client and an.",
            "The naming is just very, very unfortunate.",
            "Through the clients through the clients object you access the engines.",
            "So you created a client.",
            "That is now connected to these these engines.",
            "So when I say clients is engine's, this clients variable contains the connection to the the engine's so it has figured out that this iPad cloud cluster is running.",
            "That's what happens when you call client.",
            "It finds the cluster and attaches to that.",
            "If the cluster would be running on a different node, there's arguments you can give to it to say what note it is at.",
            "What port is this listening to?",
            "And all of that you can set it up more more more carefully, but if it's on the same note.",
            "You'll just find it, so that's a good way to to get started and try it out."
        ],
        [
            "OK, so we have our clients.",
            "An and now we can.",
            "We can run in two modes.",
            "It turns out we can either give work to the engine's and just have them go and continue passing out more work, or we can wait until the work is done and I will return to it.",
            "So that's blocked or not blocked or synchronous or asynchronous way of operating in this case will set it to block to true, which means we always get our result back.",
            "It's easier for interactively playing with this.",
            "It's not as effective and efficient.",
            "So one thing we can do is we can print the length of client which actually gives me the number of engines for.",
            "I can print the idea so these things have whatever essentially ranks in MPI.",
            "Can you get the ideas?"
        ],
        [
            "So OK, we have the clients we figured out there's four because we started the cluster with four.",
            "Now how it?",
            "How do we give them work right?",
            "So one way to so.",
            "A common way to give them work is to give them a function to do and some arguments to go into that function so they have a function that subtracts the from a minus.",
            "Works and then I can have that executed on a specific engine engine #0 by applying the calling.",
            "The apply function is giving the function that I want done and the arguments.",
            "So I could do this and I've met so it is possible to do this very very hands on and say this client is going to do that that line.",
            "This engine doing that that should do that, but it's."
        ],
        [
            "Otherwise, you would typically do.",
            "Right, so a few things though, if you're going to run on a client or on an engine, that engine is a separate process, right?",
            "It might, it might not even live on the same node.",
            "And in our case it does, but it doesn't have to.",
            "And if it, even if it does, you have to move your data and your code to the engine.",
            "So when I say."
        ],
        [
            "They apply minus five and six.",
            "That engine zero didn't have a value 5 anywhere and value of 6 those get shipped off, but it even didn't have a function minus define.",
            "These are Python environments, so I have to define that function in there.",
            "So apply ships the function functions are proper objects in Python so they can be shipped.",
            "You're probably Pickles if I would guess, but I'm not sure, but I shipped off to the engine.",
            "The engine now has a minus function and goes OK. Now if I get these groups arguments I I."
        ],
        [
            "So data gets moved.",
            "You can imagine that if you're streaming that and it's a lot of data, you want to make sure the data is first distributed.",
            "So there's there's, I mean, but.",
            "The apply will will will move the data to.",
            "And then you quit.",
            "You get the code."
        ],
        [
            "Now to make things so we have blocked and unblocked mode for for for basically manipulating the engine's.",
            "There's a few other ways.",
            "Other things we can do.",
            "We can do subsets of the nodes.",
            "We can do arrange, we can say we only want zero and one or we want every other one.",
            "So in this case if I had eight clients, this would give me every odd one of the eight, so 135 and seven and the rest not.",
            "So this becomes a new.",
            "They call it the view.",
            "But it's basically the new interface to to treat a sub part of the clusters as a whole cluster.",
            "Another thing you can do.",
            "Rather than having saying for each engine specifically what it does is do something that is load balance and this is a very powerful way of going about.",
            "You can imagine that if your work work packages are very unbalanced, that is something long.",
            "Something to take a short time.",
            "This could be very useful and you can basically just tell the tell this client or his view do this, do that, do that and it separates it out and see who is not busy.",
            "It's a very useful way to go about body.",
            "It also doesn't.",
            "It's hard to show.",
            "With simple examples that it that it works well, so I'm going to stick to this first direct direct interface so we know exactly where the process better engines are."
        ],
        [
            "That's how we work.",
            "So suppose we have this direct view.",
            "We can run something on on each of them.",
            "We can run a script, so remember there's this.",
            "These engines are Python Python instances, right?",
            "So we think if a descriptor it just say OK.",
            "Here's a file, a file name.",
            "Go read this script and execute it and then it'll stop and they'll have executed that.",
            "It can be useful.",
            "Or you can just give it a command you can say.",
            "Everybody bring their host name, something like that.",
            "We can do and apply which which we saw takes a function argument, so they get shipped off to the engine, and then there's the map which is, which is a very interesting one to, which takes again a function and then a list, but at least get split up.",
            "So here here's where we get some functionality is going to help us.",
            "The load balancing could help us.",
            "The map could also have the map is like an open MP static scheduler and the load balancing is I can open MP dynamic scheduler.",
            "It takes a list, separates them out, and thus the function of each of the lists."
        ],
        [
            "We talked about blocking and unblocking.",
            "If you do not blocking when you send off your work package you get sort of a handle and you can check if your work is done about to return value.",
            "Is it this when it's done so that's with ready and with cats but."
        ],
        [
            "That's the exciting this mode.",
            "So she run on all right?",
            "So here's a case where we're running on all the engines.",
            "They all give minus one 'cause all of them get five and six.",
            "But if we map.",
            "Right away map is also a built in Python interface, so you can.",
            "You can just do map without I Python parallel you get this."
        ],
        [
            "Charles.",
            "You can do it in Load Valley and load balance value.",
            "Another test done as well.",
            "How will have given every engine 1 one part of each listing can find a property and then get him back.",
            "OK."
        ],
        [
            "So yeah, one thing to to be aware of if you're going to use this that.",
            "When you use a direct user, not allowed balanced view.",
            "When you say apply.",
            "Right, it it does.",
            "It does it on all of the engine, so that's so when I do apply here with minus, each of these actions is computing the result for me, even though they're all the same.",
            "When I do the load balancing they say apply just gets into one.",
            "And so that makes a lot more sense in most cases."
        ],
        [
            "It behaves differently.",
            "Here we go."
        ],
        [
            "Yeah, so here's the load balance view.",
            "It does assume only once because it was given to 1 engine.",
            "If I did another apply in between and I had the in synchronous mode, that's how I could drive them separately."
        ],
        [
            "So.",
            "We have these separate engines running.",
            "They have their own Python environment.",
            "They have their own variables, so if I have a = 5 In my in my client, the engine's don't know about it.",
            "After ship it off.",
            "But what if all the engines have a variable called circles here called X?",
            "And I want to know what their variable is.",
            "How do I get that?",
            "So there's a way to get variables from from the engine's.",
            "And it's very simple.",
            "You just take all those clients together with you.",
            "So if you can and what I've done is, I've executed the command X equals get PID, get the process identifier, now they're running then just running on the same machine must have different pid's and so each of them will give something else, but they have stored it in their local variable X.",
            "So to get this back.",
            "It's fairly simple, I can just use a few and use it as a dictionary as well.",
            "What is the value of X everywhere and I just get a list back of those values so to view at the same time access a dictionary.",
            "But it also acts as a.",
            "But then the clients themselves also access sort of an array of of dictionary.",
            "So you can imagine each of the.",
            "And this this is actually true for regular Python.",
            "All the variables in Python.",
            "Live in a dictionary.",
            "And by doing clients three, I essentially just get that dictionary back of Engine 3 in this case.",
            "So it can hide are asked if you to give me the list of the values of all of them, or I can specify a specific engine and get the value from there.",
            "I could of course also do Phi X and then three and do the other way, which will be slightly inefficient 'cause first time collecting all of the all of them and then throwing about throwing all of them out of that one."
        ],
        [
            "You can just get together so that kind of makes sense if you have a list, like a list from 1 to 16 and scattered it over the view.",
            "Each of them gets a quarter of the of the list and they can gather it back so.",
            "When you're not doing map or you want to pre distribute data, this is the way you can do it and you can get it back after 2.",
            "So notice this is a little bit of a. I a dump of like a mix of.",
            "Makes off.",
            "Methodology and then the technical.",
            "Outline of how it would work.",
            "You could try this out to.",
            "Actually, there's really not much more to it.",
            "Like with this you could try and and do some data processing.",
            "I find it useful to take some data and just play with it and I'll give you some at the end.",
            "But in the context of spark.",
            "So.",
            "But this this is kind of the way, the way, the way it goes with all of these players, they have their own vocabulary, so you gotta.",
            "You got to see a few of them to see that are actually all the same, and then you start confusing what an engine is in a worker just like me.",
            "So let's go back one more time."
        ],
        [
            "Client hub schedule engine's.",
            "The client is where we are.",
            "We are interfacing at the client from the clients.",
            "We do our execute or run our Maps and they get sent by the schedulers to the engine's.",
            "In some cases it load balances, in other cases, it's not.",
            "That's not in some cases it distributes a list, in other cases, it copies everything.",
            "I can get the variables from the engine's back to the client.",
            "They can send them there 2.",
            "It's just an infrastructure.",
            "Right, but it has all of the.",
            "Tools to have your district data in this workload in a semi automated Lee this is.",
            "This is very typical for all of these frameworks.",
            "Details differ and will see in Spark.",
            "Few details are different, but the essence isn't isn't that different.",
            "There's something that drives it there at the entrance, there's variables, data moving about and encode moving about.",
            "Questions about the iPad.",
            "You said the I Python.",
            "This is going right back.",
            "The Ipython sometimes differed in place from Python.",
            "I wasn't aware of that.",
            "Is it significant or is it just annoying or it's annoying it?",
            "What kind of areas is it?",
            "Ann is more in the stuff that you think would work in both cases and then doesn't.",
            "So it preloads NUM py inside, by and so your script will contain a = a range 5, and now your looks perfectly fine and you run it on Python, then it doesn't run anymore.",
            "You give it to these guys and they would think because it's called I Python there running Ipython the engines, but the running Python you could have I Python running as the client, but not as the engine.",
            "So it's it's.",
            "It's a.",
            "It's a super sense innocence anet just but I just find it confusing because the ones once you use it you want to use things you can time things by preparing, preparing them with payments for sometime it fantastic.",
            "And then now you want to show it in bags and you can't do it anymore.",
            "So I just it.",
            "Yeah.",
            "OK. We're doing OK, but I think we're all tired.",
            "How would we do a 10 minute break just to care minds a little bit stretch our legs and will be back here at.",
            "10 minutes to or something like that.",
            "I thought we went to 5:30.",
            "We're going to five.",
            "Alright, let's talk about my program sets.",
            "Huh?",
            "Sorry I have to check this is strange.",
            "Nobody likes you.",
            "Yeah, you want you want to go.",
            "Now I could have sworn, Leon said, we're we're leaving at 6 that's the side I just want to double check this.",
            "There's somebody Cam.",
            "I seem to have no more Internet.",
            "Yeah, we'll skip the break.",
            "But so in that case we'll skip to break, and we'll do a Python in overview.",
            "Sorry."
        ],
        [
            "Working out for you.",
            "That's OK.",
            "So Spark is going to be very similar, but everything has a different name and there's some advantages to spark as well that maybe I buy from them."
        ],
        [
            "The motivation for Spark is.",
            "Truly big data.",
            "Not.",
            "I got some data.",
            "It's Facebook's daily logs of 60 terabytes.",
            "It's the thousand genomes person projects of 200 terabytes.",
            "It's a Google map index that you wanted to reverse this more than 10 petabytes.",
            "Now if you if you imagine the cost of one terabyte disk is about 65, and you can only read that in about 3 hours, decides a little bit old.",
            "You can imagine that there's a lot of bottleneck if you try to put all of this on one note you just it is done right, so you can't do.",
            "Any data processing on this scale on a single node, but the kind of processing you do, specially if you look at these things or not, they're not tightly coupled, right, so?",
            "You want some distributed memory stuff, but you want more than that rather than being able to distribute the data once and now they are local and now the computation will be faster 'cause the computation is closest data, distributing the data becomes a very essential point at this scale."
        ],
        [
            "So before spark.",
            "You would use Hadoop for that and Hadoop in essence is.",
            "It's a district distributed file system.",
            "Every node has a part of the file system.",
            "There's some redundancy is affected.",
            "It's the file system that makes it into a useful thing.",
            "The fact that you don't have to worry about where the data is, it's already distributed, and that's how it works.",
            "And on top of that, in like essentially you have some tools to manipulate the data it's native language with Java, but there are some other interfaces.",
            "The only drawback to this is great.",
            "Your data is already distributed to keep it there forever, and whenever you have to do any data processing, the computer will go to the data.",
            "Add.",
            "What is not so nice, alright, but didn't work very well is that it was stuck with MapReduce.",
            "Now you said what we were looking at MapReduce, but sometimes you have met produce results that go in sequence.",
            "You never have this one map reduce you.",
            "You do one kind of reduce.",
            "And then there's another step of your of your analysis.",
            "And yet another step.",
            "So this this separate steps that would.",
            "That is fine except in my producer in Hadoop.",
            "Those intermediate steps would all be saved to disk, which means even though it's distributed, you're still limited by the speed of your hard drive for every step.",
            "So so you read this report is performing calculation right and then repeat, so it's very IO heavy and others performances as she would like.",
            "It solves the distribution part, but it doesn't solve the performance part."
        ],
        [
            "So is spark.",
            "And you won't see this from the interface, but it is true.",
            "More stuff is kept in memory, and in fact the the default is to keep it in memory until you say save this file.",
            "Can do more things than MapReduce but never use it.",
            "Still it still good in that, so we'll focus on that for now.",
            "There's other language wrappers available, particular Python.",
            "This goes on the name of five Spark another.",
            "Another nice thing that that.",
            "Won't have in Hadoop because everything gets computed and safe is lazy evaluation.",
            "Has anybody heard of lazy evaluation?",
            "Yeah, sure people.",
            "Lazy evaluation is the way I see it.",
            "Suppose you have an array.",
            "You say I want every element times 2 and then you say I want only the first element.",
            "In lazy evaluation.",
            "A language with save the instruction that says you wanted this array times too, but not do it.",
            "They'll just keep that as a list, and then when you say I only want the element 0, Ashburnham is zero.",
            "It says, oh, you didn't need all of those.",
            "I'm only evaluating the ones that you asked for, so it's lazy evaluations only evaluated once it's needed, which means if you only need a subset, it's much faster 'cause it doesn't have to take any of the accounts.",
            "So it does that, and that improves things if you, especially if you have a pipeline, you can imagine.",
            "OK, I want everything that mentions.",
            "At the International Summer School, the next step is oh, and it has to have the word fantastic in it, right?",
            "Well, half of them aren't necessary.",
            "So in pipelines this could be very useful.",
            "I'd ever done.",
            "The seas keeps track how data is created blah blah blah so.",
            "Better than Hadoop, so I'm not going to worry about how it is going to."
        ],
        [
            "Data spark annual see in Spark that it's it's the same thing as.",
            "As I buy some in terms of.",
            "Masters Workers engine's clients.",
            "So in this case you talk about a driver program and worker programs.",
            "And the driver is the one that sends that tells what to do and send to the workers.",
            "They do it.",
            "There's a second part that is very important and essential in Spark.",
            "Are you so called resilient distributed datasets?",
            "Think of them as distributed files.",
            "And I called our DDS and I'm told him that by their files that are already pre distributed they might live in memory and it probably will until you save them.",
            "But that's essentially their distributed files that probably live in memory.",
            "Already distributed across workers, Brazilian blah blah blah.",
            "So they won't break.",
            "OK, so you want you want to now do something with that file set right so?",
            "First thing you need to do is create the the spark cluster.",
            "Very similar to the Python cluster and then you have to create an RDD or open an existing RDD."
        ],
        [
            "So it has the same kind of.",
            "Feel to it.",
            "There's a cluster manager.",
            "There's a driver program.",
            "Here are workers I put in some sub.",
            "Details here you can have several executers within a worker.",
            "Different tasks at the same time.",
            "If you want that those are all details for for another time."
        ],
        [
            "And then will do and then I will look at Ice Park, which is an interface to spark.",
            "Itself.",
            "In there in my phone now.",
            "How deviate a little bit from not using I Python at all.",
            "Just because it's a little bit more convenient that I Python to start the cluster.",
            "Anne Anne, so that's good for mischief, little time."
        ],
        [
            "And so this should work on your if you if your setup work properly.",
            "This should work if you want to start the setup section, make sure you have this interactive nodes and you've done source setup.",
            "You could source setup Spark but which sets up worker process is Anna Master process.",
            "So it sets up the whole infrastructure on a note this is stand alone.",
            "This is not something you're going to do in production in production.",
            "If European bridges, you'd ask for for some time on their head.",
            "Open source nodes could have dedicated SparkNotes or loop nodes where this stuff is already running.",
            "They probably don't have to do half the things here.",
            "This just runs it.",
            "I wouldn't call it it's real, it's not an emulation, but it runs it locally on the node, and so in your in your dot local or something, there is a local spark installation Now, which you probably want to remove afterwards, but.",
            "So it does that it creates that it created and runs those and now inspired because it's kind of built on Hadoop.",
            "Hadoop is built on Java.",
            "These are Java Ancients rather than Python engines, but we're not going to see any of this because we're good."
        ],
        [
            "Just gotta use it as if they are Python.",
            "So we're going to.",
            "You can change this park directory UCI Python interface and run Python pyspark and you'll get this funny different.",
            "Prompt, which is the I Python prompt, but I pricing plans are numbered.",
            "The reason we're doing I Python is that it automatically loads the spark context.",
            "The spark context is where sort of where we attach to the cluster is kind of like the client in the other case here is called the context."
        ],
        [
            "So here's a little example.",
            "If you want to see if it's working, you could do.",
            "You could import, they get host name from soccer, just see what house you have and this looks complicated.",
            "But if you take it in parts this doesn't MapReduce I take arrange, I'll try to decompose this on the fly, take a range of 5 #0 to 4 and then I say.",
            "Spark context please?",
            "Paralyze this.",
            "This creates one of those are DDS.",
            "It takes this list and spread them out.",
            "OK so like the map for the scatter right?",
            "So scatter then on that I'm going to do a map.",
            "Of the of a functional map was a function that will now act on a piece of information.",
            "In this case I'm going to.",
            "Give it a function.",
            "This is it.",
            "It's in Lambda form, so it means this is an in place function that takes X and returns get host name.",
            "That gets that gets executed on each of them on each of these were called workers, and then I collect everything together and I get all the results.",
            "They're all running on the same machine in this case, so I get the same thing.",
            "If you did this on multiple nodes, you should get different nodes, but."
        ],
        [
            "So a little bit over about our DDS and then over your budget can do and I'll let you go.",
            "So.",
            "All the data should live in the RTD's and what you do is so you can create them.",
            "They don't change, so whenever you manipulate the data you get a new RDD back.",
            "They're lazily evaluated, so this new RTD doesn't really take any space until you do something with it, and if you discarded afterwards, I never take any file space at all.",
            "They can be cashed so you can so you don't have to recompute things, and they can either be data that is just basically in this.",
            "That is distributed or they can have sort of a key key value form so they become a key value store which you get so key value really is you associated value and you give it a label and then you could do things based on that label based on that key.",
            "And that can be useful.",
            "So you could sort things by key and things like that."
        ],
        [
            "Now I think it'll do a pipeline, so you'll create an RDD from some data source.",
            "Could be a text file.",
            "Realist you play?",
            "Transformation, so you do something local to each of them and then you reduce it.",
            "Or you do an action or you get some of the RDD back."
        ],
        [
            "So I'll go through this.",
            "This last example here.",
            "So paralyzed we already saw.",
            "It can take a list, but it can also and then.",
            "Convert it in RDD, which means it will have been distributed over those workers.",
            "I can create something from a file and they can just say OK.",
            "Here's an RDS file, read the file in and distribute.",
            "And what happens with text files that distributes the lines?",
            "So read it line by line and each line goes to a different worker, or transcode wherever sparkses is fit or."
        ],
        [
            "How you have specified?"
        ],
        [
            "OK, so you have your RDD so you have read some some data in.",
            "What do you want to do?",
            "Well, there's a couple of things you can do this thing called mapping, which really in this case means each each element in Rd gets a function applied to it, and that gives you a new result.",
            "Then the result is a new RDD.",
            "You can have a filter or you can say, well, some of them.",
            "I want to keep it out.",
            "It's not based on the condition, so you go over all of them.",
            "Some of them make it out of doubt and you are ready with the subset you can have.",
            "What's called a flat map.",
            "That sounds kind of funny, but if each of these functions were to return a list, what you would get is a collection of list.",
            "But maybe you want one big list, so just concatenates lists.",
            "There's some other things she can see.",
            "What are the distinct values of of your of your list or Russia key values?",
            "You can group by key, so you could take everything that was labeled the same and there's something for that.",
            "You can reduce by key, which is useful if you say want to count the number of times the word whale occurs in the text of Moby Dick.",
            "Sort by sort by key.",
            "Sort of couple of things that you can do to transform transfer means you have an RDD.",
            "You get an RDD back, so these are all lazily evaluated.",
            "Nothing is happens with these until you."
        ],
        [
            "Do an action so an action is either a reduction you.",
            "I think everything up account which is a specialized production.",
            "Obviously you can collect, which means you get everything from all these arteries back as a list in Python.",
            "If this is a big Artie, you don't want to do that.",
            "You could take just three.",
            "If it's an ordered RDD, that means you get the top three so it could be very useful to get the top N numbers.",
            "You can take it ordered.",
            "You can do Mexican men.",
            "The mean standard deviation sum so.",
            "You transform then your performance goals and action that you actually get.",
            "That's when things get evaluated."
        ],
        [
            "Here's a little example, so here's a list of verbs that are paralyzed.",
            "Then I make him into past tense by adding Ed, which doesn't always work in the English language.",
            "This doesn't hasn't done anything, but when I collect, that's when it all gets computed and sent to the master and they get ruined.",
            "The jumped site laughed runedance my lead again.",
            "I can also just take one, so for the original RTD I just take one and they get run back.",
            "I think I'm going to stop here.",
            "There's some more slides.",
            "There's a nice example at the end that counts.",
            "The most common words in the novel Moby Dick.",
            "I'll have you guess which ones are there and that it has all the steps.",
            "And and it's it's fun to play with, but.",
            "That's that's the.",
            "I think that's all we should do this to this day.",
            "Any questions, general or technical?",
            "I'm wondering if.",
            "Or can be used on top of Hadoop because it seems they are doing different things.",
            "If you want to archive data.",
            "I don't know, for example, in example seems that the data is centralized, but then we give it to workers and then we get it back.",
            "But if you want the day to leave on the workers, is it possible with the service?",
            "It depends on how you set it up, but you could you could have.",
            "You could have the file system basically be pre distributed that the things I looked at reading from a text file and then from a list obviously start centrally, but that's not yeah, so spark is built on top of Hadoop, so there there is a beautiful nothing that Hadoop can do that spark into.",
            "Have you?",
            "Do people really speed up, you know, across clusters with large datasets?",
            "I mean, I know that people would say you should look at raw performance, 'cause that's irrelevant.",
            "This is this is there to be allowed to do things easily, but then it should at least go faster if you double the resource is its.",
            "I didn't have time to do that.",
            "Time is as much as it for the other ones and.",
            "The real trouble with this is to find a case that is both large enough to show the benefits and small enough to fit.",
            "And basically I don't have any pictures, right?",
            "Erratically, yes.",
            "'cause you're distributed over more than notes in the communication cost is less than than the work then yes, but.",
            "I think part of it is just the fact that if you have it's data set that's just too big to fit on something, you have no choice and this is a framework.",
            "I think that's the the.",
            "Practical reason, but then people have, but you can do that without a as people have seen.",
            "Yeah, that's no good.",
            "I've got limited by having to write and so.",
            "Yes, this is Mark.",
            "It would be way better off if you have a lot of iterations.",
            "If you go in or if it actually is an iteration or optimization.",
            "You would see definite performance.",
            "Increases.",
            "No questions.",
            "Alright, thank you."
        ]
    ],
    "summarization": {
        "clip_0": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So before we start, if you guys want to try out the executables so the compiled language versions, it turns out there's a typo in the setup scripts.",
                    "label": 0
                },
                {
                    "sent": "Slash should be a period.",
                    "label": 0
                },
                {
                    "sent": "The issues made it so she don't care about the sea important version fine.",
                    "label": 0
                },
                {
                    "sent": "Otherwise just recopy.",
                    "label": 0
                },
                {
                    "sent": "The script that specifically called setup Dash bridges to the.",
                    "label": 0
                },
                {
                    "sent": "This should be the code directory in HPC 5.",
                    "label": 0
                },
                {
                    "sent": "Then and you re run setup you should be OK.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "HB C5 very cold.",
                    "label": 0
                },
                {
                    "sent": "Sorry for that, then you can manage it now.",
                    "label": 0
                },
                {
                    "sent": "Don't do it this coming to me later it's or you can do the whole copying again if if you so desire.",
                    "label": 0
                },
                {
                    "sent": "That's possible to copy the whole directory is in the instructions and I'll get the new version, but.",
                    "label": 0
                },
                {
                    "sent": "OK, where were we?",
                    "label": 0
                },
                {
                    "sent": "Yeah, 100 times faster we should stop right?",
                    "label": 0
                }
            ]
        },
        "clip_1": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Attack.",
                    "label": 0
                },
                {
                    "sent": "That was kind of the equivalent of open MP, right?",
                    "label": 0
                },
                {
                    "sent": "It's on node, shared memory, threaded execution.",
                    "label": 0
                },
                {
                    "sent": "Let's see how close we can get to sort of MPI multiple processes, and there's a couple of ways, and I'm going to show some that are a little bit historic.",
                    "label": 0
                },
                {
                    "sent": "Just because the interface student is still being used in more modern packages.",
                    "label": 0
                },
                {
                    "sent": "So one of these goes in the name of forking.",
                    "label": 1
                }
            ]
        },
        "clip_2": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Which is a typical Linux thing, so not so.",
                    "label": 0
                },
                {
                    "sent": "Not only is it an old way to do things, it's also platform specific.",
                    "label": 1
                },
                {
                    "sent": "The way Linux can start a new process is essentially by cloning an old one, but rather than calling it cloning it 'cause it's working.",
                    "label": 0
                },
                {
                    "sent": "So it sounds like you're making threats, but in fact you're making process is.",
                    "label": 0
                },
                {
                    "sent": "It turns out so you can do this from Python as well.",
                    "label": 0
                },
                {
                    "sent": "Back in around long enough that they wanted to be able to do this, and So what happens when you fork a process is that you will have your.",
                    "label": 0
                },
                {
                    "sent": "That's called the mother process with the parent process and then the child process.",
                    "label": 1
                },
                {
                    "sent": "At first, those two start off in a similar state.",
                    "label": 0
                },
                {
                    "sent": "Some of the resources are the same, but after their fork they can go their own ways.",
                    "label": 0
                },
                {
                    "sent": "The thing is, they don't.",
                    "label": 0
                },
                {
                    "sent": "They don't really.",
                    "label": 0
                },
                {
                    "sent": "Have joining the way threads do.",
                    "label": 0
                },
                {
                    "sent": "These processes could exit separately depending a little bit on how you set it up, all of which are details that I don't really want to go into, but I don't want to give you an example so.",
                    "label": 0
                },
                {
                    "sent": "Here's an example, so you have to call and you don't have to call, so I've got a function here that will be called by the child process, but not apparent, so they're going to process is.",
                    "label": 1
                },
                {
                    "sent": "Then when I start I'm in the parent process.",
                    "label": 1
                },
                {
                    "sent": "All of this is operating systems dependent, so I import OS.",
                    "label": 0
                },
                {
                    "sent": "It's the operating system and I'm going to fork it, and this is kind of funny.",
                    "label": 0
                },
                {
                    "sent": "When?",
                    "label": 0
                },
                {
                    "sent": "Python.",
                    "label": 0
                },
                {
                    "sent": "It's this fork.",
                    "label": 1
                },
                {
                    "sent": "Suddenly there are two processes, both of which continue at that point, so it is very open and be like, but they are processes.",
                    "label": 0
                },
                {
                    "sent": "So how?",
                    "label": 0
                },
                {
                    "sent": "Wood.",
                    "label": 1
                },
                {
                    "sent": "Those processes know whether they are the child or the parents, because they start off as being identical, and so the way they find it out is by the return value from this OS for function.",
                    "label": 0
                },
                {
                    "sent": "When that return value is 0.",
                    "label": 0
                },
                {
                    "sent": "They are the child when it's not that return value is actually the PID.",
                    "label": 1
                },
                {
                    "sent": "The process identifier of the child, so.",
                    "label": 0
                },
                {
                    "sent": "It's a very low level way of doing it, and it's kind of how Linux does it under the hood.",
                    "label": 0
                },
                {
                    "sent": "At.",
                    "label": 0
                },
                {
                    "sent": "But it's a way that you could use it also invite so this is the you're not going to do this, But this is this is but you have seen this model but you have a parent process.",
                    "label": 0
                },
                {
                    "sent": "It's bombs or Forks off a child.",
                    "label": 0
                },
                {
                    "sent": "The child can do one thing that parents could do something else.",
                    "label": 0
                },
                {
                    "sent": "Communication been created, two is cumbersome.",
                    "label": 0
                },
                {
                    "sent": "They kind of share what they had in common before, but they don't share anything you, so it's a very annoying way to program.",
                    "label": 0
                },
                {
                    "sent": "And while you can do it, it's typically not something you do.",
                    "label": 0
                }
            ]
        },
        "clip_3": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "At so, if you were to run it, you'd see get a hello from the parent and the parent knows who's child who is the child and the child gives its pid and actually keeps doing that until you press Q.",
                    "label": 0
                },
                {
                    "sent": "So this raw input if you've never seen it, input from the command line.",
                    "label": 0
                }
            ]
        },
        "clip_4": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So you could even do completely different code run by the child.",
                    "label": 0
                },
                {
                    "sent": "There's a function for that called X LP.",
                    "label": 0
                },
                {
                    "sent": "This executes a completely new process, so since it's not set, not said that it starts as Python.",
                    "label": 0
                },
                {
                    "sent": "This process could be, you know, your web browser.",
                    "label": 0
                },
                {
                    "sent": "For all it knows, so if it isn't by some process, you have to give it.",
                    "label": 0
                },
                {
                    "sent": "Tell it that it is a Python process and you have to give it a name.",
                    "label": 0
                },
                {
                    "sent": "It makes sense to have approaches have the name of the executable, but this is actually not mandatory.",
                    "label": 0
                },
                {
                    "sent": "So you can do kind of fancy things.",
                    "label": 0
                },
                {
                    "sent": "By their very low level.",
                    "label": 0
                },
                {
                    "sent": "You you do not want to do this and the reason that.",
                    "label": 0
                },
                {
                    "sent": "The reason that all these frameworks exists for parallel programming for motes are because this is just.",
                    "label": 0
                }
            ]
        },
        "clip_5": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Not very nice if you're going to use it.",
                    "label": 1
                },
                {
                    "sent": "Just make sure that you wait for your children to finish before you kill yourself.",
                    "label": 1
                },
                {
                    "sent": "See these analogies at some point, just stop right.",
                    "label": 0
                },
                {
                    "sent": "They can call them parents and children and then send some of the things that you do to them make you go.",
                    "label": 0
                },
                {
                    "sent": "This should stop.",
                    "label": 0
                },
                {
                    "sent": "Let's just call him something else but alright.",
                    "label": 0
                },
                {
                    "sent": "I also make sure that you call OS Dot_exit when you exit Ng from the child, otherwise you actually clean up every every possible resource, some of which might still be used by your parents.",
                    "label": 1
                },
                {
                    "sent": "So you can imagine that using fork is just a hard way to go about, but it is.",
                    "label": 0
                }
            ]
        },
        "clip_6": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Still with what is happening under the hood, often right?",
                    "label": 0
                },
                {
                    "sent": "So when when you have approaches that sponsors other process, it is doing that so it's nice, nice to know, but.",
                    "label": 0
                },
                {
                    "sent": "You're not gonna really do that.",
                    "label": 0
                },
                {
                    "sent": "So little tricky.",
                    "label": 0
                }
            ]
        },
        "clip_7": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So, but it's a way to use.",
                    "label": 0
                },
                {
                    "sent": "Process is and it's it's the most low level way and you could build up anything from there if you wanted to see a few things that are built up where you don't have to worry about these things.",
                    "label": 0
                },
                {
                    "sent": "So that would so from that we could build an MPI implementation and just go about.",
                    "label": 0
                },
                {
                    "sent": "So some of you could base their PhD doing that.",
                    "label": 0
                },
                {
                    "sent": "Don't do that already done, but before we go into how that works, let's look at the other possibility of making threats.",
                    "label": 0
                },
                {
                    "sent": "So we start threads within a mix, but it was only in that expression.",
                    "label": 0
                },
                {
                    "sent": "How about threads in Python?",
                    "label": 1
                },
                {
                    "sent": "Does bison have threads?",
                    "label": 0
                },
                {
                    "sent": "Who here thinks that my son has threats?",
                    "label": 0
                },
                {
                    "sent": "But you're wrong.",
                    "label": 0
                },
                {
                    "sent": "It does have friends.",
                    "label": 0
                }
            ]
        },
        "clip_8": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "South threats are light armor lightweights.",
                    "label": 0
                },
                {
                    "sent": "They're not there, they follow the same sort of spawning ideas as four, but if they're still part of the same process, that's why they can still share memory among one one another.",
                    "label": 1
                },
                {
                    "sent": "And that's why they're a little bit easier to program.",
                    "label": 0
                },
                {
                    "sent": "Python comes with a fully fledged.",
                    "label": 1
                },
                {
                    "sent": "Thread mechanism and the threads share the same memory space so they can address space.",
                    "label": 1
                },
                {
                    "sent": "I mean that you can see the same variables very easy to communicate, you just put something in a variable.",
                    "label": 0
                },
                {
                    "sent": "The other thread checks if it's there.",
                    "label": 0
                },
                {
                    "sent": "Wonderful so you think, well, let's just bomb threats and then how do we do?",
                    "label": 0
                }
            ]
        },
        "clip_9": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Well, I mean OK, so some more about spreads, lightweights, simpler to program, share memory.",
                    "label": 1
                },
                {
                    "sent": "The way threads have been written and baked into the Python language and their portables.",
                    "label": 0
                },
                {
                    "sent": "Now you're not just restricted to Linux.",
                    "label": 0
                },
                {
                    "sent": "Also good.",
                    "label": 0
                }
            ]
        },
        "clip_10": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So here's how you would use it and I just realized that this is oddly factor.",
                    "label": 0
                },
                {
                    "sent": "The serial version is in is the last one here, but they're all.",
                    "label": 0
                },
                {
                    "sent": "So this is.",
                    "label": 0
                },
                {
                    "sent": "These are two codes are both called a function called my summer.",
                    "label": 0
                },
                {
                    "sent": "Summer, because it's a summer school here, they just do some counting.",
                    "label": 0
                },
                {
                    "sent": "It counts.",
                    "label": 0
                },
                {
                    "sent": "From start to stop at the serial version doesn't do much.",
                    "label": 0
                },
                {
                    "sent": "The threads are actually not there.",
                    "label": 0
                },
                {
                    "sent": "This should be gone and it just.",
                    "label": 0
                },
                {
                    "sent": "Counts to what it is.",
                    "label": 0
                },
                {
                    "sent": "550 million about 10 times and sees how how long that is.",
                    "label": 0
                },
                {
                    "sent": "The threaded version uses threads, so the way that goes is.",
                    "label": 0
                },
                {
                    "sent": "Similar to the forking, where you basically say OK, I'm rather than four to say start a thread.",
                    "label": 0
                },
                {
                    "sent": "Or I should create a thread.",
                    "label": 0
                },
                {
                    "sent": "The thread is given a function so Spencer lightweights are not full fledged.",
                    "label": 0
                },
                {
                    "sent": "Full fledged process is and you can kind of see it because when you give them to execute is a function is like a function call as.",
                    "label": 0
                },
                {
                    "sent": "So this function is called my my summer that target means what function is.",
                    "label": 0
                },
                {
                    "sent": "Is there going to call?",
                    "label": 0
                },
                {
                    "sent": "What are the arguments to that function?",
                    "label": 0
                },
                {
                    "sent": "Then I'm putting that that in a list and I'm starting the thread so T is a handle on that thread.",
                    "label": 0
                },
                {
                    "sent": "It's been prepared here but it's not running yet.",
                    "label": 0
                },
                {
                    "sent": "Then I appended to a list because I want to keep track of it and I started and then S as it started.",
                    "label": 0
                },
                {
                    "sent": "I'll just wait.",
                    "label": 0
                },
                {
                    "sent": "4 hours and finish in this joint.",
                    "label": 0
                },
                {
                    "sent": "So this is an explicit way of doing spawning threads and joining them together.",
                    "label": 0
                },
                {
                    "sent": "If you follow the classical track, your only parallel starts this and you only end parallel is to join.",
                    "label": 0
                },
                {
                    "sent": "This is not OK, so this way of programming.",
                    "label": 0
                },
                {
                    "sent": "But then in C, is the way you used to have to do threaded programming.",
                    "label": 0
                },
                {
                    "sent": "A little bit more elaborate.",
                    "label": 0
                },
                {
                    "sent": "As you can see.",
                    "label": 0
                },
                {
                    "sent": "But you're starting two threads.",
                    "label": 0
                },
                {
                    "sent": "One is 1 is executing my summer on that thread and the other is doing.",
                    "label": 0
                },
                {
                    "sent": "What's doing?",
                    "label": 0
                },
                {
                    "sent": "Where is it?",
                    "label": 0
                },
                {
                    "sent": "What you doing be doing it somewhere else too.",
                    "label": 0
                },
                {
                    "sent": "So which one is faster, you think?",
                    "label": 0
                },
                {
                    "sent": "Spread it cereal.",
                    "label": 0
                },
                {
                    "sent": "I got it, I got.",
                    "label": 0
                }
            ]
        },
        "clip_11": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So some people have looked at, I'm sure, so the serial is faster.",
                    "label": 0
                },
                {
                    "sent": "11 seconds versus 38 seconds.",
                    "label": 0
                }
            ]
        },
        "clip_12": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So more complicated and slower.",
                    "label": 0
                },
                {
                    "sent": "Now many open MP.",
                    "label": 0
                },
                {
                    "sent": "Attempts our parallelization stems with shared memory start off in this exact spot, you take a serial code.",
                    "label": 1
                },
                {
                    "sent": "You had some open MP pragmas.",
                    "label": 0
                },
                {
                    "sent": "Sexy true for open SC2.",
                    "label": 0
                },
                {
                    "sent": "Had an open seat bregma and your program actually becomes slower.",
                    "label": 0
                },
                {
                    "sent": "So you follow the advice of the classical or accelerator track and you work on it and you notice the bottlenecks you removed him and now is faster.",
                    "label": 0
                },
                {
                    "sent": "Not so in Python.",
                    "label": 0
                },
                {
                    "sent": "In Python it's impossible to make this any faster.",
                    "label": 0
                },
                {
                    "sent": "It turns out Python, or at least C Python, which is the one that everybody uses, has a thing called the global interpreter lock.",
                    "label": 1
                },
                {
                    "sent": "So I think it's an interpreter.",
                    "label": 0
                },
                {
                    "sent": "Only one Python is running.",
                    "label": 0
                },
                {
                    "sent": "There might be separate separate threads, but only one Python is running only one interpret, so.",
                    "label": 0
                },
                {
                    "sent": "This interpreter basically can only do one thing at a time.",
                    "label": 1
                },
                {
                    "sent": "It will not respond to instruction the same time.",
                    "label": 1
                },
                {
                    "sent": "This is not a restriction on the Python language, it's a restriction on the Python implementation, but it's normal Mass Effect, so only one.",
                    "label": 0
                },
                {
                    "sent": "So what you get with the threading is a nice interleaving.",
                    "label": 0
                },
                {
                    "sent": "Of the.",
                    "label": 1
                },
                {
                    "sent": "Of the of the statements in in both threads, but not a simelton activity.",
                    "label": 0
                },
                {
                    "sent": "This could still be useful.",
                    "label": 0
                },
                {
                    "sent": "Say you're writing a GUI and it has to be responsive, so you don't want it to wait for that graphics to be plotted.",
                    "label": 0
                },
                {
                    "sent": "Value click on other things, the threads will interleave the drawing and checking for mouse clicks.",
                    "label": 0
                },
                {
                    "sent": "Enter OK.",
                    "label": 0
                },
                {
                    "sent": "It can be useful right for writing out to disk that happens behind the scenes once you've set right, and so that you can do in a thread.",
                    "label": 0
                },
                {
                    "sent": "But the stuff we want to do, you cannot.",
                    "label": 0
                }
            ]
        },
        "clip_13": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So those were 2 ways that you can use cents an you can use process is that I would advise against threading is just slow.",
                    "label": 0
                },
                {
                    "sent": "An forking is just rather inconvenient, so.",
                    "label": 0
                },
                {
                    "sent": "The next the next item on the list.",
                    "label": 0
                },
                {
                    "sent": "Is a package that kind of combines both and tries to make things workable and it's called.",
                    "label": 0
                }
            ]
        },
        "clip_14": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Multi processing.",
                    "label": 0
                },
                {
                    "sent": "It works on windows too, so that is good for portability anyway.",
                    "label": 0
                },
                {
                    "sent": "It's what it does it it creates processes that makes them seem like friends.",
                    "label": 0
                },
                {
                    "sent": "So because it has just found out process is as far or start postseason.",
                    "label": 0
                },
                {
                    "sent": "Forking process is a little bit more expensive than spawning threads takes a little bit more time to spawn these or to create these, but it creates multiple processes.",
                    "label": 0
                },
                {
                    "sent": "On a single node anchor, and there's a way for them to share memory.",
                    "label": 0
                },
                {
                    "sent": "Racist.",
                    "label": 0
                }
            ]
        },
        "clip_15": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And this is really the reason why I showed the threads in the 1st place because the interface to these processes has been modeled.",
                    "label": 0
                },
                {
                    "sent": "To look like that of threads so you spawn process is, which is something you normally don't say in the multi processing module.",
                    "label": 0
                },
                {
                    "sent": "And so I've got my my my my summer here again.",
                    "label": 0
                },
                {
                    "sent": "I'm going to time things I'm going to collect all the process is in an array and then start like with threads.",
                    "label": 0
                },
                {
                    "sent": "I create a process but I'm just preparing it so I'm running it.",
                    "label": 0
                },
                {
                    "sent": "It's just sort of a.",
                    "label": 0
                },
                {
                    "sent": "This is what I intend to do.",
                    "label": 0
                },
                {
                    "sent": "My summer is the functionality calling the arguments are here again and they add this pre packaged task if you want to a list and then I started.",
                    "label": 0
                },
                {
                    "sent": "And then I'm going to wait for all processes and join them together.",
                    "label": 0
                },
                {
                    "sent": "So I don't know if you remember what the time was before, but it was something like 11 seconds.",
                    "label": 0
                },
                {
                    "sent": "This multi processing takes.",
                    "label": 0
                },
                {
                    "sent": "Porn 12 seconds.",
                    "label": 0
                },
                {
                    "sent": "That seems unlikely.",
                    "label": 0
                },
                {
                    "sent": "Wow fantastic.",
                    "label": 0
                },
                {
                    "sent": "OK so.",
                    "label": 0
                },
                {
                    "sent": "It's Frances expenses process is.",
                    "label": 0
                },
                {
                    "sent": "Anne Anne, give him stuff to do.",
                    "label": 0
                },
                {
                    "sent": "It's still kind of low level right?",
                    "label": 0
                },
                {
                    "sent": "You have to give them a function to do.",
                    "label": 0
                },
                {
                    "sent": "You probably will give different arguments and that's the way that you can have different threads to different things and it doesn't look anything like like a pragma or or directive based approach.",
                    "label": 0
                },
                {
                    "sent": "It still looks very much like threading.",
                    "label": 0
                },
                {
                    "sent": "But at least it works everywhere and ends.",
                    "label": 0
                },
                {
                    "sent": "You can you can use shared memory.",
                    "label": 0
                }
            ]
        },
        "clip_16": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "Sharing memory is done by using some special database.",
                    "label": 0
                },
                {
                    "sent": "Value an array.",
                    "label": 0
                },
                {
                    "sent": "So we have this special days that cold process that I used to create process is a value can store a value and when you give it as an argument to another multi process it can access that same variable and they share the same memory.",
                    "label": 0
                },
                {
                    "sent": "So in essence you have a shared variable this shared variable.",
                    "label": 0
                },
                {
                    "sent": "So here the shared variables V. The thing was valid with these shared very shared variables as well as a race is there they are strongly typed, so other than is different than another Python.",
                    "label": 0
                },
                {
                    "sent": "Variables you have to say what kind of type it is.",
                    "label": 0
                },
                {
                    "sent": "So in this case I want an integer to be shared and that's what his eye is doing here.",
                    "label": 0
                },
                {
                    "sent": "So this creates a value of type integer zero.",
                    "label": 0
                },
                {
                    "sent": "It breaks a little bit the pythonic nature, but if you want to share memory, you gotta know what how big it is.",
                    "label": 0
                },
                {
                    "sent": "And so I guess that's that was the compromise.",
                    "label": 0
                },
                {
                    "sent": "Dress is the same in that I have a function.",
                    "label": 0
                },
                {
                    "sent": "That will be passed.",
                    "label": 0
                },
                {
                    "sent": "His V is variable, and so to access the value of the variable, I have to say V dot value.",
                    "label": 0
                },
                {
                    "sent": "So think of this.",
                    "label": 0
                },
                {
                    "sent": "This shared variable this value with capital value as a sort of wrapper in which the value lives are image appointed, evaluates.",
                    "label": 0
                },
                {
                    "sent": "So I can do this.",
                    "label": 0
                },
                {
                    "sent": "I can pass them also here 10 processes are started.",
                    "label": 0
                },
                {
                    "sent": "They will.",
                    "label": 0
                },
                {
                    "sent": "Sleep for a little while and adds 52 to value.",
                    "label": 0
                },
                {
                    "sent": "So I've got 10 processes adding.",
                    "label": 0
                },
                {
                    "sent": "50 * 1 So.",
                    "label": 0
                },
                {
                    "sent": "How much should I get at the end but should evaluate at the end if 10 process is count to 50?",
                    "label": 0
                },
                {
                    "sent": "500 right?",
                    "label": 0
                }
            ]
        },
        "clip_17": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Here, so it's pretty fast.",
                    "label": 0
                },
                {
                    "sent": "I'll give it that.",
                    "label": 0
                },
                {
                    "sent": "OK, .12 seconds, but 480 oh OK, closer now we're not scientists are or it's most of us are not good enough.",
                    "label": 0
                },
                {
                    "sent": "What we have is race condition.",
                    "label": 0
                },
                {
                    "sent": "If a if you've done the classical traction, you should have realized that if not, you really said now as to what happens is this process is there are all writing to the same value in the same location in memory at the same time.",
                    "label": 0
                },
                {
                    "sent": "Some are sooner or later.",
                    "label": 0
                },
                {
                    "sent": "Some overlap while they write an in true.",
                    "label": 0
                },
                {
                    "sent": "Race condition spirit.",
                    "label": 0
                },
                {
                    "sent": "The result is less than you expect.",
                    "label": 0
                }
            ]
        },
        "clip_18": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "This can be hard to find, but it can be fixed.",
                    "label": 0
                },
                {
                    "sent": "We have to fix the fact that we are accessing this memory.",
                    "label": 0
                },
                {
                    "sent": "From all the processes at the same time, something has to make sure that only one does it at the same time.",
                    "label": 0
                }
            ]
        },
        "clip_19": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And so there's a lock.",
                    "label": 0
                },
                {
                    "sent": "So this becomes a little bit more cumbersome, but this this like things like that.",
                    "label": 0
                },
                {
                    "sent": "It would have to be done in shared memory every now and then.",
                    "label": 0
                },
                {
                    "sent": "Anyway.",
                    "label": 0
                },
                {
                    "sent": "You can create a lock, you give the lock also as an argument, and now the first thing you do when you want to update the function that the value is you will lock it and there this is a shorthand that is very useful to open and close a luxury or to grab a lot really.",
                    "label": 0
                },
                {
                    "sent": "Makes it very easy.",
                    "label": 0
                },
                {
                    "sent": "This is going to be slow though.",
                    "label": 0
                },
                {
                    "sent": "Right, typically it's not so bad, but it's going to be having all this locking going on is definitely going to hamper things and all the things you've learned about shared memory programming.",
                    "label": 0
                },
                {
                    "sent": "If you followed the classical track you should apply like you should use local variables etc and none of the nice cities of open MP are there, so this is still fairly low level or I shouldn't say low level.",
                    "label": 0
                },
                {
                    "sent": "This is fairly hands off, right?",
                    "label": 0
                }
            ]
        },
        "clip_20": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Then there are a similar thing holds for arrays.",
                    "label": 0
                },
                {
                    "sent": "An just give it a.",
                    "label": 0
                },
                {
                    "sent": "An umpire a.",
                    "label": 0
                },
                {
                    "sent": "You say what?",
                    "label": 0
                },
                {
                    "sent": "What type it is double precision in this case, and they can just use that array as a shared variable very much as a value.",
                    "label": 0
                },
                {
                    "sent": "Again, it's typed, but so were known by arrays, so that actually matches quite nicely.",
                    "label": 0
                },
                {
                    "sent": "Sharing empire.",
                    "label": 0
                },
                {
                    "sent": "Race is not a problem here.",
                    "label": 0
                },
                {
                    "sent": "The big downside though, is that you can only share one of the arrays that is.",
                    "label": 0
                },
                {
                    "sent": "At the capital, A array is is a one the array, which is a bit unfortunate.",
                    "label": 0
                }
            ]
        },
        "clip_21": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So this one changes the sign of all of the.",
                    "label": 0
                },
                {
                    "sent": "Variables.",
                    "label": 0
                },
                {
                    "sent": "One per process.",
                    "label": 0
                },
                {
                    "sent": "The best use of.",
                    "label": 0
                },
                {
                    "sent": "Multiple horsemen.",
                    "label": 0
                }
            ]
        },
        "clip_22": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "And then there's a whole bunch of other stuff you can do.",
                    "label": 0
                },
                {
                    "sent": "There's ways to actually have these processes run on different nodes.",
                    "label": 0
                },
                {
                    "sent": "I'm not even quite sure what it does with failures in the race.",
                    "label": 0
                },
                {
                    "sent": "I'd have to look that up.",
                    "label": 0
                },
                {
                    "sent": "You can do some event driven programming with multiprocessing.",
                    "label": 1
                },
                {
                    "sent": "Other events and conditions were synchronized.",
                    "label": 0
                },
                {
                    "sent": "Process is at.",
                    "label": 0
                },
                {
                    "sent": "I don't have the time to go into all of them today, given that it's already a fairly.",
                    "label": 0
                },
                {
                    "sent": "Laborious paid to do things, but this is the.",
                    "label": 0
                },
                {
                    "sent": "The best.",
                    "label": 0
                },
                {
                    "sent": "But last lists convenient way.",
                    "label": 0
                },
                {
                    "sent": "Forking restricted to Linux, an another little clumsy threads, just not implemented well enough to give you any speed up.",
                    "label": 1
                },
                {
                    "sent": "An multiprocessing is is the marriage of the two.",
                    "label": 0
                }
            ]
        },
        "clip_23": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "What about MPI?",
                    "label": 0
                },
                {
                    "sent": "I heard everybody ask.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "For some reason MPI is perfectly supported in Python And I'll show you how.",
                    "label": 0
                },
                {
                    "sent": "Yet very rarely used.",
                    "label": 0
                },
                {
                    "sent": "Now.",
                    "label": 0
                },
                {
                    "sent": "We know Python is a little bit.",
                    "label": 0
                },
                {
                    "sent": "An elaborate right, you gotta know where all your messages go, where they go.",
                    "label": 0
                },
                {
                    "sent": "You gotta make sure you don't have deadlocks.",
                    "label": 0
                },
                {
                    "sent": "All of that.",
                    "label": 0
                },
                {
                    "sent": "There's a buffers or not buffering, and all these things are coming to play.",
                    "label": 0
                },
                {
                    "sent": "Yes, and I guess maybe people don't like it because Python is supposed to be easy.",
                    "label": 0
                },
                {
                    "sent": "But then multi processing doesn't make it that easy either so.",
                    "label": 0
                }
            ]
        },
        "clip_24": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Let's look at this.",
                    "label": 0
                },
                {
                    "sent": "And see how it goes.",
                    "label": 0
                },
                {
                    "sent": "'cause once you know MPI already.",
                    "label": 0
                },
                {
                    "sent": "The Python API is actually very nice, a very elegant.",
                    "label": 0
                },
                {
                    "sent": "For those of you that did the accelerator track, another little rusty on the MPI MPI send from message passing interface and it's a CF API, so you can pull it just functions in C and Fortran and.",
                    "label": 1
                },
                {
                    "sent": "Can super sparse sort of derived from.",
                    "label": 0
                },
                {
                    "sent": "See also from C++ whenever you want to get message from one process to the other, you send that message.",
                    "label": 0
                },
                {
                    "sent": "So sends a message.",
                    "label": 0
                },
                {
                    "sent": "That's what I mean.",
                    "label": 0
                },
                {
                    "sent": "With messages, it's data that's being transferred.",
                    "label": 0
                },
                {
                    "sent": "What you need to do?",
                    "label": 0
                },
                {
                    "sent": "To run MPI.",
                    "label": 0
                },
                {
                    "sent": "So complete.",
                    "label": 0
                },
                {
                    "sent": "Mining should not be an issue because Python is not compiled language, but to run it would still have to start.",
                    "label": 0
                },
                {
                    "sent": "Your process is and know where they are.",
                    "label": 1
                },
                {
                    "sent": "So you have to set up your processor by running them through MPI Runner MPI.",
                    "label": 0
                },
                {
                    "sent": "Exact depending on your MPI implementation and see how many you want and what notes there on, although usually that's automatic.",
                    "label": 1
                },
                {
                    "sent": "Right, and then within the code you typically have to do MPI init.",
                    "label": 0
                },
                {
                    "sent": "Basically, to gather the troops and they already know where everybody is.",
                    "label": 0
                },
                {
                    "sent": "And it is still, and so look I'm using low level here.",
                    "label": 0
                },
                {
                    "sent": "A little bit wrong.",
                    "label": 0
                },
                {
                    "sent": "It's explicit in what gets end where, right?",
                    "label": 0
                }
            ]
        },
        "clip_25": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Now, here's MPI for buy and it's it's a wrapper around the MPI library that it can do all the point to point communications, some collectives.",
                    "label": 1
                },
                {
                    "sent": "Anne.",
                    "label": 0
                },
                {
                    "sent": "Now we can see you wrote that the scientists wrote this.",
                    "label": 0
                },
                {
                    "sent": "It is compatible.",
                    "label": 0
                },
                {
                    "sent": "NUM, py and we'll see that if you don't use known by array, it's actually just certain amount of overhead of doing this, but.",
                    "label": 0
                },
                {
                    "sent": "Essentially it's a wrapper.",
                    "label": 0
                },
                {
                    "sent": "To know who here did the classical truck.",
                    "label": 0
                },
                {
                    "sent": "So so most of you have an idea about MPI does and how, and they all should should know a little bit anyway.",
                    "label": 0
                },
                {
                    "sent": "See where I was going here?",
                    "label": 0
                }
            ]
        },
        "clip_26": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Yeah, so she don't.",
                    "label": 0
                },
                {
                    "sent": "This is what it looks like in C++.",
                    "label": 0
                },
                {
                    "sent": "Get your init, get your rank in size.",
                    "label": 0
                },
                {
                    "sent": "Where am I?",
                    "label": 0
                },
                {
                    "sent": "How many?",
                    "label": 0
                },
                {
                    "sent": "How many are there in this particular little code in C or I think it's 2 plus plus we don't know where it said that 'cause it looks very much so.",
                    "label": 0
                },
                {
                    "sent": "This is why I see out is something that's too plus plus.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "This is a code that sends each process sends the rank to the process left of it or underneath it of lower rank.",
                    "label": 0
                },
                {
                    "sent": "So I've got a bunch of processes.",
                    "label": 0
                },
                {
                    "sent": "Each node I rank.",
                    "label": 0
                },
                {
                    "sent": "And they just tell their rank too.",
                    "label": 0
                },
                {
                    "sent": "The neighbor, hence this and received left, writes all your regular stuff and it tells you who they are, right neighbors.",
                    "label": 0
                }
            ]
        },
        "clip_27": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Looks the same in Fortran.",
                    "label": 0
                },
                {
                    "sent": "And it's come rank comcis send receive.",
                    "label": 0
                },
                {
                    "sent": "If we had to finalize.",
                    "label": 0
                },
                {
                    "sent": "So what does it look like in Python?",
                    "label": 0
                }
            ]
        },
        "clip_28": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "That's it.",
                    "label": 0
                },
                {
                    "sent": "The convenience and conciseness and clarity of Python is present in the MPI four PY interface, and it's quite nice.",
                    "label": 1
                },
                {
                    "sent": "It's actually very nice if you ever have to teach MPI to people that don't know compiled languages but know some Python And they want to know why.",
                    "label": 0
                },
                {
                    "sent": "Or how?",
                    "label": 0
                },
                {
                    "sent": "It's pretty convenient.",
                    "label": 0
                },
                {
                    "sent": "OK, so how can I do that?",
                    "label": 0
                },
                {
                    "sent": "Why is it so short?",
                    "label": 0
                },
                {
                    "sent": "And it's it's partly because a lot of the.",
                    "label": 0
                },
                {
                    "sent": "Things you have to do in MPI revolve around specifying your data types, how many elements you have, setting up buffers, all that.",
                    "label": 1
                },
                {
                    "sent": "Ann, you have to specify the data type because it's the library, so the library can't look into your C or FORTRAN code and see, oh, this was a variable of that in that type.",
                    "label": 0
                },
                {
                    "sent": "It's too late.",
                    "label": 0
                },
                {
                    "sent": "It has to know that type when you call the function.",
                    "label": 0
                },
                {
                    "sent": "But nothing is different by some can detect what type it is.",
                    "label": 0
                },
                {
                    "sent": "Their design is.",
                    "label": 0
                },
                {
                    "sent": "The type is sort of hanging on to the data, right?",
                    "label": 0
                },
                {
                    "sent": "So we shouldn't have to specify what type it is, and in fact we don't.",
                    "label": 0
                },
                {
                    "sent": "Same for arrays.",
                    "label": 0
                },
                {
                    "sent": "Python perfect is perfectly capable of seeing how big an arrays.",
                    "label": 0
                },
                {
                    "sent": "So if I give an array also, they should just send that array.",
                    "label": 1
                },
                {
                    "sent": "I shouldn't have to say how many animals in their life and already knows.",
                    "label": 0
                },
                {
                    "sent": "In addition, Python is object oriented, which gives it gives a slightly nicer flavor.",
                    "label": 0
                },
                {
                    "sent": "If anybody else you have ever looked at the C++ bindings of MPI when they were still alive, they looked similar to this.",
                    "label": 0
                },
                {
                    "sent": "And there's there's a nice to do that so.",
                    "label": 1
                },
                {
                    "sent": "Getting to rank I do to get rank again, this that's called com rank would get rank here.",
                    "label": 0
                },
                {
                    "sent": "But rather than having to put it in a variable I just assign it so I get the rank and it becomes a variable say with the size right left is no different and then send receive.",
                    "label": 0
                },
                {
                    "sent": "Look how simple that became.",
                    "label": 0
                },
                {
                    "sent": "The rank R which is supposed to rank of my right neighbor I guess bye.",
                    "label": 0
                },
                {
                    "sent": "Sending my rank to the left and getting something from the source to the right.",
                    "label": 1
                },
                {
                    "sent": "And under specified, a rank was an integer.",
                    "label": 1
                },
                {
                    "sent": "I get it.",
                    "label": 0
                },
                {
                    "sent": "I get the rank are out there, don't have to put it in a buffer.",
                    "label": 0
                },
                {
                    "sent": "And I don't even have to put tags, and I can't put tags in.",
                    "label": 0
                },
                {
                    "sent": "If you remember the actual MPI, I can the default in MPF replies.",
                    "label": 0
                },
                {
                    "sent": "Just have to tag to be 0.",
                    "label": 0
                },
                {
                    "sent": "Half the time they're not used, and since you can have optional arguments in Python, they use that for this.",
                    "label": 0
                },
                {
                    "sent": "That's cute, right?",
                    "label": 0
                },
                {
                    "sent": "How can it be so nice?",
                    "label": 0
                },
                {
                    "sent": "Something must be up right?",
                    "label": 0
                },
                {
                    "sent": "And something is a little bit up.",
                    "label": 1
                },
                {
                    "sent": "Every effort by does to send this message is it it Pickles it.",
                    "label": 0
                },
                {
                    "sent": "Anyone here know what pickling is?",
                    "label": 0
                },
                {
                    "sent": "Alright, so let me explain.",
                    "label": 0
                },
                {
                    "sent": "Pickling is intended as a way of saving or serializing an object so that it can be anything in Python can be a list.",
                    "label": 0
                },
                {
                    "sent": "It could be hierarchy of list, it could be an integer.",
                    "label": 0
                },
                {
                    "sent": "How about if you want to save that and you don't know what the length is of it?",
                    "label": 0
                },
                {
                    "sent": "There's a way to encode that.",
                    "label": 0
                },
                {
                    "sent": "Just me in a way that you could read it back.",
                    "label": 0
                },
                {
                    "sent": "So it basically translates whatever data structure you have.",
                    "label": 0
                },
                {
                    "sent": "Ghost, which reverses it somehow and makes it into a string.",
                    "label": 0
                },
                {
                    "sent": "Literally, it's it's pretty much a strict.",
                    "label": 0
                },
                {
                    "sent": "That string into.",
                    "label": 0
                },
                {
                    "sent": "A file and then you could read it up.",
                    "label": 0
                },
                {
                    "sent": "So that means that any object you have in Python you can save it to a file as ethical and they could read it in and it becomes that same object again.",
                    "label": 0
                },
                {
                    "sent": "It could be any kind of structure, doesn't really matter.",
                    "label": 0
                },
                {
                    "sent": "You can't have an open file handle and hope it's still open, but that data structures, yes, right?",
                    "label": 0
                },
                {
                    "sent": "That's nice and every effort by just uses that if I can do that with any object or virtually any object, whatever object I give to amplify it just turns it into a pickle and then sends that pickle over.",
                    "label": 0
                },
                {
                    "sent": "OK.",
                    "label": 1
                },
                {
                    "sent": "But pickling isn't isn't free.",
                    "label": 0
                },
                {
                    "sent": "Pickling is like writing in ASCII.",
                    "label": 0
                },
                {
                    "sent": "If you have binary data or compressing your data, it takes computation.",
                    "label": 1
                },
                {
                    "sent": "So for small messages this is probably a negligible amount.",
                    "label": 0
                },
                {
                    "sent": "But if you have a million doubles to send over.",
                    "label": 0
                },
                {
                    "sent": "Pickling them is like making them into an ASCII form and it can take like 100 times more than if you don't have to do this so.",
                    "label": 0
                },
                {
                    "sent": "So that's kind of the downside.",
                    "label": 0
                }
            ]
        },
        "clip_29": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Of course, for every downside there's an upside.",
                    "label": 0
                },
                {
                    "sent": "At with NUM Py you can you could you don't have to do this in the sense NUM PY arrays are perfectly suited to be sent by MPI.",
                    "label": 1
                },
                {
                    "sent": "MPI wants to know where your buffer starts and how many are because that buffer should be contiguous.",
                    "label": 0
                },
                {
                    "sent": "At least in the simplest case, and this is what number race too.",
                    "label": 0
                },
                {
                    "sent": "So there's a special.",
                    "label": 0
                },
                {
                    "sent": "Extra interface to MPI for \u03c0.",
                    "label": 0
                },
                {
                    "sent": "That takes a NUM PY arrays and sends them as it's so you don't have this overhead of having to pickle them.",
                    "label": 1
                },
                {
                    "sent": "And so in this in this case, that communication is going to be almost as fast as if you sent the MPI.",
                    "label": 0
                },
                {
                    "sent": "Directly in in C or Fortran.",
                    "label": 0
                },
                {
                    "sent": "There is a slight downside because now you do have to pre allocate buffers so nothing is for free.",
                    "label": 1
                }
            ]
        },
        "clip_30": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "OK, so we have an example.",
                    "label": 0
                },
                {
                    "sent": "Off of how you would use this.",
                    "label": 0
                },
                {
                    "sent": "And this example computes the area under the curve.",
                    "label": 1
                },
                {
                    "sent": "I had this example already, so I know that the integral that is this.",
                    "label": 0
                },
                {
                    "sent": "This is your gift.",
                    "label": 1
                },
                {
                    "sent": "The exact answer of 8.175 and I'm going to compute this doing a uniform grid and computing the sum of those things times the DX etc etc.",
                    "label": 0
                },
                {
                    "sent": "So I can I can choose how fine I want my grid an because it's a sum over grid points, I could distribute that over.",
                    "label": 0
                },
                {
                    "sent": "Yeah, over MPI this half each apply process do apart right?",
                    "label": 0
                }
            ]
        },
        "clip_31": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So here's the.",
                    "label": 0
                },
                {
                    "sent": "The code for that I guess it's not.",
                    "label": 0
                },
                {
                    "sent": "It's not so difficult, I get my rank in my size.",
                    "label": 0
                },
                {
                    "sent": "And in this case I want to be able to give the number of points on the command line.",
                    "label": 0
                },
                {
                    "sent": "And that happens and you can get that in back home from sisters RV.",
                    "label": 0
                },
                {
                    "sent": "And so it's asking for the number of points to use in your integration from the command line.",
                    "label": 0
                },
                {
                    "sent": "And then I only want.",
                    "label": 0
                },
                {
                    "sent": "I want to divide that by the total Sciences.",
                    "label": 0
                },
                {
                    "sent": "Each process gets endpoints.",
                    "label": 0
                },
                {
                    "sent": "This should start to look familiar if you've done the MPI one, how, how wide should each be?",
                    "label": 0
                },
                {
                    "sent": "Where do I start for X is where where so I'm in an MPI process, so I need to know.",
                    "label": 0
                },
                {
                    "sent": "Where do I start?",
                    "label": 0
                },
                {
                    "sent": "An AC accumulation, so that's the integral, and then I'd go over the points, compute this form of the interference.",
                    "label": 0
                },
                {
                    "sent": "Add it to A at.",
                    "label": 0
                },
                {
                    "sent": "Go to the next X value and at the end I will have accumulated everything in A and to get things back I just want a reduction now.",
                    "label": 0
                },
                {
                    "sent": "This this is again very simple enough.",
                    "label": 0
                },
                {
                    "sent": "Yeah, you just say OK.",
                    "label": 0
                },
                {
                    "sent": "I want to reduce a.",
                    "label": 0
                },
                {
                    "sent": "The default reduction operators some, so basically I'm summing all the ages of each other processes and put it in be there, reduces only to process 0.",
                    "label": 0
                },
                {
                    "sent": "So rank equals 0.",
                    "label": 0
                },
                {
                    "sent": "You do realize all which happens to do what it does in MPI.",
                    "label": 0
                },
                {
                    "sent": "So this is the standard.",
                    "label": 0
                },
                {
                    "sent": "None, NUM py enables form and the thing to note, although it's strange to notice that.",
                    "label": 0
                },
                {
                    "sent": "All the must called member functions for all of the things that come after the dots.",
                    "label": 0
                },
                {
                    "sent": "In this case, just reduce our lower case an.",
                    "label": 0
                }
            ]
        },
        "clip_32": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So use the MPI version.",
                    "label": 0
                },
                {
                    "sent": "I started my version.",
                    "label": 0
                },
                {
                    "sent": "That will become an upper case.",
                    "label": 0
                },
                {
                    "sent": "A very odd choice to make the distinction between something that gets pickled or not pickled based only on.",
                    "label": 0
                },
                {
                    "sent": "The in uppercase or lowercase.",
                    "label": 0
                },
                {
                    "sent": "Even worse, the way you called the upper case in the lower case ones, the arguments that have to go into it and the return types are completely different.",
                    "label": 0
                },
                {
                    "sent": "These are two separate APIs, distinguished only by capitalization of the name, so I'm not quite sure if there was a clever decision decision that so it is OK it is.",
                    "label": 0
                },
                {
                    "sent": "It is consistent, so you want to use the NUM.",
                    "label": 0
                },
                {
                    "sent": "Py enable self everything that gets the capital and and most people stick to that.",
                    "label": 0
                },
                {
                    "sent": "Exactly 2 to avoid the.",
                    "label": 0
                },
                {
                    "sent": "The downside of having typical yours is your messages, so a lot of it is the same I have to now import NUM PY.",
                    "label": 0
                },
                {
                    "sent": "That should not be a surprise.",
                    "label": 0
                },
                {
                    "sent": "I have to import as array.",
                    "label": 0
                },
                {
                    "sent": "Will see why the rest is the same, the same the same, but now I have to pre allocate a buffer for the result to living so.",
                    "label": 0
                },
                {
                    "sent": "Since I'm not going to unpickle the result and put it somewhere.",
                    "label": 0
                },
                {
                    "sent": "But I have to put it somewhere.",
                    "label": 0
                },
                {
                    "sent": "Now I need a buffer so it's the old MPI stuff.",
                    "label": 0
                },
                {
                    "sent": "You need a buffer to put to copy or something and it has to exist already, right?",
                    "label": 0
                },
                {
                    "sent": "In Python everything is dynamic, but.",
                    "label": 0
                },
                {
                    "sent": "But this this breaks that for for efficiency.",
                    "label": 0
                },
                {
                    "sent": "So here's a video that fell off the slide, so be and then.",
                    "label": 0
                },
                {
                    "sent": "The last thing is just a parenthesis, so I have to be here to accept the results.",
                    "label": 0
                },
                {
                    "sent": "But an even the input has to be in array and a was just a regular Python variable, so I can with these capitalized ones I can only send NUM PY arrays back and forth, so I have an umpire array of size one that receives rolls, and I have to have an umpire a that I send, and so the easiest way to do that is to say.",
                    "label": 0
                },
                {
                    "sent": "Now it's just convert A to an array with the function as array, which is part of number.",
                    "label": 0
                },
                {
                    "sent": "So you can take any.",
                    "label": 0
                },
                {
                    "sent": "You can take a list or you can take a scalar variable, regular Python variable and give it to that and it will try and create an empire rate.",
                    "label": 0
                },
                {
                    "sent": "So other than that it works just fine.",
                    "label": 0
                },
                {
                    "sent": "Of course, since B is now an array, when I print it, I have to print 0 value so it's it's a little bit funny, but that's so.",
                    "label": 0
                },
                {
                    "sent": "This will avoid the overheads.",
                    "label": 0
                },
                {
                    "sent": "Of pickling what?",
                    "label": 0
                },
                {
                    "sent": "One floating point iPhone number, right?",
                    "label": 0
                },
                {
                    "sent": "So let's see how much that's these things.",
                    "label": 0
                }
            ]
        },
        "clip_33": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So AUC stands for area under the curve.",
                    "label": 0
                },
                {
                    "sent": "In areas pretty good.",
                    "label": 0
                },
                {
                    "sent": "Took 15 seconds.",
                    "label": 0
                }
            ]
        },
        "clip_34": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And this is the one.",
                    "label": 0
                },
                {
                    "sent": "With 28 processes.",
                    "label": 0
                },
                {
                    "sent": "NPI run takes 3 seconds, pretty nice.",
                    "label": 0
                },
                {
                    "sent": "I mean it's a simple problem.",
                    "label": 0
                },
                {
                    "sent": "I don't quite expect too much speedup because the amount of work per process isn't that large, but.",
                    "label": 0
                },
                {
                    "sent": "MPI MPI is working here.",
                    "label": 0
                },
                {
                    "sent": "And you you can use it.",
                    "label": 0
                }
            ]
        },
        "clip_35": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "How about the NUM?",
                    "label": 0
                },
                {
                    "sent": "Py?",
                    "label": 0
                },
                {
                    "sent": "So this is the one with the capitalized form of.",
                    "label": 0
                },
                {
                    "sent": "MPI for PIE and it actually turns out to be slower.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "But that's because we had one variable, right?",
                    "label": 0
                },
                {
                    "sent": "This is just.",
                    "label": 0
                }
            ]
        },
        "clip_36": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Not enough to do to see the difference in effect.",
                    "label": 0
                },
                {
                    "sent": "Converting A to an array turns out to be more overhead than pickling one little double.",
                    "label": 0
                },
                {
                    "sent": "I'm not quite sure why the balance works out that way, but.",
                    "label": 0
                },
                {
                    "sent": "This would have been different.",
                    "label": 0
                },
                {
                    "sent": "I think I miss, I hope in theory if we had a whole array to to send and this should be better.",
                    "label": 0
                },
                {
                    "sent": "So this actually turns out to be not as.",
                    "label": 0
                },
                {
                    "sent": "Not as big a deal.",
                    "label": 0
                },
                {
                    "sent": "There might be a take home message here that sometimes you don't have to do, but you know what.",
                    "label": 0
                },
                {
                    "sent": "It turns out at.",
                    "label": 0
                }
            ]
        },
        "clip_37": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Most of the documentation you find is on this side, and it's not so strange, but people using MPI are sensitive to performance, right so?",
                    "label": 0
                },
                {
                    "sent": "If somebody has told him while this interface exists, but it snow in awhile and it goes through the fast one at it turns out of this case with one variable that's actually slower.",
                    "label": 0
                },
                {
                    "sent": "Yep.",
                    "label": 0
                },
                {
                    "sent": "Oh so just start MPI slide.",
                    "label": 0
                },
                {
                    "sent": "This one so if I program.",
                    "label": 0
                },
                {
                    "sent": "In the pickling way.",
                    "label": 0
                },
                {
                    "sent": "I have a.",
                    "label": 0
                },
                {
                    "sent": "A mixture of capitalization should get rank and get size of capitalized.",
                    "label": 0
                },
                {
                    "sent": "Yeah, because there's no.",
                    "label": 0
                },
                {
                    "sent": "Yeah exactly.",
                    "label": 0
                },
                {
                    "sent": "It just seems weird.",
                    "label": 0
                },
                {
                    "sent": "I thought that would have been consistent in the right hand.",
                    "label": 0
                },
                {
                    "sent": "One would have been would have been the mix.",
                    "label": 0
                },
                {
                    "sent": "Yeah, I think so yeah, OK.",
                    "label": 0
                },
                {
                    "sent": "The what I found.",
                    "label": 0
                },
                {
                    "sent": "More confusing 'cause when you try to access a member function as a name that it doesn't have, it will just give you a warning saying this doesn't exist, right?",
                    "label": 0
                },
                {
                    "sent": "The right case is actually a lot safer program if I.",
                    "label": 0
                },
                {
                    "sent": "'cause there's no way that I can accidentally.",
                    "label": 0
                },
                {
                    "sent": "Put this in the wrong variable.",
                    "label": 0
                },
                {
                    "sent": "So if I say C equals and they still have printed, will be.",
                    "label": 0
                },
                {
                    "sent": "That can happen here the variable has to exist, so just there's a.",
                    "label": 0
                },
                {
                    "sent": "You're sort of safety in that, but that's the same safety you get from any type language, really, that it's.",
                    "label": 0
                },
                {
                    "sent": "Yeah you can.",
                    "label": 0
                },
                {
                    "sent": "I can accidentally use wrong variables and the wrong type, and it might or might not swallow them.",
                    "label": 0
                },
                {
                    "sent": "It's it depends a little bit I can give for instance in the right side I can give instead of as Ray just a an.",
                    "label": 0
                },
                {
                    "sent": "It would seem OK, but it gives the wrong result rather than an error.",
                    "label": 0
                },
                {
                    "sent": "Yeah.",
                    "label": 0
                },
                {
                    "sent": "You you pay a bit of a price for the fact that it is similar.",
                    "label": 0
                },
                {
                    "sent": "I kind of like the left way of doing things.",
                    "label": 0
                },
                {
                    "sent": "I think it's it's a lot more easy to understand what you're doing when you say, well, reduce all the H2-AB rather than having that and we didn't have to use any types or anything, so it's kind of nice, but.",
                    "label": 0
                },
                {
                    "sent": "Yeah.",
                    "label": 0
                }
            ]
        },
        "clip_38": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Alright, I'm not quite sure why we have we have.",
                    "label": 0
                },
                {
                    "sent": "No, we have time we can try.",
                    "label": 0
                },
                {
                    "sent": "We can try a hands-on.",
                    "label": 1
                },
                {
                    "sent": "Then let me ask me with so the rest of the week and do a little we could play around with this a little bit.",
                    "label": 0
                },
                {
                    "sent": "And then I think it would be nice.",
                    "label": 0
                },
                {
                    "sent": "But then I have a section where we're going to talk about sort of map, reduce data sciency stuff where?",
                    "label": 0
                },
                {
                    "sent": "The main point is not to get a tightly coupled computation as fast as possible, but to distribute work over that are like substantial over workers, and to make sure that you don't have too much data transport and those kind of things.",
                    "label": 0
                },
                {
                    "sent": "So we're going to look at Spark and the thing calls I Python parallel.",
                    "label": 0
                },
                {
                    "sent": "We could spend more time on that.",
                    "label": 0
                },
                {
                    "sent": "An if people are interested or we could do the exercise here and need to sort of show how to use item multi processing on expert advice to choose to try and paralyze this code.",
                    "label": 0
                },
                {
                    "sent": "Whose so?",
                    "label": 0
                },
                {
                    "sent": "Let me ask who here I would really know, like to hear more about the the techniques used for data science.",
                    "label": 0
                },
                {
                    "sent": "OK, and who OK?",
                    "label": 0
                },
                {
                    "sent": "It keeps going OK who is more 40 parallelization part?",
                    "label": 0
                },
                {
                    "sent": "They just signed this win.",
                    "label": 0
                },
                {
                    "sent": "OK, so.",
                    "label": 0
                },
                {
                    "sent": "If we have time, we'll come back to this.",
                    "label": 0
                },
                {
                    "sent": "The hands-on.",
                    "label": 0
                },
                {
                    "sent": "Is there like the idea was to do, so we'll skip it, but I'll tell you what the ideas.",
                    "label": 0
                },
                {
                    "sent": "Take this same code.",
                    "label": 0
                },
                {
                    "sent": "And rather than using MPI four PY take the serial version was fairly simple and see if you can use multi processing or Nomex for for the code.",
                    "label": 1
                },
                {
                    "sent": "As in, see what the what kind of speed up you get, so not remember multiprocessing mates in the process is so you have to do is spawning stuff and then express you should be able to just take the expression whatever it was an I give it to nomics expert an have it compile and spread it for you and so very different approaches that would be nice to see which one would win.",
                    "label": 1
                },
                {
                    "sent": "Yeah, that.",
                    "label": 0
                },
                {
                    "sent": "In MPI four PY, how do you initialize the communication?",
                    "label": 0
                },
                {
                    "sent": "Perfect perfect question.",
                    "label": 0
                },
                {
                    "sent": "And the answer.",
                    "label": 0
                }
            ]
        },
        "clip_39": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "It happens as soon as you import MPI for \u03c0.",
                    "label": 0
                },
                {
                    "sent": "So it does it for you.",
                    "label": 0
                },
                {
                    "sent": "You also notice that there's no finalize.",
                    "label": 0
                },
                {
                    "sent": "I this is this sort of.",
                    "label": 0
                },
                {
                    "sent": "It's just a little bit.",
                    "label": 0
                },
                {
                    "sent": "Now.",
                    "label": 0
                },
                {
                    "sent": "Here's to you.",
                    "label": 0
                },
                {
                    "sent": "Got a property.",
                    "label": 0
                },
                {
                    "sent": "Finalize your MPI that I got it right 'cause when your program is done, of course you want to finalize.",
                    "label": 0
                },
                {
                    "sent": "What else are you going to do?",
                    "label": 0
                },
                {
                    "sent": "So it's it?",
                    "label": 0
                },
                {
                    "sent": "In a real or in a compiled MPI process or program, you could do things before the MPI in it, so long as there's no communication, you could do things after the MPI finalize, so the model is one of Noah in, in principle of no MPI.",
                    "label": 0
                },
                {
                    "sent": "Now I can do my MPI communication and no more MPI, but you can't go in and out.",
                    "label": 0
                },
                {
                    "sent": "You can't do it like twice, so it's a bit funny that it is even possible.",
                    "label": 0
                },
                {
                    "sent": "So I'm baffled by just chose to say.",
                    "label": 0
                },
                {
                    "sent": "Of course you want everything in communicating, so we'll do the MPI in it for you.",
                    "label": 0
                },
                {
                    "sent": "And then maybe when the I want it tears down, it should do a finalize.",
                    "label": 0
                },
                {
                    "sent": "I guess it is possible that if this gets interrupted, the MPI finalize is not cold, but the same is true for your.",
                    "label": 0
                },
                {
                    "sent": "For your compiled code so.",
                    "label": 0
                },
                {
                    "sent": "Yes, I'd like to say so.",
                    "label": 0
                },
                {
                    "sent": "It's all.",
                    "label": 0
                },
                {
                    "sent": "It's all automatic again.",
                    "label": 0
                },
                {
                    "sent": "One less thing too.",
                    "label": 0
                },
                {
                    "sent": "To worry about.",
                    "label": 0
                },
                {
                    "sent": "Just have to hope it's all done right.",
                    "label": 0
                },
                {
                    "sent": "You can still do all the thinking still mess around with Communicator.",
                    "label": 0
                },
                {
                    "sent": "She could spit them up.",
                    "label": 0
                },
                {
                    "sent": "You can have subgroups, etc.",
                    "label": 0
                },
                {
                    "sent": "It's not that that's not in there, but the MPI init system.",
                    "label": 0
                },
                {
                    "sent": "Any other questions about the?",
                    "label": 0
                },
                {
                    "sent": "The.",
                    "label": 0
                }
            ]
        },
        "clip_40": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Realization part.",
                    "label": 0
                },
                {
                    "sent": "OK.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "It is almost impossible not to have heard the words map reduce thrown at you usually in the same senses as data science.",
                    "label": 0
                },
                {
                    "sent": "App.",
                    "label": 0
                },
                {
                    "sent": "And not always that people that know what they're talking about, but but sometimes yes.",
                    "label": 0
                },
                {
                    "sent": "We have heard talks about the struggles that some fields of research and some fields of business have with dealing with the amount of data that they get.",
                    "label": 0
                },
                {
                    "sent": "So astronomy was one of them.",
                    "label": 0
                },
                {
                    "sent": "Bioinformatics or genomics is definitely another one, so when that happens.",
                    "label": 0
                },
                {
                    "sent": "Typically, what's the case you have you do have a lot of data.",
                    "label": 0
                },
                {
                    "sent": "That you need to process.",
                    "label": 0
                },
                {
                    "sent": "But they are sort of independent points.",
                    "label": 0
                },
                {
                    "sent": "Think of you want to analyze the billion Twitter feeds.",
                    "label": 0
                },
                {
                    "sent": "Its Twitter feed is more or less independent until you start doing the analysis.",
                    "label": 0
                },
                {
                    "sent": "So if you want to know which filters filter feeds mentioned the IHP CSS.",
                    "label": 0
                },
                {
                    "sent": "You just have to see count.",
                    "label": 0
                },
                {
                    "sent": "Which ones do that all billion very parallel.",
                    "label": 0
                },
                {
                    "sent": "So a lot of this stuff is at first massively parallel, so for all of these Twitter feeds, you need to know do they contain this string or not?",
                    "label": 0
                },
                {
                    "sent": "And then you have to count on which is kind of like a reduction, right?",
                    "label": 0
                },
                {
                    "sent": "You count how many of these actually happened, so it is a one if they have at the 0 not you reduce it.",
                    "label": 0
                },
                {
                    "sent": "Now you should always thinking I can do that with MPI and you would be totally right but.",
                    "label": 0
                },
                {
                    "sent": "Either because they didn't know or didn't want to do it compiled language.",
                    "label": 0
                },
                {
                    "sent": "More and more frameworks were developed to do this map.",
                    "label": 0
                },
                {
                    "sent": "That is to say, to distribute these millionaires where there's a billion tweets, two different processes or different nodes have them count.",
                    "label": 0
                },
                {
                    "sent": "If they, or check if they could send a string and then collect him again and reject reduce it to.",
                    "label": 0
                },
                {
                    "sent": "This is how many times is this thing was done so that paradigm of MapReduce is very common when you when you're talking about big data just because what they're doing.",
                    "label": 0
                },
                {
                    "sent": "Isn't always as.",
                    "label": 0
                },
                {
                    "sent": "Tightly coupled.",
                    "label": 0
                },
                {
                    "sent": "It's a very different from, say, diffusion equation, very different from a lot of a lot of scientific computing, but very common when you're dealing with big data.",
                    "label": 0
                },
                {
                    "sent": "That's why the two are, and it doesn't really like a billion.",
                    "label": 0
                },
                {
                    "sent": "Isn't really all that much.",
                    "label": 0
                },
                {
                    "sent": "The million is definitely small, So what is what is bigger, but it still depends more on how hard it is to extract any meaningful information from it that makes MapReduce useful is sort of a loose coupling.",
                    "label": 0
                }
            ]
        },
        "clip_41": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So other.",
                    "label": 0
                },
                {
                    "sent": "Examples of this type of workflow.",
                    "label": 0
                },
                {
                    "sent": "So we talked about reduction.",
                    "label": 0
                },
                {
                    "sent": "So these are reductions that produces a reduction that has reduced in it.",
                    "label": 0
                },
                {
                    "sent": "So you could you could think of that parameter sweeps.",
                    "label": 1
                },
                {
                    "sent": "They're all independent.",
                    "label": 0
                },
                {
                    "sent": "They were trying to optimize the shape of a wing.",
                    "label": 0
                },
                {
                    "sent": "You try different parameters, defined it, final drag or lift or whatever is your criteria, and you just find the best one afterward that produce right so.",
                    "label": 0
                },
                {
                    "sent": "It's a very common framework.",
                    "label": 1
                },
                {
                    "sent": "You don't need a lot of communication.",
                    "label": 0
                },
                {
                    "sent": "You don't have to be low level, you can afford.",
                    "label": 0
                },
                {
                    "sent": "Some amount of inefficiency if you're just checking strings.",
                    "label": 0
                },
                {
                    "sent": "And you have a lot of them.",
                    "label": 0
                },
                {
                    "sent": "You might not care that things are 10 times slower per string comparison.",
                    "label": 1
                },
                {
                    "sent": "Just have to get this thing done and every time you need you might need a slightly different function to be to be.",
                    "label": 0
                },
                {
                    "sent": "Performed on each image item, so will look at two frameworks.",
                    "label": 0
                },
                {
                    "sent": "One comes out of the Python stable, so it is Ipython parallel I Python if you might know is a slightly different interface to Python.",
                    "label": 1
                },
                {
                    "sent": "It's meant to be more interactive and has a whole bunch of nice cities, but it also boils down to being a slightly different dialect from Python then pure Python, which is why I steered away from it here.",
                    "label": 1
                },
                {
                    "sent": "'cause it just gets confusing and everything.",
                    "label": 0
                },
                {
                    "sent": "Everything has to work both in I Python.",
                    "label": 0
                },
                {
                    "sent": "Nearby some dialect, as in the official Python Islands.",
                    "label": 0
                },
                {
                    "sent": "Turns out, on top of that, they built this parallel.",
                    "label": 0
                },
                {
                    "sent": "Machinery that is now spun off into its own.",
                    "label": 0
                },
                {
                    "sent": "So it's either it's actually not called Ipython parallel anymore, but I buy parallel.",
                    "label": 0
                },
                {
                    "sent": "So depending on how you your iPhone distribution issue either import Ipython parallel or I barrel as this match will show.",
                    "label": 0
                },
                {
                    "sent": "I'll show a bit of the architecture and an example of how to use it.",
                    "label": 0
                },
                {
                    "sent": "And then I'll move to spark or officially Apache Spark, which is also a MapReduce framework, and I really want to show.",
                    "label": 0
                },
                {
                    "sent": "How how to really similar and all these frameworks have a lot in common 'cause all they have to do is distribute work and get it back right distributed, get back and coordinate that somewhere.",
                    "label": 0
                },
                {
                    "sent": "Anne.",
                    "label": 1
                },
                {
                    "sent": "And in particular, there is an interface to spark called pyspark which is the Python interface which of course in this Python session is what we use.",
                    "label": 0
                }
            ]
        },
        "clip_42": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "The typical way that map reduce applications are structures.",
                    "label": 0
                },
                {
                    "sent": "If a massive process and worker process, the master specifies what needs to be done and then gets shipped out to workers, then they give it back, etc.",
                    "label": 0
                },
                {
                    "sent": "You need the right type of workflow for this to be efficient, right?",
                    "label": 0
                },
                {
                    "sent": "'cause you have this one point of failure to master one point.",
                    "label": 0
                },
                {
                    "sent": "So if so, if you had a tightly coupled system, if everything has to go through the master, this is no good, but there's a lot of workloads we're talking about here.",
                    "label": 0
                },
                {
                    "sent": "So, so that's why you can.",
                    "label": 0
                },
                {
                    "sent": "You can get away with this, so the workflow then is that the data gets distributed over the workers, or ideally the workers would already have the data.",
                    "label": 1
                },
                {
                    "sent": "So a lot of these frameworks can turn this whole thing upside down rather than distributing the work which we've been doing with MPI, Open MP and Open ACC.",
                    "label": 0
                },
                {
                    "sent": "No, you did you distribute this massive data set and it probably doesn't even fit in each node, or you don't want to deal with all things and then the way to work is history with business goes OK. What work needs to be like?",
                    "label": 0
                },
                {
                    "sent": "Where's the data?",
                    "label": 0
                },
                {
                    "sent": "And I bring I bring the work back to it.",
                    "label": 1
                },
                {
                    "sent": "If the data is already there.",
                    "label": 0
                },
                {
                    "sent": "The distribution of work is that should be dictated by the data.",
                    "label": 0
                },
                {
                    "sent": "Will see a few examples of that too.",
                    "label": 1
                },
                {
                    "sent": "And then once the work is done, the results are sent back or filtered or somehow collected and then reels it goes back to the mastering and this could be repeated right?",
                    "label": 0
                },
                {
                    "sent": "Because OK I do a partial selection on everything that mentions the International Summer School, but then I also see I check for keywords that have a positive connotation and I want to know the sentiment analysis of these Twitter feeds or so.",
                    "label": 0
                },
                {
                    "sent": "As I said, you can have a lot of tightly couples communication between this works and the work chunks have to be substantial if it's just.",
                    "label": 0
                },
                {
                    "sent": "Summing up the counting or something counting integers, giving one integer to increase to each worker.",
                    "label": 0
                },
                {
                    "sent": "The infrastructure that you need to send it and get it back.",
                    "label": 0
                },
                {
                    "sent": "In this work workflow system is.",
                    "label": 0
                }
            ]
        },
        "clip_43": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Sort of inappropriate.",
                    "label": 0
                },
                {
                    "sent": "So let's let's first look at.",
                    "label": 0
                },
                {
                    "sent": "I thought that I'm doing this partly because I passed.",
                    "label": 0
                },
                {
                    "sent": "It will already come with your right.",
                    "label": 0
                },
                {
                    "sent": "It's easy to install if you have Python already.",
                    "label": 0
                }
            ]
        },
        "clip_44": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Kind of natively there where spark requires a special installation.",
                    "label": 0
                },
                {
                    "sent": "This doesn't really.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "Here's the.",
                    "label": 0
                },
                {
                    "sent": "I parallel or formally I buy some peril way of doing things, so at first little bit confusing.",
                    "label": 0
                },
                {
                    "sent": "There's a couple of moving parts here.",
                    "label": 0
                },
                {
                    "sent": "The engine's on the bottom order are the workers that are wondering to work.",
                    "label": 0
                },
                {
                    "sent": "So by the way, every framework has new names for all the things that are the same.",
                    "label": 0
                },
                {
                    "sent": "So these are engines, although their workers.",
                    "label": 0
                },
                {
                    "sent": "No, you can't help that the wheel has been invented a couple of times.",
                    "label": 0
                },
                {
                    "sent": "In these cases, OK, so the engine started workers at the schedulers deliver, and if I'd work so they can see where the data lives in where it should go.",
                    "label": 0
                },
                {
                    "sent": "Or just basically say OK, this is new data I have to make sure that that code for it cause an and then give the divider work.",
                    "label": 0
                },
                {
                    "sent": "So they're the schedulers that that name makes sense, then the hub.",
                    "label": 1
                },
                {
                    "sent": "This coordinates and logs that everything so that.",
                    "label": 1
                },
                {
                    "sent": "It's the admin person and the client is the one that actually is running, so that's that's it's like the master.",
                    "label": 0
                },
                {
                    "sent": "The master will give work to the engine's so.",
                    "label": 0
                },
                {
                    "sent": "Which is good?",
                    "label": 0
                },
                {
                    "sent": "'cause mastering analogy can go terribly wrong as well.",
                    "label": 0
                },
                {
                    "sent": "So the client is the master in this case.",
                    "label": 0
                },
                {
                    "sent": "No, the the client's always right.",
                    "label": 0
                },
                {
                    "sent": "Anne Anne it.",
                    "label": 0
                },
                {
                    "sent": "Executes are asked for certain work to be done that's given to the schedulers that separates the engine, and they eventually get that work back to the client and then just to make things extra complicated.",
                    "label": 1
                },
                {
                    "sent": "And the schedule and help together are called a controller.",
                    "label": 0
                },
                {
                    "sent": "And then the screen half plus the engine's.",
                    "label": 0
                },
                {
                    "sent": "They're called the cluster now that part isn't so strange in the sense that the client connects to the cluster and they have the cluster as the cluster.",
                    "label": 0
                },
                {
                    "sent": "Do something that I can think of cluster.",
                    "label": 0
                },
                {
                    "sent": "Not quite sure, I just needed a name.",
                    "label": 0
                },
                {
                    "sent": "OK so.",
                    "label": 0
                },
                {
                    "sent": "That's the infrastructure.",
                    "label": 0
                },
                {
                    "sent": "That's where things go.",
                    "label": 0
                },
                {
                    "sent": "Pensions likely run on different nodes then the client, but obviously they don't have to.",
                    "label": 0
                },
                {
                    "sent": "If you're on a multicore machine, you could get away with not having that.",
                    "label": 0
                }
            ]
        },
        "clip_45": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So how do we start this up?",
                    "label": 0
                },
                {
                    "sent": "So we have to if we want to play with this and it should all work on bridges.",
                    "label": 0
                },
                {
                    "sent": "There's there's some funny stuff that has to happen.",
                    "label": 1
                },
                {
                    "sent": "Ann, it's the start of work, is a bit manual.",
                    "label": 0
                },
                {
                    "sent": "We have to set up this cluster ourselves.",
                    "label": 0
                },
                {
                    "sent": "Now there's just a command for that, so you go to.",
                    "label": 0
                },
                {
                    "sent": "You should be on your interactive node.",
                    "label": 1
                },
                {
                    "sent": "You change the code directory if not there instead of sources set up if you haven't already.",
                    "label": 1
                },
                {
                    "sent": "In that case, you can just start this.",
                    "label": 0
                },
                {
                    "sent": "I buy parallel cluster with IP cluster start and then the number of engineers.",
                    "label": 0
                },
                {
                    "sent": "It's kind of like an MPI run, but it just has those those engines.",
                    "label": 0
                },
                {
                    "sent": "Hang there and waiting for work.",
                    "label": 1
                },
                {
                    "sent": "Because there waiting this terminal is done.",
                    "label": 0
                },
                {
                    "sent": "It's just hanging there.",
                    "label": 1
                },
                {
                    "sent": "It's now dedicated to showing log messages and error messages from the engine.",
                    "label": 0
                },
                {
                    "sent": "So how do we connect to the cluster where we have to go back, SSH back into bridges?",
                    "label": 1
                },
                {
                    "sent": "An SSH back to the node.",
                    "label": 0
                },
                {
                    "sent": "That's why before you do that, make sure you type in host name so you know which notes to connect back to.",
                    "label": 0
                },
                {
                    "sent": "There are better ways to set us up, I'm sure, but.",
                    "label": 0
                },
                {
                    "sent": "That just means somebody automated this for you.",
                    "label": 0
                },
                {
                    "sent": "This is this is going on.",
                    "label": 0
                },
                {
                    "sent": "This is when I think fondly back of MPI MPI run this is it.",
                    "label": 0
                },
                {
                    "sent": "Once you're back on that note here.",
                    "label": 0
                }
            ]
        },
        "clip_46": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Because she SSH back in.",
                    "label": 0
                },
                {
                    "sent": "You have to source the setup again, make sure everything is in the path of the module loaded.",
                    "label": 0
                },
                {
                    "sent": "It'll tell you now that all the things that have to be installed are installed, but at least they're not iaccessible type in Python And we're principle sets.",
                    "label": 1
                },
                {
                    "sent": "We can now connect to the clients in my parallel and get them.",
                    "label": 1
                },
                {
                    "sent": "So this is going to be our clients, which in the usual MapReduce framework was called the Master.",
                    "label": 0
                },
                {
                    "sent": "So we import to clients or so.",
                    "label": 0
                },
                {
                    "sent": "So the way this works slightly confusing.",
                    "label": 0
                },
                {
                    "sent": "Of course we want to import I parallel.",
                    "label": 0
                },
                {
                    "sent": "In particular, we want to be able to create a client.",
                    "label": 0
                },
                {
                    "sent": "Remember, this client was just so so clients become client and an.",
                    "label": 0
                },
                {
                    "sent": "The naming is just very, very unfortunate.",
                    "label": 0
                },
                {
                    "sent": "Through the clients through the clients object you access the engines.",
                    "label": 0
                },
                {
                    "sent": "So you created a client.",
                    "label": 0
                },
                {
                    "sent": "That is now connected to these these engines.",
                    "label": 0
                },
                {
                    "sent": "So when I say clients is engine's, this clients variable contains the connection to the the engine's so it has figured out that this iPad cloud cluster is running.",
                    "label": 0
                },
                {
                    "sent": "That's what happens when you call client.",
                    "label": 0
                },
                {
                    "sent": "It finds the cluster and attaches to that.",
                    "label": 0
                },
                {
                    "sent": "If the cluster would be running on a different node, there's arguments you can give to it to say what note it is at.",
                    "label": 0
                },
                {
                    "sent": "What port is this listening to?",
                    "label": 0
                },
                {
                    "sent": "And all of that you can set it up more more more carefully, but if it's on the same note.",
                    "label": 0
                },
                {
                    "sent": "You'll just find it, so that's a good way to to get started and try it out.",
                    "label": 0
                }
            ]
        },
        "clip_47": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "OK, so we have our clients.",
                    "label": 0
                },
                {
                    "sent": "An and now we can.",
                    "label": 0
                },
                {
                    "sent": "We can run in two modes.",
                    "label": 0
                },
                {
                    "sent": "It turns out we can either give work to the engine's and just have them go and continue passing out more work, or we can wait until the work is done and I will return to it.",
                    "label": 0
                },
                {
                    "sent": "So that's blocked or not blocked or synchronous or asynchronous way of operating in this case will set it to block to true, which means we always get our result back.",
                    "label": 0
                },
                {
                    "sent": "It's easier for interactively playing with this.",
                    "label": 0
                },
                {
                    "sent": "It's not as effective and efficient.",
                    "label": 0
                },
                {
                    "sent": "So one thing we can do is we can print the length of client which actually gives me the number of engines for.",
                    "label": 0
                },
                {
                    "sent": "I can print the idea so these things have whatever essentially ranks in MPI.",
                    "label": 0
                },
                {
                    "sent": "Can you get the ideas?",
                    "label": 0
                }
            ]
        },
        "clip_48": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So OK, we have the clients we figured out there's four because we started the cluster with four.",
                    "label": 0
                },
                {
                    "sent": "Now how it?",
                    "label": 0
                },
                {
                    "sent": "How do we give them work right?",
                    "label": 0
                },
                {
                    "sent": "So one way to so.",
                    "label": 0
                },
                {
                    "sent": "A common way to give them work is to give them a function to do and some arguments to go into that function so they have a function that subtracts the from a minus.",
                    "label": 0
                },
                {
                    "sent": "Works and then I can have that executed on a specific engine engine #0 by applying the calling.",
                    "label": 0
                },
                {
                    "sent": "The apply function is giving the function that I want done and the arguments.",
                    "label": 0
                },
                {
                    "sent": "So I could do this and I've met so it is possible to do this very very hands on and say this client is going to do that that line.",
                    "label": 0
                },
                {
                    "sent": "This engine doing that that should do that, but it's.",
                    "label": 0
                }
            ]
        },
        "clip_49": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Otherwise, you would typically do.",
                    "label": 0
                },
                {
                    "sent": "Right, so a few things though, if you're going to run on a client or on an engine, that engine is a separate process, right?",
                    "label": 0
                },
                {
                    "sent": "It might, it might not even live on the same node.",
                    "label": 1
                },
                {
                    "sent": "And in our case it does, but it doesn't have to.",
                    "label": 0
                },
                {
                    "sent": "And if it, even if it does, you have to move your data and your code to the engine.",
                    "label": 1
                },
                {
                    "sent": "So when I say.",
                    "label": 0
                }
            ]
        },
        "clip_50": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "They apply minus five and six.",
                    "label": 0
                },
                {
                    "sent": "That engine zero didn't have a value 5 anywhere and value of 6 those get shipped off, but it even didn't have a function minus define.",
                    "label": 0
                },
                {
                    "sent": "These are Python environments, so I have to define that function in there.",
                    "label": 0
                },
                {
                    "sent": "So apply ships the function functions are proper objects in Python so they can be shipped.",
                    "label": 0
                },
                {
                    "sent": "You're probably Pickles if I would guess, but I'm not sure, but I shipped off to the engine.",
                    "label": 0
                },
                {
                    "sent": "The engine now has a minus function and goes OK. Now if I get these groups arguments I I.",
                    "label": 0
                }
            ]
        },
        "clip_51": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So data gets moved.",
                    "label": 0
                },
                {
                    "sent": "You can imagine that if you're streaming that and it's a lot of data, you want to make sure the data is first distributed.",
                    "label": 0
                },
                {
                    "sent": "So there's there's, I mean, but.",
                    "label": 0
                },
                {
                    "sent": "The apply will will will move the data to.",
                    "label": 0
                },
                {
                    "sent": "And then you quit.",
                    "label": 0
                },
                {
                    "sent": "You get the code.",
                    "label": 0
                }
            ]
        },
        "clip_52": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Now to make things so we have blocked and unblocked mode for for for basically manipulating the engine's.",
                    "label": 0
                },
                {
                    "sent": "There's a few other ways.",
                    "label": 0
                },
                {
                    "sent": "Other things we can do.",
                    "label": 0
                },
                {
                    "sent": "We can do subsets of the nodes.",
                    "label": 0
                },
                {
                    "sent": "We can do arrange, we can say we only want zero and one or we want every other one.",
                    "label": 0
                },
                {
                    "sent": "So in this case if I had eight clients, this would give me every odd one of the eight, so 135 and seven and the rest not.",
                    "label": 0
                },
                {
                    "sent": "So this becomes a new.",
                    "label": 0
                },
                {
                    "sent": "They call it the view.",
                    "label": 0
                },
                {
                    "sent": "But it's basically the new interface to to treat a sub part of the clusters as a whole cluster.",
                    "label": 0
                },
                {
                    "sent": "Another thing you can do.",
                    "label": 0
                },
                {
                    "sent": "Rather than having saying for each engine specifically what it does is do something that is load balance and this is a very powerful way of going about.",
                    "label": 0
                },
                {
                    "sent": "You can imagine that if your work work packages are very unbalanced, that is something long.",
                    "label": 0
                },
                {
                    "sent": "Something to take a short time.",
                    "label": 0
                },
                {
                    "sent": "This could be very useful and you can basically just tell the tell this client or his view do this, do that, do that and it separates it out and see who is not busy.",
                    "label": 0
                },
                {
                    "sent": "It's a very useful way to go about body.",
                    "label": 0
                },
                {
                    "sent": "It also doesn't.",
                    "label": 0
                },
                {
                    "sent": "It's hard to show.",
                    "label": 0
                },
                {
                    "sent": "With simple examples that it that it works well, so I'm going to stick to this first direct direct interface so we know exactly where the process better engines are.",
                    "label": 0
                }
            ]
        },
        "clip_53": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "That's how we work.",
                    "label": 0
                },
                {
                    "sent": "So suppose we have this direct view.",
                    "label": 0
                },
                {
                    "sent": "We can run something on on each of them.",
                    "label": 0
                },
                {
                    "sent": "We can run a script, so remember there's this.",
                    "label": 1
                },
                {
                    "sent": "These engines are Python Python instances, right?",
                    "label": 0
                },
                {
                    "sent": "So we think if a descriptor it just say OK.",
                    "label": 0
                },
                {
                    "sent": "Here's a file, a file name.",
                    "label": 0
                },
                {
                    "sent": "Go read this script and execute it and then it'll stop and they'll have executed that.",
                    "label": 0
                },
                {
                    "sent": "It can be useful.",
                    "label": 0
                },
                {
                    "sent": "Or you can just give it a command you can say.",
                    "label": 1
                },
                {
                    "sent": "Everybody bring their host name, something like that.",
                    "label": 0
                },
                {
                    "sent": "We can do and apply which which we saw takes a function argument, so they get shipped off to the engine, and then there's the map which is, which is a very interesting one to, which takes again a function and then a list, but at least get split up.",
                    "label": 1
                },
                {
                    "sent": "So here here's where we get some functionality is going to help us.",
                    "label": 0
                },
                {
                    "sent": "The load balancing could help us.",
                    "label": 0
                },
                {
                    "sent": "The map could also have the map is like an open MP static scheduler and the load balancing is I can open MP dynamic scheduler.",
                    "label": 1
                },
                {
                    "sent": "It takes a list, separates them out, and thus the function of each of the lists.",
                    "label": 0
                }
            ]
        },
        "clip_54": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "We talked about blocking and unblocking.",
                    "label": 0
                },
                {
                    "sent": "If you do not blocking when you send off your work package you get sort of a handle and you can check if your work is done about to return value.",
                    "label": 0
                },
                {
                    "sent": "Is it this when it's done so that's with ready and with cats but.",
                    "label": 0
                }
            ]
        },
        "clip_55": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "That's the exciting this mode.",
                    "label": 0
                },
                {
                    "sent": "So she run on all right?",
                    "label": 0
                },
                {
                    "sent": "So here's a case where we're running on all the engines.",
                    "label": 0
                },
                {
                    "sent": "They all give minus one 'cause all of them get five and six.",
                    "label": 0
                },
                {
                    "sent": "But if we map.",
                    "label": 0
                },
                {
                    "sent": "Right away map is also a built in Python interface, so you can.",
                    "label": 0
                },
                {
                    "sent": "You can just do map without I Python parallel you get this.",
                    "label": 0
                }
            ]
        },
        "clip_56": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Charles.",
                    "label": 0
                },
                {
                    "sent": "You can do it in Load Valley and load balance value.",
                    "label": 0
                },
                {
                    "sent": "Another test done as well.",
                    "label": 0
                },
                {
                    "sent": "How will have given every engine 1 one part of each listing can find a property and then get him back.",
                    "label": 0
                },
                {
                    "sent": "OK.",
                    "label": 0
                }
            ]
        },
        "clip_57": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So yeah, one thing to to be aware of if you're going to use this that.",
                    "label": 0
                },
                {
                    "sent": "When you use a direct user, not allowed balanced view.",
                    "label": 0
                },
                {
                    "sent": "When you say apply.",
                    "label": 0
                },
                {
                    "sent": "Right, it it does.",
                    "label": 0
                },
                {
                    "sent": "It does it on all of the engine, so that's so when I do apply here with minus, each of these actions is computing the result for me, even though they're all the same.",
                    "label": 0
                },
                {
                    "sent": "When I do the load balancing they say apply just gets into one.",
                    "label": 0
                },
                {
                    "sent": "And so that makes a lot more sense in most cases.",
                    "label": 0
                }
            ]
        },
        "clip_58": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "It behaves differently.",
                    "label": 0
                },
                {
                    "sent": "Here we go.",
                    "label": 0
                }
            ]
        },
        "clip_59": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Yeah, so here's the load balance view.",
                    "label": 0
                },
                {
                    "sent": "It does assume only once because it was given to 1 engine.",
                    "label": 0
                },
                {
                    "sent": "If I did another apply in between and I had the in synchronous mode, that's how I could drive them separately.",
                    "label": 0
                }
            ]
        },
        "clip_60": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "We have these separate engines running.",
                    "label": 0
                },
                {
                    "sent": "They have their own Python environment.",
                    "label": 0
                },
                {
                    "sent": "They have their own variables, so if I have a = 5 In my in my client, the engine's don't know about it.",
                    "label": 0
                },
                {
                    "sent": "After ship it off.",
                    "label": 0
                },
                {
                    "sent": "But what if all the engines have a variable called circles here called X?",
                    "label": 1
                },
                {
                    "sent": "And I want to know what their variable is.",
                    "label": 0
                },
                {
                    "sent": "How do I get that?",
                    "label": 0
                },
                {
                    "sent": "So there's a way to get variables from from the engine's.",
                    "label": 0
                },
                {
                    "sent": "And it's very simple.",
                    "label": 0
                },
                {
                    "sent": "You just take all those clients together with you.",
                    "label": 0
                },
                {
                    "sent": "So if you can and what I've done is, I've executed the command X equals get PID, get the process identifier, now they're running then just running on the same machine must have different pid's and so each of them will give something else, but they have stored it in their local variable X.",
                    "label": 0
                },
                {
                    "sent": "So to get this back.",
                    "label": 1
                },
                {
                    "sent": "It's fairly simple, I can just use a few and use it as a dictionary as well.",
                    "label": 1
                },
                {
                    "sent": "What is the value of X everywhere and I just get a list back of those values so to view at the same time access a dictionary.",
                    "label": 0
                },
                {
                    "sent": "But it also acts as a.",
                    "label": 1
                },
                {
                    "sent": "But then the clients themselves also access sort of an array of of dictionary.",
                    "label": 0
                },
                {
                    "sent": "So you can imagine each of the.",
                    "label": 0
                },
                {
                    "sent": "And this this is actually true for regular Python.",
                    "label": 0
                },
                {
                    "sent": "All the variables in Python.",
                    "label": 0
                },
                {
                    "sent": "Live in a dictionary.",
                    "label": 0
                },
                {
                    "sent": "And by doing clients three, I essentially just get that dictionary back of Engine 3 in this case.",
                    "label": 0
                },
                {
                    "sent": "So it can hide are asked if you to give me the list of the values of all of them, or I can specify a specific engine and get the value from there.",
                    "label": 1
                },
                {
                    "sent": "I could of course also do Phi X and then three and do the other way, which will be slightly inefficient 'cause first time collecting all of the all of them and then throwing about throwing all of them out of that one.",
                    "label": 0
                }
            ]
        },
        "clip_61": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "You can just get together so that kind of makes sense if you have a list, like a list from 1 to 16 and scattered it over the view.",
                    "label": 0
                },
                {
                    "sent": "Each of them gets a quarter of the of the list and they can gather it back so.",
                    "label": 0
                },
                {
                    "sent": "When you're not doing map or you want to pre distribute data, this is the way you can do it and you can get it back after 2.",
                    "label": 0
                },
                {
                    "sent": "So notice this is a little bit of a. I a dump of like a mix of.",
                    "label": 0
                },
                {
                    "sent": "Makes off.",
                    "label": 0
                },
                {
                    "sent": "Methodology and then the technical.",
                    "label": 0
                },
                {
                    "sent": "Outline of how it would work.",
                    "label": 0
                },
                {
                    "sent": "You could try this out to.",
                    "label": 0
                },
                {
                    "sent": "Actually, there's really not much more to it.",
                    "label": 0
                },
                {
                    "sent": "Like with this you could try and and do some data processing.",
                    "label": 0
                },
                {
                    "sent": "I find it useful to take some data and just play with it and I'll give you some at the end.",
                    "label": 0
                },
                {
                    "sent": "But in the context of spark.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "But this this is kind of the way, the way, the way it goes with all of these players, they have their own vocabulary, so you gotta.",
                    "label": 0
                },
                {
                    "sent": "You got to see a few of them to see that are actually all the same, and then you start confusing what an engine is in a worker just like me.",
                    "label": 0
                },
                {
                    "sent": "So let's go back one more time.",
                    "label": 0
                }
            ]
        },
        "clip_62": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Client hub schedule engine's.",
                    "label": 0
                },
                {
                    "sent": "The client is where we are.",
                    "label": 0
                },
                {
                    "sent": "We are interfacing at the client from the clients.",
                    "label": 0
                },
                {
                    "sent": "We do our execute or run our Maps and they get sent by the schedulers to the engine's.",
                    "label": 1
                },
                {
                    "sent": "In some cases it load balances, in other cases, it's not.",
                    "label": 1
                },
                {
                    "sent": "That's not in some cases it distributes a list, in other cases, it copies everything.",
                    "label": 0
                },
                {
                    "sent": "I can get the variables from the engine's back to the client.",
                    "label": 0
                },
                {
                    "sent": "They can send them there 2.",
                    "label": 0
                },
                {
                    "sent": "It's just an infrastructure.",
                    "label": 0
                },
                {
                    "sent": "Right, but it has all of the.",
                    "label": 0
                },
                {
                    "sent": "Tools to have your district data in this workload in a semi automated Lee this is.",
                    "label": 0
                },
                {
                    "sent": "This is very typical for all of these frameworks.",
                    "label": 0
                },
                {
                    "sent": "Details differ and will see in Spark.",
                    "label": 0
                },
                {
                    "sent": "Few details are different, but the essence isn't isn't that different.",
                    "label": 0
                },
                {
                    "sent": "There's something that drives it there at the entrance, there's variables, data moving about and encode moving about.",
                    "label": 0
                },
                {
                    "sent": "Questions about the iPad.",
                    "label": 0
                },
                {
                    "sent": "You said the I Python.",
                    "label": 0
                },
                {
                    "sent": "This is going right back.",
                    "label": 0
                },
                {
                    "sent": "The Ipython sometimes differed in place from Python.",
                    "label": 1
                },
                {
                    "sent": "I wasn't aware of that.",
                    "label": 0
                },
                {
                    "sent": "Is it significant or is it just annoying or it's annoying it?",
                    "label": 0
                },
                {
                    "sent": "What kind of areas is it?",
                    "label": 0
                },
                {
                    "sent": "Ann is more in the stuff that you think would work in both cases and then doesn't.",
                    "label": 0
                },
                {
                    "sent": "So it preloads NUM py inside, by and so your script will contain a = a range 5, and now your looks perfectly fine and you run it on Python, then it doesn't run anymore.",
                    "label": 0
                },
                {
                    "sent": "You give it to these guys and they would think because it's called I Python there running Ipython the engines, but the running Python you could have I Python running as the client, but not as the engine.",
                    "label": 1
                },
                {
                    "sent": "So it's it's.",
                    "label": 0
                },
                {
                    "sent": "It's a.",
                    "label": 0
                },
                {
                    "sent": "It's a super sense innocence anet just but I just find it confusing because the ones once you use it you want to use things you can time things by preparing, preparing them with payments for sometime it fantastic.",
                    "label": 0
                },
                {
                    "sent": "And then now you want to show it in bags and you can't do it anymore.",
                    "label": 0
                },
                {
                    "sent": "So I just it.",
                    "label": 0
                },
                {
                    "sent": "Yeah.",
                    "label": 0
                },
                {
                    "sent": "OK. We're doing OK, but I think we're all tired.",
                    "label": 0
                },
                {
                    "sent": "How would we do a 10 minute break just to care minds a little bit stretch our legs and will be back here at.",
                    "label": 0
                },
                {
                    "sent": "10 minutes to or something like that.",
                    "label": 0
                },
                {
                    "sent": "I thought we went to 5:30.",
                    "label": 0
                },
                {
                    "sent": "We're going to five.",
                    "label": 0
                },
                {
                    "sent": "Alright, let's talk about my program sets.",
                    "label": 0
                },
                {
                    "sent": "Huh?",
                    "label": 0
                },
                {
                    "sent": "Sorry I have to check this is strange.",
                    "label": 0
                },
                {
                    "sent": "Nobody likes you.",
                    "label": 0
                },
                {
                    "sent": "Yeah, you want you want to go.",
                    "label": 0
                },
                {
                    "sent": "Now I could have sworn, Leon said, we're we're leaving at 6 that's the side I just want to double check this.",
                    "label": 0
                },
                {
                    "sent": "There's somebody Cam.",
                    "label": 0
                },
                {
                    "sent": "I seem to have no more Internet.",
                    "label": 0
                },
                {
                    "sent": "Yeah, we'll skip the break.",
                    "label": 0
                },
                {
                    "sent": "But so in that case we'll skip to break, and we'll do a Python in overview.",
                    "label": 0
                },
                {
                    "sent": "Sorry.",
                    "label": 0
                }
            ]
        },
        "clip_63": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Working out for you.",
                    "label": 0
                },
                {
                    "sent": "That's OK.",
                    "label": 0
                },
                {
                    "sent": "So Spark is going to be very similar, but everything has a different name and there's some advantages to spark as well that maybe I buy from them.",
                    "label": 0
                }
            ]
        },
        "clip_64": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "The motivation for Spark is.",
                    "label": 0
                },
                {
                    "sent": "Truly big data.",
                    "label": 0
                },
                {
                    "sent": "Not.",
                    "label": 0
                },
                {
                    "sent": "I got some data.",
                    "label": 0
                },
                {
                    "sent": "It's Facebook's daily logs of 60 terabytes.",
                    "label": 1
                },
                {
                    "sent": "It's the thousand genomes person projects of 200 terabytes.",
                    "label": 0
                },
                {
                    "sent": "It's a Google map index that you wanted to reverse this more than 10 petabytes.",
                    "label": 1
                },
                {
                    "sent": "Now if you if you imagine the cost of one terabyte disk is about 65, and you can only read that in about 3 hours, decides a little bit old.",
                    "label": 1
                },
                {
                    "sent": "You can imagine that there's a lot of bottleneck if you try to put all of this on one note you just it is done right, so you can't do.",
                    "label": 0
                },
                {
                    "sent": "Any data processing on this scale on a single node, but the kind of processing you do, specially if you look at these things or not, they're not tightly coupled, right, so?",
                    "label": 0
                },
                {
                    "sent": "You want some distributed memory stuff, but you want more than that rather than being able to distribute the data once and now they are local and now the computation will be faster 'cause the computation is closest data, distributing the data becomes a very essential point at this scale.",
                    "label": 0
                }
            ]
        },
        "clip_65": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So before spark.",
                    "label": 0
                },
                {
                    "sent": "You would use Hadoop for that and Hadoop in essence is.",
                    "label": 1
                },
                {
                    "sent": "It's a district distributed file system.",
                    "label": 0
                },
                {
                    "sent": "Every node has a part of the file system.",
                    "label": 0
                },
                {
                    "sent": "There's some redundancy is affected.",
                    "label": 0
                },
                {
                    "sent": "It's the file system that makes it into a useful thing.",
                    "label": 0
                },
                {
                    "sent": "The fact that you don't have to worry about where the data is, it's already distributed, and that's how it works.",
                    "label": 0
                },
                {
                    "sent": "And on top of that, in like essentially you have some tools to manipulate the data it's native language with Java, but there are some other interfaces.",
                    "label": 1
                },
                {
                    "sent": "The only drawback to this is great.",
                    "label": 0
                },
                {
                    "sent": "Your data is already distributed to keep it there forever, and whenever you have to do any data processing, the computer will go to the data.",
                    "label": 1
                },
                {
                    "sent": "Add.",
                    "label": 1
                },
                {
                    "sent": "What is not so nice, alright, but didn't work very well is that it was stuck with MapReduce.",
                    "label": 1
                },
                {
                    "sent": "Now you said what we were looking at MapReduce, but sometimes you have met produce results that go in sequence.",
                    "label": 1
                },
                {
                    "sent": "You never have this one map reduce you.",
                    "label": 1
                },
                {
                    "sent": "You do one kind of reduce.",
                    "label": 0
                },
                {
                    "sent": "And then there's another step of your of your analysis.",
                    "label": 0
                },
                {
                    "sent": "And yet another step.",
                    "label": 0
                },
                {
                    "sent": "So this this separate steps that would.",
                    "label": 0
                },
                {
                    "sent": "That is fine except in my producer in Hadoop.",
                    "label": 0
                },
                {
                    "sent": "Those intermediate steps would all be saved to disk, which means even though it's distributed, you're still limited by the speed of your hard drive for every step.",
                    "label": 0
                },
                {
                    "sent": "So so you read this report is performing calculation right and then repeat, so it's very IO heavy and others performances as she would like.",
                    "label": 0
                },
                {
                    "sent": "It solves the distribution part, but it doesn't solve the performance part.",
                    "label": 0
                }
            ]
        },
        "clip_66": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So is spark.",
                    "label": 0
                },
                {
                    "sent": "And you won't see this from the interface, but it is true.",
                    "label": 0
                },
                {
                    "sent": "More stuff is kept in memory, and in fact the the default is to keep it in memory until you say save this file.",
                    "label": 1
                },
                {
                    "sent": "Can do more things than MapReduce but never use it.",
                    "label": 0
                },
                {
                    "sent": "Still it still good in that, so we'll focus on that for now.",
                    "label": 0
                },
                {
                    "sent": "There's other language wrappers available, particular Python.",
                    "label": 1
                },
                {
                    "sent": "This goes on the name of five Spark another.",
                    "label": 0
                },
                {
                    "sent": "Another nice thing that that.",
                    "label": 1
                },
                {
                    "sent": "Won't have in Hadoop because everything gets computed and safe is lazy evaluation.",
                    "label": 0
                },
                {
                    "sent": "Has anybody heard of lazy evaluation?",
                    "label": 0
                },
                {
                    "sent": "Yeah, sure people.",
                    "label": 0
                },
                {
                    "sent": "Lazy evaluation is the way I see it.",
                    "label": 0
                },
                {
                    "sent": "Suppose you have an array.",
                    "label": 0
                },
                {
                    "sent": "You say I want every element times 2 and then you say I want only the first element.",
                    "label": 0
                },
                {
                    "sent": "In lazy evaluation.",
                    "label": 0
                },
                {
                    "sent": "A language with save the instruction that says you wanted this array times too, but not do it.",
                    "label": 0
                },
                {
                    "sent": "They'll just keep that as a list, and then when you say I only want the element 0, Ashburnham is zero.",
                    "label": 0
                },
                {
                    "sent": "It says, oh, you didn't need all of those.",
                    "label": 0
                },
                {
                    "sent": "I'm only evaluating the ones that you asked for, so it's lazy evaluations only evaluated once it's needed, which means if you only need a subset, it's much faster 'cause it doesn't have to take any of the accounts.",
                    "label": 0
                },
                {
                    "sent": "So it does that, and that improves things if you, especially if you have a pipeline, you can imagine.",
                    "label": 0
                },
                {
                    "sent": "OK, I want everything that mentions.",
                    "label": 0
                },
                {
                    "sent": "At the International Summer School, the next step is oh, and it has to have the word fantastic in it, right?",
                    "label": 0
                },
                {
                    "sent": "Well, half of them aren't necessary.",
                    "label": 1
                },
                {
                    "sent": "So in pipelines this could be very useful.",
                    "label": 0
                },
                {
                    "sent": "I'd ever done.",
                    "label": 1
                },
                {
                    "sent": "The seas keeps track how data is created blah blah blah so.",
                    "label": 0
                },
                {
                    "sent": "Better than Hadoop, so I'm not going to worry about how it is going to.",
                    "label": 0
                }
            ]
        },
        "clip_67": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Data spark annual see in Spark that it's it's the same thing as.",
                    "label": 0
                },
                {
                    "sent": "As I buy some in terms of.",
                    "label": 0
                },
                {
                    "sent": "Masters Workers engine's clients.",
                    "label": 0
                },
                {
                    "sent": "So in this case you talk about a driver program and worker programs.",
                    "label": 1
                },
                {
                    "sent": "And the driver is the one that sends that tells what to do and send to the workers.",
                    "label": 0
                },
                {
                    "sent": "They do it.",
                    "label": 0
                },
                {
                    "sent": "There's a second part that is very important and essential in Spark.",
                    "label": 0
                },
                {
                    "sent": "Are you so called resilient distributed datasets?",
                    "label": 1
                },
                {
                    "sent": "Think of them as distributed files.",
                    "label": 1
                },
                {
                    "sent": "And I called our DDS and I'm told him that by their files that are already pre distributed they might live in memory and it probably will until you save them.",
                    "label": 0
                },
                {
                    "sent": "But that's essentially their distributed files that probably live in memory.",
                    "label": 0
                },
                {
                    "sent": "Already distributed across workers, Brazilian blah blah blah.",
                    "label": 0
                },
                {
                    "sent": "So they won't break.",
                    "label": 1
                },
                {
                    "sent": "OK, so you want you want to now do something with that file set right so?",
                    "label": 0
                },
                {
                    "sent": "First thing you need to do is create the the spark cluster.",
                    "label": 0
                },
                {
                    "sent": "Very similar to the Python cluster and then you have to create an RDD or open an existing RDD.",
                    "label": 0
                }
            ]
        },
        "clip_68": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So it has the same kind of.",
                    "label": 0
                },
                {
                    "sent": "Feel to it.",
                    "label": 0
                },
                {
                    "sent": "There's a cluster manager.",
                    "label": 0
                },
                {
                    "sent": "There's a driver program.",
                    "label": 0
                },
                {
                    "sent": "Here are workers I put in some sub.",
                    "label": 0
                },
                {
                    "sent": "Details here you can have several executers within a worker.",
                    "label": 0
                },
                {
                    "sent": "Different tasks at the same time.",
                    "label": 0
                },
                {
                    "sent": "If you want that those are all details for for another time.",
                    "label": 0
                }
            ]
        },
        "clip_69": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And then will do and then I will look at Ice Park, which is an interface to spark.",
                    "label": 0
                },
                {
                    "sent": "Itself.",
                    "label": 0
                },
                {
                    "sent": "In there in my phone now.",
                    "label": 0
                },
                {
                    "sent": "How deviate a little bit from not using I Python at all.",
                    "label": 0
                },
                {
                    "sent": "Just because it's a little bit more convenient that I Python to start the cluster.",
                    "label": 0
                },
                {
                    "sent": "Anne Anne, so that's good for mischief, little time.",
                    "label": 0
                }
            ]
        },
        "clip_70": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "And so this should work on your if you if your setup work properly.",
                    "label": 0
                },
                {
                    "sent": "This should work if you want to start the setup section, make sure you have this interactive nodes and you've done source setup.",
                    "label": 1
                },
                {
                    "sent": "You could source setup Spark but which sets up worker process is Anna Master process.",
                    "label": 0
                },
                {
                    "sent": "So it sets up the whole infrastructure on a note this is stand alone.",
                    "label": 0
                },
                {
                    "sent": "This is not something you're going to do in production in production.",
                    "label": 0
                },
                {
                    "sent": "If European bridges, you'd ask for for some time on their head.",
                    "label": 0
                },
                {
                    "sent": "Open source nodes could have dedicated SparkNotes or loop nodes where this stuff is already running.",
                    "label": 0
                },
                {
                    "sent": "They probably don't have to do half the things here.",
                    "label": 0
                },
                {
                    "sent": "This just runs it.",
                    "label": 1
                },
                {
                    "sent": "I wouldn't call it it's real, it's not an emulation, but it runs it locally on the node, and so in your in your dot local or something, there is a local spark installation Now, which you probably want to remove afterwards, but.",
                    "label": 1
                },
                {
                    "sent": "So it does that it creates that it created and runs those and now inspired because it's kind of built on Hadoop.",
                    "label": 1
                },
                {
                    "sent": "Hadoop is built on Java.",
                    "label": 0
                },
                {
                    "sent": "These are Java Ancients rather than Python engines, but we're not going to see any of this because we're good.",
                    "label": 0
                }
            ]
        },
        "clip_71": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Just gotta use it as if they are Python.",
                    "label": 0
                },
                {
                    "sent": "So we're going to.",
                    "label": 0
                },
                {
                    "sent": "You can change this park directory UCI Python interface and run Python pyspark and you'll get this funny different.",
                    "label": 1
                },
                {
                    "sent": "Prompt, which is the I Python prompt, but I pricing plans are numbered.",
                    "label": 0
                },
                {
                    "sent": "The reason we're doing I Python is that it automatically loads the spark context.",
                    "label": 1
                },
                {
                    "sent": "The spark context is where sort of where we attach to the cluster is kind of like the client in the other case here is called the context.",
                    "label": 0
                }
            ]
        },
        "clip_72": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So here's a little example.",
                    "label": 0
                },
                {
                    "sent": "If you want to see if it's working, you could do.",
                    "label": 0
                },
                {
                    "sent": "You could import, they get host name from soccer, just see what house you have and this looks complicated.",
                    "label": 0
                },
                {
                    "sent": "But if you take it in parts this doesn't MapReduce I take arrange, I'll try to decompose this on the fly, take a range of 5 #0 to 4 and then I say.",
                    "label": 0
                },
                {
                    "sent": "Spark context please?",
                    "label": 0
                },
                {
                    "sent": "Paralyze this.",
                    "label": 0
                },
                {
                    "sent": "This creates one of those are DDS.",
                    "label": 0
                },
                {
                    "sent": "It takes this list and spread them out.",
                    "label": 0
                },
                {
                    "sent": "OK so like the map for the scatter right?",
                    "label": 0
                },
                {
                    "sent": "So scatter then on that I'm going to do a map.",
                    "label": 0
                },
                {
                    "sent": "Of the of a functional map was a function that will now act on a piece of information.",
                    "label": 0
                },
                {
                    "sent": "In this case I'm going to.",
                    "label": 0
                },
                {
                    "sent": "Give it a function.",
                    "label": 0
                },
                {
                    "sent": "This is it.",
                    "label": 0
                },
                {
                    "sent": "It's in Lambda form, so it means this is an in place function that takes X and returns get host name.",
                    "label": 0
                },
                {
                    "sent": "That gets that gets executed on each of them on each of these were called workers, and then I collect everything together and I get all the results.",
                    "label": 0
                },
                {
                    "sent": "They're all running on the same machine in this case, so I get the same thing.",
                    "label": 0
                },
                {
                    "sent": "If you did this on multiple nodes, you should get different nodes, but.",
                    "label": 0
                }
            ]
        },
        "clip_73": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So a little bit over about our DDS and then over your budget can do and I'll let you go.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "All the data should live in the RTD's and what you do is so you can create them.",
                    "label": 0
                },
                {
                    "sent": "They don't change, so whenever you manipulate the data you get a new RDD back.",
                    "label": 1
                },
                {
                    "sent": "They're lazily evaluated, so this new RTD doesn't really take any space until you do something with it, and if you discarded afterwards, I never take any file space at all.",
                    "label": 1
                },
                {
                    "sent": "They can be cashed so you can so you don't have to recompute things, and they can either be data that is just basically in this.",
                    "label": 1
                },
                {
                    "sent": "That is distributed or they can have sort of a key key value form so they become a key value store which you get so key value really is you associated value and you give it a label and then you could do things based on that label based on that key.",
                    "label": 0
                },
                {
                    "sent": "And that can be useful.",
                    "label": 0
                },
                {
                    "sent": "So you could sort things by key and things like that.",
                    "label": 0
                }
            ]
        },
        "clip_74": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Now I think it'll do a pipeline, so you'll create an RDD from some data source.",
                    "label": 1
                },
                {
                    "sent": "Could be a text file.",
                    "label": 0
                },
                {
                    "sent": "Realist you play?",
                    "label": 0
                },
                {
                    "sent": "Transformation, so you do something local to each of them and then you reduce it.",
                    "label": 1
                },
                {
                    "sent": "Or you do an action or you get some of the RDD back.",
                    "label": 0
                }
            ]
        },
        "clip_75": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So I'll go through this.",
                    "label": 0
                },
                {
                    "sent": "This last example here.",
                    "label": 0
                },
                {
                    "sent": "So paralyzed we already saw.",
                    "label": 0
                },
                {
                    "sent": "It can take a list, but it can also and then.",
                    "label": 0
                },
                {
                    "sent": "Convert it in RDD, which means it will have been distributed over those workers.",
                    "label": 0
                },
                {
                    "sent": "I can create something from a file and they can just say OK.",
                    "label": 0
                },
                {
                    "sent": "Here's an RDS file, read the file in and distribute.",
                    "label": 0
                },
                {
                    "sent": "And what happens with text files that distributes the lines?",
                    "label": 0
                },
                {
                    "sent": "So read it line by line and each line goes to a different worker, or transcode wherever sparkses is fit or.",
                    "label": 0
                }
            ]
        },
        "clip_76": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "How you have specified?",
                    "label": 0
                }
            ]
        },
        "clip_77": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "OK, so you have your RDD so you have read some some data in.",
                    "label": 1
                },
                {
                    "sent": "What do you want to do?",
                    "label": 0
                },
                {
                    "sent": "Well, there's a couple of things you can do this thing called mapping, which really in this case means each each element in Rd gets a function applied to it, and that gives you a new result.",
                    "label": 1
                },
                {
                    "sent": "Then the result is a new RDD.",
                    "label": 0
                },
                {
                    "sent": "You can have a filter or you can say, well, some of them.",
                    "label": 0
                },
                {
                    "sent": "I want to keep it out.",
                    "label": 0
                },
                {
                    "sent": "It's not based on the condition, so you go over all of them.",
                    "label": 0
                },
                {
                    "sent": "Some of them make it out of doubt and you are ready with the subset you can have.",
                    "label": 1
                },
                {
                    "sent": "What's called a flat map.",
                    "label": 1
                },
                {
                    "sent": "That sounds kind of funny, but if each of these functions were to return a list, what you would get is a collection of list.",
                    "label": 0
                },
                {
                    "sent": "But maybe you want one big list, so just concatenates lists.",
                    "label": 0
                },
                {
                    "sent": "There's some other things she can see.",
                    "label": 0
                },
                {
                    "sent": "What are the distinct values of of your of your list or Russia key values?",
                    "label": 0
                },
                {
                    "sent": "You can group by key, so you could take everything that was labeled the same and there's something for that.",
                    "label": 0
                },
                {
                    "sent": "You can reduce by key, which is useful if you say want to count the number of times the word whale occurs in the text of Moby Dick.",
                    "label": 1
                },
                {
                    "sent": "Sort by sort by key.",
                    "label": 0
                },
                {
                    "sent": "Sort of couple of things that you can do to transform transfer means you have an RDD.",
                    "label": 0
                },
                {
                    "sent": "You get an RDD back, so these are all lazily evaluated.",
                    "label": 0
                },
                {
                    "sent": "Nothing is happens with these until you.",
                    "label": 0
                }
            ]
        },
        "clip_78": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Do an action so an action is either a reduction you.",
                    "label": 0
                },
                {
                    "sent": "I think everything up account which is a specialized production.",
                    "label": 0
                },
                {
                    "sent": "Obviously you can collect, which means you get everything from all these arteries back as a list in Python.",
                    "label": 0
                },
                {
                    "sent": "If this is a big Artie, you don't want to do that.",
                    "label": 0
                },
                {
                    "sent": "You could take just three.",
                    "label": 0
                },
                {
                    "sent": "If it's an ordered RDD, that means you get the top three so it could be very useful to get the top N numbers.",
                    "label": 0
                },
                {
                    "sent": "You can take it ordered.",
                    "label": 0
                },
                {
                    "sent": "You can do Mexican men.",
                    "label": 0
                },
                {
                    "sent": "The mean standard deviation sum so.",
                    "label": 0
                },
                {
                    "sent": "You transform then your performance goals and action that you actually get.",
                    "label": 0
                },
                {
                    "sent": "That's when things get evaluated.",
                    "label": 0
                }
            ]
        },
        "clip_79": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Here's a little example, so here's a list of verbs that are paralyzed.",
                    "label": 0
                },
                {
                    "sent": "Then I make him into past tense by adding Ed, which doesn't always work in the English language.",
                    "label": 0
                },
                {
                    "sent": "This doesn't hasn't done anything, but when I collect, that's when it all gets computed and sent to the master and they get ruined.",
                    "label": 0
                },
                {
                    "sent": "The jumped site laughed runedance my lead again.",
                    "label": 0
                },
                {
                    "sent": "I can also just take one, so for the original RTD I just take one and they get run back.",
                    "label": 0
                },
                {
                    "sent": "I think I'm going to stop here.",
                    "label": 0
                },
                {
                    "sent": "There's some more slides.",
                    "label": 0
                },
                {
                    "sent": "There's a nice example at the end that counts.",
                    "label": 0
                },
                {
                    "sent": "The most common words in the novel Moby Dick.",
                    "label": 0
                },
                {
                    "sent": "I'll have you guess which ones are there and that it has all the steps.",
                    "label": 0
                },
                {
                    "sent": "And and it's it's fun to play with, but.",
                    "label": 0
                },
                {
                    "sent": "That's that's the.",
                    "label": 0
                },
                {
                    "sent": "I think that's all we should do this to this day.",
                    "label": 0
                },
                {
                    "sent": "Any questions, general or technical?",
                    "label": 0
                },
                {
                    "sent": "I'm wondering if.",
                    "label": 0
                },
                {
                    "sent": "Or can be used on top of Hadoop because it seems they are doing different things.",
                    "label": 0
                },
                {
                    "sent": "If you want to archive data.",
                    "label": 0
                },
                {
                    "sent": "I don't know, for example, in example seems that the data is centralized, but then we give it to workers and then we get it back.",
                    "label": 0
                },
                {
                    "sent": "But if you want the day to leave on the workers, is it possible with the service?",
                    "label": 0
                },
                {
                    "sent": "It depends on how you set it up, but you could you could have.",
                    "label": 0
                },
                {
                    "sent": "You could have the file system basically be pre distributed that the things I looked at reading from a text file and then from a list obviously start centrally, but that's not yeah, so spark is built on top of Hadoop, so there there is a beautiful nothing that Hadoop can do that spark into.",
                    "label": 0
                },
                {
                    "sent": "Have you?",
                    "label": 0
                },
                {
                    "sent": "Do people really speed up, you know, across clusters with large datasets?",
                    "label": 0
                },
                {
                    "sent": "I mean, I know that people would say you should look at raw performance, 'cause that's irrelevant.",
                    "label": 0
                },
                {
                    "sent": "This is this is there to be allowed to do things easily, but then it should at least go faster if you double the resource is its.",
                    "label": 0
                },
                {
                    "sent": "I didn't have time to do that.",
                    "label": 0
                },
                {
                    "sent": "Time is as much as it for the other ones and.",
                    "label": 0
                },
                {
                    "sent": "The real trouble with this is to find a case that is both large enough to show the benefits and small enough to fit.",
                    "label": 0
                },
                {
                    "sent": "And basically I don't have any pictures, right?",
                    "label": 0
                },
                {
                    "sent": "Erratically, yes.",
                    "label": 0
                },
                {
                    "sent": "'cause you're distributed over more than notes in the communication cost is less than than the work then yes, but.",
                    "label": 0
                },
                {
                    "sent": "I think part of it is just the fact that if you have it's data set that's just too big to fit on something, you have no choice and this is a framework.",
                    "label": 0
                },
                {
                    "sent": "I think that's the the.",
                    "label": 0
                },
                {
                    "sent": "Practical reason, but then people have, but you can do that without a as people have seen.",
                    "label": 0
                },
                {
                    "sent": "Yeah, that's no good.",
                    "label": 0
                },
                {
                    "sent": "I've got limited by having to write and so.",
                    "label": 0
                },
                {
                    "sent": "Yes, this is Mark.",
                    "label": 0
                },
                {
                    "sent": "It would be way better off if you have a lot of iterations.",
                    "label": 0
                },
                {
                    "sent": "If you go in or if it actually is an iteration or optimization.",
                    "label": 0
                },
                {
                    "sent": "You would see definite performance.",
                    "label": 0
                },
                {
                    "sent": "Increases.",
                    "label": 0
                },
                {
                    "sent": "No questions.",
                    "label": 0
                },
                {
                    "sent": "Alright, thank you.",
                    "label": 0
                }
            ]
        }
    }
}