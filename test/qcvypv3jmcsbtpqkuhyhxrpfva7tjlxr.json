{
    "id": "qcvypv3jmcsbtpqkuhyhxrpfva7tjlxr",
    "title": "SIHJoin: Querying Remote and Local Linked Data",
    "info": {
        "author": [
            "G\u00fcnter Ladwig, Institute of Applied Informatics and Formal Description Methods (AIFB), Karlsruhe Institute of Technology (KIT)"
        ],
        "published": "July 7, 2011",
        "recorded": "June 2011",
        "category": [
            "Top->Computer Science->Web Mining"
        ]
    },
    "url": "http://videolectures.net/eswc2011_ladwig_quering/",
    "segmentation": [
        [
            "Motivation what is actually linked?"
        ],
        [
            "Equipped with missing link data is RDF data that is distributed among high number of sources, and as you're probably well aware, according to the Link Data Principles.",
            "We can retrieve data or information about the UI about an identity entity that is identified when you I by dereferencing this UI and then we will get RDF graph back and we use these triples in.",
            "These sources also contain links to other sources which we can use to force discovery during query processing.",
            "Now in linked to group with the thing which was first proposed by aliphatic in 2009.",
            "We want to execute sparkle queries such as this one, which is a simple basic graph pattern query asking about friends of people who work at KIT and their names.",
            "And we want to execute these queries simply by retrieving link data, ur eyes and during query processing instead of using a triple store or sparkle endpoint.",
            "So actually I really want to stress here and if this is the only thing you remember from this talk then achieved one of my goals.",
            "If that data is actually retrieved to increase processing, we are life look ups.",
            "We do not use any sparkle endpoints.",
            "We do not use any triple store, but we simply dereference your eyes during query processing and use the data stored or which we get back from.",
            "These do arise to answer the queries by joining them along a query plan.",
            "And in this case we employ this so called exploration based link traversal which was also first proposed by orthotic."
        ],
        [
            "Now I'm.",
            "Link data crude processing introduces some new challenges.",
            "The first one is that.",
            "For answering a single query, we usually have to download or different dereference a higher large number of sources.",
            "In many cases, these are hundreds of sources that have to be dereferenced, and these sources are usually distributed among a large number of providers.",
            "So that we have unpredictable network latency.",
            "And in many cases we also discover these sources only at runtime, and we're very little information about the data actually contained in these sources.",
            "For example, often we do not even know the size of the cell sources, and we cannot predict how much data we get back.",
            "And in addition, which is also part of the title, is that we also want to or what we want to do here is also use local data to produce results and not only remotely stored link data."
        ],
        [
            "Before coming to our solution to this problem, I'm going to present a short overview on the pull based joint operation, which is usually employed by often employed by triple stores, and actually was also used in orthotics work.",
            "And in an iterative based join, basically the operation and we have a joint which is 2 operands.",
            "In this case we want to perform a joint on variable X onto between two triple patterns.",
            "The first is X works at KIT and then XNY.",
            "And we have some blink data source retrieval component which retrieves the link to the sources to include processing and stores in in some local in memory cache.",
            "And now the John operator gets the request or next next method is called which basically turns operator to work as long as it has two to produce a single result, and in this case it would for example retrieve one binding from for the left pattern and then use this binding to instantiate the right triple pattern and request this data.",
            "Now the problem here is that what if some data or the data for this request has not been retrieved yet.",
            "In this case we would have to wait here and block the whole query plan, even if there might be other parts of the query plan where data is available.",
            "And we could have been performing work.",
            "So what we want to avoid you is this blocking becausw.",
            "Some data might have not been retrieved yet, and actually another problem is that we can't even be sure that the data that we have in our local cache for this pattern is actually complete with all the data that is.",
            "It's just this triple pattern, because there might be other sources that are retrieved later during query processing, which might contain data matching this triple pattern.",
            "And all athletics work he proposed.",
            "Soccer is a nonblocking interrater.",
            "To solve this problem, which still maintains this pull based iterative model."
        ],
        [
            "But we on the other hand, propose.",
            "A stream based link data query processing."
        ],
        [
            "And here we treat the incoming data is finite streams, and by doing this we can actually leverage a lot of work that has been done.",
            "The database community on processing streams.",
            "Even finite streams, not only infinite streams.",
            "And in particular, we use the OR we built on the symmetric estron operator.",
            "Which uses hash table to keep track of scene inputs.",
            "And we employ this operator in a push based model and I will show you an example on the next slide for this.",
            "And here the execution is driven by the incoming data and not the results, as is the case for the iterative based model.",
            "This operators also, nonblocking and data, can arrive on any input in any order, because the name says it is symmetrical operator.",
            "And it also can produce results as early as possible.",
            "It does not have to wait for one.",
            "For example, the normal hash join operator would have to wait for one input to be completely available, which is not the case for the symmetric estrone operator."
        ],
        [
            "So coming back to the scenario on a join between triple patterns, we again have this component for retrieving link data sources.",
            "Which here doesn't put the data in a local cache, but instead actively pushes the incoming data.",
            "For example, we have a triple for the left triple pattern and actively pushes it into the query plan.",
            "The bindings and created and pushed into the operator and when we get at some later point in time, another pet are another triple which measures the other trooper pattern.",
            "We can then produce a final result.",
            "And in this way, the execution of the operator is driven by the incoming data.",
            "So the operator is only activated if there's actually data to be processed.",
            "But now where is the local data in this scenario?"
        ],
        [
            "So.",
            "Until now, Link data crew processing was mainly concerned with remote data only.",
            "But what we want to do is we want to execute queries over both remote and local data.",
            "For example, use case would be if you have some private data which we do not want to publish but is linked actually to remotely available data that you want to integrate, and you want to execute by queries or Federated queries.",
            "In this sense, over both of these datasets and we do not only want to produce local results and remote results, but actual results that combine both remote and local data.",
            "Now we could.",
            "Actually treat the local data is just yet another data source and just process it as we would any other link data source.",
            "But the problem here is of course that.",
            "This can be very inefficient because we might have a lot of data stored locally and probably not all of it matches the query to patent.",
            "And in addition, we can do better because usually this data will be stored in triple stores and we might will usually have several indexes available which enable us to retrieve only the data that actually matches the triple patterns.",
            "And this means that we want to use these local indexes and this."
        ],
        [
            "Is what the symmetric index has shown operator does.",
            "So this metric in exception operator is an extension of this push based symmetric question operator I present just.",
            "Mentioned earlier and we extend this with low access with pool based local access to local data.",
            "And what we want to do here is that load only data that is guaranteed to produce strong results.",
            "And we do this in a similar fashion as the as the iterate are driven or the pull based model I presented earlier where we instantly your triple patterns with bindings from one of the inputs and in this way that we can guarantee that the data we actually load from disk is guaranteed to produce strong results.",
            "However, what we what does concern here is that we want to preserve the push based execution.",
            "This operations that decision by the incoming results 'cause we want to avoid blocking.",
            "So for local access we have to perform IO and this would mean that we would have to wait for example for the disc 2.",
            "Reach data or we would have to wait for data to be read from disk and this is not what we want to do here because we want to be able to process remote data at any point in time.",
            "And to achieve this, we transferred the access to local data in separate access modules that encapsulate the access to locally stored data and indexes.",
            "We have one of these access modules for each joint operator in the query plan.",
            "And this success module works as in Cronus Lee from the rest of the operator, and was responsible for loading data.",
            "Given a particular request that was made from the join operator.",
            "After loading the data, then actively pushes the data back into the joint operator, which means the data is then processed the way as any other data that would have arrived from remote sources that have been processed."
        ],
        [
            "Now this is an overview of the symmetric index session operator on the left hand side we have the the join operator which has the two hash tables, one for each of the inputs they left.",
            "Input is in this case connected to another join operator lower and the query plan.",
            "And the right input is connected to their link data source retrieval component, which loads remote sources.",
            "And it is also connected to an access module which isn't currently performs this access to the Super Store that is also shown here."
        ],
        [
            "Now if we have some incoming data from the lower operator, for example, we have a binding for two variables X&Y.",
            "This data is pushed into the operator where it is inserted into the hash table, and in this case we cannot produce any genre.",
            "Let's be cause the other hash tables for empty for now.",
            "For each.",
            "Binding or input on this.",
            "On this input, we actually the operator performs the requested what you can see here is that the interpreter on the 1st variable was instantiated with the binding for the variable Y.",
            "And this is sent to the access module and processed completely open Cronus Lee, which means that if there is some other data arriving, for example from remote, their sources, this is can still be processed and inserted into the hash table and again, no.",
            "John results are produced.",
            "Because they have different binding for the variable Y, these binding sets.",
            "What the access module does is it sends this request to the local triple Store to retrieve all matching triples that are stored there, and then again in the same manner pushes them back into the join operator.",
            "So in this case we can actually be cause we instantiated a triple pattern with the entity P fixed for variable Y.",
            "This means that we actually produce a John result here, which is then pushed a subsequence operators or to the output depending on where the join operators located.",
            "An additional consideration here is.",
            "And that.",
            "All the data that is slow to load it for single request from from for the access module.",
            "We're actually have the same.",
            "We're actually be inserted in the same place in the hashtable because it contains the same binding for the joint variable, and in this case what we can do is that we don't push each each data item that was loaded on its own, but we push.",
            "We can process this data in whole batches and we will show during the evaluation.",
            "Hopefully that this is somewhat beneficial."
        ],
        [
            "Is Armenian already mentioned earlier?",
            "We also provide cost models for the symmetric index estren opperator.",
            "And these are mainly used.",
            "This could be used for Curry optimization, but we want to mainly use them to see how the cost or how the cost of this operator is put together.",
            "And here we define costs in terms of the tuples that are accessed and the cost of the physical operations needed.",
            "And we tried to abstract from the concrete implementations in some of the data structures that were used.",
            "So the cost of of 1 symmetric etc operator that joins two inputs A&B is actually made up of three parts.",
            "1st we have the cost for joining the data that arrives on the left input.",
            "Then we have the cost for the 2% arrive on the right input and finally the cost for the access module.",
            "I'm now going to shortly show you how the cost for the trip it's on the left input.",
            "Miscalculated"
        ],
        [
            "So this is a nice formula for this and.",
            "Actually.",
            "Each each operation that the operator does is of course done one for each trooper that arrives on the left input, which is given by the cardinality of the set A, which is the left input.",
            "So for each of these two points, we have to perform the following operations.",
            "First we have to insert the the triple into the hash table, which is represented by White Victor I.",
            "Then we have to probe the other hash table for John results, which is represented by the weight vector P. Then we have to create actually create the join results and the number of drawing results created is.",
            "Determined by the selectivity of the joint.",
            "And finally.",
            "We have to send a request for each incoming Cooper to the access module.",
            "And when we would want to use this customer for crew optimization, we would actually have to obtain these right factors through experiments, which can then be employed by the query optimizer to provide to perform query optimization."
        ],
        [
            "So.",
            "One issue or one issue of the previous work by Olaf Attic, the nonblocking iterate are was completeness, so this nonblocking iterate Theresa is also still and iterate are based as it is pull based.",
            "And the assumption that if made here is that.",
            "When we instantiate the triple pattern to request data then.",
            "We assume that on triplets matching this triplet pattern are actually contained in sources identified.",
            "By the UI is contained by the UI is contained in this triple pattern.",
            "So for example, if you go back to this triple pattern in the example query which contained DB pedia, the UI for DB pedia for the KIT at DB pedia, then the assumption would be that all triplets matching this triple pattern would be contained in this in this link data source.",
            "However, while this is often the case.",
            "Luca, this is not.",
            "This is often, but not always, the case, because Link data sources may contain arbitrary data, and what this means.",
            "That completeness here is not guaranteed actually in the next talk, all of Arctic is going to be talking about this issue in more detail.",
            "However, the symmetric in accession operator actually completes guarantees completeness because its operation at first it's operation of completely symmetrical.",
            "That means whenever a binding arrives on, either input is always inserted into the corresponding hash table, and these hash tables are used to keep track of all the previously seen without, which means that the final result is always complete with respect to that resources for what needs of the approaches, of course can guarantee is that there are not some other data sources that we didn't discover which might contain the data or result for the query, so this is the completeness is always with respect to the sources that were retrieved.",
            "However, of course, the symmetric indexation operator.",
            "Introduces memory overhead for keeping track of all this of all the data in these.",
            "Hash tables."
        ],
        [
            "So I now come to the evaluation which actually consists of two parts."
        ],
        [
            "First we wanted to have a look at the overall performance and.",
            "Show the benefits of three math career processing.",
            "In order to do this, we implemented we have first 2 systems that process remote data only.",
            "This is SQ, which is an implementation of the push based symmetric restaurant operator and on the other hand is NBI, which stands for nonblocking iterate are which was implemented in screen which was provided to us by orthotic.",
            "So thanks for that and on the second part of this part of the evaluation is where we compare.",
            "Systems that actually use remote and local data and then we have 3 system first, is there any food solution which actually loads all local data that is there for matching query patterns?",
            "And the other two systems use the indexes as described earlier, and the the third system S qib also uses pitching as also described earlier.",
            "For the evaluation we used data set that consists of several popular datasets such as DB Pedia, New York Times.",
            "In total we had about 266 million triples.",
            "The death for the systems that you with local data, we split a randomly split this data into remote part which was made up 90% of the data and the local part which made up the rest and this room.",
            "The remote data was deployed on a cumulus RDF linked data server on the local network and we did this in this case to ensure repeatability of the experiments.",
            "The local data was indexing a triple store on the on the local on a local disk.",
            "We came up with 10 different queries of different complexity with regard to query size and number of."
        ],
        [
            "Losses retrieved and then the 1st result is the comparison between the stream symmetric hash join operator and the non blocking it erator and on average the total query answering time of the symmetric session operator is about 9.7 seconds whereas it is about 41 seconds for them unblocking interrater, so this.",
            "Shows quite an improvement."
        ],
        [
            "The next realizes the comparison between these three different systems that use local data, and we can see here that both of the systems that use the indexes are.",
            "At least twice as fast or almost three times as fast as the naive solution, which shows that using taking advantage of in available indexes is beneficial, and we can also see see a slight slight improvement when employing batching."
        ],
        [
            "I'm the second part of the evaluation, where is where we wanted to examine the join operator performance in detail.",
            "Actually see if the cost models.",
            "Makes sense.",
            "Most of these results are in the paper, but for space and time reasons I only present one here and in this part we focus on joint processing with.",
            "The the both of these operators we again have four systems.",
            "And for the nonblocking iterate, in this case we used a custom implementation 'cause we wanted to put measurement points in the code in order to see which operation actually takes how much time.",
            "For in for this data, for this part of the elevation we created several synthetic datasets with different data characteristics, which in this case.",
            "We have several para meters.",
            "First we have the size of the left and right input.",
            "Then we have the fraction of the right input is local data.",
            "We have the joint selectivity and we have the number of sources and what we could do here is that we have all these para meters and we fix all but one of them and then we can vary one of those para meters and see how the query times behave.",
            "And I'm just going to show you."
        ],
        [
            "One of the results is that when we for higher selectivity or actually for lower selectivity, of course the the time that is, that is that the creation of downriver takes dominates the query processing time, which is indicated by this part of the cost model."
        ],
        [
            "So in conclusion, we propose the symmetric enastron operator for link data create processing, which integrates both push and pull based mechanism and supports both remote and local link data.",
            "We also provide cost models for this operator and the previously proposed nonblocking iterate are.",
            "And the one result is that the symmetric in ETC operator guarantees completeness with regard to the retrieved sources, and the evaluation shows an improvement over the previously proposed nonblocking iterate are and.",
            "We also were also able to show that using local indexes is beneficial.",
            "So this is my presentation.",
            "So thank you for your attention.",
            "Alright, thanks Gunther.",
            "We have time for a couple of questions.",
            "Hi Oscar, so my first my first question is really why do you call it Lynn data query Processing?",
            "I mean instead of just you are just dealing with sparkle endpoints.",
            "Yeah?",
            "That's yes, a quick one.",
            "I mean probably see you when I was reading it was actually I was not the one who coined this term, but link data query processing is called because it actually uses link data sources themselves instead of a sparkle endpoint.",
            "And now the second one, I mean sorry, sorry to take dude is yes, have you measured the I mean the memory overload that you have for buffering all the all the tuples?",
            "I mean, do you have a limit over there or no?",
            "Actually we didn't.",
            "I mean there is work in the database community on.",
            "On John operators that are able to process basically work in the same way, but they can spill two parts to secondary storage if there is too much memory use.",
            "And basically this would be applicable to this scenario as well, but we haven't done don't have any measurements for this.",
            "More questions.",
            "321 OK so I have just one question.",
            "When you say you have a local data.",
            "Yes, one Sparkle store locali.",
            "What happens if F two or three or five?",
            "And what happens if they are not local but somewhere else?",
            "Well, in this implementation you would have to ask each triplestore on its own.",
            "So basically you would have an overhead for this.",
            "But of course you could come up with some index that of the locally stored data, for example, or in mean it would be beneficial to have all everything in one triple store.",
            "I have one question regarding this.",
            "The possibility to store results on a secondary that's regarding the memory use the operator.",
            "Would it be possible?",
            "Or have you thought about using the cost model?",
            "Implementing in the cost model sort of threshold when it would make sense to switch to the iterate are based operator becausw of.",
            "Higher memory usage and when it would make sense to switch to the interpreter based model, still requires this local cache represented earlier.",
            "So basically there still the triplets are stored somewhere.",
            "I mean, there's there's extensive work on on this on this join operators that spill to secondary storage.",
            "Basically the main point of research there is when it is beneficial to spill, and Secondly, which of the data to spill to secondary storage.",
            "So basically so that you still have good performance.",
            "And my question was more under cost model where you can use the cost model as a decision to when it would make sense to use this joint.",
            "Alright, true?",
            "I mean this what is this is something that the query optimizer would then do.",
            "I mean, if it has the cost model for all the operators that are, you know possible, then the optimizer would use this to decide which operator to employ.",
            "I mean, you could actually think of having a combination of operators in the query plan.",
            "Of course yes, but we haven't done this year.",
            "If we don't have anymore questions, then thanks again Goodnight, thank you."
        ]
    ],
    "summarization": {
        "clip_0": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Motivation what is actually linked?",
                    "label": 0
                }
            ]
        },
        "clip_1": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Equipped with missing link data is RDF data that is distributed among high number of sources, and as you're probably well aware, according to the Link Data Principles.",
                    "label": 0
                },
                {
                    "sent": "We can retrieve data or information about the UI about an identity entity that is identified when you I by dereferencing this UI and then we will get RDF graph back and we use these triples in.",
                    "label": 0
                },
                {
                    "sent": "These sources also contain links to other sources which we can use to force discovery during query processing.",
                    "label": 0
                },
                {
                    "sent": "Now in linked to group with the thing which was first proposed by aliphatic in 2009.",
                    "label": 0
                },
                {
                    "sent": "We want to execute sparkle queries such as this one, which is a simple basic graph pattern query asking about friends of people who work at KIT and their names.",
                    "label": 0
                },
                {
                    "sent": "And we want to execute these queries simply by retrieving link data, ur eyes and during query processing instead of using a triple store or sparkle endpoint.",
                    "label": 0
                },
                {
                    "sent": "So actually I really want to stress here and if this is the only thing you remember from this talk then achieved one of my goals.",
                    "label": 0
                },
                {
                    "sent": "If that data is actually retrieved to increase processing, we are life look ups.",
                    "label": 0
                },
                {
                    "sent": "We do not use any sparkle endpoints.",
                    "label": 0
                },
                {
                    "sent": "We do not use any triple store, but we simply dereference your eyes during query processing and use the data stored or which we get back from.",
                    "label": 0
                },
                {
                    "sent": "These do arise to answer the queries by joining them along a query plan.",
                    "label": 0
                },
                {
                    "sent": "And in this case we employ this so called exploration based link traversal which was also first proposed by orthotic.",
                    "label": 0
                }
            ]
        },
        "clip_2": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Now I'm.",
                    "label": 0
                },
                {
                    "sent": "Link data crude processing introduces some new challenges.",
                    "label": 0
                },
                {
                    "sent": "The first one is that.",
                    "label": 0
                },
                {
                    "sent": "For answering a single query, we usually have to download or different dereference a higher large number of sources.",
                    "label": 0
                },
                {
                    "sent": "In many cases, these are hundreds of sources that have to be dereferenced, and these sources are usually distributed among a large number of providers.",
                    "label": 1
                },
                {
                    "sent": "So that we have unpredictable network latency.",
                    "label": 0
                },
                {
                    "sent": "And in many cases we also discover these sources only at runtime, and we're very little information about the data actually contained in these sources.",
                    "label": 0
                },
                {
                    "sent": "For example, often we do not even know the size of the cell sources, and we cannot predict how much data we get back.",
                    "label": 0
                },
                {
                    "sent": "And in addition, which is also part of the title, is that we also want to or what we want to do here is also use local data to produce results and not only remotely stored link data.",
                    "label": 0
                }
            ]
        },
        "clip_3": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Before coming to our solution to this problem, I'm going to present a short overview on the pull based joint operation, which is usually employed by often employed by triple stores, and actually was also used in orthotics work.",
                    "label": 0
                },
                {
                    "sent": "And in an iterative based join, basically the operation and we have a joint which is 2 operands.",
                    "label": 0
                },
                {
                    "sent": "In this case we want to perform a joint on variable X onto between two triple patterns.",
                    "label": 0
                },
                {
                    "sent": "The first is X works at KIT and then XNY.",
                    "label": 0
                },
                {
                    "sent": "And we have some blink data source retrieval component which retrieves the link to the sources to include processing and stores in in some local in memory cache.",
                    "label": 0
                },
                {
                    "sent": "And now the John operator gets the request or next next method is called which basically turns operator to work as long as it has two to produce a single result, and in this case it would for example retrieve one binding from for the left pattern and then use this binding to instantiate the right triple pattern and request this data.",
                    "label": 0
                },
                {
                    "sent": "Now the problem here is that what if some data or the data for this request has not been retrieved yet.",
                    "label": 0
                },
                {
                    "sent": "In this case we would have to wait here and block the whole query plan, even if there might be other parts of the query plan where data is available.",
                    "label": 0
                },
                {
                    "sent": "And we could have been performing work.",
                    "label": 0
                },
                {
                    "sent": "So what we want to avoid you is this blocking becausw.",
                    "label": 0
                },
                {
                    "sent": "Some data might have not been retrieved yet, and actually another problem is that we can't even be sure that the data that we have in our local cache for this pattern is actually complete with all the data that is.",
                    "label": 0
                },
                {
                    "sent": "It's just this triple pattern, because there might be other sources that are retrieved later during query processing, which might contain data matching this triple pattern.",
                    "label": 0
                },
                {
                    "sent": "And all athletics work he proposed.",
                    "label": 0
                },
                {
                    "sent": "Soccer is a nonblocking interrater.",
                    "label": 0
                },
                {
                    "sent": "To solve this problem, which still maintains this pull based iterative model.",
                    "label": 0
                }
            ]
        },
        "clip_4": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "But we on the other hand, propose.",
                    "label": 0
                },
                {
                    "sent": "A stream based link data query processing.",
                    "label": 0
                }
            ]
        },
        "clip_5": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And here we treat the incoming data is finite streams, and by doing this we can actually leverage a lot of work that has been done.",
                    "label": 0
                },
                {
                    "sent": "The database community on processing streams.",
                    "label": 0
                },
                {
                    "sent": "Even finite streams, not only infinite streams.",
                    "label": 0
                },
                {
                    "sent": "And in particular, we use the OR we built on the symmetric estron operator.",
                    "label": 0
                },
                {
                    "sent": "Which uses hash table to keep track of scene inputs.",
                    "label": 0
                },
                {
                    "sent": "And we employ this operator in a push based model and I will show you an example on the next slide for this.",
                    "label": 0
                },
                {
                    "sent": "And here the execution is driven by the incoming data and not the results, as is the case for the iterative based model.",
                    "label": 0
                },
                {
                    "sent": "This operators also, nonblocking and data, can arrive on any input in any order, because the name says it is symmetrical operator.",
                    "label": 0
                },
                {
                    "sent": "And it also can produce results as early as possible.",
                    "label": 0
                },
                {
                    "sent": "It does not have to wait for one.",
                    "label": 0
                },
                {
                    "sent": "For example, the normal hash join operator would have to wait for one input to be completely available, which is not the case for the symmetric estrone operator.",
                    "label": 0
                }
            ]
        },
        "clip_6": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So coming back to the scenario on a join between triple patterns, we again have this component for retrieving link data sources.",
                    "label": 0
                },
                {
                    "sent": "Which here doesn't put the data in a local cache, but instead actively pushes the incoming data.",
                    "label": 0
                },
                {
                    "sent": "For example, we have a triple for the left triple pattern and actively pushes it into the query plan.",
                    "label": 0
                },
                {
                    "sent": "The bindings and created and pushed into the operator and when we get at some later point in time, another pet are another triple which measures the other trooper pattern.",
                    "label": 0
                },
                {
                    "sent": "We can then produce a final result.",
                    "label": 0
                },
                {
                    "sent": "And in this way, the execution of the operator is driven by the incoming data.",
                    "label": 1
                },
                {
                    "sent": "So the operator is only activated if there's actually data to be processed.",
                    "label": 0
                },
                {
                    "sent": "But now where is the local data in this scenario?",
                    "label": 0
                }
            ]
        },
        "clip_7": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "Until now, Link data crew processing was mainly concerned with remote data only.",
                    "label": 0
                },
                {
                    "sent": "But what we want to do is we want to execute queries over both remote and local data.",
                    "label": 0
                },
                {
                    "sent": "For example, use case would be if you have some private data which we do not want to publish but is linked actually to remotely available data that you want to integrate, and you want to execute by queries or Federated queries.",
                    "label": 0
                },
                {
                    "sent": "In this sense, over both of these datasets and we do not only want to produce local results and remote results, but actual results that combine both remote and local data.",
                    "label": 0
                },
                {
                    "sent": "Now we could.",
                    "label": 0
                },
                {
                    "sent": "Actually treat the local data is just yet another data source and just process it as we would any other link data source.",
                    "label": 1
                },
                {
                    "sent": "But the problem here is of course that.",
                    "label": 0
                },
                {
                    "sent": "This can be very inefficient because we might have a lot of data stored locally and probably not all of it matches the query to patent.",
                    "label": 0
                },
                {
                    "sent": "And in addition, we can do better because usually this data will be stored in triple stores and we might will usually have several indexes available which enable us to retrieve only the data that actually matches the triple patterns.",
                    "label": 0
                },
                {
                    "sent": "And this means that we want to use these local indexes and this.",
                    "label": 0
                }
            ]
        },
        "clip_8": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Is what the symmetric index has shown operator does.",
                    "label": 1
                },
                {
                    "sent": "So this metric in exception operator is an extension of this push based symmetric question operator I present just.",
                    "label": 0
                },
                {
                    "sent": "Mentioned earlier and we extend this with low access with pool based local access to local data.",
                    "label": 1
                },
                {
                    "sent": "And what we want to do here is that load only data that is guaranteed to produce strong results.",
                    "label": 1
                },
                {
                    "sent": "And we do this in a similar fashion as the as the iterate are driven or the pull based model I presented earlier where we instantly your triple patterns with bindings from one of the inputs and in this way that we can guarantee that the data we actually load from disk is guaranteed to produce strong results.",
                    "label": 0
                },
                {
                    "sent": "However, what we what does concern here is that we want to preserve the push based execution.",
                    "label": 0
                },
                {
                    "sent": "This operations that decision by the incoming results 'cause we want to avoid blocking.",
                    "label": 0
                },
                {
                    "sent": "So for local access we have to perform IO and this would mean that we would have to wait for example for the disc 2.",
                    "label": 0
                },
                {
                    "sent": "Reach data or we would have to wait for data to be read from disk and this is not what we want to do here because we want to be able to process remote data at any point in time.",
                    "label": 1
                },
                {
                    "sent": "And to achieve this, we transferred the access to local data in separate access modules that encapsulate the access to locally stored data and indexes.",
                    "label": 1
                },
                {
                    "sent": "We have one of these access modules for each joint operator in the query plan.",
                    "label": 0
                },
                {
                    "sent": "And this success module works as in Cronus Lee from the rest of the operator, and was responsible for loading data.",
                    "label": 0
                },
                {
                    "sent": "Given a particular request that was made from the join operator.",
                    "label": 0
                },
                {
                    "sent": "After loading the data, then actively pushes the data back into the joint operator, which means the data is then processed the way as any other data that would have arrived from remote sources that have been processed.",
                    "label": 0
                }
            ]
        },
        "clip_9": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Now this is an overview of the symmetric index session operator on the left hand side we have the the join operator which has the two hash tables, one for each of the inputs they left.",
                    "label": 1
                },
                {
                    "sent": "Input is in this case connected to another join operator lower and the query plan.",
                    "label": 0
                },
                {
                    "sent": "And the right input is connected to their link data source retrieval component, which loads remote sources.",
                    "label": 1
                },
                {
                    "sent": "And it is also connected to an access module which isn't currently performs this access to the Super Store that is also shown here.",
                    "label": 0
                }
            ]
        },
        "clip_10": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Now if we have some incoming data from the lower operator, for example, we have a binding for two variables X&Y.",
                    "label": 0
                },
                {
                    "sent": "This data is pushed into the operator where it is inserted into the hash table, and in this case we cannot produce any genre.",
                    "label": 0
                },
                {
                    "sent": "Let's be cause the other hash tables for empty for now.",
                    "label": 0
                },
                {
                    "sent": "For each.",
                    "label": 0
                },
                {
                    "sent": "Binding or input on this.",
                    "label": 0
                },
                {
                    "sent": "On this input, we actually the operator performs the requested what you can see here is that the interpreter on the 1st variable was instantiated with the binding for the variable Y.",
                    "label": 0
                },
                {
                    "sent": "And this is sent to the access module and processed completely open Cronus Lee, which means that if there is some other data arriving, for example from remote, their sources, this is can still be processed and inserted into the hash table and again, no.",
                    "label": 0
                },
                {
                    "sent": "John results are produced.",
                    "label": 0
                },
                {
                    "sent": "Because they have different binding for the variable Y, these binding sets.",
                    "label": 0
                },
                {
                    "sent": "What the access module does is it sends this request to the local triple Store to retrieve all matching triples that are stored there, and then again in the same manner pushes them back into the join operator.",
                    "label": 1
                },
                {
                    "sent": "So in this case we can actually be cause we instantiated a triple pattern with the entity P fixed for variable Y.",
                    "label": 0
                },
                {
                    "sent": "This means that we actually produce a John result here, which is then pushed a subsequence operators or to the output depending on where the join operators located.",
                    "label": 0
                },
                {
                    "sent": "An additional consideration here is.",
                    "label": 0
                },
                {
                    "sent": "And that.",
                    "label": 0
                },
                {
                    "sent": "All the data that is slow to load it for single request from from for the access module.",
                    "label": 0
                },
                {
                    "sent": "We're actually have the same.",
                    "label": 0
                },
                {
                    "sent": "We're actually be inserted in the same place in the hashtable because it contains the same binding for the joint variable, and in this case what we can do is that we don't push each each data item that was loaded on its own, but we push.",
                    "label": 0
                },
                {
                    "sent": "We can process this data in whole batches and we will show during the evaluation.",
                    "label": 0
                },
                {
                    "sent": "Hopefully that this is somewhat beneficial.",
                    "label": 0
                }
            ]
        },
        "clip_11": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Is Armenian already mentioned earlier?",
                    "label": 0
                },
                {
                    "sent": "We also provide cost models for the symmetric index estren opperator.",
                    "label": 1
                },
                {
                    "sent": "And these are mainly used.",
                    "label": 0
                },
                {
                    "sent": "This could be used for Curry optimization, but we want to mainly use them to see how the cost or how the cost of this operator is put together.",
                    "label": 0
                },
                {
                    "sent": "And here we define costs in terms of the tuples that are accessed and the cost of the physical operations needed.",
                    "label": 0
                },
                {
                    "sent": "And we tried to abstract from the concrete implementations in some of the data structures that were used.",
                    "label": 0
                },
                {
                    "sent": "So the cost of of 1 symmetric etc operator that joins two inputs A&B is actually made up of three parts.",
                    "label": 1
                },
                {
                    "sent": "1st we have the cost for joining the data that arrives on the left input.",
                    "label": 0
                },
                {
                    "sent": "Then we have the cost for the 2% arrive on the right input and finally the cost for the access module.",
                    "label": 1
                },
                {
                    "sent": "I'm now going to shortly show you how the cost for the trip it's on the left input.",
                    "label": 0
                },
                {
                    "sent": "Miscalculated",
                    "label": 0
                }
            ]
        },
        "clip_12": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So this is a nice formula for this and.",
                    "label": 0
                },
                {
                    "sent": "Actually.",
                    "label": 0
                },
                {
                    "sent": "Each each operation that the operator does is of course done one for each trooper that arrives on the left input, which is given by the cardinality of the set A, which is the left input.",
                    "label": 1
                },
                {
                    "sent": "So for each of these two points, we have to perform the following operations.",
                    "label": 0
                },
                {
                    "sent": "First we have to insert the the triple into the hash table, which is represented by White Victor I.",
                    "label": 0
                },
                {
                    "sent": "Then we have to probe the other hash table for John results, which is represented by the weight vector P. Then we have to create actually create the join results and the number of drawing results created is.",
                    "label": 1
                },
                {
                    "sent": "Determined by the selectivity of the joint.",
                    "label": 0
                },
                {
                    "sent": "And finally.",
                    "label": 1
                },
                {
                    "sent": "We have to send a request for each incoming Cooper to the access module.",
                    "label": 0
                },
                {
                    "sent": "And when we would want to use this customer for crew optimization, we would actually have to obtain these right factors through experiments, which can then be employed by the query optimizer to provide to perform query optimization.",
                    "label": 0
                }
            ]
        },
        "clip_13": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "One issue or one issue of the previous work by Olaf Attic, the nonblocking iterate are was completeness, so this nonblocking iterate Theresa is also still and iterate are based as it is pull based.",
                    "label": 0
                },
                {
                    "sent": "And the assumption that if made here is that.",
                    "label": 0
                },
                {
                    "sent": "When we instantiate the triple pattern to request data then.",
                    "label": 0
                },
                {
                    "sent": "We assume that on triplets matching this triplet pattern are actually contained in sources identified.",
                    "label": 0
                },
                {
                    "sent": "By the UI is contained by the UI is contained in this triple pattern.",
                    "label": 0
                },
                {
                    "sent": "So for example, if you go back to this triple pattern in the example query which contained DB pedia, the UI for DB pedia for the KIT at DB pedia, then the assumption would be that all triplets matching this triple pattern would be contained in this in this link data source.",
                    "label": 0
                },
                {
                    "sent": "However, while this is often the case.",
                    "label": 0
                },
                {
                    "sent": "Luca, this is not.",
                    "label": 0
                },
                {
                    "sent": "This is often, but not always, the case, because Link data sources may contain arbitrary data, and what this means.",
                    "label": 0
                },
                {
                    "sent": "That completeness here is not guaranteed actually in the next talk, all of Arctic is going to be talking about this issue in more detail.",
                    "label": 0
                },
                {
                    "sent": "However, the symmetric in accession operator actually completes guarantees completeness because its operation at first it's operation of completely symmetrical.",
                    "label": 0
                },
                {
                    "sent": "That means whenever a binding arrives on, either input is always inserted into the corresponding hash table, and these hash tables are used to keep track of all the previously seen without, which means that the final result is always complete with respect to that resources for what needs of the approaches, of course can guarantee is that there are not some other data sources that we didn't discover which might contain the data or result for the query, so this is the completeness is always with respect to the sources that were retrieved.",
                    "label": 0
                },
                {
                    "sent": "However, of course, the symmetric indexation operator.",
                    "label": 0
                },
                {
                    "sent": "Introduces memory overhead for keeping track of all this of all the data in these.",
                    "label": 0
                },
                {
                    "sent": "Hash tables.",
                    "label": 0
                }
            ]
        },
        "clip_14": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So I now come to the evaluation which actually consists of two parts.",
                    "label": 0
                }
            ]
        },
        "clip_15": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "First we wanted to have a look at the overall performance and.",
                    "label": 0
                },
                {
                    "sent": "Show the benefits of three math career processing.",
                    "label": 0
                },
                {
                    "sent": "In order to do this, we implemented we have first 2 systems that process remote data only.",
                    "label": 0
                },
                {
                    "sent": "This is SQ, which is an implementation of the push based symmetric restaurant operator and on the other hand is NBI, which stands for nonblocking iterate are which was implemented in screen which was provided to us by orthotic.",
                    "label": 0
                },
                {
                    "sent": "So thanks for that and on the second part of this part of the evaluation is where we compare.",
                    "label": 0
                },
                {
                    "sent": "Systems that actually use remote and local data and then we have 3 system first, is there any food solution which actually loads all local data that is there for matching query patterns?",
                    "label": 0
                },
                {
                    "sent": "And the other two systems use the indexes as described earlier, and the the third system S qib also uses pitching as also described earlier.",
                    "label": 0
                },
                {
                    "sent": "For the evaluation we used data set that consists of several popular datasets such as DB Pedia, New York Times.",
                    "label": 0
                },
                {
                    "sent": "In total we had about 266 million triples.",
                    "label": 0
                },
                {
                    "sent": "The death for the systems that you with local data, we split a randomly split this data into remote part which was made up 90% of the data and the local part which made up the rest and this room.",
                    "label": 0
                },
                {
                    "sent": "The remote data was deployed on a cumulus RDF linked data server on the local network and we did this in this case to ensure repeatability of the experiments.",
                    "label": 0
                },
                {
                    "sent": "The local data was indexing a triple store on the on the local on a local disk.",
                    "label": 0
                },
                {
                    "sent": "We came up with 10 different queries of different complexity with regard to query size and number of.",
                    "label": 0
                }
            ]
        },
        "clip_16": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Losses retrieved and then the 1st result is the comparison between the stream symmetric hash join operator and the non blocking it erator and on average the total query answering time of the symmetric session operator is about 9.7 seconds whereas it is about 41 seconds for them unblocking interrater, so this.",
                    "label": 0
                },
                {
                    "sent": "Shows quite an improvement.",
                    "label": 0
                }
            ]
        },
        "clip_17": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "The next realizes the comparison between these three different systems that use local data, and we can see here that both of the systems that use the indexes are.",
                    "label": 0
                },
                {
                    "sent": "At least twice as fast or almost three times as fast as the naive solution, which shows that using taking advantage of in available indexes is beneficial, and we can also see see a slight slight improvement when employing batching.",
                    "label": 0
                }
            ]
        },
        "clip_18": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "I'm the second part of the evaluation, where is where we wanted to examine the join operator performance in detail.",
                    "label": 0
                },
                {
                    "sent": "Actually see if the cost models.",
                    "label": 0
                },
                {
                    "sent": "Makes sense.",
                    "label": 0
                },
                {
                    "sent": "Most of these results are in the paper, but for space and time reasons I only present one here and in this part we focus on joint processing with.",
                    "label": 0
                },
                {
                    "sent": "The the both of these operators we again have four systems.",
                    "label": 0
                },
                {
                    "sent": "And for the nonblocking iterate, in this case we used a custom implementation 'cause we wanted to put measurement points in the code in order to see which operation actually takes how much time.",
                    "label": 0
                },
                {
                    "sent": "For in for this data, for this part of the elevation we created several synthetic datasets with different data characteristics, which in this case.",
                    "label": 0
                },
                {
                    "sent": "We have several para meters.",
                    "label": 0
                },
                {
                    "sent": "First we have the size of the left and right input.",
                    "label": 0
                },
                {
                    "sent": "Then we have the fraction of the right input is local data.",
                    "label": 0
                },
                {
                    "sent": "We have the joint selectivity and we have the number of sources and what we could do here is that we have all these para meters and we fix all but one of them and then we can vary one of those para meters and see how the query times behave.",
                    "label": 0
                },
                {
                    "sent": "And I'm just going to show you.",
                    "label": 0
                }
            ]
        },
        "clip_19": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "One of the results is that when we for higher selectivity or actually for lower selectivity, of course the the time that is, that is that the creation of downriver takes dominates the query processing time, which is indicated by this part of the cost model.",
                    "label": 0
                }
            ]
        },
        "clip_20": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So in conclusion, we propose the symmetric enastron operator for link data create processing, which integrates both push and pull based mechanism and supports both remote and local link data.",
                    "label": 0
                },
                {
                    "sent": "We also provide cost models for this operator and the previously proposed nonblocking iterate are.",
                    "label": 0
                },
                {
                    "sent": "And the one result is that the symmetric in ETC operator guarantees completeness with regard to the retrieved sources, and the evaluation shows an improvement over the previously proposed nonblocking iterate are and.",
                    "label": 0
                },
                {
                    "sent": "We also were also able to show that using local indexes is beneficial.",
                    "label": 0
                },
                {
                    "sent": "So this is my presentation.",
                    "label": 0
                },
                {
                    "sent": "So thank you for your attention.",
                    "label": 0
                },
                {
                    "sent": "Alright, thanks Gunther.",
                    "label": 0
                },
                {
                    "sent": "We have time for a couple of questions.",
                    "label": 0
                },
                {
                    "sent": "Hi Oscar, so my first my first question is really why do you call it Lynn data query Processing?",
                    "label": 0
                },
                {
                    "sent": "I mean instead of just you are just dealing with sparkle endpoints.",
                    "label": 0
                },
                {
                    "sent": "Yeah?",
                    "label": 0
                },
                {
                    "sent": "That's yes, a quick one.",
                    "label": 0
                },
                {
                    "sent": "I mean probably see you when I was reading it was actually I was not the one who coined this term, but link data query processing is called because it actually uses link data sources themselves instead of a sparkle endpoint.",
                    "label": 0
                },
                {
                    "sent": "And now the second one, I mean sorry, sorry to take dude is yes, have you measured the I mean the memory overload that you have for buffering all the all the tuples?",
                    "label": 0
                },
                {
                    "sent": "I mean, do you have a limit over there or no?",
                    "label": 0
                },
                {
                    "sent": "Actually we didn't.",
                    "label": 0
                },
                {
                    "sent": "I mean there is work in the database community on.",
                    "label": 0
                },
                {
                    "sent": "On John operators that are able to process basically work in the same way, but they can spill two parts to secondary storage if there is too much memory use.",
                    "label": 0
                },
                {
                    "sent": "And basically this would be applicable to this scenario as well, but we haven't done don't have any measurements for this.",
                    "label": 0
                },
                {
                    "sent": "More questions.",
                    "label": 0
                },
                {
                    "sent": "321 OK so I have just one question.",
                    "label": 0
                },
                {
                    "sent": "When you say you have a local data.",
                    "label": 0
                },
                {
                    "sent": "Yes, one Sparkle store locali.",
                    "label": 0
                },
                {
                    "sent": "What happens if F two or three or five?",
                    "label": 0
                },
                {
                    "sent": "And what happens if they are not local but somewhere else?",
                    "label": 0
                },
                {
                    "sent": "Well, in this implementation you would have to ask each triplestore on its own.",
                    "label": 0
                },
                {
                    "sent": "So basically you would have an overhead for this.",
                    "label": 0
                },
                {
                    "sent": "But of course you could come up with some index that of the locally stored data, for example, or in mean it would be beneficial to have all everything in one triple store.",
                    "label": 0
                },
                {
                    "sent": "I have one question regarding this.",
                    "label": 0
                },
                {
                    "sent": "The possibility to store results on a secondary that's regarding the memory use the operator.",
                    "label": 0
                },
                {
                    "sent": "Would it be possible?",
                    "label": 0
                },
                {
                    "sent": "Or have you thought about using the cost model?",
                    "label": 0
                },
                {
                    "sent": "Implementing in the cost model sort of threshold when it would make sense to switch to the iterate are based operator becausw of.",
                    "label": 0
                },
                {
                    "sent": "Higher memory usage and when it would make sense to switch to the interpreter based model, still requires this local cache represented earlier.",
                    "label": 0
                },
                {
                    "sent": "So basically there still the triplets are stored somewhere.",
                    "label": 0
                },
                {
                    "sent": "I mean, there's there's extensive work on on this on this join operators that spill to secondary storage.",
                    "label": 0
                },
                {
                    "sent": "Basically the main point of research there is when it is beneficial to spill, and Secondly, which of the data to spill to secondary storage.",
                    "label": 0
                },
                {
                    "sent": "So basically so that you still have good performance.",
                    "label": 0
                },
                {
                    "sent": "And my question was more under cost model where you can use the cost model as a decision to when it would make sense to use this joint.",
                    "label": 0
                },
                {
                    "sent": "Alright, true?",
                    "label": 0
                },
                {
                    "sent": "I mean this what is this is something that the query optimizer would then do.",
                    "label": 0
                },
                {
                    "sent": "I mean, if it has the cost model for all the operators that are, you know possible, then the optimizer would use this to decide which operator to employ.",
                    "label": 0
                },
                {
                    "sent": "I mean, you could actually think of having a combination of operators in the query plan.",
                    "label": 0
                },
                {
                    "sent": "Of course yes, but we haven't done this year.",
                    "label": 0
                },
                {
                    "sent": "If we don't have anymore questions, then thanks again Goodnight, thank you.",
                    "label": 0
                }
            ]
        }
    }
}