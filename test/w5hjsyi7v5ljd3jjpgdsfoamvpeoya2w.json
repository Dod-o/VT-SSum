{
    "id": "w5hjsyi7v5ljd3jjpgdsfoamvpeoya2w",
    "title": "DBToaster: Aggressive Compilation Techniques for Online Aggregation",
    "info": {
        "author": [
            "Christoph Koch, Department of Computer Science, Cornell University"
        ],
        "published": "June 7, 2010",
        "recorded": "May 2010",
        "category": [
            "Top->Business->Management->Knowledge Management"
        ]
    },
    "url": "http://videolectures.net/akbc2010_koch_fivm/",
    "segmentation": [
        [
            "So this this talk is about work that is currently going on at Cornell on a project called DB Toaster and the main are watching goal of this work is to compile database queries to very efficient codes eliminating the classical operators that you have in a database system for efficient affiliation and in this talk I'm also going to talk about show you how to apply this, possibly to inference in graphical models."
        ],
        [
            "So I mean, just like one slides of the how we came to our motivation.",
            "So currently if you look into what happens in the database literature in our community, there's entire communities of possible users who avoid databases.",
            "They don't use delivery systems, although possibly if they're good enough.",
            "So to say it would be the right thing for them, and then includes all kinds of scientists.",
            "And it also includes large web application companies like Google, Yahoo, etc.",
            "They don't use databases for certain data management jobs, for which you could use them if they are fast and scalable enough, although then very motivation of database management systems is that they would be optimized for their purpose and they would be fast and scalable enough.",
            "So what you see happening now in industry, but also in research more and more is that people focus more on lightweight systems.",
            "Things like key value stores and so on, where people are willing to give up expressiveness.",
            "For example in the query language to achieve scalability.",
            "But you also see in cloud computing consists of map, reduce etc.",
            "Is that people are willing to give up consistency for scalability?",
            "Yeah, particularly you know transactional consistency so that you could just scale you algorithms.",
            "There's also a crowd of people in the database research community that say, OK, this classical idea of having is 1 size fits all database systems.",
            "Relational database systems that would be used for all kinds of contexts.",
            "Maybe the exclusion of separation between transactional processing and analytical processing is outdated.",
            "It's actually not true that we can achieve this single system that has everything.",
            "And nowadays this work on different kinds of specific database system.",
            "Scientifically systems stream database systems, sensor data systems etc.",
            "So."
        ],
        [
            "In Debbie Toaster, what you're trying to achieve is we would like to automate automate the the instantiation of special purpose lightweight data management systems from specifications that sacred workloads and maybe use applications.",
            "So we would like to in particular develop techniques for compiling database applications and database management systems together into application systems that are lightweight and achieve their job and are reliable and scalable."
        ],
        [
            "So why?",
            "Why do we focus compilation?",
            "I'm so one thing that I have said is compilation has been starting the context of database systems.",
            "For example, in very early work in system are also by dumb pittari and in a number of other things like you know Sybase I anywhere the outlet system for mobile applications also in stream based this compilation going on etc.",
            "So well one idea is you've got database queries and classical database management system query execution engine interprets these queries.",
            "You can think of.",
            "Specifications in the language, and you interpret them.",
            "That means there's a lot of kind of dynamic processing overheads.",
            "Basically as a dynamic data structure that is in in memory that were censored, query initial today that can change and you interpreted secure destruction.",
            "You switch around between jump around between representations of the query in the data center, which is better.",
            "Cache locality and these kinds of things.",
            "So if you haven't got a query or you've got a work of queries that is basically fixed for a long time, for example, you've got fixed applications like SCP or PeopleSoft that have a number of queries hard coded more less.",
            "Model parameterizations in your code.",
            "What you could do is you could compile these queries down to machine code that is just that's what it needs to do, not more.",
            "But in applications in general, you might have other database features that you might not need an old context.",
            "For example, you might not need certain combinations of things that would classically come with transaction support for the dimensions would do, but your application will not have certain corner cases, and you could implement much more efficient algorithms, and you could kind of realized this by combining a database application.",
            "And eliminating the features from the database management system to make it as efficient as possible."
        ],
        [
            "So.",
            "Right, and I'm going to focus on this special new aggregate aggressive pre compilation technique and it turns curse into native code.",
            "It eliminates the classical operators like joints etc.",
            "They used in very processing and we argue that this is actually better but you will see that this is true.",
            "We're going to focus.",
            "I'm going to focus in this talk on incremental view maintenance.",
            "That's the problem of you've got a query that is fixed that stands for awhile and you materializes for results so called view.",
            "So that means you store the current salt in the database and now whenever the data is the source database changes, you're going to try to do this cheapest steps possible to update this materialized Resource Center assault.",
            "Hopefully not just compute compute Invictus query from scratching again, overwriting.",
            "So this is old.",
            "Representation of the query result.",
            "So what you're going to see is that this compiles programs that we produce in this approach have some nice properties.",
            "In particular, it's.",
            "To my knowledge, the first hard result it shows that incremental processing of queries is fundamentally easier than an incremental process.",
            "Actually, complexity theoretic results here, but it has special implications.",
            "In particular, one can show that for each particular aggregates value, each particular Democratic is a floating point number, an integer.",
            "In your database you need only a constant amount of work to do.",
            "Updating give me an update to the database that is of constant size.",
            "Let's say a single tuple changes.",
            "Of course.",
            "In general, you might have bulk updates, but you would kind of be able to apply these results accordingly.",
            "So a constant amount of work, sequential work for particular for updating particular value, and it also admits extremely embarrassing parallelism.",
            "You can example implements purely push based parallel processors that send a minimal amount of data.",
            "That means you can do eventual consistency methods, but you don't do anything really to synchronize and you only send as much data as you really have to send.",
            "In the best possible world.",
            "So that's actually a nice and surprising property.",
            "This is possible."
        ],
        [
            "So I'm going to show you some kind of pseudocode here for what the code looks like that we're going to get as a computational side.",
            "So in on the left hand side you see an aggregate query in SQL in SQL, and I'm going to talk a bit more about this, but you could think about this is a kind of marginalization apologetic inference task as well.",
            "In this case it's a query over some kind of you know, business scheme of customers are asking for the number of customers of the same nation for each particular customer, OK?",
            "And what the compilation result is here is a procedure like that a trigger for each particular changes database.",
            "For example, an insertion into a couple of the customer.",
            "It would be also deletion from the customization when update and so on, and that's for each of the different relations that are either based scheme after database and what you see there is.",
            "You can think of this as a C program and these QFC idea for example here are array accesses.",
            "OK, you've got left inside and right inside the statements here.",
            "So we have basically the first line is in.",
            "This tree is going to say.",
            "Well update Q of C ID.",
            "Yeah by adding in Q1 of nation for particular CDN nation which is at the arguments of the trigger.",
            "So the trick is called with this tuple which is to insert a couple into the custom relation.",
            "OK so the only thing you need to keep in mind in general nations and see if these are not integers is that these are kind of associative arrays.",
            "OK, maybe not the most basic C arrays there also sometimes loops and these lips look naive.",
            "You might say OK but I do.",
            "Is I replace interesting joint process?",
            "Processing techniques by naive loop processing.",
            "That's not what I do.",
            "In particular, all the values that I look over always occur left hand side of these array accesses.",
            "That means I'm going to in such a loop, always right in each iteration to different place in memory.",
            "That means all of these things are really necessary, and that's strictly different from naive.",
            "Join processing.",
            "OK, I'm going to just write lots of various because lots of values have to be updated here.",
            "I have quickly and a group by column see ID and they will have to write too, because the change implies a change to lots and lots of different fields.",
            "So this code I could run through a particular trace and show that this is really equivalent to incremental.",
            "Maintaining this at this aggregate query, I'm not going to do this right now, just asked to believe this, but it is in general not obvious how to get to this particular this case.",
            "I've got a self join.",
            "My peer group is complicated, but this program is correct OK?",
            "Um?",
            "There is it all think it takes linear time.",
            "There's this simple for loop, yeah, but if you ask how much work is done for each particular field that you write to its constant time 'cause never and there's a loop, yeah, right?",
            "Yeah, in two different steps of the loop to the same memory address.",
            "You don't have to understand how this is done because I've not told you yet."
        ],
        [
            "OK, but that's what it will look like.",
            "So.",
            "Let me say a few words on words on this classical notion of incremental view maintenance databases.",
            "There has been a huge amount of work, lots of papers, and this is something important that has been implemented in all the major systems here.",
            "For example, in Oracle days some of it and in Microsoft and IBM DB 2, there's some of it Microsoft SQL Server and the idea here is the following.",
            "You've got a store presentation.",
            "The materialized view of the queries ult.",
            "You change the database making up to the database and you don't want to recompute the view from scratch because that is costly.",
            "What you would like to do is you would like to have some kind of representation by so called Delta query of what changes to their query results, so you will transform the query the input query into a so called Delta query that expresses.",
            "Yeah basically what has to be changed.",
            "The results given the database, the Conservatives in the updates, but the idea is that this will most look at the update only and do as little work as possible on the base query.",
            "So to do as little work as possible overall.",
            "OK, so this is not the query that's not knew when we're going to use this.",
            "OK, but that's basically the idea.",
            "Is Delta queries in general will work on less data and usually also structure somewhat simplified.",
            "We have one joint less or something like that.",
            "So still."
        ],
        [
            "I will say though, I'm in general the language of Deltic versus the same language instead of the original phrase to need to express all the possible Delta curves of SQL queries, I need all of SQL, so in that sense I can't really argue that you know doing the Delta process makes things easier, it makes them easy in practice, but I don't really have a strong results here.",
            "So here's the intuition behind what I'm going to do, and that's not yet with queries, so that's basically just calculus.",
            "OK, so given a function F, I'm going to talk about a Delta F of X.",
            "Is a univariate function as the difference between F X + 1 minus of F of X. OK, So what I'm saying?",
            "How much does F of X change if I increment X by one?",
            "I'm later increase.",
            "I'm going to analyze the number one doesn't mean anything, but it means basically inserting it upload, deleting Apple minus one OK.",
            "So in general, yeah, if I increment X by one, yeah, F of X will be incremented by Delta F of X.",
            "But in addition, we also know if, for example, FX is a polynomial, then it's true that the degree of the Delta of F here is 1 minus the degree of the polynomial.",
            "So we basically decrease the degree of the polynomial by doing the Delta computation.",
            "It strongly related to differentiation, but it's not exactly the same, as it's something simple, just Delta processing.",
            "So here's an example.",
            "Yeah G of X.",
            "My function is 3 X squared, so Delta G of X will be 6, six X + 3.",
            "You can think about that.",
            "And the Delta of the Delta of G of X will be 6 and the Delta flight Delta of X will be 0, and important almost always do it for some K. Yet The Cave Delta is zero.",
            "OK, So what you cannot do is if you basically memorize yeah, one such line initially.",
            "Yeah, these values of constants, I can compute them just looking at the filling in for X0 and computers values at 0360.",
            "OK.",
            "So now if I insert one here to update all those values.",
            "In this role, yeah, I always add up here for each particular field.",
            "Yeah, the feeder profit in the fields right above it.",
            "So serious freeze free free +6 is nine 6 + 0 six etc.",
            "And I can do this all the way down.",
            "I don't have to store this whole table.",
            "I just saw one line.",
            "If you want to increment by one I just do this all these additions.",
            "Yeah, do a fixed number of additions for each particular field if you want to subtract 1 I can also do this locally just for example if I'm in line free, do you have access?",
            "Is 27 OK?",
            "OK, so it's more complicated.",
            "Yeah, but let's let's talk about I'm going to get back to this, but if I want to increment basically here, for example, you know chi or Freeze 27 Delta G of freezes, 21 G of voice is 48.",
            "OK but I can do this basically back and forward and I just need one line of this representation."
        ],
        [
            "So let's talk about database queries.",
            "Yeah, so suppose I've got a query language for which I can express Delta queries that correspond.",
            "You know, in analogy to these deltas of these functions that had before OK, then I could think about some query compilation algorithm that works like this very simple.",
            "I compile it very Q by doing the following.",
            "I want to incrementally maintain a query result of you of that query.",
            "I will do this at runtime OK, but you know what I have to do to change that after the query if.",
            "At that was inserted the details.",
            "Yeah, I compute the Delta of Q for double insertion and deletion.",
            "How I do this?",
            "I'm going to explain later.",
            "So then basically that's of course a simplification, but conceptually the incremental view maintenance code that I have to do for updating Q give him a change here would be just adding or subtracting Delta Q.",
            "Adding is something like a union in the database and subtracting something like a difference, but it's not executive thing.",
            "OK. And then since Q is also query of our language, you're going to recursively run this algorithm, that means.",
            "Even also materialize Delta Q and for doing that will computer Delta, Delta Q and they will basically incremental cube at Delta and then we will because we compile Delta Delta Q.",
            "This recursion will end if it's true that at some point for some Delta, the key of my query I get a constant expression, some kind of secret empty database or something like that.",
            "So for this compilation algorithms work, I need two properties in my career language.",
            "The first is that my credentials to close the ticket taking deltas.",
            "That means for any query of my language there is a Delta query.",
            "OK, that is also in that language, and Moreover for any query of my language there is some case such as the.",
            "Cave Delta of that query will be zero.",
            "OK, there's a special operations here, which means no change to diversify.",
            "Applied by adding or subtracting two are from the database.",
            "So."
        ],
        [
            "Need a query language and further proper semantics for for my for my database table so to say.",
            "So what I'm going to do is I'm going to define a very simple.",
            "At.",
            "Algebraic structure and ring.",
            "Yeah, which has multiplication, addition and distributive, which is a basic notion I need for optimization and allows me to it has an additive inverse which is important.",
            "OK, that means I could take a relation and subtract another relation from it that is bigger than it.",
            "And this is not the difference operation of relational algebra.",
            "OK so for that and for this disability to hold, yeah I have to also be able to add and subtract relations of different schema.",
            "OK, otherwise I will get into all kinds of complications and special cases.",
            "So I'm going to define some notion of addition that is able to combine relations of different schema.",
            "OK, so for data the following I'm talking about apples, which are partial functions from a vocabulary of column names to add domain of data values.",
            "OK, that means basically that if I have something like a, you know a set of possible column names in a relational database table.",
            "OK might Apple will will be undefined on some of these.",
            "And for each tuple, each tuple is assigned to a value of some domain which has to be actually ring as well.",
            "For example integers.",
            "But it could be also rationals or reals, which I will need in the context of graphical models will see an example in a second OK, so and then a generalist multiset relation is just yeah, function that Maps any possible topple over a domain of couples.",
            "Yeah, two here.",
            "For some ring I'll talk about here.",
            "The integers, which is something that I need at least, but it could be again something like the rationals or reals.",
            "And such that at most a finite number of couples have.",
            "Function value image of this function R different from zero.",
            "OK, so that means basically an classical relations would be such functions where the value of the image of this function is always one or zero.",
            "OK, multiset relations as we have them in classical SQL databases would have would always map to positive #0 or positive integer which is the multiplicity of tap.",
            "However, the customer database that was that don't occur neighbors will have multiple Sero OK, but now we're also allowing negative multiplicity so that socialization from multiset relations.",
            "So that we can occur negatively many times and with that can express Edition.",
            "OK I could have a relation that.",
            "Doesn't mean anything plastically because I've got a negative multiplicity attached to double, but I can add it combined with another database, and that corresponds to deletion from the database.",
            "OK, and how do I know define the main operations?",
            "I've got 2 main operations addition Wichita Nization of the Union, operation of relational Algebra SQL, and I've got a multiplication operation which is a translation of a join of a natural join.",
            "Actually OK. And you will see that actually not much is missing.",
            "If you, for example used to things like SQL, there's not much missing here from that language.",
            "So how do I define the addition well out as a functions?",
            "Yeah over the same domain, which are all possible couples that are constructor construct over my vocabulary column names OK and addition means just that the image will be the addition of this dysfunction values.",
            "So for example, if your poop occurs three times in one relation and minus four times, the other relation will occur minus one times in the in the result.",
            "OK, so I've got negation which just negates all the multiplicities and I've got the multiplication.",
            "Which is the special operation looks it's weird, but this is basically a slight generalization of joints and multi set relations.",
            "How often does a double X occur in the result of multiplying R&S?",
            "It's a sum over all the possible Singleton joins.",
            "Yeah, how can a concatenate construct X from Asian bees such debts for all these different sums?",
            "Yeah, I multiplied the majority of this A&B.",
            "So for example I'm asking whether the topo, a Singleton tuple or sorry you know relation aren't Alpha example which has a value inside top of stability and SSA single unit relation with just that would be inside.",
            "OK, and so I'm not asking how often does X occur in that result.",
            "Well, if just these two apples, a current Rs, yeah, there's only one way of constructing ABSX yeah, and that will dramatically of this.",
            "This one we have constructing it will be their multiplicity of this eight upon democracy of the double.",
            "But for example, if I don't see how it will work for the case of negative numbers, so deletions, deletions will multiply there, yeah?",
            "Yes.",
            "To do a joint with the if I if I tried to deletions together, I get in an insertion.",
            "Yes that looks weird but but it is actually exactly correct.",
            "For example, think of this case by distributivity.",
            "Yeah, I've got two relations that I want to join together.",
            "One is R minus R 1 -- R Two and the 2nd that are multiplied with.",
            "This is S 1 -- S two.",
            "If I use distributivity, which I want to be able to do because that I'm expecting I'm using, I'm used to be able to do it this way tivity.",
            "If this unit is if this place is like a union and demonstrations like join, yeah, So what I would get is this four different monomials.",
            "Here are 1 * S one yeah minus R1 times S 2 -- R two times S1 Plus yeah.",
            "As one hour 2 * S two and it must be a plus.",
            "Otherwise the things don't add up correctly to ensure this, but if it's the only of doing it and nothing with occurs, it's might be unusually unusual.",
            "You're not meant to be used to it, but it does the right thing, yeah?",
            "What this does is it you would otherwise delete the same thing twice.",
            "Yeah, and you only live once.",
            "You have to edit in.",
            "Once again, yes this overlap, yes.",
            "It appears that the R * S verifies this constraint that it's at most for finite number of couples."
        ],
        [
            "Is normal at move to finance?",
            "Yes, this is guaranteed.",
            "Yeah, if R&S each have only at most a side note that was different from S. The difference from zero.",
            "This thing will again have only a finite number of the tablets, called a monoid algebra, and it guarantees exactly this property and model.",
            "It will be exactly exactly the supermodel algebra.",
            "Then the integers.",
            "Yeah, over the mojaver.",
            "The monarchy is the structure consisting of the elements are the Singleton relations.",
            "That means single typo or the empty set and the operator.",
            "The multiplication of the monoid is the natural join.",
            "OK, that means that one element is.",
            "The is the empty set relation right and more valuable if you look into search lungs algebra purified except this definition and you see also proven that well, there's only finitely many things in this joint.",
            "Results OK. And in particular, it's a community for English one.",
            "Yeah, so it has the property of distributivity, and it has.",
            "This nice property has an additive inverse, and all the usual things that you expect, so you can.",
            "You can get polynomials.",
            "Yeah, and you can get factorizations and that will be optimization techniques that we will need for our compilation technique.",
            "So here's an example.",
            "Yeah, so this is a relation R with some inconsistent schema.",
            "Yeah, there is a tuple in there which is only defined over a, so it is a unary tuple.",
            "Yeah, over A and test positive minus one.",
            "It has a banner top.",
            "Oh yeah, over a B2 free, which is much appreciated too.",
            "You could get this by Unioning together adding together 2 lists of different schemas.",
            "I have to support it to be to have these operators closed here in individual sense, otherwise I wouldn't get the other problems that they want.",
            "It wouldn't become a ring.",
            "Yeah, so here.",
            "For example, correlation S. Yeah, which has you know relation C?",
            "If I add this relations together?",
            "Oh no, actually, don't do this.",
            "Actually add SMT in this example.",
            "So SMT above relations of consistency mechanical sense here they have just a couple of the same arity.",
            "Although here I've got a negative multiplicity.",
            "Adding together just means physical caffeinating socities tables.",
            "Yeah, if I take notice second relation and multiply it with RI, get some interesting things.",
            "So the money we save one and five I would get by taking the first one here monthly minus 1 * 2.",
            "So I get minus two here.",
            "Maybe let's take something interesting.",
            "What about 6 year 235235?",
            "I can construct by multiplying two free with the five tuple.",
            "That's his motive.",
            "Four 2 * 2.",
            "In addition, I can also join together 2 free with free 5 and let's multiply 2 * 5 so he totally gets 4 + 2 as multiplicity.",
            "It's weird, but I need this for being closed and making this a ring with respect to the basic operations.",
            "If I start a classical, let's see positive relational algebra expression with.",
            "Yet conjunction and disjunction or OK there was calculus or any relation algebra union and natural join if I use distributivity in build ways.",
            "To be able to be close to not have to worry about schema constraints in a messy way?",
            "Yeah, I would be have to define this operations in that in that general way.",
            "OK, so now this thing is a ring and I have not a nice property that as an additive inverse I can compute polynomials and I can compute factorizations and the polynomials have the user properties for numbers as we are used to in the integers.",
            "In particular I can compute deltas and differentials, so to say and it's.",
            "Infant differential that can compute it's closed undertaking deltas, and Moreover there is for every year such query in this language, for every expression in this ring.",
            "Yeah there is a K filter that is zero serving the relation that Maps any tuple to multiplicity 0."
        ],
        [
            "So I can build a query language out of that and it's basically a translation of relational calculus for example.",
            "So I've got formulas in terms the formulas will be constructed from these rings are expressions, so the multiplication is basically a natural join.",
            "Yeah, the plus is basically this.",
            "This this union operation, the minus.",
            "Compliments that abilities.",
            "Then there's the the one of the cirella mentoring.",
            "Yeah, the one element, yeah has every every type has mattress is zero except for the empty tuple.",
            "Yet another eat.",
            "Apple has multiplicity one and false has multi server everything.",
            "Then I've got built-in relations.",
            "Yeah, and they've got conditions and conditions.",
            "Compare term with zero using greater than, less than equals, etc not equals.",
            "In terms, have multiplication and addition and minus.",
            "If you say the types of the terms is floats or rationals, let's say then that would be the operations of the rationals.",
            "Additional might have built in functions any built in functions you like.",
            "I've got variables which are coming from the calculus and I've got aggregates.",
            "Now I'm only talking about sums and we're going to explain this aggregates.",
            "For basic SQL queries, for example the example they give you before for each customer ID number of customers with the same nation, including myself.",
            "I would express this in this aggregation calculus you were saying.",
            "Well, count.",
            "That means some.",
            "Yeah once for each year, multiplicity of taboo that I get in this way where I use see what is it?",
            "I'm going to explain later, so I'm going to multiply.",
            "Basically these two different predicates that looks like duration calculus.",
            "Yeah, I've got an equality constraint could of course replace this in one and two by N Everywhere if I want it.",
            "So that would be just a calculus thing.",
            "It's really strictly resignation of the generalization of duration calculus or first order logic, and on those things that where I can just replace, you know, take calculus and replace the ends by multiplication and there or by by the plus it has the same semantics.",
            "OK, but I can also think express things that are not calculus.",
            "So I'm going to produce this relation, which is just multiplication network joins and then going to send them up and that group I see one.",
            "So these two packets made the following.",
            "The first one is para meters that come from above.",
            "That means these are you have done with binding patterns.",
            "Relational database context to be bound variables.",
            "There are free variables and the sun implicit projector.",
            "All those that occur neither here nor there.",
            "OK, so this way in the second packet I put things that I want to group by OK in here I would put in para meters come for example from this triggers or any.",
            "Things that I want to pass or from the host language that cause the query."
        ],
        [
            "I also need this input variables."
        ],
        [
            "For example, for correlations in nested aggregates."
        ],
        [
            "OK, so, but obviously I can express.",
            "Yeah, interesting you know.",
            "Inference based inference tasks.",
            "If I now say, well, this, the image of these relations is not the integers, But let's say that the rational numbers OK.",
            "So.",
            "So here for example, yeah I would like to supply some values for the variables you envy.",
            "Yeah, and I would like to marginalized such that gets, you know, the different probabilities for X&Y's, so I would get a user business input failures.",
            "I would at run time filling the variables in here.",
            "So I would basically do a selection if you talk about the relational query context and I would project down every Friday for some all the bells except for those here.",
            "So I would get all the computer table for different XY values.",
            "Well, I mean these are kind of, you know, factor factor functions.",
            "OK yeah, I mean I assume now that I don't need a normalization factor, but I could compute in the same way.",
            "So then if I would have an overset here times this then I would have no microphone field thing but.",
            "Summation really concerns for the parable say.",
            "On the decimation, basically we project we sum up over the variable set and which other variables do we have?",
            "Actually, only set in this case.",
            "Yeah, because there is nothing else.",
            "Yes, but I could somewhere else."
        ],
        [
            "Neighbors like.",
            "OK.",
            "So here I define now for my for this query language.",
            "For this aggregate queries the Deltas OK and what you see here is a complete definition.",
            "This defines.",
            "Yeah, yeah, mapping that Maps any curve.",
            "This very powerful language here too.",
            "Two are again experienced this language.",
            "Let me also say head conditions with nested aggregates is a very powerful language I can express.",
            "Universal properties, for example, I can express full first order logic using these aggregates.",
            "OK, I didn't show that here, but I can do that.",
            "So here Alphabet it could be either formula terms and then depending on that you had the plasma multiplication.",
            "At these operations it off this ring of relations or the ring of the let's say rationals or integers or whatever you use is the domain of the terms.",
            "OK, so addition that of the addition is just the Delta.",
            "The additions that deltas.",
            "The Delta products.",
            "We just multiply it out right so we get all the four combinations of you think about the new value being Alpha plus DA times.",
            "Yeah, better plus Delta better use this video to multiply it out and it just remove the old value which was advertised to get free terms here.",
            "Delta Alpha Times better algorithms, Delta better.",
            "Plus yeah, Delta Alpha Times, Delta beds, etc, right for sums, the sum is basically something like a multiplication of the term in the product and then it jumps.",
            "Just sum up so I can push the sum.",
            "Yeah, the Delta for the sun, just like could do it for the addition.",
            "Yeah, so I'm just a big sum and the Delta expression that for conditions a bit complicated.",
            "I would say I'll take it offline, it works.",
            "Yeah, that's actually something nice because in all of the literature on incremental humans in databases nobody has done.",
            "Yeah, incremental maintenance of queries that have nested aggregates in conditions.",
            "This definition is correct and it works everywhere.",
            "It has a nasty property which justifies where people have not done it.",
            "OK, but it's correct, so the query languages closed under taking Taylors.",
            "Let me explain this thing for the base relations here.",
            "So if I do a Delta.",
            "Great example, insert a relation a couple single T into R and I do this on the Atom out of something.",
            "OK, assume that the idea of course of T and this X 2X schema var is the same.",
            "Then the result would be the products of this constraint.",
            "The F element element of the XW Stephens wrote it up.",
            "I just say well the TT is the double X OK. And yeah if I want to delete that would have minus in front of it.",
            "It's different if there aren't as a different relations then I get forced to Sue element of the ring of their relations.",
            "OK.",
            "So."
        ],
        [
            "I cannot define and these these expressions, expressions, both the ring of the terms and the ring of the relations.",
            "Yeah, has the usual properties that we have in rings.",
            "We can do polynomials.",
            "You can define a degree in the usual way.",
            "So basically, if I have a pick product here then the degree is the number of things that multiply up, but you can define it for the whole language and now.",
            "What I get as a result is that for any yeah aggregate term of my language or for any formula, yeah.",
            "That has the property that in my conditions, the term itself doesn't have segregates.",
            "Then it's true that the degree of the Delta query is always one less the degree of the of the original query.",
            "Unnecessary zero.",
            "OK, so I have this user property that you know the derivation of.",
            "This makes it the query simpler in terms of reducing, at least by one join.",
            "That means after a certain K, yeah the query will be constant or one step further it will be 0.",
            "What?",
            "The problem that's why people have not done in the classical literature.",
            "Yeah, increments you intends for the conditions is that in general the deltuva condition can be of the same degree SS traditional query, so it doesn't necessarily just agree that means this Delta combination doesn't kind of terminates.",
            "It'll say if you do it repeatedly.",
            "So in that case the basics don't work, but often particularly you've got integrity constraints.",
            "You know something about database you can actually do that early writings that have lower degree and then you can even do this through writings for queries with nested aggregates in conditions, but otherwise you've got this result which allows you loving of the languages closed under taking deltas and has this property that doing a Delta makes it very simple.",
            "Yeah, that was the only two problems that you needed for only two properties that we needed for doing this recursive incremental view maintenance compilation algorithm.",
            "Example OK."
        ],
        [
            "So that's a simple query.",
            "And it will join aggregates up.",
            "It has this database.",
            "People notice that PCH schema somewhat simplified the ideas here.",
            "I've got orders and I've got items of the orders I joined together by the order key and I'm not saying OK orders have a customer and the customer comes from a country and you have exchange rate with my own country and I've got a price that is with each list item.",
            "So to actually evaluate the value of the order in my own currency I'm going to do the sum over this this product if prices and exchange rates.",
            "OK. You could of course also think of this is a modulation in some very very simple graphical model.",
            "So how do?"
        ],
        [
            "We do the incremental view instance, so I've got two relations, order line item and I would like to maintain their pool for insertions and deletions of single couples, so we do not compile each of these triggers.",
            "Here I'm showing going to show you what is to be done if I insert a single tap Lumia X OK X CK power blah into Kirk, you into the order relation.",
            "OK, in that case, what do I have to do?",
            "Well, take the query.",
            "I'm going to use this algebraic laws that I've shown about deltas to basically push the Delta in.",
            "Into my multiplication of the order and the line item Atom.",
            "That means in this case I will, but in particular replaced order relation by just a single tuple.",
            "That is true because of this Delta rules that I have shown before.",
            "So now I can do some simplifications.",
            "Yeah, at runtime I will have substitute all these variables that counter arguments of the of the trigger insert into order by constants.",
            "So I can treat this smells like constants and they can substitute.",
            "Yeah, wherever these these values are used I just replace them directly by."
        ],
        [
            "Developer kits for the arguments.",
            "OK, now I've got no choice anymore.",
            "OK, but I can do some further simplifications.",
            "In particular, I can use distributivity to pull out this product here."
        ],
        [
            "Straight yeah, because it doesn't depend on the line items.",
            "And now when I don't know any further simplifications I might have an aggregate query.",
            "Again, in general, is it simpler?",
            "It's guaranteed by one order of by 1 degree lower.",
            "I give it a name and incrementally maintain it separately, so this will be the Q. Oh my auxiliary query group by this order key that will come in from here.",
            "So I have to maintain it for all, but it was an order keys so that I can combine the values at the at the right time correctly so I will have to also incremental maintain this query.",
            "Yeah, so how do I?"
        ],
        [
            "Do this I will have to for each possible order key value have to increment in this.",
            "Well, discrete doesn't depend on order.",
            "If I change order, the queries did not change because it only depends on line item.",
            "But if I change line item inserting the line item for example the result Q of X OK will have to be changed OK."
        ],
        [
            "Again, I used this algebraic laws push in my change.",
            "I will actually replace the line item relation by justice Edit Table.",
            "I do some simplifications, yeah and see here."
        ],
        [
            "I loop over all the extra case, but only adds YP where extra case.",
            "Why?",
            "OK?",
            "So I can actually limit this loop."
        ],
        [
            "Replacing bye bye OK and so this is a."
        ],
        [
            "Without the lupines constant time."
        ],
        [
            "And do the same thing for the line."
        ],
        [
            "Items."
        ],
        [
            "Simplify, simplify, pull out, yeah and maintain."
        ],
        [
            "This thing that I pulled out simplify and when I get is now some trigger codes.",
            "But you see sometimes several triggers for the same event, but I've just execute them in the order I have to compute them actually.",
            "And what you see here is and you can think of this as C code.",
            "What you see is that so constant time, so I have some some query that joins two relations together if I'm very naive, I would run the cinematic time.",
            "If I do it smartly, that would mean I would hash on the order key and then before I move it in hash buckets.",
            "Or is the end of the hash bucket to the aggregate inside the hash bucket is summation that we're doing this in linear time?",
            "It's a smart technique section also so trivial, but incrementally I can do it in constant time for any single tap, the updates to the database.",
            "Do all the changes necessary in constant time overall.",
            "What do the deletions look like in this particular case?",
            "I would get him by replacing all the pluses and minuses, but in general it's not that simple.",
            "So."
        ],
        [
            "Doesn't know some interesting optimizations which are important, so for example factorization, suppose you've got a big query and take the case that you do in Delta to a relation that connects different parts of the query.",
            "OK, so for example, the star schema in database and it's very important, but you of course see this in large graphical models as well right?",
            "So for example, what if you implemented for line order?"
        ],
        [
            "So I would like to be able to compute the values of Q of PC which is part category and year here.",
            "I do the increment."
        ],
        [
            "This is for line item.",
            "Well then I replace the line at."
        ],
        [
            "Relation by this tablet are inserted and now the query graph is disconnected, so I can actually."
        ],
        [
            "Distributivity."
        ],
        [
            "The fact that this in two parts OK and now I can increment as these two parts.",
            "OK, let's of course an idea that it is seen that you seen three decompositions.",
            "Yeah, also in conjunction trees etc in in graphical models.",
            "And that's something that we get kind of automatically.",
            "OK so."
        ],
        [
            "Overall, the compilation algorithm is full power.",
            "Looks like this at some point here after doing my data processing, I do some simplifications which include factorization and then I get a big monomial.",
            "That means here as a big pillow is sum of monomials, them or normaliser just product.",
            "You have no additions in there anymore.",
            "Then I will do basically the construction of these.",
            "This this statements of my of my triggers.",
            "There's some further simplifications.",
            "For example, this elimination of certain loops that you can do with certain constraints, etc, and it was returned to the recursive call to compile all the deltas.",
            "We don't have to go into details, but there are certain simplifications.",
            "Important thing after the Delta process to be done and there's more to be said about those."
        ],
        [
            "So days of course literature on this kind of generalized distributive law that applies here that we use here to kind of efficiently compute those big sums in the context of databases.",
            "But it has also been used all kinds of other contexts, for example, in information theory it has been of course used here in the conservation, Dan Floristic reasoning and the kinds of databases we're talking about.",
            "This notion of tree decompositions of hyperactive compositions of queries.",
            "Here, for example, we've got a big showing graph here, so.",
            "Each of these bubbles here hyper, hyper, hyper, edge of my query.",
            "Yeah into some variables and they never occurs in several of those bubbles.",
            "Yeah, I've gotta join on this variable.",
            "OK so I can make this so called typer decompositions.",
            "Yeah, basically making it reorganization of how they look like so I don't have to talk about detail.",
            "But if you know junction trees in order, what you need in this case, this is what the database that was Community cause a SQL queries.",
            "We had.",
            "This junction tweet doesn't require us to merge.",
            "Several relations into one note.",
            "And."
        ],
        [
            "You think about is what the compilation algorithm does is well on each data processing step we eliminate basically exactly 1 hyper edge from the hypergraph.",
            "That means after a few steps the hypergraph disassembles, and by basically in some order eliminating hyper edges to compute.",
            "So that's a step by step my my my statements that don't have any joint operators anymore.",
            "Yeah, what this means is actually determine at a two decomposition or junction tree for this big.",
            "Crash structure to join grass structure.",
            "Unfortunately yeah, if I do what I just told you is the compilation doesn't find a good Twitter conversation, but it computes all possible three decompositions and unions indicator, which is of course exponentially many, and that's bad."
        ],
        [
            "So you can of course do is.",
            "You can first determine some junction tree or decomposition.",
            "And then step by step.",
            "Yeah, as you go down history, apply this rule so your basic group by group certain of this part of the products together give them a name.",
            "Then here for example on APR things that you multiply together and then you use our Delta posting rules which produces for each pair of things that are multiplied together at AAA summer free, three different monomials.",
            "If I had lots of these I would get exponentially many more normals which would be bad, but I can of course run through the cities Delta processing algorithm on.",
            "Are the treaty composition too?",
            "I get a small program the compiler don't produce unnecessarily many data structures for presenting the intermediate results that I have to maintain."
        ],
        [
            "So if you go back to what is this program is look like that I get so it will be a sequence of statements right there?",
            "Execute when some event occurs, like an insertion into customer of a single topologically more over on the right hand side you might have a product of several such map excesses of social structure excesses.",
            "But if that happens, yeah.",
            "Each variable and then kind of come on in several of those atoms on the right hand side only in one.",
            "That means conceptually you could think of such a for loop.",
            "Is a product multiplying relational products here in the sense of databases that multiplies up to relations.",
            "But it can never be adjoined by you actually have to do some matching and filtering.",
            "You will not pair more couples and actually will be relevant to the query results because you can never get get to compare to different couples that actually inconsistent each other, for which actually develop core.",
            "Cursing both of them.",
            "Yeah, has a different value because there's no Co occurrences that is guaranteed by this factorization.",
            "Yeah, that I've just talked about there cannot be an overlap.",
            "Because then if that happens, we wouldn't have factorized.",
            "And if you wouldn't have factorized, we wouldn't get several atoms, several accesses to the Maps on the right hand side just one.",
            "OK, we have to.",
            "I'm stopping.",
            "I've got two more slides which is just blah blah and then I'm done OK."
        ],
        [
            "So.",
            "Nothing technical.",
            "OK so.",
            "So what I told you then is executing such a trigger in this language.",
            "It's only a constant number of arithmetic operations that tuple inserted, deleted for each atomic value, maintains for each left hand side value that offer data structure.",
            "I do only a fixed number of additions, multiplications especially evident in the right hand side OK.",
            "So.",
            "That means, in particular, you can actually show that evaluating such serial triggers.",
            "Triggers of this language can be done.",
            "Yeah, in the complexity class, NC0, which is moving circuits of polynomial size, constant death inbounded Fannin this means in particular every bit of the result depends only on a constant number of bits of the input.",
            "Yeah.",
            "And that is the major difference to incremental maintenance, where in general you do a big sum over lots of couples and each bit depends on an unbounded number of input bits.",
            "But this is not the case, and that's the major thing impacted his ability.",
            "Article salt.",
            "That's actually the first separation of any non incremental incremental innovation results.",
            "Becausw thesis here with answers here.",
            "Yeah, this is your being the complexity class that is course corresponding to non incremental relation has been separated from this era.",
            "For NCO, it's actually one of the few results we know that the complexity class NP is larger than another one.",
            "OK so, but that's the practical side, but in practice it also has spectrum locations and they are in particular."
        ],
        [
            "That I'm.",
            "I could do a purely push based implementation of of distributors evaluator for this for this piece of code.",
            "So if I would have this back data structures these arrays and I partition him somehow and distributed with several notes here or make it distributed key value store OK, then I will have to pass some data around some message passing between these different computational nodes and I will need.",
            "I have to send them and I will never have to see.",
            "OK, but they actually have to send what is relevant to this note because I don't worry joins at the nodes that receive data.",
            "Yeah, I will just have to combine all possible things that they receive and it will be relevant to the results by doing at compilation time.",
            "The elimination of the joints will never in a purely push based implementation of distributed processing, send more.",
            "Didn't have to.",
            "OK so I can do some very naive eventual consistency method that doesn't need any kind of synchronization and concurrency control.",
            "And it doesn't need anything like Bloom joint where you basically have to send out a possible domain of areas that you might want to join.",
            "Ask what is relevant, get respect that only centimeters needed.",
            "Yeah, which needs kind of handshake, which is expensive in the large kind of cloud computing scenario.",
            "So."
        ],
        [
            "We've actually built two systems in the context.",
            "Yeah, one is called TV toaster, which is the Corupted stream processing engine, and this actually figured out how to dismiss the aggregates.",
            "You can do this and we have nice applications for that.",
            "We also build a system called Cumulus which is doing this kind of highly parallel.",
            "Online real time data warehousing in the large cloud using this kind of eventual consistency push based approach that doesn't need to send any data that you don't need, so that's a result of compilation.",
            "You wouldn't get it otherwise.",
            "Right so."
        ],
        [
            "It's joint work with my student, Oliver Canadian and my post again.",
            "If not, who is going to be at faculty at Johns Hopkins very soon?",
            "Just gotta shop.",
            "OK, so thanks a lot."
        ],
        [
            "Chris yes.",
            "Because you are assuming decomposable aggregates and you know this comment that you said that you can do it in finite number of input widgets.",
            "Kind of reminded me of exponential models in graphical where you have the sufficient statistics finite, sufficient, talented and only exponential model side right?",
            "Are you just restricting to certain kind of aggregate functions?",
            "You can get this property right?",
            "That is absolutely true, but let me say one thing if you.",
            "If you take for example the average supported in SQL OK, we can do all of them.",
            "OK, although I have to say about Min and Max right that to be able to delete from a Mexican structure is not enough to keep the current minimum maximum around.",
            "They would have to keep silicea like let's say an audit representation of all the values right while in the for some aggregates.",
            "For example, where I can undo it, an addition by subtracting the same value from it right?",
            "As a nice property that don't need to be state instructions.",
            "If all I care about is that.",
            "This particular view I don't have to mean that it is itself.",
            "I can throw all the changes away as soon as I have applied them to my aggregates.",
            "Right?",
            "Yes, we can do negations indication, so we've got this subtraction operation which is not negation right?",
            "Because negation basically cuts away something right?",
            "If I subtract too much, I'm going to cut it away, right?",
            "If you think about it as negation in calculus, which corresponds to the relation subtraction operation, racial difference operation, but what you can do is you can represent this negation or the relational difference operation using a condition you can say basically.",
            "Those if you want to represent our minus S in relation algebra, I would say give me those hours, express selection on the hours, those hours for which the matching S here are have the number of matching S is zero and I can do this in aggregate.",
            "Well, the problem is that in general, if you've got this aggregates that the Delta processing has this problem that doing a Delta doesn't make the queries simpler.",
            "But there are ways of actually always doing that.",
            "We sometimes have to pull out the loop, which is somewhat costly, and after you've pulled out the loop, yeah, but you get.",
            "You can always again then apply D2 and it's actually simple so that the compilation algorithm terminates OK, and then there's all kinds of optimizations that we do to actually make this work fast.",
            "Yes, so you're doing like natural joins in this.",
            "What about joints which are not impacted?",
            "So I mean the good questions so.",
            "One thing that you have to keep in mind is that.",
            "If you're familiar with the relation calculus or first order logic right, I can express any kinds of joints they might think about.",
            "Yeah, unless they're kind of strange external functions, then we have to think about how to represent him.",
            "I can express them using just conjunction.",
            "By having complex conditions right, and I can represent those right, I've got conditions so.",
            "So so basically I can represent, for example an inequality join, right?",
            "AS set of natural joints where one of the relations represents the inequality relation right, just join in.",
            "Well, we completed the way again, right?",
            "It doesn't, but for representations.",
            "I mean, if you take a logical error calculation, you always do it that way, right?",
            "That the condition that run condition the inequality joint condition becomes a separate separate Atom right, which is written down different places, not an operator operator combines relation.",
            "They want to get anymore.",
            "There's actually three different items that relation that one together, and the condition and installation.",
            "Then we do data processing in the right way and the results we pulled the condition again and make it to join.",
            "But actually we're going to do is.",
            "We're going to eliminate join, but basically just the processing step compilation step.",
            "So the answer is we can do the usual joins, right?",
            "Just as we can do selections selection, you can also think of as a natural join with some kind of concentration.",
            "Right?",
            "So the selection or are different generations are not part of this ring, but using additional multiplication I can express them.",
            "We've got special relations.",
            "Yeah.",
            "Just curious about what kind of practical speedups you got.",
            "I mean, there's a third theoretical complexity advantage, but if you do have any results, yeah, we've got results.",
            "So.",
            "Let me show you this thing I like that.",
            "So.",
            "These are these are the 1st three queries occurs from the context of algorithmic trading.",
            "So that's actually a stream of stock data.",
            "So guarded updates, yeah, interesting trading strategies that have interesting queries that do some statistical analysis on top of them, and these figures.",
            "Obviously there's loading freeze from the TPC H benchmark OK, and so.",
            "The baseline here, here is our recursive compilation technique.",
            "Blue, the blue lines are Castle inventiveness.",
            "That means 1D processing step and then execute the Delta post.",
            "The Delta queries using classical purpose in techniques and the red bars is classical for processing all of them.",
            "Right now the main memory engine using the common code base and what you see is that basically classical went into maintenance is by 1.524 orders of magnitude slower and non equivocation is even slower with the exception of this one query.",
            "But you can expect a speedup of something like 4 orders of magnitude if you do a good job.",
            "So that's actually our own implementation.",
            "I've also done it to perform big commercial system, not going to tell you which one which implements incremental view maintenance right?",
            "And you also get something you know four orders of magnitude improvement or what its system, even if it uses incremental maintenance.",
            "OK, so but I guess thanks."
        ]
    ],
    "summarization": {
        "clip_0": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So this this talk is about work that is currently going on at Cornell on a project called DB Toaster and the main are watching goal of this work is to compile database queries to very efficient codes eliminating the classical operators that you have in a database system for efficient affiliation and in this talk I'm also going to talk about show you how to apply this, possibly to inference in graphical models.",
                    "label": 0
                }
            ]
        },
        "clip_1": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So I mean, just like one slides of the how we came to our motivation.",
                    "label": 0
                },
                {
                    "sent": "So currently if you look into what happens in the database literature in our community, there's entire communities of possible users who avoid databases.",
                    "label": 0
                },
                {
                    "sent": "They don't use delivery systems, although possibly if they're good enough.",
                    "label": 0
                },
                {
                    "sent": "So to say it would be the right thing for them, and then includes all kinds of scientists.",
                    "label": 0
                },
                {
                    "sent": "And it also includes large web application companies like Google, Yahoo, etc.",
                    "label": 0
                },
                {
                    "sent": "They don't use databases for certain data management jobs, for which you could use them if they are fast and scalable enough, although then very motivation of database management systems is that they would be optimized for their purpose and they would be fast and scalable enough.",
                    "label": 0
                },
                {
                    "sent": "So what you see happening now in industry, but also in research more and more is that people focus more on lightweight systems.",
                    "label": 0
                },
                {
                    "sent": "Things like key value stores and so on, where people are willing to give up expressiveness.",
                    "label": 0
                },
                {
                    "sent": "For example in the query language to achieve scalability.",
                    "label": 0
                },
                {
                    "sent": "But you also see in cloud computing consists of map, reduce etc.",
                    "label": 0
                },
                {
                    "sent": "Is that people are willing to give up consistency for scalability?",
                    "label": 0
                },
                {
                    "sent": "Yeah, particularly you know transactional consistency so that you could just scale you algorithms.",
                    "label": 0
                },
                {
                    "sent": "There's also a crowd of people in the database research community that say, OK, this classical idea of having is 1 size fits all database systems.",
                    "label": 0
                },
                {
                    "sent": "Relational database systems that would be used for all kinds of contexts.",
                    "label": 0
                },
                {
                    "sent": "Maybe the exclusion of separation between transactional processing and analytical processing is outdated.",
                    "label": 0
                },
                {
                    "sent": "It's actually not true that we can achieve this single system that has everything.",
                    "label": 0
                },
                {
                    "sent": "And nowadays this work on different kinds of specific database system.",
                    "label": 0
                },
                {
                    "sent": "Scientifically systems stream database systems, sensor data systems etc.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                }
            ]
        },
        "clip_2": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "In Debbie Toaster, what you're trying to achieve is we would like to automate automate the the instantiation of special purpose lightweight data management systems from specifications that sacred workloads and maybe use applications.",
                    "label": 0
                },
                {
                    "sent": "So we would like to in particular develop techniques for compiling database applications and database management systems together into application systems that are lightweight and achieve their job and are reliable and scalable.",
                    "label": 0
                }
            ]
        },
        "clip_3": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So why?",
                    "label": 0
                },
                {
                    "sent": "Why do we focus compilation?",
                    "label": 0
                },
                {
                    "sent": "I'm so one thing that I have said is compilation has been starting the context of database systems.",
                    "label": 0
                },
                {
                    "sent": "For example, in very early work in system are also by dumb pittari and in a number of other things like you know Sybase I anywhere the outlet system for mobile applications also in stream based this compilation going on etc.",
                    "label": 0
                },
                {
                    "sent": "So well one idea is you've got database queries and classical database management system query execution engine interprets these queries.",
                    "label": 0
                },
                {
                    "sent": "You can think of.",
                    "label": 0
                },
                {
                    "sent": "Specifications in the language, and you interpret them.",
                    "label": 0
                },
                {
                    "sent": "That means there's a lot of kind of dynamic processing overheads.",
                    "label": 0
                },
                {
                    "sent": "Basically as a dynamic data structure that is in in memory that were censored, query initial today that can change and you interpreted secure destruction.",
                    "label": 0
                },
                {
                    "sent": "You switch around between jump around between representations of the query in the data center, which is better.",
                    "label": 0
                },
                {
                    "sent": "Cache locality and these kinds of things.",
                    "label": 0
                },
                {
                    "sent": "So if you haven't got a query or you've got a work of queries that is basically fixed for a long time, for example, you've got fixed applications like SCP or PeopleSoft that have a number of queries hard coded more less.",
                    "label": 0
                },
                {
                    "sent": "Model parameterizations in your code.",
                    "label": 0
                },
                {
                    "sent": "What you could do is you could compile these queries down to machine code that is just that's what it needs to do, not more.",
                    "label": 0
                },
                {
                    "sent": "But in applications in general, you might have other database features that you might not need an old context.",
                    "label": 0
                },
                {
                    "sent": "For example, you might not need certain combinations of things that would classically come with transaction support for the dimensions would do, but your application will not have certain corner cases, and you could implement much more efficient algorithms, and you could kind of realized this by combining a database application.",
                    "label": 0
                },
                {
                    "sent": "And eliminating the features from the database management system to make it as efficient as possible.",
                    "label": 0
                }
            ]
        },
        "clip_4": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "Right, and I'm going to focus on this special new aggregate aggressive pre compilation technique and it turns curse into native code.",
                    "label": 0
                },
                {
                    "sent": "It eliminates the classical operators like joints etc.",
                    "label": 0
                },
                {
                    "sent": "They used in very processing and we argue that this is actually better but you will see that this is true.",
                    "label": 0
                },
                {
                    "sent": "We're going to focus.",
                    "label": 0
                },
                {
                    "sent": "I'm going to focus in this talk on incremental view maintenance.",
                    "label": 0
                },
                {
                    "sent": "That's the problem of you've got a query that is fixed that stands for awhile and you materializes for results so called view.",
                    "label": 0
                },
                {
                    "sent": "So that means you store the current salt in the database and now whenever the data is the source database changes, you're going to try to do this cheapest steps possible to update this materialized Resource Center assault.",
                    "label": 0
                },
                {
                    "sent": "Hopefully not just compute compute Invictus query from scratching again, overwriting.",
                    "label": 0
                },
                {
                    "sent": "So this is old.",
                    "label": 0
                },
                {
                    "sent": "Representation of the query result.",
                    "label": 0
                },
                {
                    "sent": "So what you're going to see is that this compiles programs that we produce in this approach have some nice properties.",
                    "label": 0
                },
                {
                    "sent": "In particular, it's.",
                    "label": 0
                },
                {
                    "sent": "To my knowledge, the first hard result it shows that incremental processing of queries is fundamentally easier than an incremental process.",
                    "label": 0
                },
                {
                    "sent": "Actually, complexity theoretic results here, but it has special implications.",
                    "label": 0
                },
                {
                    "sent": "In particular, one can show that for each particular aggregates value, each particular Democratic is a floating point number, an integer.",
                    "label": 0
                },
                {
                    "sent": "In your database you need only a constant amount of work to do.",
                    "label": 0
                },
                {
                    "sent": "Updating give me an update to the database that is of constant size.",
                    "label": 0
                },
                {
                    "sent": "Let's say a single tuple changes.",
                    "label": 0
                },
                {
                    "sent": "Of course.",
                    "label": 0
                },
                {
                    "sent": "In general, you might have bulk updates, but you would kind of be able to apply these results accordingly.",
                    "label": 0
                },
                {
                    "sent": "So a constant amount of work, sequential work for particular for updating particular value, and it also admits extremely embarrassing parallelism.",
                    "label": 0
                },
                {
                    "sent": "You can example implements purely push based parallel processors that send a minimal amount of data.",
                    "label": 0
                },
                {
                    "sent": "That means you can do eventual consistency methods, but you don't do anything really to synchronize and you only send as much data as you really have to send.",
                    "label": 0
                },
                {
                    "sent": "In the best possible world.",
                    "label": 0
                },
                {
                    "sent": "So that's actually a nice and surprising property.",
                    "label": 0
                },
                {
                    "sent": "This is possible.",
                    "label": 0
                }
            ]
        },
        "clip_5": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So I'm going to show you some kind of pseudocode here for what the code looks like that we're going to get as a computational side.",
                    "label": 0
                },
                {
                    "sent": "So in on the left hand side you see an aggregate query in SQL in SQL, and I'm going to talk a bit more about this, but you could think about this is a kind of marginalization apologetic inference task as well.",
                    "label": 0
                },
                {
                    "sent": "In this case it's a query over some kind of you know, business scheme of customers are asking for the number of customers of the same nation for each particular customer, OK?",
                    "label": 0
                },
                {
                    "sent": "And what the compilation result is here is a procedure like that a trigger for each particular changes database.",
                    "label": 0
                },
                {
                    "sent": "For example, an insertion into a couple of the customer.",
                    "label": 0
                },
                {
                    "sent": "It would be also deletion from the customization when update and so on, and that's for each of the different relations that are either based scheme after database and what you see there is.",
                    "label": 0
                },
                {
                    "sent": "You can think of this as a C program and these QFC idea for example here are array accesses.",
                    "label": 0
                },
                {
                    "sent": "OK, you've got left inside and right inside the statements here.",
                    "label": 0
                },
                {
                    "sent": "So we have basically the first line is in.",
                    "label": 0
                },
                {
                    "sent": "This tree is going to say.",
                    "label": 0
                },
                {
                    "sent": "Well update Q of C ID.",
                    "label": 0
                },
                {
                    "sent": "Yeah by adding in Q1 of nation for particular CDN nation which is at the arguments of the trigger.",
                    "label": 0
                },
                {
                    "sent": "So the trick is called with this tuple which is to insert a couple into the custom relation.",
                    "label": 0
                },
                {
                    "sent": "OK so the only thing you need to keep in mind in general nations and see if these are not integers is that these are kind of associative arrays.",
                    "label": 0
                },
                {
                    "sent": "OK, maybe not the most basic C arrays there also sometimes loops and these lips look naive.",
                    "label": 0
                },
                {
                    "sent": "You might say OK but I do.",
                    "label": 0
                },
                {
                    "sent": "Is I replace interesting joint process?",
                    "label": 0
                },
                {
                    "sent": "Processing techniques by naive loop processing.",
                    "label": 0
                },
                {
                    "sent": "That's not what I do.",
                    "label": 0
                },
                {
                    "sent": "In particular, all the values that I look over always occur left hand side of these array accesses.",
                    "label": 0
                },
                {
                    "sent": "That means I'm going to in such a loop, always right in each iteration to different place in memory.",
                    "label": 0
                },
                {
                    "sent": "That means all of these things are really necessary, and that's strictly different from naive.",
                    "label": 0
                },
                {
                    "sent": "Join processing.",
                    "label": 0
                },
                {
                    "sent": "OK, I'm going to just write lots of various because lots of values have to be updated here.",
                    "label": 0
                },
                {
                    "sent": "I have quickly and a group by column see ID and they will have to write too, because the change implies a change to lots and lots of different fields.",
                    "label": 0
                },
                {
                    "sent": "So this code I could run through a particular trace and show that this is really equivalent to incremental.",
                    "label": 0
                },
                {
                    "sent": "Maintaining this at this aggregate query, I'm not going to do this right now, just asked to believe this, but it is in general not obvious how to get to this particular this case.",
                    "label": 0
                },
                {
                    "sent": "I've got a self join.",
                    "label": 0
                },
                {
                    "sent": "My peer group is complicated, but this program is correct OK?",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "There is it all think it takes linear time.",
                    "label": 0
                },
                {
                    "sent": "There's this simple for loop, yeah, but if you ask how much work is done for each particular field that you write to its constant time 'cause never and there's a loop, yeah, right?",
                    "label": 0
                },
                {
                    "sent": "Yeah, in two different steps of the loop to the same memory address.",
                    "label": 0
                },
                {
                    "sent": "You don't have to understand how this is done because I've not told you yet.",
                    "label": 0
                }
            ]
        },
        "clip_6": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "OK, but that's what it will look like.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "Let me say a few words on words on this classical notion of incremental view maintenance databases.",
                    "label": 0
                },
                {
                    "sent": "There has been a huge amount of work, lots of papers, and this is something important that has been implemented in all the major systems here.",
                    "label": 0
                },
                {
                    "sent": "For example, in Oracle days some of it and in Microsoft and IBM DB 2, there's some of it Microsoft SQL Server and the idea here is the following.",
                    "label": 1
                },
                {
                    "sent": "You've got a store presentation.",
                    "label": 0
                },
                {
                    "sent": "The materialized view of the queries ult.",
                    "label": 0
                },
                {
                    "sent": "You change the database making up to the database and you don't want to recompute the view from scratch because that is costly.",
                    "label": 0
                },
                {
                    "sent": "What you would like to do is you would like to have some kind of representation by so called Delta query of what changes to their query results, so you will transform the query the input query into a so called Delta query that expresses.",
                    "label": 0
                },
                {
                    "sent": "Yeah basically what has to be changed.",
                    "label": 0
                },
                {
                    "sent": "The results given the database, the Conservatives in the updates, but the idea is that this will most look at the update only and do as little work as possible on the base query.",
                    "label": 0
                },
                {
                    "sent": "So to do as little work as possible overall.",
                    "label": 0
                },
                {
                    "sent": "OK, so this is not the query that's not knew when we're going to use this.",
                    "label": 0
                },
                {
                    "sent": "OK, but that's basically the idea.",
                    "label": 0
                },
                {
                    "sent": "Is Delta queries in general will work on less data and usually also structure somewhat simplified.",
                    "label": 0
                },
                {
                    "sent": "We have one joint less or something like that.",
                    "label": 0
                },
                {
                    "sent": "So still.",
                    "label": 0
                }
            ]
        },
        "clip_7": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "I will say though, I'm in general the language of Deltic versus the same language instead of the original phrase to need to express all the possible Delta curves of SQL queries, I need all of SQL, so in that sense I can't really argue that you know doing the Delta process makes things easier, it makes them easy in practice, but I don't really have a strong results here.",
                    "label": 0
                },
                {
                    "sent": "So here's the intuition behind what I'm going to do, and that's not yet with queries, so that's basically just calculus.",
                    "label": 0
                },
                {
                    "sent": "OK, so given a function F, I'm going to talk about a Delta F of X.",
                    "label": 0
                },
                {
                    "sent": "Is a univariate function as the difference between F X + 1 minus of F of X. OK, So what I'm saying?",
                    "label": 0
                },
                {
                    "sent": "How much does F of X change if I increment X by one?",
                    "label": 0
                },
                {
                    "sent": "I'm later increase.",
                    "label": 0
                },
                {
                    "sent": "I'm going to analyze the number one doesn't mean anything, but it means basically inserting it upload, deleting Apple minus one OK.",
                    "label": 0
                },
                {
                    "sent": "So in general, yeah, if I increment X by one, yeah, F of X will be incremented by Delta F of X.",
                    "label": 0
                },
                {
                    "sent": "But in addition, we also know if, for example, FX is a polynomial, then it's true that the degree of the Delta of F here is 1 minus the degree of the polynomial.",
                    "label": 0
                },
                {
                    "sent": "So we basically decrease the degree of the polynomial by doing the Delta computation.",
                    "label": 0
                },
                {
                    "sent": "It strongly related to differentiation, but it's not exactly the same, as it's something simple, just Delta processing.",
                    "label": 0
                },
                {
                    "sent": "So here's an example.",
                    "label": 0
                },
                {
                    "sent": "Yeah G of X.",
                    "label": 0
                },
                {
                    "sent": "My function is 3 X squared, so Delta G of X will be 6, six X + 3.",
                    "label": 0
                },
                {
                    "sent": "You can think about that.",
                    "label": 0
                },
                {
                    "sent": "And the Delta of the Delta of G of X will be 6 and the Delta flight Delta of X will be 0, and important almost always do it for some K. Yet The Cave Delta is zero.",
                    "label": 0
                },
                {
                    "sent": "OK, So what you cannot do is if you basically memorize yeah, one such line initially.",
                    "label": 0
                },
                {
                    "sent": "Yeah, these values of constants, I can compute them just looking at the filling in for X0 and computers values at 0360.",
                    "label": 0
                },
                {
                    "sent": "OK.",
                    "label": 0
                },
                {
                    "sent": "So now if I insert one here to update all those values.",
                    "label": 0
                },
                {
                    "sent": "In this role, yeah, I always add up here for each particular field.",
                    "label": 0
                },
                {
                    "sent": "Yeah, the feeder profit in the fields right above it.",
                    "label": 0
                },
                {
                    "sent": "So serious freeze free free +6 is nine 6 + 0 six etc.",
                    "label": 0
                },
                {
                    "sent": "And I can do this all the way down.",
                    "label": 0
                },
                {
                    "sent": "I don't have to store this whole table.",
                    "label": 0
                },
                {
                    "sent": "I just saw one line.",
                    "label": 0
                },
                {
                    "sent": "If you want to increment by one I just do this all these additions.",
                    "label": 0
                },
                {
                    "sent": "Yeah, do a fixed number of additions for each particular field if you want to subtract 1 I can also do this locally just for example if I'm in line free, do you have access?",
                    "label": 0
                },
                {
                    "sent": "Is 27 OK?",
                    "label": 0
                },
                {
                    "sent": "OK, so it's more complicated.",
                    "label": 0
                },
                {
                    "sent": "Yeah, but let's let's talk about I'm going to get back to this, but if I want to increment basically here, for example, you know chi or Freeze 27 Delta G of freezes, 21 G of voice is 48.",
                    "label": 0
                },
                {
                    "sent": "OK but I can do this basically back and forward and I just need one line of this representation.",
                    "label": 0
                }
            ]
        },
        "clip_8": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So let's talk about database queries.",
                    "label": 0
                },
                {
                    "sent": "Yeah, so suppose I've got a query language for which I can express Delta queries that correspond.",
                    "label": 0
                },
                {
                    "sent": "You know, in analogy to these deltas of these functions that had before OK, then I could think about some query compilation algorithm that works like this very simple.",
                    "label": 0
                },
                {
                    "sent": "I compile it very Q by doing the following.",
                    "label": 0
                },
                {
                    "sent": "I want to incrementally maintain a query result of you of that query.",
                    "label": 0
                },
                {
                    "sent": "I will do this at runtime OK, but you know what I have to do to change that after the query if.",
                    "label": 0
                },
                {
                    "sent": "At that was inserted the details.",
                    "label": 0
                },
                {
                    "sent": "Yeah, I compute the Delta of Q for double insertion and deletion.",
                    "label": 0
                },
                {
                    "sent": "How I do this?",
                    "label": 0
                },
                {
                    "sent": "I'm going to explain later.",
                    "label": 0
                },
                {
                    "sent": "So then basically that's of course a simplification, but conceptually the incremental view maintenance code that I have to do for updating Q give him a change here would be just adding or subtracting Delta Q.",
                    "label": 0
                },
                {
                    "sent": "Adding is something like a union in the database and subtracting something like a difference, but it's not executive thing.",
                    "label": 0
                },
                {
                    "sent": "OK. And then since Q is also query of our language, you're going to recursively run this algorithm, that means.",
                    "label": 0
                },
                {
                    "sent": "Even also materialize Delta Q and for doing that will computer Delta, Delta Q and they will basically incremental cube at Delta and then we will because we compile Delta Delta Q.",
                    "label": 0
                },
                {
                    "sent": "This recursion will end if it's true that at some point for some Delta, the key of my query I get a constant expression, some kind of secret empty database or something like that.",
                    "label": 0
                },
                {
                    "sent": "So for this compilation algorithms work, I need two properties in my career language.",
                    "label": 0
                },
                {
                    "sent": "The first is that my credentials to close the ticket taking deltas.",
                    "label": 0
                },
                {
                    "sent": "That means for any query of my language there is a Delta query.",
                    "label": 0
                },
                {
                    "sent": "OK, that is also in that language, and Moreover for any query of my language there is some case such as the.",
                    "label": 0
                },
                {
                    "sent": "Cave Delta of that query will be zero.",
                    "label": 0
                },
                {
                    "sent": "OK, there's a special operations here, which means no change to diversify.",
                    "label": 0
                },
                {
                    "sent": "Applied by adding or subtracting two are from the database.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                }
            ]
        },
        "clip_9": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Need a query language and further proper semantics for for my for my database table so to say.",
                    "label": 0
                },
                {
                    "sent": "So what I'm going to do is I'm going to define a very simple.",
                    "label": 0
                },
                {
                    "sent": "At.",
                    "label": 0
                },
                {
                    "sent": "Algebraic structure and ring.",
                    "label": 0
                },
                {
                    "sent": "Yeah, which has multiplication, addition and distributive, which is a basic notion I need for optimization and allows me to it has an additive inverse which is important.",
                    "label": 0
                },
                {
                    "sent": "OK, that means I could take a relation and subtract another relation from it that is bigger than it.",
                    "label": 0
                },
                {
                    "sent": "And this is not the difference operation of relational algebra.",
                    "label": 0
                },
                {
                    "sent": "OK so for that and for this disability to hold, yeah I have to also be able to add and subtract relations of different schema.",
                    "label": 0
                },
                {
                    "sent": "OK, otherwise I will get into all kinds of complications and special cases.",
                    "label": 0
                },
                {
                    "sent": "So I'm going to define some notion of addition that is able to combine relations of different schema.",
                    "label": 0
                },
                {
                    "sent": "OK, so for data the following I'm talking about apples, which are partial functions from a vocabulary of column names to add domain of data values.",
                    "label": 0
                },
                {
                    "sent": "OK, that means basically that if I have something like a, you know a set of possible column names in a relational database table.",
                    "label": 0
                },
                {
                    "sent": "OK might Apple will will be undefined on some of these.",
                    "label": 0
                },
                {
                    "sent": "And for each tuple, each tuple is assigned to a value of some domain which has to be actually ring as well.",
                    "label": 0
                },
                {
                    "sent": "For example integers.",
                    "label": 0
                },
                {
                    "sent": "But it could be also rationals or reals, which I will need in the context of graphical models will see an example in a second OK, so and then a generalist multiset relation is just yeah, function that Maps any possible topple over a domain of couples.",
                    "label": 0
                },
                {
                    "sent": "Yeah, two here.",
                    "label": 0
                },
                {
                    "sent": "For some ring I'll talk about here.",
                    "label": 0
                },
                {
                    "sent": "The integers, which is something that I need at least, but it could be again something like the rationals or reals.",
                    "label": 0
                },
                {
                    "sent": "And such that at most a finite number of couples have.",
                    "label": 0
                },
                {
                    "sent": "Function value image of this function R different from zero.",
                    "label": 0
                },
                {
                    "sent": "OK, so that means basically an classical relations would be such functions where the value of the image of this function is always one or zero.",
                    "label": 0
                },
                {
                    "sent": "OK, multiset relations as we have them in classical SQL databases would have would always map to positive #0 or positive integer which is the multiplicity of tap.",
                    "label": 0
                },
                {
                    "sent": "However, the customer database that was that don't occur neighbors will have multiple Sero OK, but now we're also allowing negative multiplicity so that socialization from multiset relations.",
                    "label": 0
                },
                {
                    "sent": "So that we can occur negatively many times and with that can express Edition.",
                    "label": 0
                },
                {
                    "sent": "OK I could have a relation that.",
                    "label": 0
                },
                {
                    "sent": "Doesn't mean anything plastically because I've got a negative multiplicity attached to double, but I can add it combined with another database, and that corresponds to deletion from the database.",
                    "label": 0
                },
                {
                    "sent": "OK, and how do I know define the main operations?",
                    "label": 0
                },
                {
                    "sent": "I've got 2 main operations addition Wichita Nization of the Union, operation of relational Algebra SQL, and I've got a multiplication operation which is a translation of a join of a natural join.",
                    "label": 0
                },
                {
                    "sent": "Actually OK. And you will see that actually not much is missing.",
                    "label": 0
                },
                {
                    "sent": "If you, for example used to things like SQL, there's not much missing here from that language.",
                    "label": 0
                },
                {
                    "sent": "So how do I define the addition well out as a functions?",
                    "label": 0
                },
                {
                    "sent": "Yeah over the same domain, which are all possible couples that are constructor construct over my vocabulary column names OK and addition means just that the image will be the addition of this dysfunction values.",
                    "label": 0
                },
                {
                    "sent": "So for example, if your poop occurs three times in one relation and minus four times, the other relation will occur minus one times in the in the result.",
                    "label": 0
                },
                {
                    "sent": "OK, so I've got negation which just negates all the multiplicities and I've got the multiplication.",
                    "label": 0
                },
                {
                    "sent": "Which is the special operation looks it's weird, but this is basically a slight generalization of joints and multi set relations.",
                    "label": 0
                },
                {
                    "sent": "How often does a double X occur in the result of multiplying R&S?",
                    "label": 0
                },
                {
                    "sent": "It's a sum over all the possible Singleton joins.",
                    "label": 0
                },
                {
                    "sent": "Yeah, how can a concatenate construct X from Asian bees such debts for all these different sums?",
                    "label": 0
                },
                {
                    "sent": "Yeah, I multiplied the majority of this A&B.",
                    "label": 0
                },
                {
                    "sent": "So for example I'm asking whether the topo, a Singleton tuple or sorry you know relation aren't Alpha example which has a value inside top of stability and SSA single unit relation with just that would be inside.",
                    "label": 0
                },
                {
                    "sent": "OK, and so I'm not asking how often does X occur in that result.",
                    "label": 0
                },
                {
                    "sent": "Well, if just these two apples, a current Rs, yeah, there's only one way of constructing ABSX yeah, and that will dramatically of this.",
                    "label": 0
                },
                {
                    "sent": "This one we have constructing it will be their multiplicity of this eight upon democracy of the double.",
                    "label": 0
                },
                {
                    "sent": "But for example, if I don't see how it will work for the case of negative numbers, so deletions, deletions will multiply there, yeah?",
                    "label": 0
                },
                {
                    "sent": "Yes.",
                    "label": 0
                },
                {
                    "sent": "To do a joint with the if I if I tried to deletions together, I get in an insertion.",
                    "label": 0
                },
                {
                    "sent": "Yes that looks weird but but it is actually exactly correct.",
                    "label": 0
                },
                {
                    "sent": "For example, think of this case by distributivity.",
                    "label": 0
                },
                {
                    "sent": "Yeah, I've got two relations that I want to join together.",
                    "label": 0
                },
                {
                    "sent": "One is R minus R 1 -- R Two and the 2nd that are multiplied with.",
                    "label": 0
                },
                {
                    "sent": "This is S 1 -- S two.",
                    "label": 0
                },
                {
                    "sent": "If I use distributivity, which I want to be able to do because that I'm expecting I'm using, I'm used to be able to do it this way tivity.",
                    "label": 0
                },
                {
                    "sent": "If this unit is if this place is like a union and demonstrations like join, yeah, So what I would get is this four different monomials.",
                    "label": 0
                },
                {
                    "sent": "Here are 1 * S one yeah minus R1 times S 2 -- R two times S1 Plus yeah.",
                    "label": 0
                },
                {
                    "sent": "As one hour 2 * S two and it must be a plus.",
                    "label": 0
                },
                {
                    "sent": "Otherwise the things don't add up correctly to ensure this, but if it's the only of doing it and nothing with occurs, it's might be unusually unusual.",
                    "label": 0
                },
                {
                    "sent": "You're not meant to be used to it, but it does the right thing, yeah?",
                    "label": 0
                },
                {
                    "sent": "What this does is it you would otherwise delete the same thing twice.",
                    "label": 0
                },
                {
                    "sent": "Yeah, and you only live once.",
                    "label": 0
                },
                {
                    "sent": "You have to edit in.",
                    "label": 0
                },
                {
                    "sent": "Once again, yes this overlap, yes.",
                    "label": 0
                },
                {
                    "sent": "It appears that the R * S verifies this constraint that it's at most for finite number of couples.",
                    "label": 0
                }
            ]
        },
        "clip_10": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Is normal at move to finance?",
                    "label": 0
                },
                {
                    "sent": "Yes, this is guaranteed.",
                    "label": 0
                },
                {
                    "sent": "Yeah, if R&S each have only at most a side note that was different from S. The difference from zero.",
                    "label": 0
                },
                {
                    "sent": "This thing will again have only a finite number of the tablets, called a monoid algebra, and it guarantees exactly this property and model.",
                    "label": 0
                },
                {
                    "sent": "It will be exactly exactly the supermodel algebra.",
                    "label": 0
                },
                {
                    "sent": "Then the integers.",
                    "label": 0
                },
                {
                    "sent": "Yeah, over the mojaver.",
                    "label": 0
                },
                {
                    "sent": "The monarchy is the structure consisting of the elements are the Singleton relations.",
                    "label": 0
                },
                {
                    "sent": "That means single typo or the empty set and the operator.",
                    "label": 0
                },
                {
                    "sent": "The multiplication of the monoid is the natural join.",
                    "label": 0
                },
                {
                    "sent": "OK, that means that one element is.",
                    "label": 0
                },
                {
                    "sent": "The is the empty set relation right and more valuable if you look into search lungs algebra purified except this definition and you see also proven that well, there's only finitely many things in this joint.",
                    "label": 0
                },
                {
                    "sent": "Results OK. And in particular, it's a community for English one.",
                    "label": 0
                },
                {
                    "sent": "Yeah, so it has the property of distributivity, and it has.",
                    "label": 0
                },
                {
                    "sent": "This nice property has an additive inverse, and all the usual things that you expect, so you can.",
                    "label": 0
                },
                {
                    "sent": "You can get polynomials.",
                    "label": 0
                },
                {
                    "sent": "Yeah, and you can get factorizations and that will be optimization techniques that we will need for our compilation technique.",
                    "label": 0
                },
                {
                    "sent": "So here's an example.",
                    "label": 0
                },
                {
                    "sent": "Yeah, so this is a relation R with some inconsistent schema.",
                    "label": 0
                },
                {
                    "sent": "Yeah, there is a tuple in there which is only defined over a, so it is a unary tuple.",
                    "label": 0
                },
                {
                    "sent": "Yeah, over A and test positive minus one.",
                    "label": 0
                },
                {
                    "sent": "It has a banner top.",
                    "label": 0
                },
                {
                    "sent": "Oh yeah, over a B2 free, which is much appreciated too.",
                    "label": 0
                },
                {
                    "sent": "You could get this by Unioning together adding together 2 lists of different schemas.",
                    "label": 0
                },
                {
                    "sent": "I have to support it to be to have these operators closed here in individual sense, otherwise I wouldn't get the other problems that they want.",
                    "label": 0
                },
                {
                    "sent": "It wouldn't become a ring.",
                    "label": 0
                },
                {
                    "sent": "Yeah, so here.",
                    "label": 0
                },
                {
                    "sent": "For example, correlation S. Yeah, which has you know relation C?",
                    "label": 0
                },
                {
                    "sent": "If I add this relations together?",
                    "label": 0
                },
                {
                    "sent": "Oh no, actually, don't do this.",
                    "label": 0
                },
                {
                    "sent": "Actually add SMT in this example.",
                    "label": 0
                },
                {
                    "sent": "So SMT above relations of consistency mechanical sense here they have just a couple of the same arity.",
                    "label": 0
                },
                {
                    "sent": "Although here I've got a negative multiplicity.",
                    "label": 0
                },
                {
                    "sent": "Adding together just means physical caffeinating socities tables.",
                    "label": 0
                },
                {
                    "sent": "Yeah, if I take notice second relation and multiply it with RI, get some interesting things.",
                    "label": 0
                },
                {
                    "sent": "So the money we save one and five I would get by taking the first one here monthly minus 1 * 2.",
                    "label": 0
                },
                {
                    "sent": "So I get minus two here.",
                    "label": 0
                },
                {
                    "sent": "Maybe let's take something interesting.",
                    "label": 0
                },
                {
                    "sent": "What about 6 year 235235?",
                    "label": 0
                },
                {
                    "sent": "I can construct by multiplying two free with the five tuple.",
                    "label": 0
                },
                {
                    "sent": "That's his motive.",
                    "label": 0
                },
                {
                    "sent": "Four 2 * 2.",
                    "label": 0
                },
                {
                    "sent": "In addition, I can also join together 2 free with free 5 and let's multiply 2 * 5 so he totally gets 4 + 2 as multiplicity.",
                    "label": 0
                },
                {
                    "sent": "It's weird, but I need this for being closed and making this a ring with respect to the basic operations.",
                    "label": 0
                },
                {
                    "sent": "If I start a classical, let's see positive relational algebra expression with.",
                    "label": 0
                },
                {
                    "sent": "Yet conjunction and disjunction or OK there was calculus or any relation algebra union and natural join if I use distributivity in build ways.",
                    "label": 0
                },
                {
                    "sent": "To be able to be close to not have to worry about schema constraints in a messy way?",
                    "label": 0
                },
                {
                    "sent": "Yeah, I would be have to define this operations in that in that general way.",
                    "label": 0
                },
                {
                    "sent": "OK, so now this thing is a ring and I have not a nice property that as an additive inverse I can compute polynomials and I can compute factorizations and the polynomials have the user properties for numbers as we are used to in the integers.",
                    "label": 0
                },
                {
                    "sent": "In particular I can compute deltas and differentials, so to say and it's.",
                    "label": 0
                },
                {
                    "sent": "Infant differential that can compute it's closed undertaking deltas, and Moreover there is for every year such query in this language, for every expression in this ring.",
                    "label": 0
                },
                {
                    "sent": "Yeah there is a K filter that is zero serving the relation that Maps any tuple to multiplicity 0.",
                    "label": 0
                }
            ]
        },
        "clip_11": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So I can build a query language out of that and it's basically a translation of relational calculus for example.",
                    "label": 0
                },
                {
                    "sent": "So I've got formulas in terms the formulas will be constructed from these rings are expressions, so the multiplication is basically a natural join.",
                    "label": 0
                },
                {
                    "sent": "Yeah, the plus is basically this.",
                    "label": 0
                },
                {
                    "sent": "This this union operation, the minus.",
                    "label": 0
                },
                {
                    "sent": "Compliments that abilities.",
                    "label": 0
                },
                {
                    "sent": "Then there's the the one of the cirella mentoring.",
                    "label": 0
                },
                {
                    "sent": "Yeah, the one element, yeah has every every type has mattress is zero except for the empty tuple.",
                    "label": 0
                },
                {
                    "sent": "Yet another eat.",
                    "label": 0
                },
                {
                    "sent": "Apple has multiplicity one and false has multi server everything.",
                    "label": 0
                },
                {
                    "sent": "Then I've got built-in relations.",
                    "label": 0
                },
                {
                    "sent": "Yeah, and they've got conditions and conditions.",
                    "label": 0
                },
                {
                    "sent": "Compare term with zero using greater than, less than equals, etc not equals.",
                    "label": 0
                },
                {
                    "sent": "In terms, have multiplication and addition and minus.",
                    "label": 0
                },
                {
                    "sent": "If you say the types of the terms is floats or rationals, let's say then that would be the operations of the rationals.",
                    "label": 0
                },
                {
                    "sent": "Additional might have built in functions any built in functions you like.",
                    "label": 0
                },
                {
                    "sent": "I've got variables which are coming from the calculus and I've got aggregates.",
                    "label": 0
                },
                {
                    "sent": "Now I'm only talking about sums and we're going to explain this aggregates.",
                    "label": 0
                },
                {
                    "sent": "For basic SQL queries, for example the example they give you before for each customer ID number of customers with the same nation, including myself.",
                    "label": 0
                },
                {
                    "sent": "I would express this in this aggregation calculus you were saying.",
                    "label": 0
                },
                {
                    "sent": "Well, count.",
                    "label": 0
                },
                {
                    "sent": "That means some.",
                    "label": 0
                },
                {
                    "sent": "Yeah once for each year, multiplicity of taboo that I get in this way where I use see what is it?",
                    "label": 0
                },
                {
                    "sent": "I'm going to explain later, so I'm going to multiply.",
                    "label": 0
                },
                {
                    "sent": "Basically these two different predicates that looks like duration calculus.",
                    "label": 0
                },
                {
                    "sent": "Yeah, I've got an equality constraint could of course replace this in one and two by N Everywhere if I want it.",
                    "label": 0
                },
                {
                    "sent": "So that would be just a calculus thing.",
                    "label": 0
                },
                {
                    "sent": "It's really strictly resignation of the generalization of duration calculus or first order logic, and on those things that where I can just replace, you know, take calculus and replace the ends by multiplication and there or by by the plus it has the same semantics.",
                    "label": 0
                },
                {
                    "sent": "OK, but I can also think express things that are not calculus.",
                    "label": 0
                },
                {
                    "sent": "So I'm going to produce this relation, which is just multiplication network joins and then going to send them up and that group I see one.",
                    "label": 0
                },
                {
                    "sent": "So these two packets made the following.",
                    "label": 0
                },
                {
                    "sent": "The first one is para meters that come from above.",
                    "label": 0
                },
                {
                    "sent": "That means these are you have done with binding patterns.",
                    "label": 0
                },
                {
                    "sent": "Relational database context to be bound variables.",
                    "label": 0
                },
                {
                    "sent": "There are free variables and the sun implicit projector.",
                    "label": 0
                },
                {
                    "sent": "All those that occur neither here nor there.",
                    "label": 0
                },
                {
                    "sent": "OK, so this way in the second packet I put things that I want to group by OK in here I would put in para meters come for example from this triggers or any.",
                    "label": 0
                },
                {
                    "sent": "Things that I want to pass or from the host language that cause the query.",
                    "label": 0
                }
            ]
        },
        "clip_12": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "I also need this input variables.",
                    "label": 0
                }
            ]
        },
        "clip_13": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "For example, for correlations in nested aggregates.",
                    "label": 0
                }
            ]
        },
        "clip_14": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "OK, so, but obviously I can express.",
                    "label": 0
                },
                {
                    "sent": "Yeah, interesting you know.",
                    "label": 0
                },
                {
                    "sent": "Inference based inference tasks.",
                    "label": 0
                },
                {
                    "sent": "If I now say, well, this, the image of these relations is not the integers, But let's say that the rational numbers OK.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "So here for example, yeah I would like to supply some values for the variables you envy.",
                    "label": 0
                },
                {
                    "sent": "Yeah, and I would like to marginalized such that gets, you know, the different probabilities for X&Y's, so I would get a user business input failures.",
                    "label": 0
                },
                {
                    "sent": "I would at run time filling the variables in here.",
                    "label": 0
                },
                {
                    "sent": "So I would basically do a selection if you talk about the relational query context and I would project down every Friday for some all the bells except for those here.",
                    "label": 0
                },
                {
                    "sent": "So I would get all the computer table for different XY values.",
                    "label": 0
                },
                {
                    "sent": "Well, I mean these are kind of, you know, factor factor functions.",
                    "label": 0
                },
                {
                    "sent": "OK yeah, I mean I assume now that I don't need a normalization factor, but I could compute in the same way.",
                    "label": 0
                },
                {
                    "sent": "So then if I would have an overset here times this then I would have no microphone field thing but.",
                    "label": 0
                },
                {
                    "sent": "Summation really concerns for the parable say.",
                    "label": 0
                },
                {
                    "sent": "On the decimation, basically we project we sum up over the variable set and which other variables do we have?",
                    "label": 0
                },
                {
                    "sent": "Actually, only set in this case.",
                    "label": 0
                },
                {
                    "sent": "Yeah, because there is nothing else.",
                    "label": 0
                },
                {
                    "sent": "Yes, but I could somewhere else.",
                    "label": 0
                }
            ]
        },
        "clip_15": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Neighbors like.",
                    "label": 0
                },
                {
                    "sent": "OK.",
                    "label": 0
                },
                {
                    "sent": "So here I define now for my for this query language.",
                    "label": 0
                },
                {
                    "sent": "For this aggregate queries the Deltas OK and what you see here is a complete definition.",
                    "label": 0
                },
                {
                    "sent": "This defines.",
                    "label": 0
                },
                {
                    "sent": "Yeah, yeah, mapping that Maps any curve.",
                    "label": 0
                },
                {
                    "sent": "This very powerful language here too.",
                    "label": 0
                },
                {
                    "sent": "Two are again experienced this language.",
                    "label": 0
                },
                {
                    "sent": "Let me also say head conditions with nested aggregates is a very powerful language I can express.",
                    "label": 0
                },
                {
                    "sent": "Universal properties, for example, I can express full first order logic using these aggregates.",
                    "label": 0
                },
                {
                    "sent": "OK, I didn't show that here, but I can do that.",
                    "label": 0
                },
                {
                    "sent": "So here Alphabet it could be either formula terms and then depending on that you had the plasma multiplication.",
                    "label": 0
                },
                {
                    "sent": "At these operations it off this ring of relations or the ring of the let's say rationals or integers or whatever you use is the domain of the terms.",
                    "label": 0
                },
                {
                    "sent": "OK, so addition that of the addition is just the Delta.",
                    "label": 0
                },
                {
                    "sent": "The additions that deltas.",
                    "label": 0
                },
                {
                    "sent": "The Delta products.",
                    "label": 0
                },
                {
                    "sent": "We just multiply it out right so we get all the four combinations of you think about the new value being Alpha plus DA times.",
                    "label": 0
                },
                {
                    "sent": "Yeah, better plus Delta better use this video to multiply it out and it just remove the old value which was advertised to get free terms here.",
                    "label": 0
                },
                {
                    "sent": "Delta Alpha Times better algorithms, Delta better.",
                    "label": 0
                },
                {
                    "sent": "Plus yeah, Delta Alpha Times, Delta beds, etc, right for sums, the sum is basically something like a multiplication of the term in the product and then it jumps.",
                    "label": 0
                },
                {
                    "sent": "Just sum up so I can push the sum.",
                    "label": 0
                },
                {
                    "sent": "Yeah, the Delta for the sun, just like could do it for the addition.",
                    "label": 0
                },
                {
                    "sent": "Yeah, so I'm just a big sum and the Delta expression that for conditions a bit complicated.",
                    "label": 0
                },
                {
                    "sent": "I would say I'll take it offline, it works.",
                    "label": 0
                },
                {
                    "sent": "Yeah, that's actually something nice because in all of the literature on incremental humans in databases nobody has done.",
                    "label": 0
                },
                {
                    "sent": "Yeah, incremental maintenance of queries that have nested aggregates in conditions.",
                    "label": 0
                },
                {
                    "sent": "This definition is correct and it works everywhere.",
                    "label": 0
                },
                {
                    "sent": "It has a nasty property which justifies where people have not done it.",
                    "label": 0
                },
                {
                    "sent": "OK, but it's correct, so the query languages closed under taking Taylors.",
                    "label": 1
                },
                {
                    "sent": "Let me explain this thing for the base relations here.",
                    "label": 0
                },
                {
                    "sent": "So if I do a Delta.",
                    "label": 0
                },
                {
                    "sent": "Great example, insert a relation a couple single T into R and I do this on the Atom out of something.",
                    "label": 0
                },
                {
                    "sent": "OK, assume that the idea of course of T and this X 2X schema var is the same.",
                    "label": 0
                },
                {
                    "sent": "Then the result would be the products of this constraint.",
                    "label": 0
                },
                {
                    "sent": "The F element element of the XW Stephens wrote it up.",
                    "label": 0
                },
                {
                    "sent": "I just say well the TT is the double X OK. And yeah if I want to delete that would have minus in front of it.",
                    "label": 0
                },
                {
                    "sent": "It's different if there aren't as a different relations then I get forced to Sue element of the ring of their relations.",
                    "label": 0
                },
                {
                    "sent": "OK.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                }
            ]
        },
        "clip_16": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "I cannot define and these these expressions, expressions, both the ring of the terms and the ring of the relations.",
                    "label": 0
                },
                {
                    "sent": "Yeah, has the usual properties that we have in rings.",
                    "label": 0
                },
                {
                    "sent": "We can do polynomials.",
                    "label": 0
                },
                {
                    "sent": "You can define a degree in the usual way.",
                    "label": 0
                },
                {
                    "sent": "So basically, if I have a pick product here then the degree is the number of things that multiply up, but you can define it for the whole language and now.",
                    "label": 0
                },
                {
                    "sent": "What I get as a result is that for any yeah aggregate term of my language or for any formula, yeah.",
                    "label": 0
                },
                {
                    "sent": "That has the property that in my conditions, the term itself doesn't have segregates.",
                    "label": 0
                },
                {
                    "sent": "Then it's true that the degree of the Delta query is always one less the degree of the of the original query.",
                    "label": 0
                },
                {
                    "sent": "Unnecessary zero.",
                    "label": 0
                },
                {
                    "sent": "OK, so I have this user property that you know the derivation of.",
                    "label": 0
                },
                {
                    "sent": "This makes it the query simpler in terms of reducing, at least by one join.",
                    "label": 0
                },
                {
                    "sent": "That means after a certain K, yeah the query will be constant or one step further it will be 0.",
                    "label": 0
                },
                {
                    "sent": "What?",
                    "label": 0
                },
                {
                    "sent": "The problem that's why people have not done in the classical literature.",
                    "label": 0
                },
                {
                    "sent": "Yeah, increments you intends for the conditions is that in general the deltuva condition can be of the same degree SS traditional query, so it doesn't necessarily just agree that means this Delta combination doesn't kind of terminates.",
                    "label": 0
                },
                {
                    "sent": "It'll say if you do it repeatedly.",
                    "label": 0
                },
                {
                    "sent": "So in that case the basics don't work, but often particularly you've got integrity constraints.",
                    "label": 0
                },
                {
                    "sent": "You know something about database you can actually do that early writings that have lower degree and then you can even do this through writings for queries with nested aggregates in conditions, but otherwise you've got this result which allows you loving of the languages closed under taking deltas and has this property that doing a Delta makes it very simple.",
                    "label": 0
                },
                {
                    "sent": "Yeah, that was the only two problems that you needed for only two properties that we needed for doing this recursive incremental view maintenance compilation algorithm.",
                    "label": 0
                },
                {
                    "sent": "Example OK.",
                    "label": 0
                }
            ]
        },
        "clip_17": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So that's a simple query.",
                    "label": 0
                },
                {
                    "sent": "And it will join aggregates up.",
                    "label": 0
                },
                {
                    "sent": "It has this database.",
                    "label": 0
                },
                {
                    "sent": "People notice that PCH schema somewhat simplified the ideas here.",
                    "label": 0
                },
                {
                    "sent": "I've got orders and I've got items of the orders I joined together by the order key and I'm not saying OK orders have a customer and the customer comes from a country and you have exchange rate with my own country and I've got a price that is with each list item.",
                    "label": 0
                },
                {
                    "sent": "So to actually evaluate the value of the order in my own currency I'm going to do the sum over this this product if prices and exchange rates.",
                    "label": 0
                },
                {
                    "sent": "OK. You could of course also think of this is a modulation in some very very simple graphical model.",
                    "label": 0
                },
                {
                    "sent": "So how do?",
                    "label": 0
                }
            ]
        },
        "clip_18": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "We do the incremental view instance, so I've got two relations, order line item and I would like to maintain their pool for insertions and deletions of single couples, so we do not compile each of these triggers.",
                    "label": 0
                },
                {
                    "sent": "Here I'm showing going to show you what is to be done if I insert a single tap Lumia X OK X CK power blah into Kirk, you into the order relation.",
                    "label": 0
                },
                {
                    "sent": "OK, in that case, what do I have to do?",
                    "label": 0
                },
                {
                    "sent": "Well, take the query.",
                    "label": 0
                },
                {
                    "sent": "I'm going to use this algebraic laws that I've shown about deltas to basically push the Delta in.",
                    "label": 0
                },
                {
                    "sent": "Into my multiplication of the order and the line item Atom.",
                    "label": 0
                },
                {
                    "sent": "That means in this case I will, but in particular replaced order relation by just a single tuple.",
                    "label": 0
                },
                {
                    "sent": "That is true because of this Delta rules that I have shown before.",
                    "label": 0
                },
                {
                    "sent": "So now I can do some simplifications.",
                    "label": 0
                },
                {
                    "sent": "Yeah, at runtime I will have substitute all these variables that counter arguments of the of the trigger insert into order by constants.",
                    "label": 0
                },
                {
                    "sent": "So I can treat this smells like constants and they can substitute.",
                    "label": 0
                },
                {
                    "sent": "Yeah, wherever these these values are used I just replace them directly by.",
                    "label": 0
                }
            ]
        },
        "clip_19": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Developer kits for the arguments.",
                    "label": 0
                },
                {
                    "sent": "OK, now I've got no choice anymore.",
                    "label": 0
                },
                {
                    "sent": "OK, but I can do some further simplifications.",
                    "label": 0
                },
                {
                    "sent": "In particular, I can use distributivity to pull out this product here.",
                    "label": 0
                }
            ]
        },
        "clip_20": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Straight yeah, because it doesn't depend on the line items.",
                    "label": 0
                },
                {
                    "sent": "And now when I don't know any further simplifications I might have an aggregate query.",
                    "label": 0
                },
                {
                    "sent": "Again, in general, is it simpler?",
                    "label": 0
                },
                {
                    "sent": "It's guaranteed by one order of by 1 degree lower.",
                    "label": 0
                },
                {
                    "sent": "I give it a name and incrementally maintain it separately, so this will be the Q. Oh my auxiliary query group by this order key that will come in from here.",
                    "label": 0
                },
                {
                    "sent": "So I have to maintain it for all, but it was an order keys so that I can combine the values at the at the right time correctly so I will have to also incremental maintain this query.",
                    "label": 0
                },
                {
                    "sent": "Yeah, so how do I?",
                    "label": 0
                }
            ]
        },
        "clip_21": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Do this I will have to for each possible order key value have to increment in this.",
                    "label": 0
                },
                {
                    "sent": "Well, discrete doesn't depend on order.",
                    "label": 0
                },
                {
                    "sent": "If I change order, the queries did not change because it only depends on line item.",
                    "label": 0
                },
                {
                    "sent": "But if I change line item inserting the line item for example the result Q of X OK will have to be changed OK.",
                    "label": 0
                }
            ]
        },
        "clip_22": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Again, I used this algebraic laws push in my change.",
                    "label": 0
                },
                {
                    "sent": "I will actually replace the line item relation by justice Edit Table.",
                    "label": 0
                },
                {
                    "sent": "I do some simplifications, yeah and see here.",
                    "label": 0
                }
            ]
        },
        "clip_23": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "I loop over all the extra case, but only adds YP where extra case.",
                    "label": 0
                },
                {
                    "sent": "Why?",
                    "label": 0
                },
                {
                    "sent": "OK?",
                    "label": 0
                },
                {
                    "sent": "So I can actually limit this loop.",
                    "label": 0
                }
            ]
        },
        "clip_24": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Replacing bye bye OK and so this is a.",
                    "label": 0
                }
            ]
        },
        "clip_25": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Without the lupines constant time.",
                    "label": 0
                }
            ]
        },
        "clip_26": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And do the same thing for the line.",
                    "label": 0
                }
            ]
        },
        "clip_27": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Items.",
                    "label": 0
                }
            ]
        },
        "clip_28": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Simplify, simplify, pull out, yeah and maintain.",
                    "label": 0
                }
            ]
        },
        "clip_29": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "This thing that I pulled out simplify and when I get is now some trigger codes.",
                    "label": 0
                },
                {
                    "sent": "But you see sometimes several triggers for the same event, but I've just execute them in the order I have to compute them actually.",
                    "label": 0
                },
                {
                    "sent": "And what you see here is and you can think of this as C code.",
                    "label": 0
                },
                {
                    "sent": "What you see is that so constant time, so I have some some query that joins two relations together if I'm very naive, I would run the cinematic time.",
                    "label": 0
                },
                {
                    "sent": "If I do it smartly, that would mean I would hash on the order key and then before I move it in hash buckets.",
                    "label": 0
                },
                {
                    "sent": "Or is the end of the hash bucket to the aggregate inside the hash bucket is summation that we're doing this in linear time?",
                    "label": 0
                },
                {
                    "sent": "It's a smart technique section also so trivial, but incrementally I can do it in constant time for any single tap, the updates to the database.",
                    "label": 0
                },
                {
                    "sent": "Do all the changes necessary in constant time overall.",
                    "label": 0
                },
                {
                    "sent": "What do the deletions look like in this particular case?",
                    "label": 0
                },
                {
                    "sent": "I would get him by replacing all the pluses and minuses, but in general it's not that simple.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                }
            ]
        },
        "clip_30": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Doesn't know some interesting optimizations which are important, so for example factorization, suppose you've got a big query and take the case that you do in Delta to a relation that connects different parts of the query.",
                    "label": 0
                },
                {
                    "sent": "OK, so for example, the star schema in database and it's very important, but you of course see this in large graphical models as well right?",
                    "label": 0
                },
                {
                    "sent": "So for example, what if you implemented for line order?",
                    "label": 0
                }
            ]
        },
        "clip_31": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So I would like to be able to compute the values of Q of PC which is part category and year here.",
                    "label": 0
                },
                {
                    "sent": "I do the increment.",
                    "label": 0
                }
            ]
        },
        "clip_32": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "This is for line item.",
                    "label": 0
                },
                {
                    "sent": "Well then I replace the line at.",
                    "label": 0
                }
            ]
        },
        "clip_33": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Relation by this tablet are inserted and now the query graph is disconnected, so I can actually.",
                    "label": 0
                }
            ]
        },
        "clip_34": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Distributivity.",
                    "label": 0
                }
            ]
        },
        "clip_35": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "The fact that this in two parts OK and now I can increment as these two parts.",
                    "label": 0
                },
                {
                    "sent": "OK, let's of course an idea that it is seen that you seen three decompositions.",
                    "label": 0
                },
                {
                    "sent": "Yeah, also in conjunction trees etc in in graphical models.",
                    "label": 0
                },
                {
                    "sent": "And that's something that we get kind of automatically.",
                    "label": 0
                },
                {
                    "sent": "OK so.",
                    "label": 0
                }
            ]
        },
        "clip_36": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Overall, the compilation algorithm is full power.",
                    "label": 0
                },
                {
                    "sent": "Looks like this at some point here after doing my data processing, I do some simplifications which include factorization and then I get a big monomial.",
                    "label": 0
                },
                {
                    "sent": "That means here as a big pillow is sum of monomials, them or normaliser just product.",
                    "label": 0
                },
                {
                    "sent": "You have no additions in there anymore.",
                    "label": 0
                },
                {
                    "sent": "Then I will do basically the construction of these.",
                    "label": 0
                },
                {
                    "sent": "This this statements of my of my triggers.",
                    "label": 0
                },
                {
                    "sent": "There's some further simplifications.",
                    "label": 0
                },
                {
                    "sent": "For example, this elimination of certain loops that you can do with certain constraints, etc, and it was returned to the recursive call to compile all the deltas.",
                    "label": 0
                },
                {
                    "sent": "We don't have to go into details, but there are certain simplifications.",
                    "label": 0
                },
                {
                    "sent": "Important thing after the Delta process to be done and there's more to be said about those.",
                    "label": 0
                }
            ]
        },
        "clip_37": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So days of course literature on this kind of generalized distributive law that applies here that we use here to kind of efficiently compute those big sums in the context of databases.",
                    "label": 0
                },
                {
                    "sent": "But it has also been used all kinds of other contexts, for example, in information theory it has been of course used here in the conservation, Dan Floristic reasoning and the kinds of databases we're talking about.",
                    "label": 0
                },
                {
                    "sent": "This notion of tree decompositions of hyperactive compositions of queries.",
                    "label": 0
                },
                {
                    "sent": "Here, for example, we've got a big showing graph here, so.",
                    "label": 0
                },
                {
                    "sent": "Each of these bubbles here hyper, hyper, hyper, edge of my query.",
                    "label": 0
                },
                {
                    "sent": "Yeah into some variables and they never occurs in several of those bubbles.",
                    "label": 0
                },
                {
                    "sent": "Yeah, I've gotta join on this variable.",
                    "label": 0
                },
                {
                    "sent": "OK so I can make this so called typer decompositions.",
                    "label": 0
                },
                {
                    "sent": "Yeah, basically making it reorganization of how they look like so I don't have to talk about detail.",
                    "label": 0
                },
                {
                    "sent": "But if you know junction trees in order, what you need in this case, this is what the database that was Community cause a SQL queries.",
                    "label": 0
                },
                {
                    "sent": "We had.",
                    "label": 0
                },
                {
                    "sent": "This junction tweet doesn't require us to merge.",
                    "label": 0
                },
                {
                    "sent": "Several relations into one note.",
                    "label": 0
                },
                {
                    "sent": "And.",
                    "label": 0
                }
            ]
        },
        "clip_38": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "You think about is what the compilation algorithm does is well on each data processing step we eliminate basically exactly 1 hyper edge from the hypergraph.",
                    "label": 0
                },
                {
                    "sent": "That means after a few steps the hypergraph disassembles, and by basically in some order eliminating hyper edges to compute.",
                    "label": 0
                },
                {
                    "sent": "So that's a step by step my my my statements that don't have any joint operators anymore.",
                    "label": 0
                },
                {
                    "sent": "Yeah, what this means is actually determine at a two decomposition or junction tree for this big.",
                    "label": 0
                },
                {
                    "sent": "Crash structure to join grass structure.",
                    "label": 0
                },
                {
                    "sent": "Unfortunately yeah, if I do what I just told you is the compilation doesn't find a good Twitter conversation, but it computes all possible three decompositions and unions indicator, which is of course exponentially many, and that's bad.",
                    "label": 0
                }
            ]
        },
        "clip_39": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So you can of course do is.",
                    "label": 0
                },
                {
                    "sent": "You can first determine some junction tree or decomposition.",
                    "label": 0
                },
                {
                    "sent": "And then step by step.",
                    "label": 0
                },
                {
                    "sent": "Yeah, as you go down history, apply this rule so your basic group by group certain of this part of the products together give them a name.",
                    "label": 0
                },
                {
                    "sent": "Then here for example on APR things that you multiply together and then you use our Delta posting rules which produces for each pair of things that are multiplied together at AAA summer free, three different monomials.",
                    "label": 0
                },
                {
                    "sent": "If I had lots of these I would get exponentially many more normals which would be bad, but I can of course run through the cities Delta processing algorithm on.",
                    "label": 0
                },
                {
                    "sent": "Are the treaty composition too?",
                    "label": 0
                },
                {
                    "sent": "I get a small program the compiler don't produce unnecessarily many data structures for presenting the intermediate results that I have to maintain.",
                    "label": 0
                }
            ]
        },
        "clip_40": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So if you go back to what is this program is look like that I get so it will be a sequence of statements right there?",
                    "label": 0
                },
                {
                    "sent": "Execute when some event occurs, like an insertion into customer of a single topologically more over on the right hand side you might have a product of several such map excesses of social structure excesses.",
                    "label": 0
                },
                {
                    "sent": "But if that happens, yeah.",
                    "label": 0
                },
                {
                    "sent": "Each variable and then kind of come on in several of those atoms on the right hand side only in one.",
                    "label": 0
                },
                {
                    "sent": "That means conceptually you could think of such a for loop.",
                    "label": 0
                },
                {
                    "sent": "Is a product multiplying relational products here in the sense of databases that multiplies up to relations.",
                    "label": 0
                },
                {
                    "sent": "But it can never be adjoined by you actually have to do some matching and filtering.",
                    "label": 0
                },
                {
                    "sent": "You will not pair more couples and actually will be relevant to the query results because you can never get get to compare to different couples that actually inconsistent each other, for which actually develop core.",
                    "label": 0
                },
                {
                    "sent": "Cursing both of them.",
                    "label": 0
                },
                {
                    "sent": "Yeah, has a different value because there's no Co occurrences that is guaranteed by this factorization.",
                    "label": 0
                },
                {
                    "sent": "Yeah, that I've just talked about there cannot be an overlap.",
                    "label": 0
                },
                {
                    "sent": "Because then if that happens, we wouldn't have factorized.",
                    "label": 0
                },
                {
                    "sent": "And if you wouldn't have factorized, we wouldn't get several atoms, several accesses to the Maps on the right hand side just one.",
                    "label": 0
                },
                {
                    "sent": "OK, we have to.",
                    "label": 0
                },
                {
                    "sent": "I'm stopping.",
                    "label": 0
                },
                {
                    "sent": "I've got two more slides which is just blah blah and then I'm done OK.",
                    "label": 0
                }
            ]
        },
        "clip_41": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "Nothing technical.",
                    "label": 0
                },
                {
                    "sent": "OK so.",
                    "label": 0
                },
                {
                    "sent": "So what I told you then is executing such a trigger in this language.",
                    "label": 0
                },
                {
                    "sent": "It's only a constant number of arithmetic operations that tuple inserted, deleted for each atomic value, maintains for each left hand side value that offer data structure.",
                    "label": 0
                },
                {
                    "sent": "I do only a fixed number of additions, multiplications especially evident in the right hand side OK.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "That means, in particular, you can actually show that evaluating such serial triggers.",
                    "label": 0
                },
                {
                    "sent": "Triggers of this language can be done.",
                    "label": 0
                },
                {
                    "sent": "Yeah, in the complexity class, NC0, which is moving circuits of polynomial size, constant death inbounded Fannin this means in particular every bit of the result depends only on a constant number of bits of the input.",
                    "label": 0
                },
                {
                    "sent": "Yeah.",
                    "label": 0
                },
                {
                    "sent": "And that is the major difference to incremental maintenance, where in general you do a big sum over lots of couples and each bit depends on an unbounded number of input bits.",
                    "label": 0
                },
                {
                    "sent": "But this is not the case, and that's the major thing impacted his ability.",
                    "label": 0
                },
                {
                    "sent": "Article salt.",
                    "label": 0
                },
                {
                    "sent": "That's actually the first separation of any non incremental incremental innovation results.",
                    "label": 0
                },
                {
                    "sent": "Becausw thesis here with answers here.",
                    "label": 0
                },
                {
                    "sent": "Yeah, this is your being the complexity class that is course corresponding to non incremental relation has been separated from this era.",
                    "label": 0
                },
                {
                    "sent": "For NCO, it's actually one of the few results we know that the complexity class NP is larger than another one.",
                    "label": 0
                },
                {
                    "sent": "OK so, but that's the practical side, but in practice it also has spectrum locations and they are in particular.",
                    "label": 0
                }
            ]
        },
        "clip_42": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "That I'm.",
                    "label": 0
                },
                {
                    "sent": "I could do a purely push based implementation of of distributors evaluator for this for this piece of code.",
                    "label": 0
                },
                {
                    "sent": "So if I would have this back data structures these arrays and I partition him somehow and distributed with several notes here or make it distributed key value store OK, then I will have to pass some data around some message passing between these different computational nodes and I will need.",
                    "label": 0
                },
                {
                    "sent": "I have to send them and I will never have to see.",
                    "label": 0
                },
                {
                    "sent": "OK, but they actually have to send what is relevant to this note because I don't worry joins at the nodes that receive data.",
                    "label": 0
                },
                {
                    "sent": "Yeah, I will just have to combine all possible things that they receive and it will be relevant to the results by doing at compilation time.",
                    "label": 0
                },
                {
                    "sent": "The elimination of the joints will never in a purely push based implementation of distributed processing, send more.",
                    "label": 0
                },
                {
                    "sent": "Didn't have to.",
                    "label": 0
                },
                {
                    "sent": "OK so I can do some very naive eventual consistency method that doesn't need any kind of synchronization and concurrency control.",
                    "label": 0
                },
                {
                    "sent": "And it doesn't need anything like Bloom joint where you basically have to send out a possible domain of areas that you might want to join.",
                    "label": 0
                },
                {
                    "sent": "Ask what is relevant, get respect that only centimeters needed.",
                    "label": 0
                },
                {
                    "sent": "Yeah, which needs kind of handshake, which is expensive in the large kind of cloud computing scenario.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                }
            ]
        },
        "clip_43": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "We've actually built two systems in the context.",
                    "label": 0
                },
                {
                    "sent": "Yeah, one is called TV toaster, which is the Corupted stream processing engine, and this actually figured out how to dismiss the aggregates.",
                    "label": 0
                },
                {
                    "sent": "You can do this and we have nice applications for that.",
                    "label": 0
                },
                {
                    "sent": "We also build a system called Cumulus which is doing this kind of highly parallel.",
                    "label": 0
                },
                {
                    "sent": "Online real time data warehousing in the large cloud using this kind of eventual consistency push based approach that doesn't need to send any data that you don't need, so that's a result of compilation.",
                    "label": 0
                },
                {
                    "sent": "You wouldn't get it otherwise.",
                    "label": 0
                },
                {
                    "sent": "Right so.",
                    "label": 0
                }
            ]
        },
        "clip_44": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "It's joint work with my student, Oliver Canadian and my post again.",
                    "label": 0
                },
                {
                    "sent": "If not, who is going to be at faculty at Johns Hopkins very soon?",
                    "label": 0
                },
                {
                    "sent": "Just gotta shop.",
                    "label": 0
                },
                {
                    "sent": "OK, so thanks a lot.",
                    "label": 0
                }
            ]
        },
        "clip_45": {
            "is_summarization_sample": false,
            "summarization_data": []
        },
        "clip_46": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Chris yes.",
                    "label": 0
                },
                {
                    "sent": "Because you are assuming decomposable aggregates and you know this comment that you said that you can do it in finite number of input widgets.",
                    "label": 0
                },
                {
                    "sent": "Kind of reminded me of exponential models in graphical where you have the sufficient statistics finite, sufficient, talented and only exponential model side right?",
                    "label": 0
                },
                {
                    "sent": "Are you just restricting to certain kind of aggregate functions?",
                    "label": 0
                },
                {
                    "sent": "You can get this property right?",
                    "label": 0
                },
                {
                    "sent": "That is absolutely true, but let me say one thing if you.",
                    "label": 0
                },
                {
                    "sent": "If you take for example the average supported in SQL OK, we can do all of them.",
                    "label": 0
                },
                {
                    "sent": "OK, although I have to say about Min and Max right that to be able to delete from a Mexican structure is not enough to keep the current minimum maximum around.",
                    "label": 0
                },
                {
                    "sent": "They would have to keep silicea like let's say an audit representation of all the values right while in the for some aggregates.",
                    "label": 0
                },
                {
                    "sent": "For example, where I can undo it, an addition by subtracting the same value from it right?",
                    "label": 0
                },
                {
                    "sent": "As a nice property that don't need to be state instructions.",
                    "label": 0
                },
                {
                    "sent": "If all I care about is that.",
                    "label": 0
                },
                {
                    "sent": "This particular view I don't have to mean that it is itself.",
                    "label": 0
                },
                {
                    "sent": "I can throw all the changes away as soon as I have applied them to my aggregates.",
                    "label": 0
                },
                {
                    "sent": "Right?",
                    "label": 0
                },
                {
                    "sent": "Yes, we can do negations indication, so we've got this subtraction operation which is not negation right?",
                    "label": 0
                },
                {
                    "sent": "Because negation basically cuts away something right?",
                    "label": 0
                },
                {
                    "sent": "If I subtract too much, I'm going to cut it away, right?",
                    "label": 0
                },
                {
                    "sent": "If you think about it as negation in calculus, which corresponds to the relation subtraction operation, racial difference operation, but what you can do is you can represent this negation or the relational difference operation using a condition you can say basically.",
                    "label": 0
                },
                {
                    "sent": "Those if you want to represent our minus S in relation algebra, I would say give me those hours, express selection on the hours, those hours for which the matching S here are have the number of matching S is zero and I can do this in aggregate.",
                    "label": 0
                },
                {
                    "sent": "Well, the problem is that in general, if you've got this aggregates that the Delta processing has this problem that doing a Delta doesn't make the queries simpler.",
                    "label": 0
                },
                {
                    "sent": "But there are ways of actually always doing that.",
                    "label": 0
                },
                {
                    "sent": "We sometimes have to pull out the loop, which is somewhat costly, and after you've pulled out the loop, yeah, but you get.",
                    "label": 0
                },
                {
                    "sent": "You can always again then apply D2 and it's actually simple so that the compilation algorithm terminates OK, and then there's all kinds of optimizations that we do to actually make this work fast.",
                    "label": 0
                },
                {
                    "sent": "Yes, so you're doing like natural joins in this.",
                    "label": 0
                },
                {
                    "sent": "What about joints which are not impacted?",
                    "label": 0
                },
                {
                    "sent": "So I mean the good questions so.",
                    "label": 0
                },
                {
                    "sent": "One thing that you have to keep in mind is that.",
                    "label": 0
                },
                {
                    "sent": "If you're familiar with the relation calculus or first order logic right, I can express any kinds of joints they might think about.",
                    "label": 0
                },
                {
                    "sent": "Yeah, unless they're kind of strange external functions, then we have to think about how to represent him.",
                    "label": 0
                },
                {
                    "sent": "I can express them using just conjunction.",
                    "label": 0
                },
                {
                    "sent": "By having complex conditions right, and I can represent those right, I've got conditions so.",
                    "label": 0
                },
                {
                    "sent": "So so basically I can represent, for example an inequality join, right?",
                    "label": 0
                },
                {
                    "sent": "AS set of natural joints where one of the relations represents the inequality relation right, just join in.",
                    "label": 0
                },
                {
                    "sent": "Well, we completed the way again, right?",
                    "label": 0
                },
                {
                    "sent": "It doesn't, but for representations.",
                    "label": 0
                },
                {
                    "sent": "I mean, if you take a logical error calculation, you always do it that way, right?",
                    "label": 0
                },
                {
                    "sent": "That the condition that run condition the inequality joint condition becomes a separate separate Atom right, which is written down different places, not an operator operator combines relation.",
                    "label": 0
                },
                {
                    "sent": "They want to get anymore.",
                    "label": 0
                },
                {
                    "sent": "There's actually three different items that relation that one together, and the condition and installation.",
                    "label": 0
                },
                {
                    "sent": "Then we do data processing in the right way and the results we pulled the condition again and make it to join.",
                    "label": 0
                },
                {
                    "sent": "But actually we're going to do is.",
                    "label": 0
                },
                {
                    "sent": "We're going to eliminate join, but basically just the processing step compilation step.",
                    "label": 0
                },
                {
                    "sent": "So the answer is we can do the usual joins, right?",
                    "label": 0
                },
                {
                    "sent": "Just as we can do selections selection, you can also think of as a natural join with some kind of concentration.",
                    "label": 0
                },
                {
                    "sent": "Right?",
                    "label": 0
                },
                {
                    "sent": "So the selection or are different generations are not part of this ring, but using additional multiplication I can express them.",
                    "label": 0
                },
                {
                    "sent": "We've got special relations.",
                    "label": 0
                },
                {
                    "sent": "Yeah.",
                    "label": 0
                },
                {
                    "sent": "Just curious about what kind of practical speedups you got.",
                    "label": 0
                },
                {
                    "sent": "I mean, there's a third theoretical complexity advantage, but if you do have any results, yeah, we've got results.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "Let me show you this thing I like that.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "These are these are the 1st three queries occurs from the context of algorithmic trading.",
                    "label": 0
                },
                {
                    "sent": "So that's actually a stream of stock data.",
                    "label": 0
                },
                {
                    "sent": "So guarded updates, yeah, interesting trading strategies that have interesting queries that do some statistical analysis on top of them, and these figures.",
                    "label": 0
                },
                {
                    "sent": "Obviously there's loading freeze from the TPC H benchmark OK, and so.",
                    "label": 0
                },
                {
                    "sent": "The baseline here, here is our recursive compilation technique.",
                    "label": 0
                },
                {
                    "sent": "Blue, the blue lines are Castle inventiveness.",
                    "label": 0
                },
                {
                    "sent": "That means 1D processing step and then execute the Delta post.",
                    "label": 0
                },
                {
                    "sent": "The Delta queries using classical purpose in techniques and the red bars is classical for processing all of them.",
                    "label": 0
                },
                {
                    "sent": "Right now the main memory engine using the common code base and what you see is that basically classical went into maintenance is by 1.524 orders of magnitude slower and non equivocation is even slower with the exception of this one query.",
                    "label": 0
                },
                {
                    "sent": "But you can expect a speedup of something like 4 orders of magnitude if you do a good job.",
                    "label": 0
                },
                {
                    "sent": "So that's actually our own implementation.",
                    "label": 0
                },
                {
                    "sent": "I've also done it to perform big commercial system, not going to tell you which one which implements incremental view maintenance right?",
                    "label": 0
                },
                {
                    "sent": "And you also get something you know four orders of magnitude improvement or what its system, even if it uses incremental maintenance.",
                    "label": 0
                },
                {
                    "sent": "OK, so but I guess thanks.",
                    "label": 0
                }
            ]
        }
    }
}