{
    "id": "oytrffgdpadvear4dqzjlzixboy22wyb",
    "title": "A Functional Programming Approach to Distance-based Machine Learning",
    "info": {
        "author": [
            "Darko Aleksovski, Jo\u017eef Stefan Institute"
        ],
        "published": "Nov. 7, 2008",
        "recorded": "October 2008",
        "category": [
            "Top->Computer Science->Machine Learning"
        ]
    },
    "url": "http://videolectures.net/sikdd08_aleksovski_fpa/",
    "segmentation": [
        [
            "Presentation is by Darko Alexs, key right.",
            "Functional programming approach to distance based machine learning.",
            "This presentation is about the functional functional programming approach to distance based machine learning."
        ],
        [
            "What it contains is an introduction.",
            "It's based on general framework for data mining.",
            "The next part is about functional programming in Haskell.",
            "Anatomy of distances for structured data that we use in this general framework.",
            "A small database for distance function components and at the end conclusions."
        ],
        [
            "As an introduction, or instead of into international, explained the general framework for data mining.",
            "Um algorithms for distance based distance based prediction and distance based clustering are very popular among the machine learning community.",
            "They did.",
            "They typically now work with single table or attribute value data and this algorithms use distance functions that are typically hard coded.",
            "The general framework for data mining proposed by Professor Sasha Jerowski.",
            "Instead of, this proposes usage of different types of data, different data mining tasks or algorithms, and different types of patterns and models as results of this.",
            "This framework uses also generate so-called generic learning algorithms.",
            "Those are algorithm known algorithms modifies to work on arbitrary structured data types.",
            "And give results.",
            "The components of distance based algorithms are the main topic and most important thing for this general framework."
        ],
        [
            "As I said, the tackles structured data, not just a single table data, complex structure, complex data are those kind of data types that are built.",
            "I recursively built from simpler ones.",
            "We define our primitive data types and several type constructors.",
            "Primitive data types includes a real discreet on S and Boolean.",
            "An example of discrete's on the set given here is is actually discrete data type that can take one of four possible values.",
            "Um type constructors.",
            "Type constructors are used.",
            "After that we use the primitive data types as building blocks and using these type constructors set to pull and sequence.",
            "We construct more complex data types.",
            "A set of T is declaration of set of elements of type T, for example, or sets of a primitive type that was mentioned above is set where each element could take one of the four possible values also mentioned above."
        ],
        [
            "The generic distance based algorithms machine learning algorithms used and are used for clustering and prediction.",
            "Clustering.",
            "Algorithms is are here are chical argumentative clustering.",
            "And the prediction algorithm is the K nearest neighbor algorithm.",
            "These are chosen because they both need distances to work and then they don't need to directly.",
            "Is that the data values?",
            "But instead they could.",
            "They can use the data values through the distances defined on them.",
            "Are they as generic?",
            "They work for arbitrary types of structured data, and as I said that they require distance function, this distance function is a function with that with the given signature.",
            "It's maybe.",
            "In any hostile in Haskell syntax that satisfies all the three properties you know it has to be the value has to be equal or greater to 0 if it's equal to 0.",
            "So now the two values must be equal and symmetric property.",
            "Another property that distance functions could have is if it satisfies this inequality triangle inequality property, then we call it a metric.",
            "But in our project the metric is not of much importance.",
            "We generally deal with distance funk."
        ],
        [
            "So we said we need to.",
            "Our project application needs to work with distance functions as they are the components of the General general framework and needs to store, retrieve and manipulate distance functions.",
            "So we decided to try to use functional programming to achieve this goal and in particular the language Haskell.",
            "Why has some of the some of the properties it has give us?",
            "Just some advantage.",
            "It produces succinct and understandable code, or at least understandable understandable concept concepts by much larger group of people, because the code written in Haskell resembles the mathematical definitions of functions and such, and it's easy to grasp.",
            "Its expressive Haskell allows.",
            "Spending more time thinking and reasoning about the application domain instead, or instead of trying to conform to the languages style of programming.",
            "For example, if it were object oriented, we would have to think in terms of objects, classes, inheritance, polymorphism.",
            "Here it's kind of more more targeted to the application domain.",
            "Usage of functions and function compositions.",
            "We said why that was the primary reason why we chose functional language and the most important are higher order functions.",
            "Functions which can have parameter other functions as parameters and return functions as results."
        ],
        [
            "Higher order functions.",
            "Why do we know?",
            "Why do we use them?",
            "We are assembling or we want to assemble a distance function on that complex data type.",
            "And we assemble it from distance functions on simpler types and additional helper functions.",
            "So in essence, we need we need to create a function that will take other functions as parameters and will return complex function.",
            "This is the use of higher order functions in its.",
            "It's very need to do use them in and the cold really looks familiar and easily understandable.",
            "Other properties of haskill it uses only pure functions.",
            "Pure functions resemble mathematical months and they don't have side effects.",
            "It has lazy evaluation, which can also aid in some programming tasks because we can create infinite data structures and list of infinite length could be easily.",
            "Defined lazy relation.",
            "If used properly and carefully, could even could even.",
            "Increase the.",
            "Could even produce faster programs because things that are not needed are not evaluated.",
            "For instance, if in Haskell, if you if you ask for a length of list, the interpreter will not try to evaluate this one.",
            "All of the single elements of this just count them and give the output to the screen.",
            "For example, the lazy lazy evaluation, an evaluation of of an expression is postponed until it is really needed in the.",
            "In the code or in the program, for example, writing it in a file."
        ],
        [
            "Haskell is strongly typed language.",
            "No implicit type conversions are made.",
            "Instead of that, a user has to explicitly.",
            "Other types of, along with static typing this this property.",
            "This property helps avoiding errors and catching errors before even the program is run.",
            "In Haskell, there's a saying that if the program compiles, in most cases it will produce the expected result.",
            "So if you get the the typing right and yet the functions read, everything will be OK, and the debugging step is decreased by a large factor.",
            "Hostiles type system is a polymorphic one.",
            "It allows tackling values of different types in a uniform manner.",
            "We have polymorphic functions, we use them a lot in our project, can be applied to values of daughter function that can be applied to values of different types.",
            "Other proposed properties helpful include automatic inference of types, which can also avoid mistakes in code.",
            "You should not familiar with automatic inference.",
            "It means that value has to type a virus has to be given only once in the code, and the interpreter will automatically infer the type and warn you if you if you try to use it in a different, different context.",
            "We make use of the of this advanced type system that the."
        ],
        [
            "Costco has.",
            "Let's get back to the structure structured data.",
            "We said we wanted to calculate distances.",
            "We start.",
            "We start by defining distances on on the primitive types.",
            "We said we had.",
            "We had three primitive types, Boolean description, real and we had three type constructors for constructing the whole complex type.",
            "The distance function used on the 1st two primitive types is Delta and distant function used for real.",
            "For real types is the absolute distance in our, we decided that the discrete type could also be applied to the absolute distance.",
            "That is, the absolute distance could be calculated on two discrete types if conversion table from this from every possible discrete value to number is provide."
        ],
        [
            "This makes sense on complex types, for for us to define the distance on the complex type, we need to, we need to inspect the structure of the complex type.",
            "The distance is applied to.",
            "We know that our type constructors actually work in recursive manner and.",
            "They produce a tree structure of the complex type.",
            "There is an example and a picture and the tree structure has internal nodes type constructors.",
            "You can see set and tuple and leaf nodes are primitive data types, boolean and real."
        ],
        [
            "So how do we compute the distance?",
            "Finally, the distance needs three types of functions.",
            "Functions function to generate pairs of objects of the simpler constitutive type called a pairing function, a distance function on similar types or even primitive ones.",
            "An aggregation function that is applied to the distance values obtained by the distance function on the pairs produced by the pairing function.",
            "It's kind of.",
            "Recursive calling these three functions."
        ],
        [
            "The pairing function is this signature, and it determines the important pairs of elements of the complex objects.",
            "Pairing functions where.",
            "Object of many works before the most known are for set over the set type and for our set type constructor.",
            "Therefore we have no.",
            "We use all tool pairing functions.",
            "For instance, if we have a set of three elements instead of five elements, the old well pairing functions would produce 15 pairs.",
            "The minimum distance function produces pairs such that each element of 1 set, for example, is paired with the closest element of the other set.",
            "How all we also have subjection pairings linkings and matchings.",
            "Some of the functions are implemented are in our project and for the tuple type.",
            "There is a default pairing function which because of the nature of the tuple type, that's hitter, genius and it's not every constituent of the tuple is over the different type.",
            "The pairing function will almost always use this.",
            "Uh, this one.",
            "It bears the Bears the elements with the same type."
        ],
        [
            "An aggregation function is a function of this form and aggregates the distance between the pairs of similar objects.",
            "So first firstly, the pairing function is invoked, pairs are produced, then a distances on.",
            "Each pairs are calculated, and then as a third step degradation function is called, which finally takes a list of real real values and produces one real value.",
            "Functions that can be used is in the Euclidean aggregation.",
            "That essentially is the equivalent distance.",
            "Don't blame some aggregation, just sums of the elements of this list.",
            "Minimum, maximum and median are familiar variation functions.",
            "As all of these except the Euclidean aggregation are special cases of so-called ordered weighted aggregation functions, which which is again function with this signature just sorts this list and applies weights and produces the result as a linear combination of the weights and the elements."
        ],
        [
            "What what we have done in a project is we have created a small database of distance function components in order.",
            "In order for this generic distance based learning algorithm algorithms to work, we need to store the components somewhere.",
            "And as I said, we need to be able to create the distance function on the fly.",
            "We store in that database primitive data types and distances on them.",
            "We store the definition of the complex data type and the definition of the distances on these complex data types.",
            "We we have implemented a generic version of the K nearest neighbors algorithm which uses the distance functions and datatypes defined in the database."
        ],
        [
            "For example, for the type described earlier, if we want to calculate the distance between values of this type data of this type, we we have to define a distance on the Boolean primitive type.",
            "We use the Delta distance on the real type.",
            "We use the absolute distance, one level up the tuple for the tuple set type constructor we.",
            "Use the pairing function.",
            "It's default to preparing and aggregation function.",
            "The this is the Euclidean in essence.",
            "And for the set for.",
            "Stop no stop stop type constructor.",
            "Degradation function is the maximum aggregation.",
            "Pairing is the minimum distance bearing.",
            "This is 1 example of how we define our distances and after that we can our project.",
            "We can work with this data type and this disk.",
            "This data type and the distance defined on it and try to evaluate the performance of the K nearest neighbors algorithm on this."
        ],
        [
            "This distance.",
            "Um?",
            "For the set, as I said earlier, for the set we choose the aggregation bearing function.",
            "The same goes for the tuple and for the primitive.",
            "The bottom primitive types that the distance the distances are selected."
        ],
        [
            "I will keep to the application.",
            "I have a few screenshots to show you how all this."
        ],
        [
            "All this is done first, the first there are.",
            "There is a list of the types defined.",
            "The database.",
            "For example, we used the details pane data set to test our implementation of K nearest neighbors and determine data type is structured type.",
            "That looks like this.",
            "It's sets of pairs of char and real value.",
            "And we have defined four distances to test to test the algorithms performance on them using them the first distances.",
            "The distance described in this window, and it's essentially it uses the absolute distance on the both primitive types on the chart and the double.",
            "It uses the sum aggregation and two pairing on the tuple type constructor and center element or median aggregation and minimum distance bearing on the set."
        ],
        [
            "Constructor.",
            "Other distances are defined in the similar manner they one of the differences is that an aggregation could be defined as weighted sum aggregation similar to those ordered weighted aggregation obligations I mentioned earlier.",
            "For example, the distances on the charts should be 50 times greater than the distances on the double on the.",
            "Not on the real values, so that's that's what the weighted sum essentially does.",
            "It supplies weights to the distances produced for the primitive types."
        ],
        [
            "The third distance is similar except with the another pairing Aldal pairing.",
            "Evidently it will take more time because time to compute, because more more pairs are generated."
        ],
        [
            "In each turn.",
            "And the sum aggregation.",
            "Use this also similar distance."
        ],
        [
            "We have also defined another type similar type, a pair of double and char that is char is here in the application.",
            "The shorthand for discrete of all the letters of the alphabet."
        ],
        [
            "The process of creation of a new type is a selection of the possible values of these comboboxes.",
            "For example, we select that we want to have a tuple out of two types.",
            "Firstly, in the first one, then we have to define the two types.",
            "They could also be complex ones.",
            "For example, in this example we used Boolean and real.",
            "Next we click the check button in order in order to the for the for the application to check if we provide enough detail to for the type to."
        ],
        [
            "Created and if it were the case like so this type is created after creation it is editing."
        ],
        [
            "The database.",
            "About the creation of new distances, we have to select a type first, as can be seen, the determine type is selected first.",
            "The type is shown and.",
            "That's type we we define a distance, therefore columns here.",
            "The first one says if the if that node should contain primitive distance, for example distance from primitive type or distance for a type constructor we see here we have two type constructors and then to primitive types.",
            "The aggregation function is chosen here.",
            "For example, sum of squares or Euclidean aggregation.",
            "The old ball bearing function.",
            "The simpler the similar is for the 2nd row for the tuple type constructor.",
            "On the chart in the double primitive types we selected absolute or or possibly Delta distances.",
            "As was said earlier, that those are the two most mostly used distances for our three primitive types.",
            "Absolution Delta.",
            "And after checking this."
        ],
        [
            "And here we get the the distance tree tree structure created.",
            "So this is a distance that will.",
            "This is a new distance that will be added to the database and it is applicable only to this type."
        ],
        [
            "So here is the new distance.",
            "It is for the determine type and its definition is shown here."
        ],
        [
            "Um?",
            "We apply the can you nearest neighbors algorithm and use several distances to see how how well this algorithm works and what are the results of the algorithm.",
            "We use the leave one method method when applying this algorithm.",
            "Um and the distant distant definition is shown on the left and the results of the correctly classify the percent of correctly classified data objects.",
            "Is shown on the right.",
            "Can be seen that we have produced fairly fairly good results, but all of this was with we normally.",
            "Choosing the correct aggregation, pairing, and primitive distances in the distance definition, we started up with simple distance definition, then tries to improve the results.",
            "This application could be used to test how other distances would perform on the on some datasets datasets is to is to be loaded from an XML file into the project.",
            "There is also a Haskell library that could be used to.",
            "To increase the number of primitive distances from the primitive types in, increase the increase the the number of aggregation types defined.",
            "Now the pairing types and so."
        ],
        [
            "We used functional programming for this task it.",
            "It was because we mostly dealt with functions.",
            "We used Haskell.",
            "It's type system was a strong property and it help us help us a lot.",
            "It in our opinion we produced program with the code that is smaller than if some object oriented language was used.",
            "It is maintainable.",
            "We plan to extend the approach to by adding patterns and models.",
            "Example or examples of pattern models could be probability functions that are also functions that can be handled by Haskell.",
            "In a in a good way, and this would greatly facilitate facilitated development of domain specific data mining approaches and practical applications.",
            "Thank you any questions."
        ],
        [
            "Overtime, so just thank you."
        ]
    ],
    "summarization": {
        "clip_0": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Presentation is by Darko Alexs, key right.",
                    "label": 0
                },
                {
                    "sent": "Functional programming approach to distance based machine learning.",
                    "label": 1
                },
                {
                    "sent": "This presentation is about the functional functional programming approach to distance based machine learning.",
                    "label": 0
                }
            ]
        },
        "clip_1": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "What it contains is an introduction.",
                    "label": 0
                },
                {
                    "sent": "It's based on general framework for data mining.",
                    "label": 1
                },
                {
                    "sent": "The next part is about functional programming in Haskell.",
                    "label": 0
                },
                {
                    "sent": "Anatomy of distances for structured data that we use in this general framework.",
                    "label": 1
                },
                {
                    "sent": "A small database for distance function components and at the end conclusions.",
                    "label": 0
                }
            ]
        },
        "clip_2": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "As an introduction, or instead of into international, explained the general framework for data mining.",
                    "label": 0
                },
                {
                    "sent": "Um algorithms for distance based distance based prediction and distance based clustering are very popular among the machine learning community.",
                    "label": 0
                },
                {
                    "sent": "They did.",
                    "label": 0
                },
                {
                    "sent": "They typically now work with single table or attribute value data and this algorithms use distance functions that are typically hard coded.",
                    "label": 0
                },
                {
                    "sent": "The general framework for data mining proposed by Professor Sasha Jerowski.",
                    "label": 1
                },
                {
                    "sent": "Instead of, this proposes usage of different types of data, different data mining tasks or algorithms, and different types of patterns and models as results of this.",
                    "label": 1
                },
                {
                    "sent": "This framework uses also generate so-called generic learning algorithms.",
                    "label": 1
                },
                {
                    "sent": "Those are algorithm known algorithms modifies to work on arbitrary structured data types.",
                    "label": 0
                },
                {
                    "sent": "And give results.",
                    "label": 0
                },
                {
                    "sent": "The components of distance based algorithms are the main topic and most important thing for this general framework.",
                    "label": 0
                }
            ]
        },
        "clip_3": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "As I said, the tackles structured data, not just a single table data, complex structure, complex data are those kind of data types that are built.",
                    "label": 0
                },
                {
                    "sent": "I recursively built from simpler ones.",
                    "label": 1
                },
                {
                    "sent": "We define our primitive data types and several type constructors.",
                    "label": 0
                },
                {
                    "sent": "Primitive data types includes a real discreet on S and Boolean.",
                    "label": 0
                },
                {
                    "sent": "An example of discrete's on the set given here is is actually discrete data type that can take one of four possible values.",
                    "label": 1
                },
                {
                    "sent": "Um type constructors.",
                    "label": 0
                },
                {
                    "sent": "Type constructors are used.",
                    "label": 1
                },
                {
                    "sent": "After that we use the primitive data types as building blocks and using these type constructors set to pull and sequence.",
                    "label": 0
                },
                {
                    "sent": "We construct more complex data types.",
                    "label": 0
                },
                {
                    "sent": "A set of T is declaration of set of elements of type T, for example, or sets of a primitive type that was mentioned above is set where each element could take one of the four possible values also mentioned above.",
                    "label": 0
                }
            ]
        },
        "clip_4": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "The generic distance based algorithms machine learning algorithms used and are used for clustering and prediction.",
                    "label": 1
                },
                {
                    "sent": "Clustering.",
                    "label": 0
                },
                {
                    "sent": "Algorithms is are here are chical argumentative clustering.",
                    "label": 0
                },
                {
                    "sent": "And the prediction algorithm is the K nearest neighbor algorithm.",
                    "label": 0
                },
                {
                    "sent": "These are chosen because they both need distances to work and then they don't need to directly.",
                    "label": 0
                },
                {
                    "sent": "Is that the data values?",
                    "label": 0
                },
                {
                    "sent": "But instead they could.",
                    "label": 0
                },
                {
                    "sent": "They can use the data values through the distances defined on them.",
                    "label": 0
                },
                {
                    "sent": "Are they as generic?",
                    "label": 0
                },
                {
                    "sent": "They work for arbitrary types of structured data, and as I said that they require distance function, this distance function is a function with that with the given signature.",
                    "label": 1
                },
                {
                    "sent": "It's maybe.",
                    "label": 0
                },
                {
                    "sent": "In any hostile in Haskell syntax that satisfies all the three properties you know it has to be the value has to be equal or greater to 0 if it's equal to 0.",
                    "label": 0
                },
                {
                    "sent": "So now the two values must be equal and symmetric property.",
                    "label": 0
                },
                {
                    "sent": "Another property that distance functions could have is if it satisfies this inequality triangle inequality property, then we call it a metric.",
                    "label": 0
                },
                {
                    "sent": "But in our project the metric is not of much importance.",
                    "label": 0
                },
                {
                    "sent": "We generally deal with distance funk.",
                    "label": 0
                }
            ]
        },
        "clip_5": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So we said we need to.",
                    "label": 0
                },
                {
                    "sent": "Our project application needs to work with distance functions as they are the components of the General general framework and needs to store, retrieve and manipulate distance functions.",
                    "label": 0
                },
                {
                    "sent": "So we decided to try to use functional programming to achieve this goal and in particular the language Haskell.",
                    "label": 0
                },
                {
                    "sent": "Why has some of the some of the properties it has give us?",
                    "label": 0
                },
                {
                    "sent": "Just some advantage.",
                    "label": 0
                },
                {
                    "sent": "It produces succinct and understandable code, or at least understandable understandable concept concepts by much larger group of people, because the code written in Haskell resembles the mathematical definitions of functions and such, and it's easy to grasp.",
                    "label": 1
                },
                {
                    "sent": "Its expressive Haskell allows.",
                    "label": 1
                },
                {
                    "sent": "Spending more time thinking and reasoning about the application domain instead, or instead of trying to conform to the languages style of programming.",
                    "label": 0
                },
                {
                    "sent": "For example, if it were object oriented, we would have to think in terms of objects, classes, inheritance, polymorphism.",
                    "label": 1
                },
                {
                    "sent": "Here it's kind of more more targeted to the application domain.",
                    "label": 0
                },
                {
                    "sent": "Usage of functions and function compositions.",
                    "label": 0
                },
                {
                    "sent": "We said why that was the primary reason why we chose functional language and the most important are higher order functions.",
                    "label": 0
                },
                {
                    "sent": "Functions which can have parameter other functions as parameters and return functions as results.",
                    "label": 0
                }
            ]
        },
        "clip_6": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Higher order functions.",
                    "label": 0
                },
                {
                    "sent": "Why do we know?",
                    "label": 0
                },
                {
                    "sent": "Why do we use them?",
                    "label": 0
                },
                {
                    "sent": "We are assembling or we want to assemble a distance function on that complex data type.",
                    "label": 0
                },
                {
                    "sent": "And we assemble it from distance functions on simpler types and additional helper functions.",
                    "label": 1
                },
                {
                    "sent": "So in essence, we need we need to create a function that will take other functions as parameters and will return complex function.",
                    "label": 0
                },
                {
                    "sent": "This is the use of higher order functions in its.",
                    "label": 0
                },
                {
                    "sent": "It's very need to do use them in and the cold really looks familiar and easily understandable.",
                    "label": 1
                },
                {
                    "sent": "Other properties of haskill it uses only pure functions.",
                    "label": 0
                },
                {
                    "sent": "Pure functions resemble mathematical months and they don't have side effects.",
                    "label": 1
                },
                {
                    "sent": "It has lazy evaluation, which can also aid in some programming tasks because we can create infinite data structures and list of infinite length could be easily.",
                    "label": 0
                },
                {
                    "sent": "Defined lazy relation.",
                    "label": 0
                },
                {
                    "sent": "If used properly and carefully, could even could even.",
                    "label": 0
                },
                {
                    "sent": "Increase the.",
                    "label": 0
                },
                {
                    "sent": "Could even produce faster programs because things that are not needed are not evaluated.",
                    "label": 0
                },
                {
                    "sent": "For instance, if in Haskell, if you if you ask for a length of list, the interpreter will not try to evaluate this one.",
                    "label": 0
                },
                {
                    "sent": "All of the single elements of this just count them and give the output to the screen.",
                    "label": 0
                },
                {
                    "sent": "For example, the lazy lazy evaluation, an evaluation of of an expression is postponed until it is really needed in the.",
                    "label": 0
                },
                {
                    "sent": "In the code or in the program, for example, writing it in a file.",
                    "label": 0
                }
            ]
        },
        "clip_7": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Haskell is strongly typed language.",
                    "label": 0
                },
                {
                    "sent": "No implicit type conversions are made.",
                    "label": 1
                },
                {
                    "sent": "Instead of that, a user has to explicitly.",
                    "label": 1
                },
                {
                    "sent": "Other types of, along with static typing this this property.",
                    "label": 1
                },
                {
                    "sent": "This property helps avoiding errors and catching errors before even the program is run.",
                    "label": 0
                },
                {
                    "sent": "In Haskell, there's a saying that if the program compiles, in most cases it will produce the expected result.",
                    "label": 1
                },
                {
                    "sent": "So if you get the the typing right and yet the functions read, everything will be OK, and the debugging step is decreased by a large factor.",
                    "label": 0
                },
                {
                    "sent": "Hostiles type system is a polymorphic one.",
                    "label": 1
                },
                {
                    "sent": "It allows tackling values of different types in a uniform manner.",
                    "label": 0
                },
                {
                    "sent": "We have polymorphic functions, we use them a lot in our project, can be applied to values of daughter function that can be applied to values of different types.",
                    "label": 1
                },
                {
                    "sent": "Other proposed properties helpful include automatic inference of types, which can also avoid mistakes in code.",
                    "label": 0
                },
                {
                    "sent": "You should not familiar with automatic inference.",
                    "label": 0
                },
                {
                    "sent": "It means that value has to type a virus has to be given only once in the code, and the interpreter will automatically infer the type and warn you if you if you try to use it in a different, different context.",
                    "label": 0
                },
                {
                    "sent": "We make use of the of this advanced type system that the.",
                    "label": 0
                }
            ]
        },
        "clip_8": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Costco has.",
                    "label": 0
                },
                {
                    "sent": "Let's get back to the structure structured data.",
                    "label": 1
                },
                {
                    "sent": "We said we wanted to calculate distances.",
                    "label": 0
                },
                {
                    "sent": "We start.",
                    "label": 1
                },
                {
                    "sent": "We start by defining distances on on the primitive types.",
                    "label": 0
                },
                {
                    "sent": "We said we had.",
                    "label": 0
                },
                {
                    "sent": "We had three primitive types, Boolean description, real and we had three type constructors for constructing the whole complex type.",
                    "label": 0
                },
                {
                    "sent": "The distance function used on the 1st two primitive types is Delta and distant function used for real.",
                    "label": 1
                },
                {
                    "sent": "For real types is the absolute distance in our, we decided that the discrete type could also be applied to the absolute distance.",
                    "label": 0
                },
                {
                    "sent": "That is, the absolute distance could be calculated on two discrete types if conversion table from this from every possible discrete value to number is provide.",
                    "label": 0
                }
            ]
        },
        "clip_9": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "This makes sense on complex types, for for us to define the distance on the complex type, we need to, we need to inspect the structure of the complex type.",
                    "label": 1
                },
                {
                    "sent": "The distance is applied to.",
                    "label": 0
                },
                {
                    "sent": "We know that our type constructors actually work in recursive manner and.",
                    "label": 0
                },
                {
                    "sent": "They produce a tree structure of the complex type.",
                    "label": 1
                },
                {
                    "sent": "There is an example and a picture and the tree structure has internal nodes type constructors.",
                    "label": 1
                },
                {
                    "sent": "You can see set and tuple and leaf nodes are primitive data types, boolean and real.",
                    "label": 0
                }
            ]
        },
        "clip_10": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So how do we compute the distance?",
                    "label": 0
                },
                {
                    "sent": "Finally, the distance needs three types of functions.",
                    "label": 1
                },
                {
                    "sent": "Functions function to generate pairs of objects of the simpler constitutive type called a pairing function, a distance function on similar types or even primitive ones.",
                    "label": 1
                },
                {
                    "sent": "An aggregation function that is applied to the distance values obtained by the distance function on the pairs produced by the pairing function.",
                    "label": 1
                },
                {
                    "sent": "It's kind of.",
                    "label": 0
                },
                {
                    "sent": "Recursive calling these three functions.",
                    "label": 0
                }
            ]
        },
        "clip_11": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "The pairing function is this signature, and it determines the important pairs of elements of the complex objects.",
                    "label": 1
                },
                {
                    "sent": "Pairing functions where.",
                    "label": 0
                },
                {
                    "sent": "Object of many works before the most known are for set over the set type and for our set type constructor.",
                    "label": 0
                },
                {
                    "sent": "Therefore we have no.",
                    "label": 1
                },
                {
                    "sent": "We use all tool pairing functions.",
                    "label": 0
                },
                {
                    "sent": "For instance, if we have a set of three elements instead of five elements, the old well pairing functions would produce 15 pairs.",
                    "label": 0
                },
                {
                    "sent": "The minimum distance function produces pairs such that each element of 1 set, for example, is paired with the closest element of the other set.",
                    "label": 0
                },
                {
                    "sent": "How all we also have subjection pairings linkings and matchings.",
                    "label": 1
                },
                {
                    "sent": "Some of the functions are implemented are in our project and for the tuple type.",
                    "label": 0
                },
                {
                    "sent": "There is a default pairing function which because of the nature of the tuple type, that's hitter, genius and it's not every constituent of the tuple is over the different type.",
                    "label": 0
                },
                {
                    "sent": "The pairing function will almost always use this.",
                    "label": 0
                },
                {
                    "sent": "Uh, this one.",
                    "label": 0
                },
                {
                    "sent": "It bears the Bears the elements with the same type.",
                    "label": 0
                }
            ]
        },
        "clip_12": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "An aggregation function is a function of this form and aggregates the distance between the pairs of similar objects.",
                    "label": 1
                },
                {
                    "sent": "So first firstly, the pairing function is invoked, pairs are produced, then a distances on.",
                    "label": 0
                },
                {
                    "sent": "Each pairs are calculated, and then as a third step degradation function is called, which finally takes a list of real real values and produces one real value.",
                    "label": 1
                },
                {
                    "sent": "Functions that can be used is in the Euclidean aggregation.",
                    "label": 0
                },
                {
                    "sent": "That essentially is the equivalent distance.",
                    "label": 0
                },
                {
                    "sent": "Don't blame some aggregation, just sums of the elements of this list.",
                    "label": 0
                },
                {
                    "sent": "Minimum, maximum and median are familiar variation functions.",
                    "label": 0
                },
                {
                    "sent": "As all of these except the Euclidean aggregation are special cases of so-called ordered weighted aggregation functions, which which is again function with this signature just sorts this list and applies weights and produces the result as a linear combination of the weights and the elements.",
                    "label": 0
                }
            ]
        },
        "clip_13": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "What what we have done in a project is we have created a small database of distance function components in order.",
                    "label": 1
                },
                {
                    "sent": "In order for this generic distance based learning algorithm algorithms to work, we need to store the components somewhere.",
                    "label": 0
                },
                {
                    "sent": "And as I said, we need to be able to create the distance function on the fly.",
                    "label": 0
                },
                {
                    "sent": "We store in that database primitive data types and distances on them.",
                    "label": 1
                },
                {
                    "sent": "We store the definition of the complex data type and the definition of the distances on these complex data types.",
                    "label": 1
                },
                {
                    "sent": "We we have implemented a generic version of the K nearest neighbors algorithm which uses the distance functions and datatypes defined in the database.",
                    "label": 1
                }
            ]
        },
        "clip_14": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "For example, for the type described earlier, if we want to calculate the distance between values of this type data of this type, we we have to define a distance on the Boolean primitive type.",
                    "label": 0
                },
                {
                    "sent": "We use the Delta distance on the real type.",
                    "label": 1
                },
                {
                    "sent": "We use the absolute distance, one level up the tuple for the tuple set type constructor we.",
                    "label": 0
                },
                {
                    "sent": "Use the pairing function.",
                    "label": 0
                },
                {
                    "sent": "It's default to preparing and aggregation function.",
                    "label": 1
                },
                {
                    "sent": "The this is the Euclidean in essence.",
                    "label": 0
                },
                {
                    "sent": "And for the set for.",
                    "label": 0
                },
                {
                    "sent": "Stop no stop stop type constructor.",
                    "label": 0
                },
                {
                    "sent": "Degradation function is the maximum aggregation.",
                    "label": 0
                },
                {
                    "sent": "Pairing is the minimum distance bearing.",
                    "label": 0
                },
                {
                    "sent": "This is 1 example of how we define our distances and after that we can our project.",
                    "label": 0
                },
                {
                    "sent": "We can work with this data type and this disk.",
                    "label": 0
                },
                {
                    "sent": "This data type and the distance defined on it and try to evaluate the performance of the K nearest neighbors algorithm on this.",
                    "label": 0
                }
            ]
        },
        "clip_15": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "This distance.",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "For the set, as I said earlier, for the set we choose the aggregation bearing function.",
                    "label": 1
                },
                {
                    "sent": "The same goes for the tuple and for the primitive.",
                    "label": 1
                },
                {
                    "sent": "The bottom primitive types that the distance the distances are selected.",
                    "label": 0
                }
            ]
        },
        "clip_16": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "I will keep to the application.",
                    "label": 0
                },
                {
                    "sent": "I have a few screenshots to show you how all this.",
                    "label": 0
                }
            ]
        },
        "clip_17": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "All this is done first, the first there are.",
                    "label": 0
                },
                {
                    "sent": "There is a list of the types defined.",
                    "label": 0
                },
                {
                    "sent": "The database.",
                    "label": 0
                },
                {
                    "sent": "For example, we used the details pane data set to test our implementation of K nearest neighbors and determine data type is structured type.",
                    "label": 0
                },
                {
                    "sent": "That looks like this.",
                    "label": 0
                },
                {
                    "sent": "It's sets of pairs of char and real value.",
                    "label": 0
                },
                {
                    "sent": "And we have defined four distances to test to test the algorithms performance on them using them the first distances.",
                    "label": 0
                },
                {
                    "sent": "The distance described in this window, and it's essentially it uses the absolute distance on the both primitive types on the chart and the double.",
                    "label": 0
                },
                {
                    "sent": "It uses the sum aggregation and two pairing on the tuple type constructor and center element or median aggregation and minimum distance bearing on the set.",
                    "label": 0
                }
            ]
        },
        "clip_18": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Constructor.",
                    "label": 0
                },
                {
                    "sent": "Other distances are defined in the similar manner they one of the differences is that an aggregation could be defined as weighted sum aggregation similar to those ordered weighted aggregation obligations I mentioned earlier.",
                    "label": 0
                },
                {
                    "sent": "For example, the distances on the charts should be 50 times greater than the distances on the double on the.",
                    "label": 0
                },
                {
                    "sent": "Not on the real values, so that's that's what the weighted sum essentially does.",
                    "label": 0
                },
                {
                    "sent": "It supplies weights to the distances produced for the primitive types.",
                    "label": 0
                }
            ]
        },
        "clip_19": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "The third distance is similar except with the another pairing Aldal pairing.",
                    "label": 0
                },
                {
                    "sent": "Evidently it will take more time because time to compute, because more more pairs are generated.",
                    "label": 0
                }
            ]
        },
        "clip_20": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "In each turn.",
                    "label": 0
                },
                {
                    "sent": "And the sum aggregation.",
                    "label": 0
                },
                {
                    "sent": "Use this also similar distance.",
                    "label": 0
                }
            ]
        },
        "clip_21": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "We have also defined another type similar type, a pair of double and char that is char is here in the application.",
                    "label": 0
                },
                {
                    "sent": "The shorthand for discrete of all the letters of the alphabet.",
                    "label": 0
                }
            ]
        },
        "clip_22": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "The process of creation of a new type is a selection of the possible values of these comboboxes.",
                    "label": 0
                },
                {
                    "sent": "For example, we select that we want to have a tuple out of two types.",
                    "label": 0
                },
                {
                    "sent": "Firstly, in the first one, then we have to define the two types.",
                    "label": 0
                },
                {
                    "sent": "They could also be complex ones.",
                    "label": 0
                },
                {
                    "sent": "For example, in this example we used Boolean and real.",
                    "label": 0
                },
                {
                    "sent": "Next we click the check button in order in order to the for the for the application to check if we provide enough detail to for the type to.",
                    "label": 0
                }
            ]
        },
        "clip_23": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Created and if it were the case like so this type is created after creation it is editing.",
                    "label": 0
                }
            ]
        },
        "clip_24": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "The database.",
                    "label": 0
                },
                {
                    "sent": "About the creation of new distances, we have to select a type first, as can be seen, the determine type is selected first.",
                    "label": 0
                },
                {
                    "sent": "The type is shown and.",
                    "label": 0
                },
                {
                    "sent": "That's type we we define a distance, therefore columns here.",
                    "label": 0
                },
                {
                    "sent": "The first one says if the if that node should contain primitive distance, for example distance from primitive type or distance for a type constructor we see here we have two type constructors and then to primitive types.",
                    "label": 0
                },
                {
                    "sent": "The aggregation function is chosen here.",
                    "label": 0
                },
                {
                    "sent": "For example, sum of squares or Euclidean aggregation.",
                    "label": 0
                },
                {
                    "sent": "The old ball bearing function.",
                    "label": 0
                },
                {
                    "sent": "The simpler the similar is for the 2nd row for the tuple type constructor.",
                    "label": 0
                },
                {
                    "sent": "On the chart in the double primitive types we selected absolute or or possibly Delta distances.",
                    "label": 0
                },
                {
                    "sent": "As was said earlier, that those are the two most mostly used distances for our three primitive types.",
                    "label": 0
                },
                {
                    "sent": "Absolution Delta.",
                    "label": 0
                },
                {
                    "sent": "And after checking this.",
                    "label": 0
                }
            ]
        },
        "clip_25": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And here we get the the distance tree tree structure created.",
                    "label": 0
                },
                {
                    "sent": "So this is a distance that will.",
                    "label": 0
                },
                {
                    "sent": "This is a new distance that will be added to the database and it is applicable only to this type.",
                    "label": 0
                }
            ]
        },
        "clip_26": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So here is the new distance.",
                    "label": 0
                },
                {
                    "sent": "It is for the determine type and its definition is shown here.",
                    "label": 0
                }
            ]
        },
        "clip_27": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "We apply the can you nearest neighbors algorithm and use several distances to see how how well this algorithm works and what are the results of the algorithm.",
                    "label": 0
                },
                {
                    "sent": "We use the leave one method method when applying this algorithm.",
                    "label": 0
                },
                {
                    "sent": "Um and the distant distant definition is shown on the left and the results of the correctly classify the percent of correctly classified data objects.",
                    "label": 0
                },
                {
                    "sent": "Is shown on the right.",
                    "label": 0
                },
                {
                    "sent": "Can be seen that we have produced fairly fairly good results, but all of this was with we normally.",
                    "label": 0
                },
                {
                    "sent": "Choosing the correct aggregation, pairing, and primitive distances in the distance definition, we started up with simple distance definition, then tries to improve the results.",
                    "label": 0
                },
                {
                    "sent": "This application could be used to test how other distances would perform on the on some datasets datasets is to is to be loaded from an XML file into the project.",
                    "label": 0
                },
                {
                    "sent": "There is also a Haskell library that could be used to.",
                    "label": 0
                },
                {
                    "sent": "To increase the number of primitive distances from the primitive types in, increase the increase the the number of aggregation types defined.",
                    "label": 0
                },
                {
                    "sent": "Now the pairing types and so.",
                    "label": 0
                }
            ]
        },
        "clip_28": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "We used functional programming for this task it.",
                    "label": 0
                },
                {
                    "sent": "It was because we mostly dealt with functions.",
                    "label": 0
                },
                {
                    "sent": "We used Haskell.",
                    "label": 0
                },
                {
                    "sent": "It's type system was a strong property and it help us help us a lot.",
                    "label": 0
                },
                {
                    "sent": "It in our opinion we produced program with the code that is smaller than if some object oriented language was used.",
                    "label": 0
                },
                {
                    "sent": "It is maintainable.",
                    "label": 0
                },
                {
                    "sent": "We plan to extend the approach to by adding patterns and models.",
                    "label": 0
                },
                {
                    "sent": "Example or examples of pattern models could be probability functions that are also functions that can be handled by Haskell.",
                    "label": 0
                },
                {
                    "sent": "In a in a good way, and this would greatly facilitate facilitated development of domain specific data mining approaches and practical applications.",
                    "label": 0
                },
                {
                    "sent": "Thank you any questions.",
                    "label": 0
                }
            ]
        },
        "clip_29": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Overtime, so just thank you.",
                    "label": 0
                }
            ]
        }
    }
}