{
    "id": "ssswv4ltbkmilxfkdd7oxxfwyus67mo3",
    "title": "Building Heterogeneous Platforms for End-to-end Online Learning Based on Dataflow Computing Design",
    "info": {
        "author": [
            "Benoit Corda, Computer Science Department, New York University (NYU)"
        ],
        "published": "Jan. 13, 2011",
        "recorded": "December 2010",
        "category": [
            "Top->Computer Science->Machine Learning->On-line Learning"
        ]
    },
    "url": "http://videolectures.net/nipsworkshops2010_corda_bhp/",
    "segmentation": [
        [
            "Hello everybody so.",
            "The work I'm going, I'm going to present is don't work with Lemon, Farber, Marcus Coffee, and your account.",
            "So the motivate."
        ],
        [
            "Mission of this work come from a project called Lager where the goal was to achieve autonomous navigation.",
            "So the robot you can see here on the left was the robot used for the project.",
            "So it has two pairs of eyes post providing stereo labels and visual input.",
            "So to solve the problem, the model we used was based on convolutional neural network.",
            "But it was prohibitively slow to be used in real time.",
            "The frequency of the inference was in the order of 1 frame per second, so in little more details, the way the system works is so the convolutional neural network take an image as input.",
            "Then it's going to compute some features and then fit those features into a linear classifier, where this linear classifier can classify the different.",
            "Here is the image into five different categories, going with different degrees from traversable to obstacles.",
            "In addition, the linear classifier is trained online using the stereo labels obtained from the robot.",
            "So the power of this approach is that the system is entirely adaptive to new environment as it is trained online.",
            "However, there is still one challenge left which is to have a real time processing."
        ],
        [
            "So to overcome this problem, the solution we chose was to leverage stream processing commodities that are GPU and FPGA.",
            "So I don't have much time to describe the implementation, but you can come talk to me, my processors here, But basically the way it works is each architecture divide the input into tiles.",
            "And then send those tiles to the stream processors to paralyze the computation.",
            "So."
        ],
        [
            "To optimize the parallelization, we designed the framework where the data can stream through a pipeline in a data flow fashion.",
            "So because we know all the variables at the compile time, I mean all the variables aside from the data itself, we can use metaprogramming to generate.",
            "A data flow program where the flow control is done statically.",
            "So basically what that means is we're avoiding any branching by generating optimal code."
        ],
        [
            "So because you know, parallelizing code is usually tricky and time consuming, we envisioned a new language where.",
            "You can describe a model in dependently of any architecture.",
            "So basically what it does is it take a code and then the compiler is going to generate graph of dependency that is composed of data node and compute node.",
            "And as long as you have a back end.",
            "For any architecture, then each compute node can be computed on different architecture and then.",
            "You can abstract the transfer between each architecture, like for example back and forth to the CPU.",
            "So if you want to know more, please come talk to me.",
            "I'll be happy to give you more details, thank you."
        ]
    ],
    "summarization": {
        "clip_0": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Hello everybody so.",
                    "label": 0
                },
                {
                    "sent": "The work I'm going, I'm going to present is don't work with Lemon, Farber, Marcus Coffee, and your account.",
                    "label": 0
                },
                {
                    "sent": "So the motivate.",
                    "label": 0
                }
            ]
        },
        "clip_1": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Mission of this work come from a project called Lager where the goal was to achieve autonomous navigation.",
                    "label": 0
                },
                {
                    "sent": "So the robot you can see here on the left was the robot used for the project.",
                    "label": 0
                },
                {
                    "sent": "So it has two pairs of eyes post providing stereo labels and visual input.",
                    "label": 0
                },
                {
                    "sent": "So to solve the problem, the model we used was based on convolutional neural network.",
                    "label": 0
                },
                {
                    "sent": "But it was prohibitively slow to be used in real time.",
                    "label": 0
                },
                {
                    "sent": "The frequency of the inference was in the order of 1 frame per second, so in little more details, the way the system works is so the convolutional neural network take an image as input.",
                    "label": 0
                },
                {
                    "sent": "Then it's going to compute some features and then fit those features into a linear classifier, where this linear classifier can classify the different.",
                    "label": 0
                },
                {
                    "sent": "Here is the image into five different categories, going with different degrees from traversable to obstacles.",
                    "label": 0
                },
                {
                    "sent": "In addition, the linear classifier is trained online using the stereo labels obtained from the robot.",
                    "label": 0
                },
                {
                    "sent": "So the power of this approach is that the system is entirely adaptive to new environment as it is trained online.",
                    "label": 0
                },
                {
                    "sent": "However, there is still one challenge left which is to have a real time processing.",
                    "label": 0
                }
            ]
        },
        "clip_2": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So to overcome this problem, the solution we chose was to leverage stream processing commodities that are GPU and FPGA.",
                    "label": 0
                },
                {
                    "sent": "So I don't have much time to describe the implementation, but you can come talk to me, my processors here, But basically the way it works is each architecture divide the input into tiles.",
                    "label": 0
                },
                {
                    "sent": "And then send those tiles to the stream processors to paralyze the computation.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                }
            ]
        },
        "clip_3": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "To optimize the parallelization, we designed the framework where the data can stream through a pipeline in a data flow fashion.",
                    "label": 0
                },
                {
                    "sent": "So because we know all the variables at the compile time, I mean all the variables aside from the data itself, we can use metaprogramming to generate.",
                    "label": 1
                },
                {
                    "sent": "A data flow program where the flow control is done statically.",
                    "label": 0
                },
                {
                    "sent": "So basically what that means is we're avoiding any branching by generating optimal code.",
                    "label": 1
                }
            ]
        },
        "clip_4": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So because you know, parallelizing code is usually tricky and time consuming, we envisioned a new language where.",
                    "label": 0
                },
                {
                    "sent": "You can describe a model in dependently of any architecture.",
                    "label": 0
                },
                {
                    "sent": "So basically what it does is it take a code and then the compiler is going to generate graph of dependency that is composed of data node and compute node.",
                    "label": 0
                },
                {
                    "sent": "And as long as you have a back end.",
                    "label": 0
                },
                {
                    "sent": "For any architecture, then each compute node can be computed on different architecture and then.",
                    "label": 0
                },
                {
                    "sent": "You can abstract the transfer between each architecture, like for example back and forth to the CPU.",
                    "label": 0
                },
                {
                    "sent": "So if you want to know more, please come talk to me.",
                    "label": 0
                },
                {
                    "sent": "I'll be happy to give you more details, thank you.",
                    "label": 0
                }
            ]
        }
    }
}