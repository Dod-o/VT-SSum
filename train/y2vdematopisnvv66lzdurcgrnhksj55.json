{
    "id": "y2vdematopisnvv66lzdurcgrnhksj55",
    "title": "Query Rewriting in RDF Stream Processing",
    "info": {
        "author": [
            "Jean-Paul Calbimonte, Technical University of Madrid"
        ],
        "published": "July 28, 2016",
        "recorded": "June 2016",
        "category": [
            "Top->Computer Science->Big Data",
            "Top->Computer Science->Semantic Web"
        ]
    },
    "url": "http://videolectures.net/eswc2016_calbimonte_stream_processing/",
    "segmentation": [
        [
            "Jean Paul Codementor from EP FL Switzerland.",
            "This is joint work with our colleagues from UPM Oscar Corcho and Jose Mora."
        ],
        [
            "OK, so this work is about query writing and stream processing so.",
            "First of all, what is RDF string processing?",
            "This is easy because Ricardo has already introduced the topic, so it will be very easy for you to follow the the following."
        ],
        [
            "Slide so for for this talk I will simplify the thing a bit so we all know what RDF is.",
            "Subject Break is an object, so for US audio streams is the same thing, but annotated with timestamps and timestamps are important in streams because they give us order.",
            "So if we can order things in according to time then we can process this and answer to interesting queries in the stream.",
            "So there are some other extensions to RDF stream models like for example instead of.",
            "Putting timestamps to triple, we can put timestamps to a graph.",
            "And then once we have this, the streams of graphs that has that each one has timestamp, then we can do queries of on top of this stream.",
            "So for example we can get the latest 5 minutes of data from a stream or we can do an average over the last 10 minutes of datasets etc.",
            "And the one important operator in RDF stream processing is Windows, so a window typically has some size and a slide.",
            "And for a given time T, the content of the window is, well, some set of triples or some set of graphs.",
            "Defined over one stream.",
            "So this is.",
            "These are the basics for an RDF stream model and RDF stream processing operators, which we call RDF stream processing engines or RSPS commonly.",
            "So how do we do queries in RSP as well as regard already introduce?"
        ],
        [
            "It's something like this.",
            "Well, this is just for normal RDF.",
            "You have a graph with some, for example some observations and you do a query.",
            "I want to get all observations from this graph G and you get the answer back is always 1, two and three, so this is easy.",
            "So how does it happen in streams?",
            "It's very similar, but we have every every triple without timestamp, which is this number that you see here.",
            "So overtime you have you have all these observations and you asked the same question.",
            "I want to know which observations I have.",
            "For every time window, because if I do the query over the whole stream, if the stream is infinite then it will be very hard to answer this this query, so I apply a window, for example a window of size 5.",
            "And for the first instantiation of the window I get 2 results.",
            "Then the window moves overtime and we get more results as as the window slides overtime.",
            "So this is the basic way in which most RSP processing engines work.",
            "And these are the ones that we are interested in studying.",
            "But The thing is that here I asked for one observation, but if I do another question another query I want to get everything that was observed by something, for example observe via sensor.",
            "These things are not explicitly set to be observed by anybody, but I would like to have this answers as well, but I can't because there is nothing that explicitly matches this this query.",
            "So this is the kind of queries that with reasoning we should be able to answer also in a in a stream."
        ],
        [
            "So just for some background, the main RSP query languages that we have, like SQL Sparkle, Sparkle, Stream EP Sparkles.",
            "They look something like this.",
            "They look a lot like sparkle, but they add this windowing constructs for example.",
            "This is a query that gives us the latest observations in the last five seconds.",
            "And you can of course do more complex queries than this.",
            "This one gets you the maximum air temperature observed in the last hour, so you see the range here of last hour.",
            "You see an aggregate which is normal.",
            "Sparkle 11, etc.",
            "There are more complex operators like sequencing complex event processing etc.",
            "But for now and for this paper I focus just on this time Windows."
        ],
        [
            "So this was a quick overview of our different processing and now query writing so query writing."
        ],
        [
            "Very quickly I can go through that inquiry, writing what we have is an engine that takes a query.",
            "For example, get me the sensors in a graph.",
            "It doesn't need to be a stream, just a plain graph.",
            "But we have some additional information in the TEE box.",
            "So like for example, a humidity sensor is a subclass of a sensor.",
            "So if I'm looking for sensors, then if in the data set we also have humidity sensors.",
            "We also want these guys to be inside the results.",
            "So what query writing does is that it takes the original query.",
            "Take this information and produces a set or a union of of conjunctive queries like they're called, so one of them is the same, of course, because this is the original query that we were trying to get and this is one of the writings that we get by applying rules over the tee box that we have in the ontology.",
            "So in this way we can.",
            "Apply this this queries using for example the sparkle over on a box and get the results back that include both sensor and humidity sensors.",
            "So the whole idea of this paper is applying this technique in RDF streams.",
            "So of course there are different depending of the of the expressive expressivity of the tee box.",
            "If it's RDF, cellio, or other expressivity, the rewriting of it can be more complex and the number of rewritings you can have.",
            "It can really grow if your ontology is very complex.",
            "Another thing is that this query writing techniques have been used mainly in OBD systems.",
            "These are systems that rely on a relational database and they write the query in sparkle.",
            "It gets written into a UCQ.",
            "And this is then translated into a SQL database query language and then the results are translated back.",
            "So there are few systems like Break story Kim Korea that do this kind of thing.",
            "And as I said before, one of the main problems they have is that if the ontology is very complex, the number of rewritings can also grow quite a lot."
        ],
        [
            "So in in the in the following examples I will use one particular ontology, which is the semantic sensor network ontology because we are using a sensor based benchmarking data set that uses this this structure so you will see things like an observation, a sensor, features of interest etc etc."
        ],
        [
            "So how does it work this rewriting?",
            "I will go through an example because I think it's a simpler way to explain how it how it works in this.",
            "In the case of RDF stream PROCESSING'S engines.",
            "So, as I said before, the query writing needs two things.",
            "First, the query.",
            "For example, if we want to get from this stream, and especially from a window of the stream, we want to get everything that was observed by something else.",
            "And we know in our tee box that an observation is a subclass of something that was observed by something else.",
            "So it's very straightforward to see that there are written queries that we get are the same one and another one that gives you an observation, and they're both defined over a window of the stream, so this is very important, because this is really the part that changes from normal or RDF and SPARQL query processing.",
            "So just following the example is the same as before.",
            "We have the observations that are defined in the stream.",
            "Overtime, the window that slides.",
            "And then we get the results at each time.",
            "And now we do get results because we have both queries that are evaluated continuously over this stream."
        ],
        [
            "So what are the semantics of this?",
            "So in order to explain this, let's define first what is a query.",
            "So query has this predicates and a query hitter.",
            "And these are the where you have the variables and the other expressions of the query.",
            "And we define the certain answers as they set and what you need in order to define this answers is the query that evokes an at the NDA books, and from this you can entail the query header that you have here.",
            "Right, so there are three things that you need in order to Intel these.",
            "The query that E books and the Ables the data.",
            "So what you do in query writing on the semantics of normal query writing without streams.",
            "Is that you take this skill and you transform it into a Q prime and then you get rid of the tee box.",
            "So now you can entail the the elements of the query either just using the rewritten query and the books.",
            "Because for the query writing process you have already used the T box to make a union of conjunctive conjunctive queries.",
            "So what happens for our live streams is exactly the same.",
            "But now we need to define in more formal terms what are the what?",
            "How is the stream defined so we can say that the date of the stream can be seen as a serious of a box.",
            "Is that that move overtime for so for time zero for time one we have won a box which is different and we can define Windows over this a boxes.",
            "So for example this is a window size 2 / 2 way boxes and we can define the certain.",
            "Answers this time not for the.",
            "Whole data set, but over the whole ontology.",
            "But just for the contents of a certain window of a box is overtime.",
            "So as you see, is exactly the same thing, but this time is defined over a certain window, and here the original query.",
            "The T box and the current window defined with the query header and the written query.",
            "With only the abebooks of the current window defines you the query header when you do the right thing in the end.",
            "So the main thing to take into account in this semantics is that everything is evaluated over a certain window of time, so everything that comes before it's neglected in the evaluation.",
            "So this is the semantics of of the query writing with RDF stream processing and we have implemented a prototype of this."
        ],
        [
            "Which we call stream QR stream QR takes of course as input the RDF stream, it takes an ontology tee box and this is important.",
            "You teologi doesn't change for the whole of the execution, so this is an assumption and we have a query registration.",
            "The queries registered and we rely on 2 main components.",
            "For the implementation one is query which is a rewriter that is the component that.",
            "Takes the tee box and the original query in order to perform the writing and we use equals, which is a commonly used and widely well one of the first RDF stream query processing engines that have been available and with this we are able to produce a continuous sensors are stream quarter is available in GitHub so if you have time to take into the take a look at the issues and the bugs you can do it and help us making it better.",
            "So as I said as it uses equals the input of this system is a SQL query and normal SQL query with Windows.",
            "And there he rewriter, is in charge of transforming this SQL query into a union of conjunctive SQL queries.",
            "As we will see afterwards in the example.",
            "So for more details about how it works internally."
        ],
        [
            "The ontology tee box and the SQL query are the main inputs we take away from the query the the the window, the window contents another.",
            "Constructs and we only keep the BGP's.",
            "The BGP's are transformed into a conjunctive query.",
            "It it is then saturated using the information from the ontology box, we remove some auxiliary predicates.",
            "So this is some internal processing that carrier is in charge of doing.",
            "Then it is expanded and we can produce both are Datalog query and you see Q.",
            "So in the case of string QR of our implementation we take this path and then with the UCQ we can add back the Windows that we stripped away in this step and we have the final result."
        ],
        [
            "So just as an example.",
            "Consider this small tee box so we can say for example, the temperature observation is a subclass of something that was observed by a temperature sensor.",
            "So this sort of makes sense and we have some other axioms here, so this is the tee box and we have a simple SQL query.",
            "We get the latest 10 milliseconds of something that was observed by a temperature sensor.",
            "So immediately what the first step that stream QR does is it takes this.",
            "It takes away the windows and other information and it.",
            "Transforms it into a continued into a conjunctive conjunctive query like this.",
            "So you get observed by you get temperature sensor.",
            "And then with this and the tee box."
        ],
        [
            "It is able to expand the query so we can do is do this step by step so the original query is this one.",
            "So if you see that something observed by a temperature sensor is something that we have here, so this means that this query could be rating also into something that observed that looks for a temperature observation like this.",
            "Because this matches exactly the query, but then.",
            "You know that the temperature observation is a superclass of air temperature observation, so this could also be an air temperature observation.",
            "The same for a thermistor observation.",
            "Don't ask what that means.",
            "It is just there in the tee box and of course if it's a temperature sensor that was observed by the temperature sensor is a superclass of a thermistor and a capacitive beat.",
            "We can also have those two here, so this is the.",
            "Union of Conjunctive queries that we can get by expanding the original 1.",
            "And then what we do is we transform this rewritten query."
        ],
        [
            "To something that sequels can understand, which which is a union of this.",
            "Small queries.",
            "And this can be sent to sequels for evaluation.",
            "OK, so."
        ],
        [
            "So some charts.",
            "So we have compared this first with first data comparison with sequels without any rewriting.",
            "So without any reasoning.",
            "So this is just to see how far I mean, how slow we are compared with an engine that doesn't do any rewriting at all.",
            "So as we can see, the curves really sort of overlap most of the time.",
            "So for input rates up to 10,000 triples per second, we basically have no difference with the sequels.",
            "Query evaluation without any rewriting."
        ],
        [
            "So this is one of the findings that we have.",
            "Also we tried with different types of loads, so the more input matches your query, the slower your results are.",
            "So we tried with 1020 fifty 80% matches in the input query.",
            "The input distribution of your load and as we can see also up to a certain level, we are able to keep up with the optimal throughput in fact."
        ],
        [
            "We also compared with different types of queries because it's well known that one query can generate you lots of rewritings or very few.",
            "So we tested with queries that produce from 10280 rewritings.",
            "So obviously the ones that produce the most rewritings are the slowest, but still even for some reasonable input loads we get an optimal.",
            "Throughput.",
            "And finally we can."
        ],
        [
            "Paired with one not rewriting, but a query not query stream reasoner which is troll and trolled us completely.",
            "Different approach which is materialization.",
            "But the problem with Troll is that it doesn't support query answering so it's very hard to compare these things.",
            "So what we came up with was comparing with throw without any reasoning at all.",
            "So this is the the two curves that sort of overlap.",
            "This Is Us control without reasoning.",
            "And this is troll with reasoning and this is troll with recently and removal which is a very expensive operation operation of troll.",
            "So basically we can compare withdrawal without reasoning which is.",
            "I think a good thing.",
            "So that's basically it in terms of evaluation."
        ],
        [
            "And to conclude, they can.",
            "We can say that we have provided a.",
            "And implementation stream cured that implements query writing over RDF streams, so this is the first time that it has been done.",
            "And it incorporates a previous work of us which is carrier which does the rewriting part.",
            "It sufficient on our why the set of evaluation settings?",
            "But we still think that this can be improved in time because there is really a tradeoff between materialization and query writing that can be exploited there, and I think we think that there is a lot of room for research in that respect, and we would also like to compare with more I mean with upcoming versions of sequels and sparkle that we know that they are working also on reasoning, and I think it would be fair to compare this when they are ready.",
            "And I think that's all for me."
        ],
        [
            "And if you have some questions, I'm happy to to answer."
        ]
    ],
    "summarization": {
        "clip_0": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Jean Paul Codementor from EP FL Switzerland.",
                    "label": 0
                },
                {
                    "sent": "This is joint work with our colleagues from UPM Oscar Corcho and Jose Mora.",
                    "label": 0
                }
            ]
        },
        "clip_1": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "OK, so this work is about query writing and stream processing so.",
                    "label": 1
                },
                {
                    "sent": "First of all, what is RDF string processing?",
                    "label": 0
                },
                {
                    "sent": "This is easy because Ricardo has already introduced the topic, so it will be very easy for you to follow the the following.",
                    "label": 0
                }
            ]
        },
        "clip_2": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Slide so for for this talk I will simplify the thing a bit so we all know what RDF is.",
                    "label": 0
                },
                {
                    "sent": "Subject Break is an object, so for US audio streams is the same thing, but annotated with timestamps and timestamps are important in streams because they give us order.",
                    "label": 0
                },
                {
                    "sent": "So if we can order things in according to time then we can process this and answer to interesting queries in the stream.",
                    "label": 0
                },
                {
                    "sent": "So there are some other extensions to RDF stream models like for example instead of.",
                    "label": 0
                },
                {
                    "sent": "Putting timestamps to triple, we can put timestamps to a graph.",
                    "label": 0
                },
                {
                    "sent": "And then once we have this, the streams of graphs that has that each one has timestamp, then we can do queries of on top of this stream.",
                    "label": 0
                },
                {
                    "sent": "So for example we can get the latest 5 minutes of data from a stream or we can do an average over the last 10 minutes of datasets etc.",
                    "label": 0
                },
                {
                    "sent": "And the one important operator in RDF stream processing is Windows, so a window typically has some size and a slide.",
                    "label": 0
                },
                {
                    "sent": "And for a given time T, the content of the window is, well, some set of triples or some set of graphs.",
                    "label": 0
                },
                {
                    "sent": "Defined over one stream.",
                    "label": 0
                },
                {
                    "sent": "So this is.",
                    "label": 0
                },
                {
                    "sent": "These are the basics for an RDF stream model and RDF stream processing operators, which we call RDF stream processing engines or RSPS commonly.",
                    "label": 0
                },
                {
                    "sent": "So how do we do queries in RSP as well as regard already introduce?",
                    "label": 0
                }
            ]
        },
        "clip_3": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "It's something like this.",
                    "label": 0
                },
                {
                    "sent": "Well, this is just for normal RDF.",
                    "label": 0
                },
                {
                    "sent": "You have a graph with some, for example some observations and you do a query.",
                    "label": 0
                },
                {
                    "sent": "I want to get all observations from this graph G and you get the answer back is always 1, two and three, so this is easy.",
                    "label": 0
                },
                {
                    "sent": "So how does it happen in streams?",
                    "label": 0
                },
                {
                    "sent": "It's very similar, but we have every every triple without timestamp, which is this number that you see here.",
                    "label": 0
                },
                {
                    "sent": "So overtime you have you have all these observations and you asked the same question.",
                    "label": 0
                },
                {
                    "sent": "I want to know which observations I have.",
                    "label": 0
                },
                {
                    "sent": "For every time window, because if I do the query over the whole stream, if the stream is infinite then it will be very hard to answer this this query, so I apply a window, for example a window of size 5.",
                    "label": 0
                },
                {
                    "sent": "And for the first instantiation of the window I get 2 results.",
                    "label": 0
                },
                {
                    "sent": "Then the window moves overtime and we get more results as as the window slides overtime.",
                    "label": 0
                },
                {
                    "sent": "So this is the basic way in which most RSP processing engines work.",
                    "label": 0
                },
                {
                    "sent": "And these are the ones that we are interested in studying.",
                    "label": 0
                },
                {
                    "sent": "But The thing is that here I asked for one observation, but if I do another question another query I want to get everything that was observed by something, for example observe via sensor.",
                    "label": 0
                },
                {
                    "sent": "These things are not explicitly set to be observed by anybody, but I would like to have this answers as well, but I can't because there is nothing that explicitly matches this this query.",
                    "label": 0
                },
                {
                    "sent": "So this is the kind of queries that with reasoning we should be able to answer also in a in a stream.",
                    "label": 0
                }
            ]
        },
        "clip_4": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So just for some background, the main RSP query languages that we have, like SQL Sparkle, Sparkle, Stream EP Sparkles.",
                    "label": 0
                },
                {
                    "sent": "They look something like this.",
                    "label": 0
                },
                {
                    "sent": "They look a lot like sparkle, but they add this windowing constructs for example.",
                    "label": 0
                },
                {
                    "sent": "This is a query that gives us the latest observations in the last five seconds.",
                    "label": 0
                },
                {
                    "sent": "And you can of course do more complex queries than this.",
                    "label": 0
                },
                {
                    "sent": "This one gets you the maximum air temperature observed in the last hour, so you see the range here of last hour.",
                    "label": 1
                },
                {
                    "sent": "You see an aggregate which is normal.",
                    "label": 0
                },
                {
                    "sent": "Sparkle 11, etc.",
                    "label": 0
                },
                {
                    "sent": "There are more complex operators like sequencing complex event processing etc.",
                    "label": 0
                },
                {
                    "sent": "But for now and for this paper I focus just on this time Windows.",
                    "label": 0
                }
            ]
        },
        "clip_5": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So this was a quick overview of our different processing and now query writing so query writing.",
                    "label": 0
                }
            ]
        },
        "clip_6": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Very quickly I can go through that inquiry, writing what we have is an engine that takes a query.",
                    "label": 0
                },
                {
                    "sent": "For example, get me the sensors in a graph.",
                    "label": 0
                },
                {
                    "sent": "It doesn't need to be a stream, just a plain graph.",
                    "label": 0
                },
                {
                    "sent": "But we have some additional information in the TEE box.",
                    "label": 0
                },
                {
                    "sent": "So like for example, a humidity sensor is a subclass of a sensor.",
                    "label": 0
                },
                {
                    "sent": "So if I'm looking for sensors, then if in the data set we also have humidity sensors.",
                    "label": 0
                },
                {
                    "sent": "We also want these guys to be inside the results.",
                    "label": 0
                },
                {
                    "sent": "So what query writing does is that it takes the original query.",
                    "label": 1
                },
                {
                    "sent": "Take this information and produces a set or a union of of conjunctive queries like they're called, so one of them is the same, of course, because this is the original query that we were trying to get and this is one of the writings that we get by applying rules over the tee box that we have in the ontology.",
                    "label": 0
                },
                {
                    "sent": "So in this way we can.",
                    "label": 0
                },
                {
                    "sent": "Apply this this queries using for example the sparkle over on a box and get the results back that include both sensor and humidity sensors.",
                    "label": 0
                },
                {
                    "sent": "So the whole idea of this paper is applying this technique in RDF streams.",
                    "label": 0
                },
                {
                    "sent": "So of course there are different depending of the of the expressive expressivity of the tee box.",
                    "label": 1
                },
                {
                    "sent": "If it's RDF, cellio, or other expressivity, the rewriting of it can be more complex and the number of rewritings you can have.",
                    "label": 0
                },
                {
                    "sent": "It can really grow if your ontology is very complex.",
                    "label": 0
                },
                {
                    "sent": "Another thing is that this query writing techniques have been used mainly in OBD systems.",
                    "label": 0
                },
                {
                    "sent": "These are systems that rely on a relational database and they write the query in sparkle.",
                    "label": 0
                },
                {
                    "sent": "It gets written into a UCQ.",
                    "label": 0
                },
                {
                    "sent": "And this is then translated into a SQL database query language and then the results are translated back.",
                    "label": 0
                },
                {
                    "sent": "So there are few systems like Break story Kim Korea that do this kind of thing.",
                    "label": 0
                },
                {
                    "sent": "And as I said before, one of the main problems they have is that if the ontology is very complex, the number of rewritings can also grow quite a lot.",
                    "label": 0
                }
            ]
        },
        "clip_7": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So in in the in the following examples I will use one particular ontology, which is the semantic sensor network ontology because we are using a sensor based benchmarking data set that uses this this structure so you will see things like an observation, a sensor, features of interest etc etc.",
                    "label": 0
                }
            ]
        },
        "clip_8": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So how does it work this rewriting?",
                    "label": 0
                },
                {
                    "sent": "I will go through an example because I think it's a simpler way to explain how it how it works in this.",
                    "label": 0
                },
                {
                    "sent": "In the case of RDF stream PROCESSING'S engines.",
                    "label": 0
                },
                {
                    "sent": "So, as I said before, the query writing needs two things.",
                    "label": 0
                },
                {
                    "sent": "First, the query.",
                    "label": 0
                },
                {
                    "sent": "For example, if we want to get from this stream, and especially from a window of the stream, we want to get everything that was observed by something else.",
                    "label": 0
                },
                {
                    "sent": "And we know in our tee box that an observation is a subclass of something that was observed by something else.",
                    "label": 0
                },
                {
                    "sent": "So it's very straightforward to see that there are written queries that we get are the same one and another one that gives you an observation, and they're both defined over a window of the stream, so this is very important, because this is really the part that changes from normal or RDF and SPARQL query processing.",
                    "label": 0
                },
                {
                    "sent": "So just following the example is the same as before.",
                    "label": 0
                },
                {
                    "sent": "We have the observations that are defined in the stream.",
                    "label": 0
                },
                {
                    "sent": "Overtime, the window that slides.",
                    "label": 0
                },
                {
                    "sent": "And then we get the results at each time.",
                    "label": 0
                },
                {
                    "sent": "And now we do get results because we have both queries that are evaluated continuously over this stream.",
                    "label": 0
                }
            ]
        },
        "clip_9": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So what are the semantics of this?",
                    "label": 0
                },
                {
                    "sent": "So in order to explain this, let's define first what is a query.",
                    "label": 0
                },
                {
                    "sent": "So query has this predicates and a query hitter.",
                    "label": 0
                },
                {
                    "sent": "And these are the where you have the variables and the other expressions of the query.",
                    "label": 0
                },
                {
                    "sent": "And we define the certain answers as they set and what you need in order to define this answers is the query that evokes an at the NDA books, and from this you can entail the query header that you have here.",
                    "label": 0
                },
                {
                    "sent": "Right, so there are three things that you need in order to Intel these.",
                    "label": 0
                },
                {
                    "sent": "The query that E books and the Ables the data.",
                    "label": 0
                },
                {
                    "sent": "So what you do in query writing on the semantics of normal query writing without streams.",
                    "label": 0
                },
                {
                    "sent": "Is that you take this skill and you transform it into a Q prime and then you get rid of the tee box.",
                    "label": 1
                },
                {
                    "sent": "So now you can entail the the elements of the query either just using the rewritten query and the books.",
                    "label": 0
                },
                {
                    "sent": "Because for the query writing process you have already used the T box to make a union of conjunctive conjunctive queries.",
                    "label": 0
                },
                {
                    "sent": "So what happens for our live streams is exactly the same.",
                    "label": 0
                },
                {
                    "sent": "But now we need to define in more formal terms what are the what?",
                    "label": 0
                },
                {
                    "sent": "How is the stream defined so we can say that the date of the stream can be seen as a serious of a box.",
                    "label": 0
                },
                {
                    "sent": "Is that that move overtime for so for time zero for time one we have won a box which is different and we can define Windows over this a boxes.",
                    "label": 1
                },
                {
                    "sent": "So for example this is a window size 2 / 2 way boxes and we can define the certain.",
                    "label": 0
                },
                {
                    "sent": "Answers this time not for the.",
                    "label": 0
                },
                {
                    "sent": "Whole data set, but over the whole ontology.",
                    "label": 0
                },
                {
                    "sent": "But just for the contents of a certain window of a box is overtime.",
                    "label": 0
                },
                {
                    "sent": "So as you see, is exactly the same thing, but this time is defined over a certain window, and here the original query.",
                    "label": 0
                },
                {
                    "sent": "The T box and the current window defined with the query header and the written query.",
                    "label": 0
                },
                {
                    "sent": "With only the abebooks of the current window defines you the query header when you do the right thing in the end.",
                    "label": 0
                },
                {
                    "sent": "So the main thing to take into account in this semantics is that everything is evaluated over a certain window of time, so everything that comes before it's neglected in the evaluation.",
                    "label": 0
                },
                {
                    "sent": "So this is the semantics of of the query writing with RDF stream processing and we have implemented a prototype of this.",
                    "label": 0
                }
            ]
        },
        "clip_10": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Which we call stream QR stream QR takes of course as input the RDF stream, it takes an ontology tee box and this is important.",
                    "label": 1
                },
                {
                    "sent": "You teologi doesn't change for the whole of the execution, so this is an assumption and we have a query registration.",
                    "label": 1
                },
                {
                    "sent": "The queries registered and we rely on 2 main components.",
                    "label": 0
                },
                {
                    "sent": "For the implementation one is query which is a rewriter that is the component that.",
                    "label": 0
                },
                {
                    "sent": "Takes the tee box and the original query in order to perform the writing and we use equals, which is a commonly used and widely well one of the first RDF stream query processing engines that have been available and with this we are able to produce a continuous sensors are stream quarter is available in GitHub so if you have time to take into the take a look at the issues and the bugs you can do it and help us making it better.",
                    "label": 0
                },
                {
                    "sent": "So as I said as it uses equals the input of this system is a SQL query and normal SQL query with Windows.",
                    "label": 0
                },
                {
                    "sent": "And there he rewriter, is in charge of transforming this SQL query into a union of conjunctive SQL queries.",
                    "label": 0
                },
                {
                    "sent": "As we will see afterwards in the example.",
                    "label": 0
                },
                {
                    "sent": "So for more details about how it works internally.",
                    "label": 0
                }
            ]
        },
        "clip_11": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "The ontology tee box and the SQL query are the main inputs we take away from the query the the the window, the window contents another.",
                    "label": 0
                },
                {
                    "sent": "Constructs and we only keep the BGP's.",
                    "label": 0
                },
                {
                    "sent": "The BGP's are transformed into a conjunctive query.",
                    "label": 0
                },
                {
                    "sent": "It it is then saturated using the information from the ontology box, we remove some auxiliary predicates.",
                    "label": 0
                },
                {
                    "sent": "So this is some internal processing that carrier is in charge of doing.",
                    "label": 0
                },
                {
                    "sent": "Then it is expanded and we can produce both are Datalog query and you see Q.",
                    "label": 0
                },
                {
                    "sent": "So in the case of string QR of our implementation we take this path and then with the UCQ we can add back the Windows that we stripped away in this step and we have the final result.",
                    "label": 0
                }
            ]
        },
        "clip_12": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So just as an example.",
                    "label": 0
                },
                {
                    "sent": "Consider this small tee box so we can say for example, the temperature observation is a subclass of something that was observed by a temperature sensor.",
                    "label": 0
                },
                {
                    "sent": "So this sort of makes sense and we have some other axioms here, so this is the tee box and we have a simple SQL query.",
                    "label": 0
                },
                {
                    "sent": "We get the latest 10 milliseconds of something that was observed by a temperature sensor.",
                    "label": 0
                },
                {
                    "sent": "So immediately what the first step that stream QR does is it takes this.",
                    "label": 0
                },
                {
                    "sent": "It takes away the windows and other information and it.",
                    "label": 0
                },
                {
                    "sent": "Transforms it into a continued into a conjunctive conjunctive query like this.",
                    "label": 0
                },
                {
                    "sent": "So you get observed by you get temperature sensor.",
                    "label": 0
                },
                {
                    "sent": "And then with this and the tee box.",
                    "label": 0
                }
            ]
        },
        "clip_13": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "It is able to expand the query so we can do is do this step by step so the original query is this one.",
                    "label": 0
                },
                {
                    "sent": "So if you see that something observed by a temperature sensor is something that we have here, so this means that this query could be rating also into something that observed that looks for a temperature observation like this.",
                    "label": 0
                },
                {
                    "sent": "Because this matches exactly the query, but then.",
                    "label": 0
                },
                {
                    "sent": "You know that the temperature observation is a superclass of air temperature observation, so this could also be an air temperature observation.",
                    "label": 0
                },
                {
                    "sent": "The same for a thermistor observation.",
                    "label": 0
                },
                {
                    "sent": "Don't ask what that means.",
                    "label": 0
                },
                {
                    "sent": "It is just there in the tee box and of course if it's a temperature sensor that was observed by the temperature sensor is a superclass of a thermistor and a capacitive beat.",
                    "label": 0
                },
                {
                    "sent": "We can also have those two here, so this is the.",
                    "label": 0
                },
                {
                    "sent": "Union of Conjunctive queries that we can get by expanding the original 1.",
                    "label": 0
                },
                {
                    "sent": "And then what we do is we transform this rewritten query.",
                    "label": 0
                }
            ]
        },
        "clip_14": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "To something that sequels can understand, which which is a union of this.",
                    "label": 0
                },
                {
                    "sent": "Small queries.",
                    "label": 0
                },
                {
                    "sent": "And this can be sent to sequels for evaluation.",
                    "label": 0
                },
                {
                    "sent": "OK, so.",
                    "label": 0
                }
            ]
        },
        "clip_15": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So some charts.",
                    "label": 0
                },
                {
                    "sent": "So we have compared this first with first data comparison with sequels without any rewriting.",
                    "label": 0
                },
                {
                    "sent": "So without any reasoning.",
                    "label": 0
                },
                {
                    "sent": "So this is just to see how far I mean, how slow we are compared with an engine that doesn't do any rewriting at all.",
                    "label": 0
                },
                {
                    "sent": "So as we can see, the curves really sort of overlap most of the time.",
                    "label": 0
                },
                {
                    "sent": "So for input rates up to 10,000 triples per second, we basically have no difference with the sequels.",
                    "label": 0
                },
                {
                    "sent": "Query evaluation without any rewriting.",
                    "label": 0
                }
            ]
        },
        "clip_16": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So this is one of the findings that we have.",
                    "label": 0
                },
                {
                    "sent": "Also we tried with different types of loads, so the more input matches your query, the slower your results are.",
                    "label": 0
                },
                {
                    "sent": "So we tried with 1020 fifty 80% matches in the input query.",
                    "label": 0
                },
                {
                    "sent": "The input distribution of your load and as we can see also up to a certain level, we are able to keep up with the optimal throughput in fact.",
                    "label": 1
                }
            ]
        },
        "clip_17": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "We also compared with different types of queries because it's well known that one query can generate you lots of rewritings or very few.",
                    "label": 0
                },
                {
                    "sent": "So we tested with queries that produce from 10280 rewritings.",
                    "label": 1
                },
                {
                    "sent": "So obviously the ones that produce the most rewritings are the slowest, but still even for some reasonable input loads we get an optimal.",
                    "label": 0
                },
                {
                    "sent": "Throughput.",
                    "label": 0
                },
                {
                    "sent": "And finally we can.",
                    "label": 0
                }
            ]
        },
        "clip_18": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Paired with one not rewriting, but a query not query stream reasoner which is troll and trolled us completely.",
                    "label": 0
                },
                {
                    "sent": "Different approach which is materialization.",
                    "label": 0
                },
                {
                    "sent": "But the problem with Troll is that it doesn't support query answering so it's very hard to compare these things.",
                    "label": 0
                },
                {
                    "sent": "So what we came up with was comparing with throw without any reasoning at all.",
                    "label": 0
                },
                {
                    "sent": "So this is the the two curves that sort of overlap.",
                    "label": 0
                },
                {
                    "sent": "This Is Us control without reasoning.",
                    "label": 0
                },
                {
                    "sent": "And this is troll with reasoning and this is troll with recently and removal which is a very expensive operation operation of troll.",
                    "label": 0
                },
                {
                    "sent": "So basically we can compare withdrawal without reasoning which is.",
                    "label": 0
                },
                {
                    "sent": "I think a good thing.",
                    "label": 0
                },
                {
                    "sent": "So that's basically it in terms of evaluation.",
                    "label": 0
                }
            ]
        },
        "clip_19": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And to conclude, they can.",
                    "label": 0
                },
                {
                    "sent": "We can say that we have provided a.",
                    "label": 0
                },
                {
                    "sent": "And implementation stream cured that implements query writing over RDF streams, so this is the first time that it has been done.",
                    "label": 0
                },
                {
                    "sent": "And it incorporates a previous work of us which is carrier which does the rewriting part.",
                    "label": 0
                },
                {
                    "sent": "It sufficient on our why the set of evaluation settings?",
                    "label": 0
                },
                {
                    "sent": "But we still think that this can be improved in time because there is really a tradeoff between materialization and query writing that can be exploited there, and I think we think that there is a lot of room for research in that respect, and we would also like to compare with more I mean with upcoming versions of sequels and sparkle that we know that they are working also on reasoning, and I think it would be fair to compare this when they are ready.",
                    "label": 0
                },
                {
                    "sent": "And I think that's all for me.",
                    "label": 0
                }
            ]
        },
        "clip_20": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And if you have some questions, I'm happy to to answer.",
                    "label": 0
                }
            ]
        }
    }
}