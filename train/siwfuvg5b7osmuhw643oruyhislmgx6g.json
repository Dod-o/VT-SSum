{
    "id": "siwfuvg5b7osmuhw643oruyhislmgx6g",
    "title": "Answers Partitioning and Lazy Joins for Efficient Query Relaxation and Application to Similarity Search",
    "info": {
        "author": [
            "S\u00e9bastien Ferr\u00e9, University of Rennes 1"
        ],
        "published": "July 10, 2018",
        "recorded": "June 2018",
        "category": [
            "Top->Computer Science->Big Data",
            "Top->Computer Science->Semantic Web"
        ]
    },
    "url": "http://videolectures.net/eswc2018_ferre_similarity_search/",
    "segmentation": [
        [
            "Thank you for your introduction, so this talk will be about career like session on how to make it efficient enough so that we can apply it to similarities."
        ],
        [
            "Much.",
            "So after motivating this work, I will recall you the basics about query relaxation.",
            "What is it on the how we can apply it to similarity search and then I will present two contributed algorithms, partition and partition with lazy Jones in order to make it more efficient.",
            "And then I will finish with some evaluation results on the same conclusion."
        ],
        [
            "So first query relaxation in RDF is not new Topeka.",
            "They've been paper.",
            "There have been papers 10 years ago by oughta do on others and we can even go further backward in time in the domain of deductive databases.",
            "So what is query relaxation?",
            "The idea is to make a query so sparkle query in our case more general by relaxing constraints in the query.",
            "So this really this results in relax queries.",
            "And for instance, this consists in replacing a class bio superclass or terima by variable to make the query marginal.",
            "And generally it's only applied to conjunctive queries.",
            "So what was the motivation for introducing query relaxation?",
            "The first one is to avoid the empty results or to get more results becauses it's possible for users to have a pro knowledge of the schema onto make misconceptions into their queries.",
            "So that they get NT results on sometimes it's enough to perform a few relaxations in order to find answers under.",
            "So this is a way to give explanations to the user why the query has no answers.",
            "But it could also be useful to find approximate answers.",
            "OK, so to find answers that don't exactly match the query but nearly."
        ],
        [
            "The research question that I addressed here in this work is for Winger.",
            "Is it possible to apply query relaxation algorithms in order to do similarity search?",
            "So that is to identify the nodes of an RDF graph that are the most similar to a given node, which we can see as the query node.",
            "So the idea is relatively simple.",
            "Simply take as a query to be relaxed.",
            "The description of the chosen node.",
            "OK, you take your node, you take his description with the adjustment tripers for instance, and then you try to realize that in order to find similar nodes as the approximate answers of the query that you are derived from the description.",
            "But there are several challenges in order to make this feasible.",
            "The first one is that the node descriptions make up for large queries on even very large queries you can easily have tents hundreds or even thousands of elements in your query, because this corresponds to the number of neighbors.",
            "Tripods for node.",
            "The second challenge is that the number of relax queries grows exponentially with the query size.",
            "OK, because.",
            "Shortly, every subset of your set of elements is a relaxed query.",
            "There are challenges that you may need to perform many relaxation steps in order to find approximate answers, so it's not enough just to perform a few relaxations.",
            "And finally, each relaxed query may have a communitarian number of matchings, that is, when you evaluate the relax query over the other graph, there may be a combinatorial number of matchings.",
            "So."
        ],
        [
            "The program looks on track to borrow an in order to motivate you are listening to the technical details."
        ],
        [
            "I give a spoiler with a short presentation of the results that we have achieved in this work.",
            "So we did some experiments on three datasets.",
            "The first one is real data about geographical data, and then there are two synthetic datasets from UBM.",
            "With up to 13 million trackers.",
            "Then we perform the first experiments on the classical task of query relaxations where the queries are shot so typically less than 10 elements.",
            "In this case, we observe about one order of magnitude faster with our algorithm on full relaxation, that is, on the exploration of all relax queries.",
            "No communitarian explosion with regard to the number of relaxation steps, so it scales better in number of relaxations.",
            "We have also observed that it is less sensitive to query complexity and it scales linearly with the total number of nodes.",
            "OK, so we already have an improvement on the classical task of query laxation.",
            "And now if we look at the new task of similarity search where we have long queries which come from the description of nodes.",
            "For instance, we have here an average of 200 elements in the in the query.",
            "What we see is that the existing approaches they failed for those long queries they were not designed for that and for instance for a time out of 10 minutes they can only perform a three relaxation steps and retrieve only 5% clusters of approximate answers.",
            "So with the algorithms that we propose, we manage to compute all clusters of approximate answers for all queries in less than 10 minutes.",
            "And what is interesting is that if you allow yourself only a small amount of the total time, like dirty signals or two seconds, you still have a fair amount of the clusters of approximate answers."
        ],
        [
            "So before presenting the contributed algorithms, I will define what is query relaxation and then show what it means to apply it for similarity search."
        ],
        [
            "So before relaxing the different before defining the relaxation of queries, we have to define the relaxation of query elements.",
            "So what is the query amount?",
            "In general?",
            "It's a tryper paterna, but it can also be an atomic filter expression.",
            "So here we consider only simple filter expressions, equality between a variable on the term.",
            "But this could be generalized.",
            "On the most common kinds of relaxations, there are others that we can find the literature and following.",
            "The first one is replacing your class by a superclass.",
            "So suppose you have a tribal pattern that states that X's type science fiction film.",
            "You can relax that by with a triple saying that X is a film.",
            "OK, so you move to a larger category of films.",
            "You have the same for the properties where you can replace director or by Creator or Becausw creator could also be a writer or producer music composer and you can also replace another like speed barrier by a variable to replace the constraint X as the rate or speed bear by the marginal constraint is as some director Y. OK.",
            "So here we simply define the relax of some query demand as a set of more specific relaxations of 1 query element.",
            "So for instance, for the tryper pattern ex directors, pill, Bayer, we have two more specific relaxations according to what we said here.",
            "The one that relax is the property on the one that relax is the term.",
            "OK undo Sturm do the tryper patterns that could be further relaxed so we can chain the door relaxations."
        ],
        [
            "So this is what appears here.",
            "Now we can define the relaxation of our queries.",
            "The query is composed of the pattern, which is a set of query elements.",
            "So we have a conjunctive query.",
            "So we can restrict to a set of query demands.",
            "And the projection, which is a set of distinguished variables from the pattern.",
            "Those are the variables for which we want the answers.",
            "To the query.",
            "Before applying relaxation itself, we apply a query normalization step.",
            "I just show it on an example.",
            "Suppose you have twice the same RDF node.",
            "Oh, so here Tom Hanks appears as director and as actor of the science fiction film.",
            "The idea is to replace the different occurrences of this node by a variable Y.",
            "In both occurrences unto add filtering constraints, basically simply an equality between the new variable on the term.",
            "OK, so the advantage here is that now this term appears on new ones.",
            "So if we want to relax, this term talks into a variable.",
            "We have only one place to do it, OK?",
            "So relaxing query is simply replacing an element of the pattern by its set of relaxation elements in set of relaxed elements.",
            "In this special case, where relax E is the empty set, this means that we have removed the D element, so we include in our relaxation process the removal of elements.",
            "So for the above query we have four possible relaxations with.",
            "We're doing one only one relaxation.",
            "Where you relax the type of the themes where you relax the property relating the film to the director.",
            "Here the relaxation is the removal of the actor or relationship under last one is the relaxation of the filter, that is of the identity of the director.",
            "OK.",
            "So in one step we have full relax queries, then each of the relax queries can be further relaxed and then you have a kind of lattice of relax queries and we not RQ of you.",
            "The set of relaxed query in one or several relaxation steps.",
            "So this defines the full relaxation space of query queue.",
            "And we define relaxation distance as the number of relax, query the number of steps that are necessary to reach that relax query starting from the original query.",
            "OK.",
            "So."
        ],
        [
            "Now, an important additional notion is the notion of approximate answers.",
            "And proper relax queries.",
            "So now we consider Nadia graphs, G's data and the query Q.",
            "And of Q Prime is simply the result of the variation of the relax query on the other graph.",
            "So this is a set of answers of that relax query.",
            "And because they are the answers of a relaxed query, they are approximate answers of the original query.",
            "OK, so an approximate answer is simply an answer.",
            "Although relax, query.",
            "Now we define the set of proper answers as the approximate answers of a relaxed query that are not found in more specific relax queries.",
            "OK becausw there is a generalization ordering of older relax queries, so it might be that non server relax query is already an answer of a more specific over less relaxed query OK?",
            "So it simply iterates over the more specific queries on, removes the answers of the most basic queries to know which are the proper answers.",
            "On from there we can define an important notion for this work.",
            "It's the notion of proper relax query proper relax queries.",
            "Simply relax, query, which as a proper answers, that is where the set of proper answers is not the empty set.",
            "OK. On why is it interesting?",
            "It's interesting because every approximate answer belongs to a singular proper relaxed query.",
            "OK, and so as a conclusion, the number or proper relax queries is bounded by the number of nodes in the graph.",
            "In the case where we have a single projected variable and it's quadratic in the number of nodes, if you have two projected variable and so on.",
            "In contrast, if you look at the number of relaxed queries, it's exponential in the size of the query in the number of elements delivery.",
            "So if you have a small query it's OK, but if you have a big query, this is exponential, whereas the number of property tax queries is linear in the size of the graph OK?",
            "So."
        ],
        [
            "No, I come to what interests me here.",
            "It's application to similarity search.",
            "So, given an RDF graph G on the query node now.",
            "So here are the starting point is not a query, it's another.",
            "Now they have no duh.",
            "We build the initial query from this node.",
            "Oh, by using the description of that node as a pattern.",
            "OK, so you simply take the description of the node you replace the node by your fresh variable, which you put as a projected variable in the query that gives you your initial query.",
            "And in this case, the size of the query is larger and so the number of relax queries intractable.",
            "Whereas we have only one projected variable and so the number of people proper relax queries is linear in the number of nodes.",
            "OK. Now to think in terms of similarity.",
            "If you consider any other node and primer.",
            "You can identify a singular relax query Q prime a that has N prime as a proper answer.",
            "Because every.",
            "Every approximate answer belongs to a singular proper relaxed query.",
            "OK, so you can identify this on.",
            "This is interesting because this particular relax query characterize characterizes what N prime has in common with N. This PRQ this property.",
            "Tax free describes completely what the two nodes have in common, and so it's a symbolic form of similarity.",
            "And the more specific, the more similar the two nodes are.",
            "If you if in the end you still want some numerical measures.",
            "You can define a few numerical measures from the true prime.",
            "So for instance, you can consider the number of answers you can consider the number of elements where there are several ways to define numerical measures from that PQ."
        ],
        [
            "OK, so now I come to the contributed algorithms.",
            "So their first part, the first part is unsourced partitioning."
        ],
        [
            "And it relies on the following lemma.",
            "Is that the set of peer queues defines the partition of all approximate answers.",
            "Because every approximate answer belongs to a single PRQ.",
            "So what we propose is to incrementally partition the set of approximate answers by incrementally refining the relax queries in order to split apart the different approximate answers according to what they share with the starting node.",
            "And so this is in contrast with the classical algorithm which enumerate each relax query before evaluating them.",
            "On there also another family of algorithms which are called not the Numa which rely on the enumeration of each node of the graph.",
            "So each candidate approximate answer and that compares each other node with the starting line.",
            "OK.",
            "So what we expect as benefits is that because we have a partition, we have less parts than nodes, unless parts done relax queries.",
            "OK, on in practice we have much less bugs.",
            "And because it's an incremental algorithm, we can factorize devaluation on the comparison of.",
            "The variational relax queries on the comparison of queries.",
            "It's also an anytime algorithm.",
            "You can interrupt it at anytime, and if you interrupt it before the end you will simply have a cursor partition, so less precise partition of your approximate answers."
        ],
        [
            "So this is a sketch of the algorithm, but I will."
        ],
        [
            "Rather explain it to you on an example.",
            "So suppose we start from this query.",
            "This is the query that asks for science fiction films with director that each will burger.",
            "So you have the three lemons.",
            "FG on H is simply the relaxation of element.",
            "So initially you have one cluster that contains all approximate answers, so only four are shown here and here.",
            "This representation means that on the left of the slash it means that they have nothing in common so far and on the right you have the candidate properties to do the split.",
            "So the first step."
        ],
        [
            "We consider elements E to split the cluster.",
            "And we see that a one on a two match East.",
            "So there are science fiction films, while a three and a four are not science fiction films.",
            "So in this case we moved to the left.",
            "And in this case it disappears on these, replaced by its relaxation set.",
            "So H OK and we iterate this process so each cluster."
        ],
        [
            "On the previous cluster here we try to split it, but it appears that all approximate answers match F. On here it is.",
            "We have a split between those which match age on those who don't match age."
        ],
        [
            "You can iterate in this way."
        ],
        [
            "Until you you complete the process.",
            "We see here that we have one crystal about science fiction film directed by Spielberg.",
            "He writes science fiction film with some director here.",
            "It's films with some director on here.",
            "It's anything else that is not a film, OK?",
            "So those are the most similar entities.",
            "This is a bit less similar and so on.",
            "OK."
        ],
        [
            "So by doing this we have removed one bottleneck about the enumeration of relax queries.",
            "But we still have a problem of intractability in the evaluation of relax queries.",
            "So why does it happen?",
            "It happens because we have multiple multiple values properties with multiple values.",
            "For instance, in the case of films, if you start from a film, this film may have several actors.",
            "In general, there are many actors which come into the description of the film.",
            "Then if you relax each actor into a variable on, you have only weak constraints on each relax actor.",
            "Then you get combinatorial expression of matchings of your query.",
            "Because every actor or may match every other actor of every other films.",
            "So just to give an idea if you have 1000 themes with 10 actors each, you will have for this relaxed query tend to 13 matchings.",
            "OK.",
            "So it's exponential in the number of actors in this case."
        ],
        [
            "So I don't have time to dive into the details of the next algorithm, which is a lazy form of joints.",
            "But the idea is to perform the joints in the operation of queries in a lazy way only as much as necessary by taking into account how the different tryper patterns interact in terms of shared variables.",
            "And the consequence in the previous example about films with actors is that instead of 1 set of matchings we will have one set of matchings for variable X.",
            "So set of things.",
            "On the one set of matchings XYY for each.",
            "For each actor.",
            "So the associations between films and actors.",
            "On the consequence in terms of complexities, now it's quadratic in the number of vectors instead of exponential.",
            "So for the same numbers we have 4:50 instead of 10 to 13 matchings.",
            "OK, so it's really just a sketch of the algorithm you can."
        ],
        [
            "Find order detail."
        ],
        [
            "It's in the paper."
        ],
        [
            "OK, so I did several experiments to evaluate the performance of the new algorithms, so in particular I compared with the existing algorithm on the two versions of our algorithms on short queries, and this is the result I've presented to you in the beginning.",
            "So for instance, just to focus on one Instagram.",
            "This is for LUBM tell now.",
            "And orange and green under partition on partition.",
            "Lazy joints on in blue.",
            "It's the traditional query relaxation algorithm and you can see that there is often one order of magnitude because it says log scaler one order of magnitude difference for the full expression of the relaxation space."
        ],
        [
            "Next, we have this overrated it's efficiency.",
            "In the case of similarity search.",
            "So for long queries.",
            "And so as I said, it's a algorithms are the only one that managed to tackle this problem on what is interesting to show here.",
            "Here you have the computation time on here you have the number of clusters of approximate answers that are produced and we can see that even if you stop the process at the time you have more than half the number of clusters."
        ],
        [
            "And two."
        ],
        [
            "Crude, so we have shown that query relaxation can be made more efficient by removing two bottlenecks.",
            "The first one is the enumeration of relaxed queries and the signal is the enumeration of matchings.",
            "OK. And it's efficient enough now so that it can be applied to similarity search and so you get kind of simulated search but with explanations on the explanations are represented as graph patterns.",
            "OK, just to give an idea of what is possible, you can perform the full exploration of the relaxation space over large query to 1000 elements on the 1 million try person, then graph in a few minutes.",
            "OK."
        ],
        [
            "And just to give a few nuts on the perspective, there are two sides for us is improving their algorithms.",
            "In particular, it's possible to.",
            "Search about the touristics to choose the cluster to split on the spitting any month.",
            "We can generalize the approach we would like to advise you approach to relax your eyes and literals because so far they are simply remove them.",
            "And there is a lot of studies on the variations to perform to see how this can be applied to a classification, for instance, or learning prediction.",
            "Thank you for your attention."
        ]
    ],
    "summarization": {
        "clip_0": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Thank you for your introduction, so this talk will be about career like session on how to make it efficient enough so that we can apply it to similarities.",
                    "label": 0
                }
            ]
        },
        "clip_1": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Much.",
                    "label": 0
                },
                {
                    "sent": "So after motivating this work, I will recall you the basics about query relaxation.",
                    "label": 1
                },
                {
                    "sent": "What is it on the how we can apply it to similarity search and then I will present two contributed algorithms, partition and partition with lazy Jones in order to make it more efficient.",
                    "label": 1
                },
                {
                    "sent": "And then I will finish with some evaluation results on the same conclusion.",
                    "label": 0
                }
            ]
        },
        "clip_2": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So first query relaxation in RDF is not new Topeka.",
                    "label": 1
                },
                {
                    "sent": "They've been paper.",
                    "label": 0
                },
                {
                    "sent": "There have been papers 10 years ago by oughta do on others and we can even go further backward in time in the domain of deductive databases.",
                    "label": 1
                },
                {
                    "sent": "So what is query relaxation?",
                    "label": 1
                },
                {
                    "sent": "The idea is to make a query so sparkle query in our case more general by relaxing constraints in the query.",
                    "label": 0
                },
                {
                    "sent": "So this really this results in relax queries.",
                    "label": 0
                },
                {
                    "sent": "And for instance, this consists in replacing a class bio superclass or terima by variable to make the query marginal.",
                    "label": 0
                },
                {
                    "sent": "And generally it's only applied to conjunctive queries.",
                    "label": 0
                },
                {
                    "sent": "So what was the motivation for introducing query relaxation?",
                    "label": 0
                },
                {
                    "sent": "The first one is to avoid the empty results or to get more results becauses it's possible for users to have a pro knowledge of the schema onto make misconceptions into their queries.",
                    "label": 1
                },
                {
                    "sent": "So that they get NT results on sometimes it's enough to perform a few relaxations in order to find answers under.",
                    "label": 0
                },
                {
                    "sent": "So this is a way to give explanations to the user why the query has no answers.",
                    "label": 0
                },
                {
                    "sent": "But it could also be useful to find approximate answers.",
                    "label": 0
                },
                {
                    "sent": "OK, so to find answers that don't exactly match the query but nearly.",
                    "label": 0
                }
            ]
        },
        "clip_3": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "The research question that I addressed here in this work is for Winger.",
                    "label": 0
                },
                {
                    "sent": "Is it possible to apply query relaxation algorithms in order to do similarity search?",
                    "label": 1
                },
                {
                    "sent": "So that is to identify the nodes of an RDF graph that are the most similar to a given node, which we can see as the query node.",
                    "label": 1
                },
                {
                    "sent": "So the idea is relatively simple.",
                    "label": 0
                },
                {
                    "sent": "Simply take as a query to be relaxed.",
                    "label": 0
                },
                {
                    "sent": "The description of the chosen node.",
                    "label": 0
                },
                {
                    "sent": "OK, you take your node, you take his description with the adjustment tripers for instance, and then you try to realize that in order to find similar nodes as the approximate answers of the query that you are derived from the description.",
                    "label": 0
                },
                {
                    "sent": "But there are several challenges in order to make this feasible.",
                    "label": 0
                },
                {
                    "sent": "The first one is that the node descriptions make up for large queries on even very large queries you can easily have tents hundreds or even thousands of elements in your query, because this corresponds to the number of neighbors.",
                    "label": 1
                },
                {
                    "sent": "Tripods for node.",
                    "label": 0
                },
                {
                    "sent": "The second challenge is that the number of relax queries grows exponentially with the query size.",
                    "label": 0
                },
                {
                    "sent": "OK, because.",
                    "label": 0
                },
                {
                    "sent": "Shortly, every subset of your set of elements is a relaxed query.",
                    "label": 1
                },
                {
                    "sent": "There are challenges that you may need to perform many relaxation steps in order to find approximate answers, so it's not enough just to perform a few relaxations.",
                    "label": 0
                },
                {
                    "sent": "And finally, each relaxed query may have a communitarian number of matchings, that is, when you evaluate the relax query over the other graph, there may be a combinatorial number of matchings.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                }
            ]
        },
        "clip_4": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "The program looks on track to borrow an in order to motivate you are listening to the technical details.",
                    "label": 0
                }
            ]
        },
        "clip_5": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "I give a spoiler with a short presentation of the results that we have achieved in this work.",
                    "label": 0
                },
                {
                    "sent": "So we did some experiments on three datasets.",
                    "label": 0
                },
                {
                    "sent": "The first one is real data about geographical data, and then there are two synthetic datasets from UBM.",
                    "label": 0
                },
                {
                    "sent": "With up to 13 million trackers.",
                    "label": 0
                },
                {
                    "sent": "Then we perform the first experiments on the classical task of query relaxations where the queries are shot so typically less than 10 elements.",
                    "label": 0
                },
                {
                    "sent": "In this case, we observe about one order of magnitude faster with our algorithm on full relaxation, that is, on the exploration of all relax queries.",
                    "label": 1
                },
                {
                    "sent": "No communitarian explosion with regard to the number of relaxation steps, so it scales better in number of relaxations.",
                    "label": 0
                },
                {
                    "sent": "We have also observed that it is less sensitive to query complexity and it scales linearly with the total number of nodes.",
                    "label": 1
                },
                {
                    "sent": "OK, so we already have an improvement on the classical task of query laxation.",
                    "label": 0
                },
                {
                    "sent": "And now if we look at the new task of similarity search where we have long queries which come from the description of nodes.",
                    "label": 0
                },
                {
                    "sent": "For instance, we have here an average of 200 elements in the in the query.",
                    "label": 0
                },
                {
                    "sent": "What we see is that the existing approaches they failed for those long queries they were not designed for that and for instance for a time out of 10 minutes they can only perform a three relaxation steps and retrieve only 5% clusters of approximate answers.",
                    "label": 1
                },
                {
                    "sent": "So with the algorithms that we propose, we manage to compute all clusters of approximate answers for all queries in less than 10 minutes.",
                    "label": 0
                },
                {
                    "sent": "And what is interesting is that if you allow yourself only a small amount of the total time, like dirty signals or two seconds, you still have a fair amount of the clusters of approximate answers.",
                    "label": 0
                }
            ]
        },
        "clip_6": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So before presenting the contributed algorithms, I will define what is query relaxation and then show what it means to apply it for similarity search.",
                    "label": 0
                }
            ]
        },
        "clip_7": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So before relaxing the different before defining the relaxation of queries, we have to define the relaxation of query elements.",
                    "label": 1
                },
                {
                    "sent": "So what is the query amount?",
                    "label": 0
                },
                {
                    "sent": "In general?",
                    "label": 1
                },
                {
                    "sent": "It's a tryper paterna, but it can also be an atomic filter expression.",
                    "label": 0
                },
                {
                    "sent": "So here we consider only simple filter expressions, equality between a variable on the term.",
                    "label": 0
                },
                {
                    "sent": "But this could be generalized.",
                    "label": 0
                },
                {
                    "sent": "On the most common kinds of relaxations, there are others that we can find the literature and following.",
                    "label": 1
                },
                {
                    "sent": "The first one is replacing your class by a superclass.",
                    "label": 0
                },
                {
                    "sent": "So suppose you have a tribal pattern that states that X's type science fiction film.",
                    "label": 0
                },
                {
                    "sent": "You can relax that by with a triple saying that X is a film.",
                    "label": 0
                },
                {
                    "sent": "OK, so you move to a larger category of films.",
                    "label": 0
                },
                {
                    "sent": "You have the same for the properties where you can replace director or by Creator or Becausw creator could also be a writer or producer music composer and you can also replace another like speed barrier by a variable to replace the constraint X as the rate or speed bear by the marginal constraint is as some director Y. OK.",
                    "label": 0
                },
                {
                    "sent": "So here we simply define the relax of some query demand as a set of more specific relaxations of 1 query element.",
                    "label": 1
                },
                {
                    "sent": "So for instance, for the tryper pattern ex directors, pill, Bayer, we have two more specific relaxations according to what we said here.",
                    "label": 0
                },
                {
                    "sent": "The one that relax is the property on the one that relax is the term.",
                    "label": 0
                },
                {
                    "sent": "OK undo Sturm do the tryper patterns that could be further relaxed so we can chain the door relaxations.",
                    "label": 0
                }
            ]
        },
        "clip_8": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So this is what appears here.",
                    "label": 0
                },
                {
                    "sent": "Now we can define the relaxation of our queries.",
                    "label": 0
                },
                {
                    "sent": "The query is composed of the pattern, which is a set of query elements.",
                    "label": 1
                },
                {
                    "sent": "So we have a conjunctive query.",
                    "label": 0
                },
                {
                    "sent": "So we can restrict to a set of query demands.",
                    "label": 0
                },
                {
                    "sent": "And the projection, which is a set of distinguished variables from the pattern.",
                    "label": 1
                },
                {
                    "sent": "Those are the variables for which we want the answers.",
                    "label": 0
                },
                {
                    "sent": "To the query.",
                    "label": 1
                },
                {
                    "sent": "Before applying relaxation itself, we apply a query normalization step.",
                    "label": 0
                },
                {
                    "sent": "I just show it on an example.",
                    "label": 0
                },
                {
                    "sent": "Suppose you have twice the same RDF node.",
                    "label": 0
                },
                {
                    "sent": "Oh, so here Tom Hanks appears as director and as actor of the science fiction film.",
                    "label": 0
                },
                {
                    "sent": "The idea is to replace the different occurrences of this node by a variable Y.",
                    "label": 0
                },
                {
                    "sent": "In both occurrences unto add filtering constraints, basically simply an equality between the new variable on the term.",
                    "label": 0
                },
                {
                    "sent": "OK, so the advantage here is that now this term appears on new ones.",
                    "label": 0
                },
                {
                    "sent": "So if we want to relax, this term talks into a variable.",
                    "label": 0
                },
                {
                    "sent": "We have only one place to do it, OK?",
                    "label": 0
                },
                {
                    "sent": "So relaxing query is simply replacing an element of the pattern by its set of relaxation elements in set of relaxed elements.",
                    "label": 0
                },
                {
                    "sent": "In this special case, where relax E is the empty set, this means that we have removed the D element, so we include in our relaxation process the removal of elements.",
                    "label": 0
                },
                {
                    "sent": "So for the above query we have four possible relaxations with.",
                    "label": 0
                },
                {
                    "sent": "We're doing one only one relaxation.",
                    "label": 0
                },
                {
                    "sent": "Where you relax the type of the themes where you relax the property relating the film to the director.",
                    "label": 0
                },
                {
                    "sent": "Here the relaxation is the removal of the actor or relationship under last one is the relaxation of the filter, that is of the identity of the director.",
                    "label": 0
                },
                {
                    "sent": "OK.",
                    "label": 0
                },
                {
                    "sent": "So in one step we have full relax queries, then each of the relax queries can be further relaxed and then you have a kind of lattice of relax queries and we not RQ of you.",
                    "label": 1
                },
                {
                    "sent": "The set of relaxed query in one or several relaxation steps.",
                    "label": 1
                },
                {
                    "sent": "So this defines the full relaxation space of query queue.",
                    "label": 0
                },
                {
                    "sent": "And we define relaxation distance as the number of relax, query the number of steps that are necessary to reach that relax query starting from the original query.",
                    "label": 0
                },
                {
                    "sent": "OK.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                }
            ]
        },
        "clip_9": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Now, an important additional notion is the notion of approximate answers.",
                    "label": 0
                },
                {
                    "sent": "And proper relax queries.",
                    "label": 0
                },
                {
                    "sent": "So now we consider Nadia graphs, G's data and the query Q.",
                    "label": 0
                },
                {
                    "sent": "And of Q Prime is simply the result of the variation of the relax query on the other graph.",
                    "label": 0
                },
                {
                    "sent": "So this is a set of answers of that relax query.",
                    "label": 0
                },
                {
                    "sent": "And because they are the answers of a relaxed query, they are approximate answers of the original query.",
                    "label": 1
                },
                {
                    "sent": "OK, so an approximate answer is simply an answer.",
                    "label": 0
                },
                {
                    "sent": "Although relax, query.",
                    "label": 0
                },
                {
                    "sent": "Now we define the set of proper answers as the approximate answers of a relaxed query that are not found in more specific relax queries.",
                    "label": 1
                },
                {
                    "sent": "OK becausw there is a generalization ordering of older relax queries, so it might be that non server relax query is already an answer of a more specific over less relaxed query OK?",
                    "label": 0
                },
                {
                    "sent": "So it simply iterates over the more specific queries on, removes the answers of the most basic queries to know which are the proper answers.",
                    "label": 0
                },
                {
                    "sent": "On from there we can define an important notion for this work.",
                    "label": 0
                },
                {
                    "sent": "It's the notion of proper relax query proper relax queries.",
                    "label": 0
                },
                {
                    "sent": "Simply relax, query, which as a proper answers, that is where the set of proper answers is not the empty set.",
                    "label": 1
                },
                {
                    "sent": "OK. On why is it interesting?",
                    "label": 1
                },
                {
                    "sent": "It's interesting because every approximate answer belongs to a singular proper relaxed query.",
                    "label": 0
                },
                {
                    "sent": "OK, and so as a conclusion, the number or proper relax queries is bounded by the number of nodes in the graph.",
                    "label": 0
                },
                {
                    "sent": "In the case where we have a single projected variable and it's quadratic in the number of nodes, if you have two projected variable and so on.",
                    "label": 0
                },
                {
                    "sent": "In contrast, if you look at the number of relaxed queries, it's exponential in the size of the query in the number of elements delivery.",
                    "label": 0
                },
                {
                    "sent": "So if you have a small query it's OK, but if you have a big query, this is exponential, whereas the number of property tax queries is linear in the size of the graph OK?",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                }
            ]
        },
        "clip_10": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "No, I come to what interests me here.",
                    "label": 0
                },
                {
                    "sent": "It's application to similarity search.",
                    "label": 0
                },
                {
                    "sent": "So, given an RDF graph G on the query node now.",
                    "label": 1
                },
                {
                    "sent": "So here are the starting point is not a query, it's another.",
                    "label": 0
                },
                {
                    "sent": "Now they have no duh.",
                    "label": 0
                },
                {
                    "sent": "We build the initial query from this node.",
                    "label": 0
                },
                {
                    "sent": "Oh, by using the description of that node as a pattern.",
                    "label": 0
                },
                {
                    "sent": "OK, so you simply take the description of the node you replace the node by your fresh variable, which you put as a projected variable in the query that gives you your initial query.",
                    "label": 0
                },
                {
                    "sent": "And in this case, the size of the query is larger and so the number of relax queries intractable.",
                    "label": 0
                },
                {
                    "sent": "Whereas we have only one projected variable and so the number of people proper relax queries is linear in the number of nodes.",
                    "label": 0
                },
                {
                    "sent": "OK. Now to think in terms of similarity.",
                    "label": 0
                },
                {
                    "sent": "If you consider any other node and primer.",
                    "label": 0
                },
                {
                    "sent": "You can identify a singular relax query Q prime a that has N prime as a proper answer.",
                    "label": 0
                },
                {
                    "sent": "Because every.",
                    "label": 0
                },
                {
                    "sent": "Every approximate answer belongs to a singular proper relaxed query.",
                    "label": 0
                },
                {
                    "sent": "OK, so you can identify this on.",
                    "label": 0
                },
                {
                    "sent": "This is interesting because this particular relax query characterize characterizes what N prime has in common with N. This PRQ this property.",
                    "label": 1
                },
                {
                    "sent": "Tax free describes completely what the two nodes have in common, and so it's a symbolic form of similarity.",
                    "label": 0
                },
                {
                    "sent": "And the more specific, the more similar the two nodes are.",
                    "label": 0
                },
                {
                    "sent": "If you if in the end you still want some numerical measures.",
                    "label": 0
                },
                {
                    "sent": "You can define a few numerical measures from the true prime.",
                    "label": 0
                },
                {
                    "sent": "So for instance, you can consider the number of answers you can consider the number of elements where there are several ways to define numerical measures from that PQ.",
                    "label": 0
                }
            ]
        },
        "clip_11": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "OK, so now I come to the contributed algorithms.",
                    "label": 0
                },
                {
                    "sent": "So their first part, the first part is unsourced partitioning.",
                    "label": 0
                }
            ]
        },
        "clip_12": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "And it relies on the following lemma.",
                    "label": 0
                },
                {
                    "sent": "Is that the set of peer queues defines the partition of all approximate answers.",
                    "label": 1
                },
                {
                    "sent": "Because every approximate answer belongs to a single PRQ.",
                    "label": 1
                },
                {
                    "sent": "So what we propose is to incrementally partition the set of approximate answers by incrementally refining the relax queries in order to split apart the different approximate answers according to what they share with the starting node.",
                    "label": 1
                },
                {
                    "sent": "And so this is in contrast with the classical algorithm which enumerate each relax query before evaluating them.",
                    "label": 0
                },
                {
                    "sent": "On there also another family of algorithms which are called not the Numa which rely on the enumeration of each node of the graph.",
                    "label": 1
                },
                {
                    "sent": "So each candidate approximate answer and that compares each other node with the starting line.",
                    "label": 0
                },
                {
                    "sent": "OK.",
                    "label": 0
                },
                {
                    "sent": "So what we expect as benefits is that because we have a partition, we have less parts than nodes, unless parts done relax queries.",
                    "label": 0
                },
                {
                    "sent": "OK, on in practice we have much less bugs.",
                    "label": 0
                },
                {
                    "sent": "And because it's an incremental algorithm, we can factorize devaluation on the comparison of.",
                    "label": 0
                },
                {
                    "sent": "The variational relax queries on the comparison of queries.",
                    "label": 0
                },
                {
                    "sent": "It's also an anytime algorithm.",
                    "label": 0
                },
                {
                    "sent": "You can interrupt it at anytime, and if you interrupt it before the end you will simply have a cursor partition, so less precise partition of your approximate answers.",
                    "label": 0
                }
            ]
        },
        "clip_13": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So this is a sketch of the algorithm, but I will.",
                    "label": 0
                }
            ]
        },
        "clip_14": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Rather explain it to you on an example.",
                    "label": 0
                },
                {
                    "sent": "So suppose we start from this query.",
                    "label": 0
                },
                {
                    "sent": "This is the query that asks for science fiction films with director that each will burger.",
                    "label": 0
                },
                {
                    "sent": "So you have the three lemons.",
                    "label": 0
                },
                {
                    "sent": "FG on H is simply the relaxation of element.",
                    "label": 0
                },
                {
                    "sent": "So initially you have one cluster that contains all approximate answers, so only four are shown here and here.",
                    "label": 0
                },
                {
                    "sent": "This representation means that on the left of the slash it means that they have nothing in common so far and on the right you have the candidate properties to do the split.",
                    "label": 0
                },
                {
                    "sent": "So the first step.",
                    "label": 0
                }
            ]
        },
        "clip_15": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "We consider elements E to split the cluster.",
                    "label": 0
                },
                {
                    "sent": "And we see that a one on a two match East.",
                    "label": 0
                },
                {
                    "sent": "So there are science fiction films, while a three and a four are not science fiction films.",
                    "label": 0
                },
                {
                    "sent": "So in this case we moved to the left.",
                    "label": 0
                },
                {
                    "sent": "And in this case it disappears on these, replaced by its relaxation set.",
                    "label": 0
                },
                {
                    "sent": "So H OK and we iterate this process so each cluster.",
                    "label": 0
                }
            ]
        },
        "clip_16": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "On the previous cluster here we try to split it, but it appears that all approximate answers match F. On here it is.",
                    "label": 0
                },
                {
                    "sent": "We have a split between those which match age on those who don't match age.",
                    "label": 0
                }
            ]
        },
        "clip_17": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "You can iterate in this way.",
                    "label": 0
                }
            ]
        },
        "clip_18": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Until you you complete the process.",
                    "label": 0
                },
                {
                    "sent": "We see here that we have one crystal about science fiction film directed by Spielberg.",
                    "label": 0
                },
                {
                    "sent": "He writes science fiction film with some director here.",
                    "label": 0
                },
                {
                    "sent": "It's films with some director on here.",
                    "label": 0
                },
                {
                    "sent": "It's anything else that is not a film, OK?",
                    "label": 0
                },
                {
                    "sent": "So those are the most similar entities.",
                    "label": 0
                },
                {
                    "sent": "This is a bit less similar and so on.",
                    "label": 0
                },
                {
                    "sent": "OK.",
                    "label": 0
                }
            ]
        },
        "clip_19": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So by doing this we have removed one bottleneck about the enumeration of relax queries.",
                    "label": 0
                },
                {
                    "sent": "But we still have a problem of intractability in the evaluation of relax queries.",
                    "label": 0
                },
                {
                    "sent": "So why does it happen?",
                    "label": 0
                },
                {
                    "sent": "It happens because we have multiple multiple values properties with multiple values.",
                    "label": 1
                },
                {
                    "sent": "For instance, in the case of films, if you start from a film, this film may have several actors.",
                    "label": 1
                },
                {
                    "sent": "In general, there are many actors which come into the description of the film.",
                    "label": 0
                },
                {
                    "sent": "Then if you relax each actor into a variable on, you have only weak constraints on each relax actor.",
                    "label": 0
                },
                {
                    "sent": "Then you get combinatorial expression of matchings of your query.",
                    "label": 1
                },
                {
                    "sent": "Because every actor or may match every other actor of every other films.",
                    "label": 0
                },
                {
                    "sent": "So just to give an idea if you have 1000 themes with 10 actors each, you will have for this relaxed query tend to 13 matchings.",
                    "label": 1
                },
                {
                    "sent": "OK.",
                    "label": 1
                },
                {
                    "sent": "So it's exponential in the number of actors in this case.",
                    "label": 0
                }
            ]
        },
        "clip_20": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So I don't have time to dive into the details of the next algorithm, which is a lazy form of joints.",
                    "label": 0
                },
                {
                    "sent": "But the idea is to perform the joints in the operation of queries in a lazy way only as much as necessary by taking into account how the different tryper patterns interact in terms of shared variables.",
                    "label": 1
                },
                {
                    "sent": "And the consequence in the previous example about films with actors is that instead of 1 set of matchings we will have one set of matchings for variable X.",
                    "label": 1
                },
                {
                    "sent": "So set of things.",
                    "label": 1
                },
                {
                    "sent": "On the one set of matchings XYY for each.",
                    "label": 0
                },
                {
                    "sent": "For each actor.",
                    "label": 0
                },
                {
                    "sent": "So the associations between films and actors.",
                    "label": 0
                },
                {
                    "sent": "On the consequence in terms of complexities, now it's quadratic in the number of vectors instead of exponential.",
                    "label": 0
                },
                {
                    "sent": "So for the same numbers we have 4:50 instead of 10 to 13 matchings.",
                    "label": 0
                },
                {
                    "sent": "OK, so it's really just a sketch of the algorithm you can.",
                    "label": 0
                }
            ]
        },
        "clip_21": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Find order detail.",
                    "label": 0
                }
            ]
        },
        "clip_22": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "It's in the paper.",
                    "label": 0
                }
            ]
        },
        "clip_23": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "OK, so I did several experiments to evaluate the performance of the new algorithms, so in particular I compared with the existing algorithm on the two versions of our algorithms on short queries, and this is the result I've presented to you in the beginning.",
                    "label": 0
                },
                {
                    "sent": "So for instance, just to focus on one Instagram.",
                    "label": 0
                },
                {
                    "sent": "This is for LUBM tell now.",
                    "label": 0
                },
                {
                    "sent": "And orange and green under partition on partition.",
                    "label": 0
                },
                {
                    "sent": "Lazy joints on in blue.",
                    "label": 0
                },
                {
                    "sent": "It's the traditional query relaxation algorithm and you can see that there is often one order of magnitude because it says log scaler one order of magnitude difference for the full expression of the relaxation space.",
                    "label": 1
                }
            ]
        },
        "clip_24": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Next, we have this overrated it's efficiency.",
                    "label": 0
                },
                {
                    "sent": "In the case of similarity search.",
                    "label": 1
                },
                {
                    "sent": "So for long queries.",
                    "label": 0
                },
                {
                    "sent": "And so as I said, it's a algorithms are the only one that managed to tackle this problem on what is interesting to show here.",
                    "label": 1
                },
                {
                    "sent": "Here you have the computation time on here you have the number of clusters of approximate answers that are produced and we can see that even if you stop the process at the time you have more than half the number of clusters.",
                    "label": 0
                }
            ]
        },
        "clip_25": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And two.",
                    "label": 0
                }
            ]
        },
        "clip_26": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Crude, so we have shown that query relaxation can be made more efficient by removing two bottlenecks.",
                    "label": 1
                },
                {
                    "sent": "The first one is the enumeration of relaxed queries and the signal is the enumeration of matchings.",
                    "label": 0
                },
                {
                    "sent": "OK. And it's efficient enough now so that it can be applied to similarity search and so you get kind of simulated search but with explanations on the explanations are represented as graph patterns.",
                    "label": 0
                },
                {
                    "sent": "OK, just to give an idea of what is possible, you can perform the full exploration of the relaxation space over large query to 1000 elements on the 1 million try person, then graph in a few minutes.",
                    "label": 1
                },
                {
                    "sent": "OK.",
                    "label": 0
                }
            ]
        },
        "clip_27": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "And just to give a few nuts on the perspective, there are two sides for us is improving their algorithms.",
                    "label": 0
                },
                {
                    "sent": "In particular, it's possible to.",
                    "label": 0
                },
                {
                    "sent": "Search about the touristics to choose the cluster to split on the spitting any month.",
                    "label": 1
                },
                {
                    "sent": "We can generalize the approach we would like to advise you approach to relax your eyes and literals because so far they are simply remove them.",
                    "label": 0
                },
                {
                    "sent": "And there is a lot of studies on the variations to perform to see how this can be applied to a classification, for instance, or learning prediction.",
                    "label": 0
                },
                {
                    "sent": "Thank you for your attention.",
                    "label": 0
                }
            ]
        }
    }
}