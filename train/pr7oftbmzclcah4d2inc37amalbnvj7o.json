{
    "id": "pr7oftbmzclcah4d2inc37amalbnvj7o",
    "title": "Introduction to Open ACC (Part 1)",
    "info": {
        "author": [
            "John Urbanic, Pittsburgh Supercomputing Center"
        ],
        "published": "Sept. 19, 2016",
        "recorded": "June 2016",
        "category": [
            "Top->Computer Science",
            "Top->Computers->Programming"
        ]
    },
    "url": "http://videolectures.net/ihpcss2016_urbanic_intro_to_openACC_part1/",
    "segmentation": [
        [
            "Let's get started here.",
            "'cause this is.",
            "This is what I think you'll find to be some wonderfully accessible material, we're going to have you doing GPU programming for real in no time real hand."
        ],
        [
            "So and stuff.",
            "So what is open ACC?",
            "Nice summary of it is is a directive based standard to allow developers take advantage of accelerators such as GPU.",
            "Some NVIDIA.",
            "That's the classic case also AMD Intel Z on five and some other weird equipment to that.",
            "Some of you may be even be interested in, like Fpgas or DSP chips, so that's the one line sentence.",
            "But the important part of that is."
        ],
        [
            "That it is a directive based.",
            "It is a directive based approach.",
            "This is the really nifty part of this.",
            "For those of you that have never seen directives before, you're going to appreciate the power and elegance that you know of a few simple commands.",
            "The compiler.",
            "For those of you that have been using open MP is going to be very familiar.",
            "How many of you are opening for programmers?",
            "For a fraction of you OK, well, good that, then the early going is going to seem pretty straightforward and simple for you, because indeed it's similar to open MP, but this will get into a little bit more.",
            "We'll find out where it does diverge.",
            "So the idea here is that we're going to give the compiler some simple hits, and from that it's going to be able to hopefully gain enough from were telling it to generate kernels.",
            "That's the kind of the term of art for pieces of code that run on a GPU and ignorant compiler.",
            "It doesn't know anything about directives, can just ignore them.",
            "As a matter of fact, the syntax makes."
        ],
        [
            "It looks like their comments more or less the compiler and again as I just said, this is very familiar to open MP programmers who've been using this stuff for since the late 90s to do multi threaded programming with multiple cores.",
            "So this is with multiple cores on a CPU.",
            "This is the vastly superior way to do.",
            "Multithreaded programming is superseded a lower level kind of boiler, lots of boilerplate code, way of doing stuff with the threats.",
            "The very same thing is happened here in the open ACC World where instead of doing the lower level could approach to stuff.",
            "The need was seen by actually the Open MP committee to do something that that reproduce that same directive based."
        ],
        [
            "So there are a couple of different ways that you can accelerate applications, and by the way, let me clear up right in advance here if they haven't already.",
            "The term accelerator is the generic term for any card that you plug into your CPU, so that's why this is accelerator programming in reality, for most of its history, that's been GPU programming.",
            "However, Intel, a latecomer to the game with their plug-in cards that are based on their zeal and fight ship, which I'll talk about in more detail.",
            "There are also now an alternative, just plain GPU's.",
            "It's all called accelerator programming.",
            "If it's something you buy on a card and slap into your GPU.",
            "Or enter your CPU so there are a couple of ways we could program this.",
            "We're going to be using open ACC directives.",
            "The low level approach that's been around for a long time is to just program the card directly using something like CUDA and will talk later.",
            "I think tomorrow about using libraries and also CUDA code as well using existing CUDA libraries or writing your own CUDA code interfacing with it which open ACC is meant to do, which is a wonderful thing because there is an extensive library of their extensive libraries.",
            "I should say there's a huge community developed.",
            "Ecosystem built around GPU's, most of it painstakingly low level optimized CUDA code that's bundled up in nice libraries.",
            "And it's nice that you could access them enough at a high level so you know."
        ],
        [
            "Have to worry about writing an FFT in CUDA anymore, so the key advantages we're going to find out about this directive based approach in general, but open ACC in particular are that it's going to be high level.",
            "We won't have to dive down to the low level hardware as a matter of fact, I'm going to be able to avoid describing in detail any GPU architecture for most of today.",
            "Actually, for all of today and tomorrow, only talk about it because we'll be interested in it for the upmost levels of optimization, but in general I'm not going to dive into details or GPS.",
            "If we were doing a CUDA programming course, I would start with a lot of low level GPU details before we even thought about programming advice.",
            "We're going to be able to avoid that.",
            "We're also going to be able to use single source for our code.",
            "That's another neat thing about directives is that we're not going to have to go and fork off a separate version of our old serial code, and now it's going to be something that nobody else can interpret or understand, or going to branches of our code.",
            "Instead, we're going to be able to have a single branch of code.",
            "We've added these directives to and it'll work great as a serial code.",
            "It'll be understandable, but people that don't know open ACC.",
            "And yet will have these these features and take advantage of GPU's.",
            "Should be very efficient.",
            "We're going to find out the number one question.",
            "You should always asking somebody promising to give you a high level approach that gives you all of this.",
            "We're homing in on the right scheme here.",
            "Sooner or later, the high level approach that buys you all of this.",
            "Lack of awareness of the hardware or lack of effort or whatever is what's my efficiency tradeoff.",
            "You know, everybody's going to be programming in Python at HPC in a few years, 'cause it's so easy, right?",
            "Except, well, it turns out that there are some efficiency tradeoffs there.",
            "If you do stuff in an ignorant way.",
            "In our case, that's the first question.",
            "Should ask you how much am I going to pay to use open ACC versus getting into the guts of stuff with CUDA?",
            "And I'll answer that up front with a few examples for you, but you shouldn't trust that my examples are definitive.",
            "Instead, you should.",
            "Again, Google is your friend.",
            "Do a quick search of the literature and you'll find out that.",
            "Open ACC is capable of delivering extremely good, efficient performance for for most cases because it has all the directors you need to spit out the CUDA code that you would be writing by hand anyway.",
            "It's going to be performance, portable, decoded.",
            "We're going right here.",
            "We're going to write some code on bridges using some some pretty decent GPU's, but it'll be something that we can run on.",
            "You could run on your laptop, so matter of fact, those of you have reasonably decent GPU's on your laptop are perfectly capable of running open ACC on your laptop.",
            "Things we're doing in this class.",
            "The last bullet up here is not a minor one.",
            "This thing.",
            "The fact that we're doing things incrementally here, this incremental approach is a wonderful thing.",
            "It means we can take sections of our code that we think are important and attack them individually.",
            "This is not the way you do MPI programming, MPI programming.",
            "You step all the way back from your code.",
            "Think about it algorithmically and look at big data structures and decompose them.",
            "It is the way we can do things with open ACC.",
            "We can go into our code and say here's a loop that does a lot of stuff.",
            "I found it with the performance profiler.",
            "I just know it 'cause it's obvious this is where my code doesn't list number crunching.",
            "And we can focus on that.",
            "That part of the."
        ],
        [
            "And it completely ignore the rest of the code.",
            "And for those of you that are involved with Dusty deck code, something where you've inherited from generations of grad students have piled stuff on it, and it's 150,000 lines of weird stuff going on in subroutines that you don't think you ever want to look into, or you're ever used that need.",
            "Think about incremental approach as you can focus on the part of your code, the code flow that is important to you.",
            "So I just drop a few cases here.",
            "I'm not going to dwell on these because these are, you know, you could look at these propaganda.",
            "You know he's picked all these good cases.",
            "From NVIDIA of Things that worked great and you know.",
            "And of course they're going to look good.",
            "What about all the failures in the frustration?",
            "Everything, well, by the time we're done here with this, you'll understand that being taking a pass at the code attacking the code with open ACC, even if it's just really optimistic and naive, is not a painful thing to do.",
            "It's not expensive, so you whether or not you believe that you know that these kind of fairly effortless, huge performance gains are possible by the time we're done here, you'll see the deck giving something a shot with open ACC.",
            "Isn't that difficult?"
        ],
        [
            "The other hand, I do want to give you 1 case that I like because it is fairly definitive example of a group that's objectively done.",
            "A good comparison of open ACC to open MP or two up to CUDA, the group that maintains the SVD fuel combustion code.",
            "It is a very sophisticated combustion code, the best in the world, and it's in his category, has a lot of sophisticated multiphysics going on.",
            "It is very optimized and the group that maintains this develop this code.",
            "The government lab has on site a bunch of NVIDIA people actually on video.",
            "Employees who helped them to write and optimize this code, and so they took their first pass at doing this on GPU's as pure CUDA.",
            "They wrote it at the lowest level of CUDA and and then because they were interested in seeing how well open ACC would work to make more maintainable code.",
            "Because CUDA as I'll give you a few simple examples here is not synonymous with maintainable by any means.",
            "In order to make more maintainable code they would like something a high level approach like competency.",
            "They were totally unwilling to trade off performance for it.",
            "They run this on machines that cost a couple hundred $1,000,000.",
            "And yeah, as you saw today, the electric bills on these machines at all alone mean that they can't justify wasting cycles just for programmer convenience.",
            "And indeed, like I said, they had a team of people on site.",
            "They did an open ACC version of it and they found out that the difference in performance was less than a fraction of a percent and his code runs at 15 petaflops.",
            "And as you've been hearing today, a petaflops machine puts you in this elite class of computers and that's, you know your theoretical rate of speed.",
            "The fact this code runs real physics at 15 Petaflops should impress you, and the fact that it uses open ACC to achieve that speed should give you some reassurance that you don't have to pay some terrible performance penalty."
        ],
        [
            "Again, some reassurance is not a guarantee in every single case, but it's an example of a group that was interested in studying that that issue and their conclusion is that open ACC is the way they're moving forward with this now.",
            "There's also other accelerators supported busy on five case is a tricky one, will come back to when I talk about how this overlaps with open MP 4.0 and 4.5.",
            "The Open MP versions of accelerator languages, so I'll come back to that."
        ],
        [
            "Other things, but at the moment we're going to mostly focus on NVIDIA, NVIDIA, it all ferness, you know rules this area because first of all they more or less invented GPU computing by enabling the early very heroic and programmers who first decided to take video game cards, pure video game cards and try to ring some flops out of them and do some science.",
            "And so these guys about 15 years ago they were just basically saying hey, my video game card is a lot more flops in it then I can afford to buy and so they program these cards in.",
            "Shader languages, basically languages read meant to render video scenes, so in something that was basically intended to both the hardware and the software to just play Doom really fast, they were getting science out of it, and this was a irresistible or for more and more people and NVIDIA to their credit, decided to support this by at least writing a less insane API to get to the to the hardware, and so they they wrote CUDA basically as an API that's better than using a shader language.",
            "And this is where things took off.",
            "Now since then.",
            "When they got more serious about it and videos also rolled in some features which are critical to make this stuff usable for scientific computing, things like error correcting memory.",
            "If you got a video card, flaky memory is quite possibly the last thing you ever care about because of weird pixel for 160th of a second is just a noticeable.",
            "On the other hand, a bit flipping in the middle of your simulation.",
            "Your three week simulation can ruin everything and make everything invalid.",
            "Probably will so error correcting memory is something that they had to bring into the architecture to make it worthwhile.",
            "Another big thing is double precision floating point, that something you would never put in a pure video game card, but NVIDIA again embracing this as a new potential market for them said, OK, well, we'll make floating point double precision floating point particular an actual issue in architecture, so they brought all that stuff and gave him a huge lead.",
            "And then at that point when other people recognized by other people I mean primarily Intel recognized that this was not only a potential market they were missing, but maybe a threat to their futures.",
            "HPC they jumped in with the MIC architecture which will talk about, but NVIDIA still controls kind of the center of mass of this, and they've also developed a very very nice ecosystem here, so they have performance tools and libraries and all kinds of stuff.",
            "So if I seem a little bit biased towards in video or the vendor, it's because in some respects they've kind of earned it or.",
            "But certainly it's actually the reality on the ground is the."
        ],
        [
            "Video is still the center of mass of the space.",
            "On the other hand, what you're here learning is the standard is an open standard.",
            "It is not an NVIDIA thing.",
            "It is not like CUDA, it is an open standard and the standards out there online at open acc.org or open sc.standard.org here open sc.org is is the main site.",
            "They have a quick reference card and other stuff, but for most of your exercises are going here you won't need any of these references, but it's nice to know there out there now.",
            "What do I have the the just the GCC compiler version or there are a bunch of compilers now that support this stuff so I don't know why this is an older slide.",
            "I guess there are a bunch of compilers now support open ACC.",
            "I think GCC at that point in time was new and interesting, but now GCC is under version six Point X which supports this better.",
            "We have one of the world."
        ],
        [
            "Foremost experts in the back of the room there on how well different compilers are supporting this at the moment, Galen.",
            "So we may make quiz him at the end of the course when we have specific questions about those kind of things, but let's get on to actually using this because it's so easy to use and to just start throwing at your code.",
            "And that is because it's directed based approach again is just plus giving some hints to the compiler and the number one most useful.",
            "Hint we're going to find from open ACC is the command to.",
            "While the suggestion is not a command, is the suggestion to the compiler.",
            "But it take the next block of code and turn it into kernels.",
            "Run these on the GPU basically, so the kernels Command the ACC Kernels Command is.",
            "To do a lot of magic for us, it's got a lot of power behind it.",
            "For open MP programmers might be a little surprising because opening people's most of the responsibility on the programmers or not do incorrect things open.",
            "ACC puts a lot more responsibility on the compiler, and I think it's some of that is just a reflection of the fact that the standard is much newer open MP was 97 was when the 1st first version of it came out.",
            "So I think just the advances in compilers you could put a lot more responsibility on the shoulder of the compiler.",
            "So for open MP programmers you'll say oh how nice this is to have this level of sophistication.",
            "For those of you that are just new to directive based programming, you can take it for granted that just the compiler will save you from yourself in most cases, so we're going to throw directors."
        ],
        [
            "Some loops, so here's the syntax for directives."
        ],
        [
            "Skip right to this because this is what really matters.",
            "Should the syntax for the directives is very straightforward, it's basically it.",
            "See, it's using the Pragma Command, which is part of the C language, which says any nonstandard features.",
            "Here you can kind of add him with the pragma command, so we're adding in.",
            "Optional feature for the compiler to implement it, which is the open ACC directives, so we're going to have pragma ACC tell the compiler we're going to do something with open ACC and this particular slide in front of us.",
            "The Colonels Command is the command we're sticking in there, and it will apply to the next structure block, which in C is a very well defined concept.",
            "Write a block of code and see you know what it is.",
            "It's surrounded by braces, right?",
            "So that's what the directive will apply to any directives that we look at will apply to the next block of code.",
            "Fortran doesn't have a structure block built into the language per southeast, so instead in Fortran.",
            "Will be using the same directives, except they'll start with a bang$ so it will Fortran compiler knows nothing about this.",
            "This will look like a comment and then we'll have to have an end end directive at the end of these so the only difference being the FORTRAN is the end statements will be necessary in Fortran, so let's look at this code that does this."
        ],
        [
            "Saxby loop here.",
            "Saxby is a incredibly simple minded loop where all you do is take two vectors, add them together and multiply 1 of 'em so it's it's this little bit of code right here, so this code right here is all the action.",
            "It's a four loop that does this right here and you might say why does that thing even have a name to it?",
            "Well, it so happens.",
            "It's so common in lots and lots and lots of code that that little thing right there actually has its own library as has its own routine and a lot of libraries just to optimize it even better than.",
            "Then you could do with this straightforward mass statement right here, so that's how often it shows up.",
            "At any rate, we're going to use open ACC to get this thing to run on the GPU, and run will see how many times faster.",
            "So we've got a normal C code here in front of us.",
            "In this case, it's the we're going to almost all examples in C and Fortran, and I solved from my earlier pool.",
            "We have a lot of Fortran programmers here, so fear not will do everything in C and Fortran with maybe a few simple exceptions here in this case here with C, well, I do have the exception."
        ],
        [
            "For one reason, which is that I'm going to introduce the restrict keyword here and see this is a standard.",
            "Let me ask you, let me just ask the audience here how many of you use the restrict keyword in your code.",
            "Just the the wise people down her old timers in front was sad to see but yet very very common.",
            "The restrict keyword is a very, very incredibly useful is a keyword in C 99 this is not open ACC this is C programming.",
            "It is a very useful keyword in C programming that allows the compiler to start to do the kind of optimizations that Fortran compilers.",
            "Yes you can, but you're going to use it with basically as.",
            "See you know you're going to use it like with the C interface, so it won't bring it won't interface directly with STL routines as nicely as you'd like, but there's no reason you can't call it with C types data structures.",
            "So does that make sense to you if you know what I'm saying?",
            "So I'll come back to it after we have some more examples and I'll come back to it.",
            "But the answer is sure you can use it in C++ code, absolutely, but you can't use it with you say fancy STL type data structures and algorithms.",
            "So the restrict keyword as I was saying OK as I was saying the restrict keyword is standard C 99.",
            "What it tells the compiler is that the variable that you're referring that you're applying to restrict keyword 2 is not going to be alias not going to be pointed to by any other variables.",
            "This allows the compiler to do all kinds of wonderful optimizations that Fortran compilers get to do all the time.",
            "So in the great religious war that I will not stir up here between Fortran and C for numerical supremacy, the major advantage of Fortran usually has.",
            "Is the Fortran language designers.",
            "Just make sure that the language spec is very clear about not handicapping compiler with foreign with do loops by allowing you to do weird things to variables in loop.",
            "the C compiler on the other hand has to always be paranoid about the fact that a variable that you're using in the middle of a loop here, like the variable Y variable Y here, might actually be pointed to by some other variable, maybe X, maybe X&Y actually overlap because X is starting in the middle of life, and you say that's crazy programming.",
            "Who would do that?",
            "Well, the compiler has to give you correct results before it gives you optimize results.",
            "So the C compiler is constantly having to forego great optimization opportunities because it's worried you did something crazy in your code.",
            "You can reassure it that you're not doing anything crazy in your code by using the restrict keyword.",
            "Again, this is standard C, so even though it's not open ACC, I don't feel bad taking a little digression here to tell you that as C programmers you should be much more familiar with this keyword and it should be sprinkled liberally liberally throughout your code.",
            "And you will find you get performance gains at no cost outside of better documenting your code.",
            "So embrace the restrict keyword in this case.",
            "Here we find it necessary because it's going to allow the compiler here to actually know there's no dependency in this loop and dependencies or something that we're going to get onto in just a slide or two.",
            "So this is a little bit of a forward reference here, but basically the restrict keyword will find very useful in with the C language to allow the compiler to be sure that variables are just doing exactly what they look like they're going, and they're not weirdly relay."
        ],
        [
            "Into each other, so you should be using this again."
        ],
        [
            "Widely and frequently in your serial code, but instead we're going to get along with making this example compile and run so I can at least give you an idea of how quick it is to get something going here, and then we'll come back and examine stuff in a little more detail in a second, so we see we're using the standard Portland Group C compiler.",
            "It happens to be called PG.",
            "CC on this platform, and the standard Fortran 90 compiler, PGF 90.",
            "These are the standard compilers we're not using a new language here.",
            "We're sticking with C and with four trans, so all of your knowledge of those languages coming along for the ride.",
            "The directores that we're adding in are just suggestions.",
            "The compiler which it will normally ignore, or some compiler knows nothing about.",
            "Open ACC will absolutely ignore 'cause, they'll just look like comments or on unimplemented pragmas to it, but it compiler that does know about open ACC when it's told to will start to do its magic, so the way it knows to do it here is this dash ACC.",
            "So when we run this code here, when we compile this code with these dash ACC flags, Now it starts spitting out GPU code for us.",
            "And as a matter of fact, with the PGI compiler.",
            "It's pretty nice.",
            "Most compilers are about letting you know what's going on.",
            "It will tell us that that accelerator kernel was generated.",
            "This is going to be for today.",
            "The magic.",
            "Congratulations from the compiler for you to say, hey, I was able to do something useful with your suggestion, because if there's a problem, if it sees potential problems with your directives, it will ignore them.",
            "And again for you, open MP programmers, this is a distinctly different philosophy right where an open MP.",
            "If you put into director, they paralyze a loop.",
            "It's going to do it, and if loop has dependencies or weirdness going on, you just broke your Coke.",
            "But it's going to break your code every time you tell it to do it open.",
            "ACC takes a little bit more.",
            "Sophisticated enough of an attitude about what the compiler should do, and it will try very hard to avoid breaking your code by just not doing things.",
            "In this case, we're happy to see it could do something for us, so it tells us online 9 here it was able to generate an accelerated kernel that tells us it was able to honor our our directive and then to run this code.",
            "All we need to do on bridges, just type the name of the executable.",
            "These compilers spit out a file called out.",
            "By default.",
            "We type it out and we run this thing and it will run.",
            "However, many times faster it runs on the GPU, the CPU and will have plenty of examples of that as we go along now I also use here a flag will find very useful as we go along to this dash M info flag.",
            "Compilers will always tell you more detail about what they're up too if you ask him too.",
            "Very useful again, even with serial code to see if your code was able to vectorize well or do all kinds of different optimizations.",
            "In this case here with PGI, if you type dash M info and then say I want to know more info about the accelerator commands, then it will give this report that we have down below out.",
            "Otherwise it will be much quieter and it's very useful to have that while you're trying to write an open ACC code, so I'll suggest that we use that."
        ],
        [
            "Flag for all of our examples here and all of our exercises.",
            "Now let's compare this to CUDA routine to do the Saxby code so this is the CUDA routine in CUDA C and a couple of things here that should spring to mind.",
            "First of all, this isn't real.",
            "Legal seeks okuda.",
            "See has just gets an extension to the language here.",
            "The most obvious place to see that is in these.",
            "These greater than signs and less than signs that we have right here.",
            "That's just not that normalcy.",
            "So we've already got some.",
            "Non standard stuff going on.",
            "The other thing that might catch your attention here.",
            "So we've got all kinds of concepts.",
            "We've got these 30 twos in here.",
            "We get constants in this code.",
            "We don't have those in the loop.",
            "Ours are simple loop to just add these two things together.",
            "Didn't have any other stuff.",
            "You know where it's coming from.",
            "This is where the hardware architecture is poking through.",
            "Its boiling up through.",
            "This is where CUDA is very much tide to the hardware, the actual platform and you have to start knowing some things that tomorrow in the advanced open ACC talk will talk about because it's need to talk about advanced way.",
            "But we can completely ignore today as we get great results using open ACC.",
            "But again as a CUDA programmer, this is where we start before we write even a simple line, we have to know why these 30 twos are here, for example.",
            "So here's the."
        ],
        [
            "And version of same thing.",
            "Once again this is not legal.",
            "Fortran Fortran compiler wouldn't be happy with this.",
            "This is got the same weird constants in it.",
            "Furthermore, if you write your code like this, people who don't know anything about CUDA, this is an impenetrable mess to them, right?",
            "So you've now written a CUDA version of your code.",
            "It's different than the old code.",
            "You don't have a single branch right now with some stuff added to it.",
            "You've got two versions of your code."
        ],
        [
            "So once again, let's go back to the full code.",
            "Here's the original code here.",
            "All it is is normal C code where we took the four loop that does all the work and we stuck into the subroutine.",
            "So the whole codes.",
            "All the work in the code here is this for loop right here.",
            "This is a big for loop.",
            "In our code we went and stuck it directive in front of that for loop and said make this a kernel and it was able to do it and it would get great performance in this case here."
        ],
        [
            "Will look at more more interesting examples before we start looking at performance numbers, but again, the big difference is we didn't have to mess with the code and destroy the original code, so we had just the same flow of the serial code.",
            "We don't have any of this hardware stuff coming in here, so."
        ],
        [
            "This looks easy, you know, looks like well, hey all I gotta do is the Colonel in front of every loop and I can't miss you.",
            "Might be asking that even why isn't the compiler just do this for me?",
            "Why don't I just type parallelize's?",
            "Flag the compiler, our GPU eyes and then boot the compiler sticks Colonel in front of every loop and we're done we gotta GPU code and the answer is that there are a couple of things the compiler cannot spot that you as a human being are going to have to be responsible for.",
            "And the two things in open ACC that matter are data, dependencies and loops.",
            "And again for the Open MP programmers out there, data dependencies or your mind field and open MP and the other one which is new to accelerator programming.",
            "If you're open programmers data movement, we're going to have to as human beings kind of give some insight to this to the compiler.",
            "Let it know what's going on with."
        ],
        [
            "Two issues here.",
            "Well, let's talk about these two issues.",
            "The first ones data dependencies and they're not difficult.",
            "Things will just understand.",
            "For example, if we have a simple loop like this where we're just doing nothing more than multiplying an array times 4 by churning through it, or arrays got million elements here and we run this on 1000 processors, what's going to happen?"
        ],
        [
            "Is each one of those processors is going to grab 1000 iterations of the loop and work on independently, and they're all going to go through the 1st process is going to go through iterations zero to 1000.",
            "The next process is going to go through 1000 to 19199, and we're going to be decoded by a factor of 1000 because each one of them into tiny fraction.",
            "Original work.",
            "That straightforward parallelization you know, as you hope it works with most of your BIG4 loops and code.",
            "Now the problem."
        ],
        [
            "Miss that you can have perfectly legal code that has a dependency between one iteration of the next.",
            "So in this case here we've got again perfectly valid code.",
            "There's nothing wrong with this and you might very well find this in a working serial code that does something useful, But here we have a dependence on this iteration.",
            "The current iteration for index on a previous iteration and wherever you have a dependence on one iteration of previous iteration, you've got a loop dependency, and this is going to cause a problem.",
            "When we."
        ],
        [
            "Or spreading things out over processors because what happens here is processed or two when we start this loop up and we've spread our workout, the second processor it wants to start working on Array Element 1000.",
            "But to figure out what's going on in railing at 1000, it needs the result for element 999 and that result is probably not calculated yet.",
            "While it's almost certainly not calculated yet because processor number one is way back on element working with Element 0 at the same time.",
            "So as a result we have two choices."
        ],
        [
            "We can either take bogus well what open MP will do is just go ahead and do what you said anyway and you'll get some bogus result out of that.",
            "Open AC Taxi takes a little bit.",
            "Like I said, more modern approach and open ACC will look at that and say I see a loop dependency there because compilers are pretty good at spotting that kind of stuff and because there are just patterns, loop dependencies and matter of fact, you'll get pretty good spotting yourself.",
            "It's not hard to see most of them as a gigantic loop.",
            "It will say there's a loop dependency there.",
            "I am therefore not going to honor your.",
            "Your directive to make a kernel and the code will run fine, but it's gonna serial code.",
            "It's not going to speed up and so this is.",
            "This is what data dependent."
        ],
        [
            "Is arc and there are lots and lots of these encode an becausw.",
            "They also greatly affect vectorization, which is the most primitive kind of form of parallelization that you probably ever care about.",
            "It's so primitive that happens behind the scenes from majority of you, but because it is an issue, loop dependencies affect vectorization.",
            "Those of you that are serious about optimization have already heard the term loop dependency and you've already kind of tried to optimize your code around it.",
            "Those of you that don't care about optimizing your code, or.",
            "Well, you're finding out about this issue now, where it's even more critical to our performance gains.",
            "But Becauses eliminating loop dependencies has been so important optimization.",
            "There's along bag of tricks that dates back 40 plus years to help eliminate data dependencies.",
            "So you can sometimes eliminate data dependences by rearranging things in your loops in some way or another.",
            "And again, there's a bag of tricks for these.",
            "And when I had the luxury of just focusing on this topic alone in about 2 hours, I can go over the vast majority.",
            "Of the clever things that people have come up with over the years to tweak your loops one way or another.",
            "But a lot of them are common sense are very visible and you can kind of worry about it when you run into it in your code.",
            "If it's not some easy quick fix, compilers as a matter of fact I've been learning how to do a lot of tricks themselves, and those sometimes do it behind the scenes for you automatically and again, because even for serial code, enabling the vector instructions to work well, kind of these low level Intel instructions that work on multiple elements of an array at once.",
            "Again, even in a serial code behind the scenes.",
            "Just letting a serial compiler do.",
            "That's very important to compiler writers so that they'll do a lot of that even for you.",
            "However, if at the end of the day you look at a loop and you're like, there really isn't a dependency there, you can override the compilers judgment stick in an independent clause after the kernel and say, hey, these loops are independent.",
            "I don't care what you think, and then you could override the compilers judgment."
        ],
        [
            "So let's look at a real code here and how we might apply some open ACC to it.",
            "And by the way, I am I'm happy to take questions at any point.",
            "Just stick your hand up, jump right in with questions as we start to get into this stuff more and more.",
            "I won't take so many breaks so you just beat him to the punch.",
            "Games like.",
            "The slides should now be online on the wiki, so when I see some people were staring at them with the yes.",
            "So yes please.",
            "And especially we get in the code and whatnot.",
            "You might find it helpful to have them redone.",
            "Oh ha, I now see that I am missing that.",
            "That's awful.",
            "It's on the display over there which thinks it's that.",
            "That's that's not going to be helpful.",
            "We get into code.",
            "Well.",
            "Uh.",
            "I just thought it was a great dream tonight.",
            "No, I I I am let me see.",
            "Let's see where it goes off the screen here I am.",
            "Yeah, the headers.",
            "OK, well from a work around perspective I think you're not going to miss my figure.",
            "Mostly missing headers on the slides, which since I'm here actually giving you some context, isn't going to be a fatal flaw.",
            "On the other hand, we get into code.",
            "It'll be terribly intolerable for me if the code is getting cut off.",
            "So when next Leon sticks his head in the room, which is smart, you probably want it.",
            "That might not be bad.",
            "Thank you.",
            "I appreciate that.",
            "Yes.",
            "Seasonal only.",
            "Here we have data.",
            "I'm eating.",
            "Absolutely, so you're you're a tiny bit ahead of me in that, yes, we can do that.",
            "We can do it.",
            "We hope that it happens automatically and sometimes we need to manage it, but that's exactly what we'll be talking about for as I, as I mentioned, a couple slides ago.",
            "Everybody there are two issues where you as human being have to help the compiler ones loop dependencies, which I hope everybody kind of understands.",
            "If you don't understand about dependencies now, ask questions now before we move on and the second one was data management.",
            "So when we get on the data management will be addressing that question.",
            "Explicitly.",
            "Some days.",
            "Even lost because of that, the transmission of data absolutely.",
            "So you're just a few slides.",
            "Your slides ahead of me.",
            "That's exactly the case, so that, no, no.",
            "I mean you unintentionally you're you're you're anticipating what I'm about to say so I will get on to that subject in about 15 slides.",
            "Will talk about that a whole lot.",
            "So distributed just formation.",
            "There's no coolant in C++ for this.",
            "The restrict keyword or there is C++.",
            "There's not have actually the restrict keyword person is not part of the standard, it is an extension everywhere I've ever every compiler ever used because it's so insanely useful, but it is not part of you know C plus oh 11.",
            "No, it's not an official, so it's always there.",
            "But it's not.",
            "Yeah, it's only see.",
            "To see standard.",
            "OK then, let's take a look at the exercise that we're going to use here to to see how effective open ACC is.",
            "To see what some issues are with the real piece of code and to see what kind of performance gains we can get in quantitative way.",
            "And this is also going to be the foundation of the hybrid challenge exercise.",
            "We're also going to be able to compare this against what the MPI and Open MP guys are up to and their class, so it's really interesting example for lots of reasons like that.",
            "I like it also because it's very intuitive.",
            "Everybody can understand what's going on here with the science.",
            "We're going to take and run in Laplace solver, which means technically it's solving the Laplace equation right here, so this equation here Del squared over some some field equals 0, but in reality we're doing such a simple physical problem that you could understand that even if you're a mathematical, physics is a little rusty in this, although the so we have.",
            "If you can compare that screen to that screen, I think you'll see what the problem is.",
            "And I leave it to you to suggest.",
            "Wait?",
            "Yes.",
            "And yeah.",
            "Would you take over?",
            "Think about it, we'll take it on our exercise break.",
            "I'll talk to you in more detail about it in a few slides.",
            "Yeah, those icons are.",
            "Yeah, there's whatever the aspect ratio issue that's going on here will will Trump we.",
            "We can debug it.",
            "We can make it to the first exercise and then play around with it.",
            "Will have some time to play around in about 15 minutes 'cause it won't kill us till then, but I'd like to get rid of it.",
            "So the Laplace solver here is is the real simple physical problem.",
            "We've got a square metal plate.",
            "It's this metal plate right here and it's initially at zero degrees.",
            "And we start heating it along the edges.",
            "We keep it cold along these two edges and we heat it in this corner to 100 degrees with a decreasing in temperature to zero degrees in the corner.",
            "So it's a metal plate that we start heating on its edges in this pattern and we want to see what its final steady state temperature will be, which we can imagine might be something like this solution right here where it's going to end up being really hot in this one corner and it's going to have gradient going across.",
            "It would be pretty cold in this upper right hand corner, so we can.",
            "We can picture that that's what's going to happen, and it so happens that the actual.",
            "Out."
        ],
        [
            "For them to make this happen is very straightforward, easy to understand.",
            "The Laplace equation mathematically from a mathematical physics perspective is really just saying that any given point is the average of its neighbors.",
            "That's actually exactly what the Laplace equation is specifying mathematically.",
            "What that means is for our algorithm here to solve it all we need to do is we need to take for every point we need to look at its four neighbours.",
            "So we've got this point.",
            "Here we look at our four neighbors around us and we just take the average of four neighbors, which is nothing more than adding all four of them together and dividing by 4.",
            "So this right here just add my 4 neighbors to the North East, South and West and divide by 4 and make that my current value.",
            "That right there is solving the Laplace equation and we keep doing that until from one iteration to the next.",
            "It stops changing so much it changes so little that we think it's effectively done.",
            "It's fixed.",
            "That's a final solution and we start out.",
            "There's going to be a lot of changes from one time step, the next eventually will home in on our final steady state, so it's pretty pretty simple, straightforward problem to understand and implement."
        ],
        [
            "And this matter fact here explicitly is the code does that in Fortran and see these are the two loops they're going to solve this problem for us right here.",
            "And here's the."
        ],
        [
            "The kernel of the code that actually part of the code that does all the math here, and we're going to find out again.",
            "One nice thing about directive based approaches to programming paralyzing code is this is pretty much the only part of the code we need to look at.",
            "Even though the code is not a big sprawling mess, I'll show you the rest of the code in a second, but this is all we need to worry about, which is the guts of the code where all the math happens and what math happens here.",
            "Well, first of all, we decide how many times we're going to loop.",
            "So if we look here at this while statement, here it says while the temperature changes below.",
            "Some threshold that we pick as as as the user of the application.",
            "In my case, I think I've said this by default to 100 degree.",
            "So while this code is changing more than 100 degree anywhere from one run to the next, let's keep doing it.",
            "We don't have our solution or the user has said I only want to run for 1000 iterations.",
            "I'm just trying to get the bug.",
            "The code or something.",
            "I just want to see the solution.",
            "Looks like after 500 iterations or whatever, so we gotta Max iteration at the user can put in here.",
            "So while we haven't exceeded the users maximum iteration count.",
            "And while our tolerance is still below some certain level, and by the way, this is the C version of this, like a cut off, there's a C version of this will do the fortune version in just a second.",
            "So while we've got more work to do then we run this first loop here, which basically is all the science here.",
            "It says the temperature is equal to my four neighbors around me and I just run this over the whole array inj, and then we need to have actually two arrays here.",
            "We need to have an older a from the last time step in a new array, because as we're calculating our new values here for our neighbors.",
            "Some of them, if we had only one array, some of them will be updated this time step.",
            "In, some of them would be not updated, so to keep everything straight you need to have a time step the last time step in the new time step.",
            "So temperature last and temperature is what we have here.",
            "So every iteration of this loop we copy temperature to temperature last and you know what?",
            "This is also a good time to find that maximum temperature change because that's important to us.",
            "We keep running this until the maximum temperature change between any two elements from one time step to the next is below some threshold, so we may as well do that at the same time.",
            "So the 2nd loop.",
            "Look for that maximum temperature change and copies temperature to temperature last so that we can go on to the next time step and the last little bit of code here in our main loop is every 100 times steps will print out some results to see how we're progressing here.",
            "So we have a routine called track progress.",
            "It just prints out some results, so this is the guts of our code."
        ],
        [
            "These are a couple of sub routines that help us out in doing this and initialize subroutine.",
            "There's nothing really amazing here, it just sets the temperature to plate equal to 0 and sets the boundary conditions.",
            "We have a print routine, it just prints some results out from the little lower left hand corner.",
            "We don't want to million elements every hundred timesteps.",
            "Instead, we just print out a few elements in lower corner and that's it."
        ],
        [
            "Here's the entire code, and this is now where I'm starting to get slightly annoyed by by our or cropping issue here.",
            "So here's the entire code almost, and it's not that big, and this is not meant for you to squint at this font either.",
            "Don't don't be trying to make this out, I just wanted to show you that the kernel of our code here, this yellow stuff is is what we're going to focus on, but the rest of the code is not a bunch of stuff hidden from you with mysterious happenings going on old codes.",
            "Pretty pretty brief, and pretty understandable."
        ],
        [
            "So here's the Fortran version of the same thing, and it is exactly the same thing.",
            "I'm not using any tricky language features there for the rest of the, the course is going to be the same.",
            "Same kind of examples we've got a while loop here that says while our Delta is greater than some value, and our count is less than whatever the user puts in, do this.",
            "Do this this new temperature equal to the average of my four neighbors thing, and then when you're done with that, copy temperature, temperature last.",
            "And while you're at it, figure out what the worst case example is for a change here in.",
            "In temperature between our elements, then every hundred timesteps dump some result."
        ],
        [
            "Here are the two XR routines that help with that.",
            "They set the temperature of the grid, the plate equal to 0 in the boundary conditions, and they do some printouts here."
        ],
        [
            "This is the whole code yet again, so you can see that the kernel of the code, which is where we're going to focus is.",
            "A significant fraction of the entire code.",
            "The other XR routines, and every."
        ],
        [
            "You're not not hiding a lot of stuff, so we're going to go and accelerate this code using the directives that we have available to us, and I haven't given you a whole lot of directors, so there's not a whole lot of options for you here, but we at least now get to get into hands on.",
            "So if you go into your.",
            "Whoops, what we did to get here, which we did not set up our exercises here."
        ],
        [
            "And that is to quickly set up."
        ],
        [
            "Your training environment here.",
            "So before we do our first exercise, what we're going to do is we're going to actually set up a few things that that in our in your exercise directory, so everybody hold off on logging on for second.",
            "Just follow me on these couple of slides and will log on and do this so.",
            "What we're going to do this week is we're going to bridges, which is our GPU platform here, and we're going to get everything out."
        ],
        [
            "The way right now to set up for all of our examples bridges is a fairly large and complex machine with a lot of moving parts to it, because as I mentioned briefly before, it's meant to be a big data analytics and machine learning platform and people in machine learning communities use all kinds of different things.",
            "They use GPU's, they use very large memory nodes.",
            "We have 12 terabyte shared memory nodes on this machine with 260 cores.",
            "So for open MP people, that's a dream machine.",
            "We have hundreds of 128 gigabyte nodes with these very powerful.",
            "28 core Broadwell's in there that are very, very good for doing lots of of MPI type test.",
            "So to keep the machine learning community happy.",
            "We've got a very flexible machine here.",
            "It's not the largest machine and a seed in the sense that if you want to do something with a single type of node and run it on 20,000 cores, you would find something like Stampede or blue waters to be better for your purposes.",
            "But for flexibility we got a lot of stuff we how."
        ],
        [
            "Ever are not going to confuse ourselves by looking at everything we're going to.",
            "Although you're welcome to explore and play around and ask questions.",
            "But we're going to focus on the GPU nodes and the GPU nodes on the first phase of this machine.",
            "It's a brand new machine, so at the moment we have KX 80s, which are the latest greatest NVIDIA GPU's.",
            "We will very shortly have Pascal nodes in there, which are the newer an an as yet unavailable GPU nodes, but we're going to use the KX 80s and they're on GPU nodes on the machine."
        ],
        [
            "And we are going to not have to worry about any of the complexity normally have to worry about with a supercomputer.",
            "So how many of you here have worked on a big HPC platforms before and how to use batch systems?",
            "Know what batch systems are.",
            "OK, a fair number of you we're not going to have to deal with the back system at all.",
            "One of the ideas with bridges is the machine learning community is a lot of a lot of people coming from the laptop world and a workstation world.",
            "And how powerful of a workstation can buy with my grant money world?",
            "And that's as far as I'm going to go.",
            "And so to make those guys have we made this very, very interactive machine?",
            "I hope you'll appreciate it this week because we'll never have to touch a queuing system when you log on.",
            "What you will have to type, you'll be on the log.",
            "I know when you log on, you have to type the command.",
            "Interact Dash P Space GPU like here and this says give me a GPU just give it to me and let me have it interactive mode like it's my own and I own it.",
            "You know it's my workstation and then you will find yourself on a GPU node if you get confused at any point in time there by default the command that whoops your command line prompt.",
            "Your command line prompt when you're on the login node looks like VR 006 or BROO 5, or something like that.",
            "That's the bridge login known when you actually get interactive GPU node, which you should probably just hang onto for the rest of the day so you know just get one and just let it sit around with your exercises.",
            "You're welcome to sit on it well between exercises so you don't have to log on and log off of it when you get interactive node.",
            "It'll say GPU, whatever that tells you you're on a GPU node, so that's what we want to do for exercise."
        ],
        [
            "Is here.",
            "Predators, by the way, we have Emacs and VI, probably most of you are comfortable with those if you if you're not a Unix person, that's fine too.",
            "The Nano editor on these machines is incredibly intuitive, straightforward to use, will be fine for all other exercises.",
            "Just use nano if you're not."
        ],
        [
            "Keymaster by person."
        ],
        [
            "So."
        ],
        [
            "I'm skipping right ahead here to what matters here, which is the exercises directory that you're about to copy into.",
            "Your home directory has open ACC folder."
        ],
        [
            "Well, we're going to focus on so there's also open MP versions of it.",
            "As I already told you, this same code and MPI versions of the same code, and so those of you that are interested will have a chance to compare and contrast.",
            "And those of you that do the hybrid challenge will be really interesting, 'cause you might use one of those a starting point.",
            "But we're going to work in the open ACC directory by default for the next day."
        ],
        [
            "And here is getting all of our nonsense set up right here is not a whole lot to do what we're going to do is we're going to.",
            "Where is my pencil?",
            "We're going to not do this.",
            "We don't need to.",
            "You're going to log on the bridge is you're going to copy the exercises directory in your home directory.",
            "You're going to copy the Bash script, so I have set up so you are going to use the PGI compiler for the next day because of no may super compelling reason other than it works great with open ACC and it will allow us to compare it across MPI and open MP without having changed compilers.",
            "So for those of you that are interested in comparing to things or for those of you that do the hybrid challenge.",
            "Pgi compilers nice, so we're going to do that.",
            "I've set all that up for you automatically in the thought bash RC file is a file that runs every time you log onto the machine, so you're going to copy that over as well.",
            "Then, every time you log on the machine, everything will be set up just fine.",
            "Whenever you want to grab a GPU node, you can type this interact GPU command right here.",
            "It'll give you a GPU node and then will compile just right.",
            "Now to make sure everybody is good, we can compile a test program to make sure everybody is good with compiler and make sure it works.",
            "So let's step through this sequence right here.",
            "It should only take us 5 minutes or so to do.",
            "And make sure everything is good.",
            "These slides are available there on the wiki.",
            "No, I heard people saying yes, I see yes is icy nose sounds like.",
            "Sounds like the definition of wiki is probably not clear to everybody, so.",
            "11 of you that is staring at it right now.",
            "If you would be so kind as to to yell out the URL so.",
            "Or no, OK, everybody seems to be clued in.",
            "Anybody still doesn't, can't find the wiki slash good, OK?"
        ],
        [
            "OK, So what we will do just for the moment here, because this first exercise is pretty straightforward so I don't feel bad having us do it a little bit slightly awkwardly, which is don't do.",
            "Don't get on the interactive node then don't ask for GPU node until you actually are ready to run.",
            "Run it, so let's all have go ahead and do the exercise when you think you've got a working example and you're ready to run, then type interact GPU and run your code and then be nice and get back off, but hopefully within by the time we're done with exercise with the problem solved.",
            "Does that make sense?",
            "What I'm telling people to do so you can compile and edit your code and do all the the open ACC stuff on the bridges login node and then when you're ready to run when you've got your aid out sitting there and you want to see how it runs on the GPU type, interact that GPU and then you're on a GPU node.",
            "Go ahead and run it and see what kind of time you get.",
            "What kind of results you get, and after you get your time, log back off and let somebody else on because for whatever reason we're we're running into each other.",
            "But we'll fix that.",
            "But if you can go ahead 'cause most of you would probably had we not.",
            "Taking this detour would probably still be in the midst of trying to at least implement a solution to begin with, so let's go ahead and do the exercise you've got.",
            "Now, the exercises directory open ACC folder.",
            "In that directory.",
            "There are solutions, by the way, and for all of these things in there, which you shouldn't have to cheat.",
            "I think this group, especially nobody, shut the cheat you want to add a directive into your code that will accelerate the code.",
            "We don't have a lot of directives at hand, so it shouldn't be too confusing to you which one to choose.",
            "Added directive in.",
            "Compile it when the compiler is happy with what you were able to compile.",
            "And so I would recommend that you actually use this."
        ],
        [
            "Dashain Info flag right here we we have everything back on the screen great.",
            "OK so you can see it you see the whole screen here so when you have here when you're doing this if you use this dash whoops dash M info flag here.",
            "I think you'll find.",
            "Find it much more informative so when you can get your code to compile and say accelerator kernel generated like here and it won't be.",
            "Unfortunately for you won't be color coded.",
            "You'll have to look for it here, but when it tells you it generated an accelerated kernel, then you know you've got something interesting.",
            "Then jump on a GPU node, run it and see if you spend it on and Meanwhile will will free up the rest of these.",
            "GPU is because something stupid is going on, but go ahead and do the exercise and."
        ],
        [
            "And we will let's take about."
        ],
        [
            "These are general instructions.",
            "Work will take about 45 minutes to do this.",
            "By the time we're done with the exercises will have all the GPU's back under our control, yes.",
            "Sure, I they're still not on the wiki.",
            "These slides are.",
            "OK, so yeah, the blue 1 looks like it definitely didn't get there.",
            "Nobody is firming up but this one now that we're back to the introduction to open ACC this one people are swearing to me is there so that one there so this one with these instructions should be on the wiki so go ahead and find it.",
            "'cause yeah, it's nice to be able to refer to to commands and previous slides when you're doing this.",
            "Coding samples here so let me know if you have a problem finding out, but that's absolutely posted.",
            "Good thumbs up everywhere.",
            "Wonderful OK good."
        ]
    ],
    "summarization": {
        "clip_0": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Let's get started here.",
                    "label": 0
                },
                {
                    "sent": "'cause this is.",
                    "label": 0
                },
                {
                    "sent": "This is what I think you'll find to be some wonderfully accessible material, we're going to have you doing GPU programming for real in no time real hand.",
                    "label": 0
                }
            ]
        },
        "clip_1": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So and stuff.",
                    "label": 0
                },
                {
                    "sent": "So what is open ACC?",
                    "label": 0
                },
                {
                    "sent": "Nice summary of it is is a directive based standard to allow developers take advantage of accelerators such as GPU.",
                    "label": 1
                },
                {
                    "sent": "Some NVIDIA.",
                    "label": 0
                },
                {
                    "sent": "That's the classic case also AMD Intel Z on five and some other weird equipment to that.",
                    "label": 0
                },
                {
                    "sent": "Some of you may be even be interested in, like Fpgas or DSP chips, so that's the one line sentence.",
                    "label": 0
                },
                {
                    "sent": "But the important part of that is.",
                    "label": 0
                }
            ]
        },
        "clip_2": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "That it is a directive based.",
                    "label": 0
                },
                {
                    "sent": "It is a directive based approach.",
                    "label": 0
                },
                {
                    "sent": "This is the really nifty part of this.",
                    "label": 0
                },
                {
                    "sent": "For those of you that have never seen directives before, you're going to appreciate the power and elegance that you know of a few simple commands.",
                    "label": 0
                },
                {
                    "sent": "The compiler.",
                    "label": 0
                },
                {
                    "sent": "For those of you that have been using open MP is going to be very familiar.",
                    "label": 0
                },
                {
                    "sent": "How many of you are opening for programmers?",
                    "label": 0
                },
                {
                    "sent": "For a fraction of you OK, well, good that, then the early going is going to seem pretty straightforward and simple for you, because indeed it's similar to open MP, but this will get into a little bit more.",
                    "label": 0
                },
                {
                    "sent": "We'll find out where it does diverge.",
                    "label": 0
                },
                {
                    "sent": "So the idea here is that we're going to give the compiler some simple hits, and from that it's going to be able to hopefully gain enough from were telling it to generate kernels.",
                    "label": 0
                },
                {
                    "sent": "That's the kind of the term of art for pieces of code that run on a GPU and ignorant compiler.",
                    "label": 0
                },
                {
                    "sent": "It doesn't know anything about directives, can just ignore them.",
                    "label": 0
                },
                {
                    "sent": "As a matter of fact, the syntax makes.",
                    "label": 0
                }
            ]
        },
        "clip_3": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "It looks like their comments more or less the compiler and again as I just said, this is very familiar to open MP programmers who've been using this stuff for since the late 90s to do multi threaded programming with multiple cores.",
                    "label": 0
                },
                {
                    "sent": "So this is with multiple cores on a CPU.",
                    "label": 0
                },
                {
                    "sent": "This is the vastly superior way to do.",
                    "label": 0
                },
                {
                    "sent": "Multithreaded programming is superseded a lower level kind of boiler, lots of boilerplate code, way of doing stuff with the threats.",
                    "label": 0
                },
                {
                    "sent": "The very same thing is happened here in the open ACC World where instead of doing the lower level could approach to stuff.",
                    "label": 0
                },
                {
                    "sent": "The need was seen by actually the Open MP committee to do something that that reproduce that same directive based.",
                    "label": 0
                }
            ]
        },
        "clip_4": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So there are a couple of different ways that you can accelerate applications, and by the way, let me clear up right in advance here if they haven't already.",
                    "label": 0
                },
                {
                    "sent": "The term accelerator is the generic term for any card that you plug into your CPU, so that's why this is accelerator programming in reality, for most of its history, that's been GPU programming.",
                    "label": 0
                },
                {
                    "sent": "However, Intel, a latecomer to the game with their plug-in cards that are based on their zeal and fight ship, which I'll talk about in more detail.",
                    "label": 0
                },
                {
                    "sent": "There are also now an alternative, just plain GPU's.",
                    "label": 0
                },
                {
                    "sent": "It's all called accelerator programming.",
                    "label": 0
                },
                {
                    "sent": "If it's something you buy on a card and slap into your GPU.",
                    "label": 0
                },
                {
                    "sent": "Or enter your CPU so there are a couple of ways we could program this.",
                    "label": 0
                },
                {
                    "sent": "We're going to be using open ACC directives.",
                    "label": 0
                },
                {
                    "sent": "The low level approach that's been around for a long time is to just program the card directly using something like CUDA and will talk later.",
                    "label": 0
                },
                {
                    "sent": "I think tomorrow about using libraries and also CUDA code as well using existing CUDA libraries or writing your own CUDA code interfacing with it which open ACC is meant to do, which is a wonderful thing because there is an extensive library of their extensive libraries.",
                    "label": 0
                },
                {
                    "sent": "I should say there's a huge community developed.",
                    "label": 0
                },
                {
                    "sent": "Ecosystem built around GPU's, most of it painstakingly low level optimized CUDA code that's bundled up in nice libraries.",
                    "label": 0
                },
                {
                    "sent": "And it's nice that you could access them enough at a high level so you know.",
                    "label": 0
                }
            ]
        },
        "clip_5": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Have to worry about writing an FFT in CUDA anymore, so the key advantages we're going to find out about this directive based approach in general, but open ACC in particular are that it's going to be high level.",
                    "label": 0
                },
                {
                    "sent": "We won't have to dive down to the low level hardware as a matter of fact, I'm going to be able to avoid describing in detail any GPU architecture for most of today.",
                    "label": 0
                },
                {
                    "sent": "Actually, for all of today and tomorrow, only talk about it because we'll be interested in it for the upmost levels of optimization, but in general I'm not going to dive into details or GPS.",
                    "label": 0
                },
                {
                    "sent": "If we were doing a CUDA programming course, I would start with a lot of low level GPU details before we even thought about programming advice.",
                    "label": 0
                },
                {
                    "sent": "We're going to be able to avoid that.",
                    "label": 0
                },
                {
                    "sent": "We're also going to be able to use single source for our code.",
                    "label": 1
                },
                {
                    "sent": "That's another neat thing about directives is that we're not going to have to go and fork off a separate version of our old serial code, and now it's going to be something that nobody else can interpret or understand, or going to branches of our code.",
                    "label": 1
                },
                {
                    "sent": "Instead, we're going to be able to have a single branch of code.",
                    "label": 0
                },
                {
                    "sent": "We've added these directives to and it'll work great as a serial code.",
                    "label": 0
                },
                {
                    "sent": "It'll be understandable, but people that don't know open ACC.",
                    "label": 0
                },
                {
                    "sent": "And yet will have these these features and take advantage of GPU's.",
                    "label": 0
                },
                {
                    "sent": "Should be very efficient.",
                    "label": 0
                },
                {
                    "sent": "We're going to find out the number one question.",
                    "label": 0
                },
                {
                    "sent": "You should always asking somebody promising to give you a high level approach that gives you all of this.",
                    "label": 1
                },
                {
                    "sent": "We're homing in on the right scheme here.",
                    "label": 0
                },
                {
                    "sent": "Sooner or later, the high level approach that buys you all of this.",
                    "label": 0
                },
                {
                    "sent": "Lack of awareness of the hardware or lack of effort or whatever is what's my efficiency tradeoff.",
                    "label": 0
                },
                {
                    "sent": "You know, everybody's going to be programming in Python at HPC in a few years, 'cause it's so easy, right?",
                    "label": 0
                },
                {
                    "sent": "Except, well, it turns out that there are some efficiency tradeoffs there.",
                    "label": 0
                },
                {
                    "sent": "If you do stuff in an ignorant way.",
                    "label": 0
                },
                {
                    "sent": "In our case, that's the first question.",
                    "label": 0
                },
                {
                    "sent": "Should ask you how much am I going to pay to use open ACC versus getting into the guts of stuff with CUDA?",
                    "label": 0
                },
                {
                    "sent": "And I'll answer that up front with a few examples for you, but you shouldn't trust that my examples are definitive.",
                    "label": 0
                },
                {
                    "sent": "Instead, you should.",
                    "label": 0
                },
                {
                    "sent": "Again, Google is your friend.",
                    "label": 0
                },
                {
                    "sent": "Do a quick search of the literature and you'll find out that.",
                    "label": 0
                },
                {
                    "sent": "Open ACC is capable of delivering extremely good, efficient performance for for most cases because it has all the directors you need to spit out the CUDA code that you would be writing by hand anyway.",
                    "label": 1
                },
                {
                    "sent": "It's going to be performance, portable, decoded.",
                    "label": 0
                },
                {
                    "sent": "We're going right here.",
                    "label": 0
                },
                {
                    "sent": "We're going to write some code on bridges using some some pretty decent GPU's, but it'll be something that we can run on.",
                    "label": 0
                },
                {
                    "sent": "You could run on your laptop, so matter of fact, those of you have reasonably decent GPU's on your laptop are perfectly capable of running open ACC on your laptop.",
                    "label": 0
                },
                {
                    "sent": "Things we're doing in this class.",
                    "label": 0
                },
                {
                    "sent": "The last bullet up here is not a minor one.",
                    "label": 0
                },
                {
                    "sent": "This thing.",
                    "label": 0
                },
                {
                    "sent": "The fact that we're doing things incrementally here, this incremental approach is a wonderful thing.",
                    "label": 0
                },
                {
                    "sent": "It means we can take sections of our code that we think are important and attack them individually.",
                    "label": 0
                },
                {
                    "sent": "This is not the way you do MPI programming, MPI programming.",
                    "label": 0
                },
                {
                    "sent": "You step all the way back from your code.",
                    "label": 0
                },
                {
                    "sent": "Think about it algorithmically and look at big data structures and decompose them.",
                    "label": 0
                },
                {
                    "sent": "It is the way we can do things with open ACC.",
                    "label": 0
                },
                {
                    "sent": "We can go into our code and say here's a loop that does a lot of stuff.",
                    "label": 0
                },
                {
                    "sent": "I found it with the performance profiler.",
                    "label": 0
                },
                {
                    "sent": "I just know it 'cause it's obvious this is where my code doesn't list number crunching.",
                    "label": 0
                },
                {
                    "sent": "And we can focus on that.",
                    "label": 0
                },
                {
                    "sent": "That part of the.",
                    "label": 0
                }
            ]
        },
        "clip_6": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "And it completely ignore the rest of the code.",
                    "label": 0
                },
                {
                    "sent": "And for those of you that are involved with Dusty deck code, something where you've inherited from generations of grad students have piled stuff on it, and it's 150,000 lines of weird stuff going on in subroutines that you don't think you ever want to look into, or you're ever used that need.",
                    "label": 0
                },
                {
                    "sent": "Think about incremental approach as you can focus on the part of your code, the code flow that is important to you.",
                    "label": 0
                },
                {
                    "sent": "So I just drop a few cases here.",
                    "label": 1
                },
                {
                    "sent": "I'm not going to dwell on these because these are, you know, you could look at these propaganda.",
                    "label": 0
                },
                {
                    "sent": "You know he's picked all these good cases.",
                    "label": 0
                },
                {
                    "sent": "From NVIDIA of Things that worked great and you know.",
                    "label": 0
                },
                {
                    "sent": "And of course they're going to look good.",
                    "label": 0
                },
                {
                    "sent": "What about all the failures in the frustration?",
                    "label": 0
                },
                {
                    "sent": "Everything, well, by the time we're done here with this, you'll understand that being taking a pass at the code attacking the code with open ACC, even if it's just really optimistic and naive, is not a painful thing to do.",
                    "label": 0
                },
                {
                    "sent": "It's not expensive, so you whether or not you believe that you know that these kind of fairly effortless, huge performance gains are possible by the time we're done here, you'll see the deck giving something a shot with open ACC.",
                    "label": 0
                },
                {
                    "sent": "Isn't that difficult?",
                    "label": 0
                }
            ]
        },
        "clip_7": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "The other hand, I do want to give you 1 case that I like because it is fairly definitive example of a group that's objectively done.",
                    "label": 0
                },
                {
                    "sent": "A good comparison of open ACC to open MP or two up to CUDA, the group that maintains the SVD fuel combustion code.",
                    "label": 1
                },
                {
                    "sent": "It is a very sophisticated combustion code, the best in the world, and it's in his category, has a lot of sophisticated multiphysics going on.",
                    "label": 0
                },
                {
                    "sent": "It is very optimized and the group that maintains this develop this code.",
                    "label": 0
                },
                {
                    "sent": "The government lab has on site a bunch of NVIDIA people actually on video.",
                    "label": 0
                },
                {
                    "sent": "Employees who helped them to write and optimize this code, and so they took their first pass at doing this on GPU's as pure CUDA.",
                    "label": 0
                },
                {
                    "sent": "They wrote it at the lowest level of CUDA and and then because they were interested in seeing how well open ACC would work to make more maintainable code.",
                    "label": 0
                },
                {
                    "sent": "Because CUDA as I'll give you a few simple examples here is not synonymous with maintainable by any means.",
                    "label": 0
                },
                {
                    "sent": "In order to make more maintainable code they would like something a high level approach like competency.",
                    "label": 0
                },
                {
                    "sent": "They were totally unwilling to trade off performance for it.",
                    "label": 0
                },
                {
                    "sent": "They run this on machines that cost a couple hundred $1,000,000.",
                    "label": 0
                },
                {
                    "sent": "And yeah, as you saw today, the electric bills on these machines at all alone mean that they can't justify wasting cycles just for programmer convenience.",
                    "label": 0
                },
                {
                    "sent": "And indeed, like I said, they had a team of people on site.",
                    "label": 0
                },
                {
                    "sent": "They did an open ACC version of it and they found out that the difference in performance was less than a fraction of a percent and his code runs at 15 petaflops.",
                    "label": 0
                },
                {
                    "sent": "And as you've been hearing today, a petaflops machine puts you in this elite class of computers and that's, you know your theoretical rate of speed.",
                    "label": 0
                },
                {
                    "sent": "The fact this code runs real physics at 15 Petaflops should impress you, and the fact that it uses open ACC to achieve that speed should give you some reassurance that you don't have to pay some terrible performance penalty.",
                    "label": 0
                }
            ]
        },
        "clip_8": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Again, some reassurance is not a guarantee in every single case, but it's an example of a group that was interested in studying that that issue and their conclusion is that open ACC is the way they're moving forward with this now.",
                    "label": 0
                },
                {
                    "sent": "There's also other accelerators supported busy on five case is a tricky one, will come back to when I talk about how this overlaps with open MP 4.0 and 4.5.",
                    "label": 0
                },
                {
                    "sent": "The Open MP versions of accelerator languages, so I'll come back to that.",
                    "label": 0
                }
            ]
        },
        "clip_9": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Other things, but at the moment we're going to mostly focus on NVIDIA, NVIDIA, it all ferness, you know rules this area because first of all they more or less invented GPU computing by enabling the early very heroic and programmers who first decided to take video game cards, pure video game cards and try to ring some flops out of them and do some science.",
                    "label": 0
                },
                {
                    "sent": "And so these guys about 15 years ago they were just basically saying hey, my video game card is a lot more flops in it then I can afford to buy and so they program these cards in.",
                    "label": 0
                },
                {
                    "sent": "Shader languages, basically languages read meant to render video scenes, so in something that was basically intended to both the hardware and the software to just play Doom really fast, they were getting science out of it, and this was a irresistible or for more and more people and NVIDIA to their credit, decided to support this by at least writing a less insane API to get to the to the hardware, and so they they wrote CUDA basically as an API that's better than using a shader language.",
                    "label": 0
                },
                {
                    "sent": "And this is where things took off.",
                    "label": 0
                },
                {
                    "sent": "Now since then.",
                    "label": 0
                },
                {
                    "sent": "When they got more serious about it and videos also rolled in some features which are critical to make this stuff usable for scientific computing, things like error correcting memory.",
                    "label": 0
                },
                {
                    "sent": "If you got a video card, flaky memory is quite possibly the last thing you ever care about because of weird pixel for 160th of a second is just a noticeable.",
                    "label": 1
                },
                {
                    "sent": "On the other hand, a bit flipping in the middle of your simulation.",
                    "label": 0
                },
                {
                    "sent": "Your three week simulation can ruin everything and make everything invalid.",
                    "label": 0
                },
                {
                    "sent": "Probably will so error correcting memory is something that they had to bring into the architecture to make it worthwhile.",
                    "label": 0
                },
                {
                    "sent": "Another big thing is double precision floating point, that something you would never put in a pure video game card, but NVIDIA again embracing this as a new potential market for them said, OK, well, we'll make floating point double precision floating point particular an actual issue in architecture, so they brought all that stuff and gave him a huge lead.",
                    "label": 0
                },
                {
                    "sent": "And then at that point when other people recognized by other people I mean primarily Intel recognized that this was not only a potential market they were missing, but maybe a threat to their futures.",
                    "label": 0
                },
                {
                    "sent": "HPC they jumped in with the MIC architecture which will talk about, but NVIDIA still controls kind of the center of mass of this, and they've also developed a very very nice ecosystem here, so they have performance tools and libraries and all kinds of stuff.",
                    "label": 1
                },
                {
                    "sent": "So if I seem a little bit biased towards in video or the vendor, it's because in some respects they've kind of earned it or.",
                    "label": 1
                },
                {
                    "sent": "But certainly it's actually the reality on the ground is the.",
                    "label": 0
                }
            ]
        },
        "clip_10": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Video is still the center of mass of the space.",
                    "label": 0
                },
                {
                    "sent": "On the other hand, what you're here learning is the standard is an open standard.",
                    "label": 0
                },
                {
                    "sent": "It is not an NVIDIA thing.",
                    "label": 0
                },
                {
                    "sent": "It is not like CUDA, it is an open standard and the standards out there online at open acc.org or open sc.standard.org here open sc.org is is the main site.",
                    "label": 0
                },
                {
                    "sent": "They have a quick reference card and other stuff, but for most of your exercises are going here you won't need any of these references, but it's nice to know there out there now.",
                    "label": 1
                },
                {
                    "sent": "What do I have the the just the GCC compiler version or there are a bunch of compilers now that support this stuff so I don't know why this is an older slide.",
                    "label": 0
                },
                {
                    "sent": "I guess there are a bunch of compilers now support open ACC.",
                    "label": 0
                },
                {
                    "sent": "I think GCC at that point in time was new and interesting, but now GCC is under version six Point X which supports this better.",
                    "label": 0
                },
                {
                    "sent": "We have one of the world.",
                    "label": 0
                }
            ]
        },
        "clip_11": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Foremost experts in the back of the room there on how well different compilers are supporting this at the moment, Galen.",
                    "label": 0
                },
                {
                    "sent": "So we may make quiz him at the end of the course when we have specific questions about those kind of things, but let's get on to actually using this because it's so easy to use and to just start throwing at your code.",
                    "label": 0
                },
                {
                    "sent": "And that is because it's directed based approach again is just plus giving some hints to the compiler and the number one most useful.",
                    "label": 0
                },
                {
                    "sent": "Hint we're going to find from open ACC is the command to.",
                    "label": 0
                },
                {
                    "sent": "While the suggestion is not a command, is the suggestion to the compiler.",
                    "label": 0
                },
                {
                    "sent": "But it take the next block of code and turn it into kernels.",
                    "label": 0
                },
                {
                    "sent": "Run these on the GPU basically, so the kernels Command the ACC Kernels Command is.",
                    "label": 0
                },
                {
                    "sent": "To do a lot of magic for us, it's got a lot of power behind it.",
                    "label": 0
                },
                {
                    "sent": "For open MP programmers might be a little surprising because opening people's most of the responsibility on the programmers or not do incorrect things open.",
                    "label": 0
                },
                {
                    "sent": "ACC puts a lot more responsibility on the compiler, and I think it's some of that is just a reflection of the fact that the standard is much newer open MP was 97 was when the 1st first version of it came out.",
                    "label": 0
                },
                {
                    "sent": "So I think just the advances in compilers you could put a lot more responsibility on the shoulder of the compiler.",
                    "label": 0
                },
                {
                    "sent": "So for open MP programmers you'll say oh how nice this is to have this level of sophistication.",
                    "label": 0
                },
                {
                    "sent": "For those of you that are just new to directive based programming, you can take it for granted that just the compiler will save you from yourself in most cases, so we're going to throw directors.",
                    "label": 0
                }
            ]
        },
        "clip_12": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Some loops, so here's the syntax for directives.",
                    "label": 0
                }
            ]
        },
        "clip_13": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Skip right to this because this is what really matters.",
                    "label": 0
                },
                {
                    "sent": "Should the syntax for the directives is very straightforward, it's basically it.",
                    "label": 1
                },
                {
                    "sent": "See, it's using the Pragma Command, which is part of the C language, which says any nonstandard features.",
                    "label": 0
                },
                {
                    "sent": "Here you can kind of add him with the pragma command, so we're adding in.",
                    "label": 0
                },
                {
                    "sent": "Optional feature for the compiler to implement it, which is the open ACC directives, so we're going to have pragma ACC tell the compiler we're going to do something with open ACC and this particular slide in front of us.",
                    "label": 1
                },
                {
                    "sent": "The Colonels Command is the command we're sticking in there, and it will apply to the next structure block, which in C is a very well defined concept.",
                    "label": 1
                },
                {
                    "sent": "Write a block of code and see you know what it is.",
                    "label": 0
                },
                {
                    "sent": "It's surrounded by braces, right?",
                    "label": 0
                },
                {
                    "sent": "So that's what the directive will apply to any directives that we look at will apply to the next block of code.",
                    "label": 0
                },
                {
                    "sent": "Fortran doesn't have a structure block built into the language per southeast, so instead in Fortran.",
                    "label": 0
                },
                {
                    "sent": "Will be using the same directives, except they'll start with a bang$ so it will Fortran compiler knows nothing about this.",
                    "label": 0
                },
                {
                    "sent": "This will look like a comment and then we'll have to have an end end directive at the end of these so the only difference being the FORTRAN is the end statements will be necessary in Fortran, so let's look at this code that does this.",
                    "label": 0
                }
            ]
        },
        "clip_14": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Saxby loop here.",
                    "label": 0
                },
                {
                    "sent": "Saxby is a incredibly simple minded loop where all you do is take two vectors, add them together and multiply 1 of 'em so it's it's this little bit of code right here, so this code right here is all the action.",
                    "label": 0
                },
                {
                    "sent": "It's a four loop that does this right here and you might say why does that thing even have a name to it?",
                    "label": 0
                },
                {
                    "sent": "Well, it so happens.",
                    "label": 0
                },
                {
                    "sent": "It's so common in lots and lots and lots of code that that little thing right there actually has its own library as has its own routine and a lot of libraries just to optimize it even better than.",
                    "label": 0
                },
                {
                    "sent": "Then you could do with this straightforward mass statement right here, so that's how often it shows up.",
                    "label": 0
                },
                {
                    "sent": "At any rate, we're going to use open ACC to get this thing to run on the GPU, and run will see how many times faster.",
                    "label": 0
                },
                {
                    "sent": "So we've got a normal C code here in front of us.",
                    "label": 0
                },
                {
                    "sent": "In this case, it's the we're going to almost all examples in C and Fortran, and I solved from my earlier pool.",
                    "label": 0
                },
                {
                    "sent": "We have a lot of Fortran programmers here, so fear not will do everything in C and Fortran with maybe a few simple exceptions here in this case here with C, well, I do have the exception.",
                    "label": 0
                }
            ]
        },
        "clip_15": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "For one reason, which is that I'm going to introduce the restrict keyword here and see this is a standard.",
                    "label": 0
                },
                {
                    "sent": "Let me ask you, let me just ask the audience here how many of you use the restrict keyword in your code.",
                    "label": 0
                },
                {
                    "sent": "Just the the wise people down her old timers in front was sad to see but yet very very common.",
                    "label": 0
                },
                {
                    "sent": "The restrict keyword is a very, very incredibly useful is a keyword in C 99 this is not open ACC this is C programming.",
                    "label": 0
                },
                {
                    "sent": "It is a very useful keyword in C programming that allows the compiler to start to do the kind of optimizations that Fortran compilers.",
                    "label": 0
                },
                {
                    "sent": "Yes you can, but you're going to use it with basically as.",
                    "label": 0
                },
                {
                    "sent": "See you know you're going to use it like with the C interface, so it won't bring it won't interface directly with STL routines as nicely as you'd like, but there's no reason you can't call it with C types data structures.",
                    "label": 0
                },
                {
                    "sent": "So does that make sense to you if you know what I'm saying?",
                    "label": 0
                },
                {
                    "sent": "So I'll come back to it after we have some more examples and I'll come back to it.",
                    "label": 0
                },
                {
                    "sent": "But the answer is sure you can use it in C++ code, absolutely, but you can't use it with you say fancy STL type data structures and algorithms.",
                    "label": 0
                },
                {
                    "sent": "So the restrict keyword as I was saying OK as I was saying the restrict keyword is standard C 99.",
                    "label": 0
                },
                {
                    "sent": "What it tells the compiler is that the variable that you're referring that you're applying to restrict keyword 2 is not going to be alias not going to be pointed to by any other variables.",
                    "label": 0
                },
                {
                    "sent": "This allows the compiler to do all kinds of wonderful optimizations that Fortran compilers get to do all the time.",
                    "label": 0
                },
                {
                    "sent": "So in the great religious war that I will not stir up here between Fortran and C for numerical supremacy, the major advantage of Fortran usually has.",
                    "label": 0
                },
                {
                    "sent": "Is the Fortran language designers.",
                    "label": 0
                },
                {
                    "sent": "Just make sure that the language spec is very clear about not handicapping compiler with foreign with do loops by allowing you to do weird things to variables in loop.",
                    "label": 0
                },
                {
                    "sent": "the C compiler on the other hand has to always be paranoid about the fact that a variable that you're using in the middle of a loop here, like the variable Y variable Y here, might actually be pointed to by some other variable, maybe X, maybe X&Y actually overlap because X is starting in the middle of life, and you say that's crazy programming.",
                    "label": 0
                },
                {
                    "sent": "Who would do that?",
                    "label": 0
                },
                {
                    "sent": "Well, the compiler has to give you correct results before it gives you optimize results.",
                    "label": 0
                },
                {
                    "sent": "So the C compiler is constantly having to forego great optimization opportunities because it's worried you did something crazy in your code.",
                    "label": 0
                },
                {
                    "sent": "You can reassure it that you're not doing anything crazy in your code by using the restrict keyword.",
                    "label": 0
                },
                {
                    "sent": "Again, this is standard C, so even though it's not open ACC, I don't feel bad taking a little digression here to tell you that as C programmers you should be much more familiar with this keyword and it should be sprinkled liberally liberally throughout your code.",
                    "label": 0
                },
                {
                    "sent": "And you will find you get performance gains at no cost outside of better documenting your code.",
                    "label": 0
                },
                {
                    "sent": "So embrace the restrict keyword in this case.",
                    "label": 0
                },
                {
                    "sent": "Here we find it necessary because it's going to allow the compiler here to actually know there's no dependency in this loop and dependencies or something that we're going to get onto in just a slide or two.",
                    "label": 0
                },
                {
                    "sent": "So this is a little bit of a forward reference here, but basically the restrict keyword will find very useful in with the C language to allow the compiler to be sure that variables are just doing exactly what they look like they're going, and they're not weirdly relay.",
                    "label": 0
                }
            ]
        },
        "clip_16": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Into each other, so you should be using this again.",
                    "label": 0
                }
            ]
        },
        "clip_17": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Widely and frequently in your serial code, but instead we're going to get along with making this example compile and run so I can at least give you an idea of how quick it is to get something going here, and then we'll come back and examine stuff in a little more detail in a second, so we see we're using the standard Portland Group C compiler.",
                    "label": 0
                },
                {
                    "sent": "It happens to be called PG.",
                    "label": 0
                },
                {
                    "sent": "CC on this platform, and the standard Fortran 90 compiler, PGF 90.",
                    "label": 0
                },
                {
                    "sent": "These are the standard compilers we're not using a new language here.",
                    "label": 0
                },
                {
                    "sent": "We're sticking with C and with four trans, so all of your knowledge of those languages coming along for the ride.",
                    "label": 0
                },
                {
                    "sent": "The directores that we're adding in are just suggestions.",
                    "label": 0
                },
                {
                    "sent": "The compiler which it will normally ignore, or some compiler knows nothing about.",
                    "label": 0
                },
                {
                    "sent": "Open ACC will absolutely ignore 'cause, they'll just look like comments or on unimplemented pragmas to it, but it compiler that does know about open ACC when it's told to will start to do its magic, so the way it knows to do it here is this dash ACC.",
                    "label": 0
                },
                {
                    "sent": "So when we run this code here, when we compile this code with these dash ACC flags, Now it starts spitting out GPU code for us.",
                    "label": 0
                },
                {
                    "sent": "And as a matter of fact, with the PGI compiler.",
                    "label": 0
                },
                {
                    "sent": "It's pretty nice.",
                    "label": 0
                },
                {
                    "sent": "Most compilers are about letting you know what's going on.",
                    "label": 0
                },
                {
                    "sent": "It will tell us that that accelerator kernel was generated.",
                    "label": 0
                },
                {
                    "sent": "This is going to be for today.",
                    "label": 0
                },
                {
                    "sent": "The magic.",
                    "label": 0
                },
                {
                    "sent": "Congratulations from the compiler for you to say, hey, I was able to do something useful with your suggestion, because if there's a problem, if it sees potential problems with your directives, it will ignore them.",
                    "label": 0
                },
                {
                    "sent": "And again for you, open MP programmers, this is a distinctly different philosophy right where an open MP.",
                    "label": 0
                },
                {
                    "sent": "If you put into director, they paralyze a loop.",
                    "label": 0
                },
                {
                    "sent": "It's going to do it, and if loop has dependencies or weirdness going on, you just broke your Coke.",
                    "label": 0
                },
                {
                    "sent": "But it's going to break your code every time you tell it to do it open.",
                    "label": 0
                },
                {
                    "sent": "ACC takes a little bit more.",
                    "label": 0
                },
                {
                    "sent": "Sophisticated enough of an attitude about what the compiler should do, and it will try very hard to avoid breaking your code by just not doing things.",
                    "label": 0
                },
                {
                    "sent": "In this case, we're happy to see it could do something for us, so it tells us online 9 here it was able to generate an accelerated kernel that tells us it was able to honor our our directive and then to run this code.",
                    "label": 0
                },
                {
                    "sent": "All we need to do on bridges, just type the name of the executable.",
                    "label": 0
                },
                {
                    "sent": "These compilers spit out a file called out.",
                    "label": 0
                },
                {
                    "sent": "By default.",
                    "label": 0
                },
                {
                    "sent": "We type it out and we run this thing and it will run.",
                    "label": 0
                },
                {
                    "sent": "However, many times faster it runs on the GPU, the CPU and will have plenty of examples of that as we go along now I also use here a flag will find very useful as we go along to this dash M info flag.",
                    "label": 0
                },
                {
                    "sent": "Compilers will always tell you more detail about what they're up too if you ask him too.",
                    "label": 0
                },
                {
                    "sent": "Very useful again, even with serial code to see if your code was able to vectorize well or do all kinds of different optimizations.",
                    "label": 0
                },
                {
                    "sent": "In this case here with PGI, if you type dash M info and then say I want to know more info about the accelerator commands, then it will give this report that we have down below out.",
                    "label": 0
                },
                {
                    "sent": "Otherwise it will be much quieter and it's very useful to have that while you're trying to write an open ACC code, so I'll suggest that we use that.",
                    "label": 0
                }
            ]
        },
        "clip_18": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Flag for all of our examples here and all of our exercises.",
                    "label": 0
                },
                {
                    "sent": "Now let's compare this to CUDA routine to do the Saxby code so this is the CUDA routine in CUDA C and a couple of things here that should spring to mind.",
                    "label": 0
                },
                {
                    "sent": "First of all, this isn't real.",
                    "label": 0
                },
                {
                    "sent": "Legal seeks okuda.",
                    "label": 0
                },
                {
                    "sent": "See has just gets an extension to the language here.",
                    "label": 0
                },
                {
                    "sent": "The most obvious place to see that is in these.",
                    "label": 0
                },
                {
                    "sent": "These greater than signs and less than signs that we have right here.",
                    "label": 0
                },
                {
                    "sent": "That's just not that normalcy.",
                    "label": 0
                },
                {
                    "sent": "So we've already got some.",
                    "label": 0
                },
                {
                    "sent": "Non standard stuff going on.",
                    "label": 0
                },
                {
                    "sent": "The other thing that might catch your attention here.",
                    "label": 0
                },
                {
                    "sent": "So we've got all kinds of concepts.",
                    "label": 0
                },
                {
                    "sent": "We've got these 30 twos in here.",
                    "label": 0
                },
                {
                    "sent": "We get constants in this code.",
                    "label": 0
                },
                {
                    "sent": "We don't have those in the loop.",
                    "label": 0
                },
                {
                    "sent": "Ours are simple loop to just add these two things together.",
                    "label": 0
                },
                {
                    "sent": "Didn't have any other stuff.",
                    "label": 0
                },
                {
                    "sent": "You know where it's coming from.",
                    "label": 0
                },
                {
                    "sent": "This is where the hardware architecture is poking through.",
                    "label": 0
                },
                {
                    "sent": "Its boiling up through.",
                    "label": 0
                },
                {
                    "sent": "This is where CUDA is very much tide to the hardware, the actual platform and you have to start knowing some things that tomorrow in the advanced open ACC talk will talk about because it's need to talk about advanced way.",
                    "label": 0
                },
                {
                    "sent": "But we can completely ignore today as we get great results using open ACC.",
                    "label": 0
                },
                {
                    "sent": "But again as a CUDA programmer, this is where we start before we write even a simple line, we have to know why these 30 twos are here, for example.",
                    "label": 0
                },
                {
                    "sent": "So here's the.",
                    "label": 0
                }
            ]
        },
        "clip_19": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And version of same thing.",
                    "label": 0
                },
                {
                    "sent": "Once again this is not legal.",
                    "label": 0
                },
                {
                    "sent": "Fortran Fortran compiler wouldn't be happy with this.",
                    "label": 0
                },
                {
                    "sent": "This is got the same weird constants in it.",
                    "label": 0
                },
                {
                    "sent": "Furthermore, if you write your code like this, people who don't know anything about CUDA, this is an impenetrable mess to them, right?",
                    "label": 0
                },
                {
                    "sent": "So you've now written a CUDA version of your code.",
                    "label": 0
                },
                {
                    "sent": "It's different than the old code.",
                    "label": 0
                },
                {
                    "sent": "You don't have a single branch right now with some stuff added to it.",
                    "label": 0
                },
                {
                    "sent": "You've got two versions of your code.",
                    "label": 0
                }
            ]
        },
        "clip_20": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So once again, let's go back to the full code.",
                    "label": 0
                },
                {
                    "sent": "Here's the original code here.",
                    "label": 0
                },
                {
                    "sent": "All it is is normal C code where we took the four loop that does all the work and we stuck into the subroutine.",
                    "label": 0
                },
                {
                    "sent": "So the whole codes.",
                    "label": 0
                },
                {
                    "sent": "All the work in the code here is this for loop right here.",
                    "label": 0
                },
                {
                    "sent": "This is a big for loop.",
                    "label": 0
                },
                {
                    "sent": "In our code we went and stuck it directive in front of that for loop and said make this a kernel and it was able to do it and it would get great performance in this case here.",
                    "label": 0
                }
            ]
        },
        "clip_21": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Will look at more more interesting examples before we start looking at performance numbers, but again, the big difference is we didn't have to mess with the code and destroy the original code, so we had just the same flow of the serial code.",
                    "label": 0
                },
                {
                    "sent": "We don't have any of this hardware stuff coming in here, so.",
                    "label": 0
                }
            ]
        },
        "clip_22": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "This looks easy, you know, looks like well, hey all I gotta do is the Colonel in front of every loop and I can't miss you.",
                    "label": 0
                },
                {
                    "sent": "Might be asking that even why isn't the compiler just do this for me?",
                    "label": 1
                },
                {
                    "sent": "Why don't I just type parallelize's?",
                    "label": 0
                },
                {
                    "sent": "Flag the compiler, our GPU eyes and then boot the compiler sticks Colonel in front of every loop and we're done we gotta GPU code and the answer is that there are a couple of things the compiler cannot spot that you as a human being are going to have to be responsible for.",
                    "label": 1
                },
                {
                    "sent": "And the two things in open ACC that matter are data, dependencies and loops.",
                    "label": 0
                },
                {
                    "sent": "And again for the Open MP programmers out there, data dependencies or your mind field and open MP and the other one which is new to accelerator programming.",
                    "label": 0
                },
                {
                    "sent": "If you're open programmers data movement, we're going to have to as human beings kind of give some insight to this to the compiler.",
                    "label": 0
                },
                {
                    "sent": "Let it know what's going on with.",
                    "label": 0
                }
            ]
        },
        "clip_23": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Two issues here.",
                    "label": 0
                },
                {
                    "sent": "Well, let's talk about these two issues.",
                    "label": 0
                },
                {
                    "sent": "The first ones data dependencies and they're not difficult.",
                    "label": 0
                },
                {
                    "sent": "Things will just understand.",
                    "label": 0
                },
                {
                    "sent": "For example, if we have a simple loop like this where we're just doing nothing more than multiplying an array times 4 by churning through it, or arrays got million elements here and we run this on 1000 processors, what's going to happen?",
                    "label": 1
                }
            ]
        },
        "clip_24": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Is each one of those processors is going to grab 1000 iterations of the loop and work on independently, and they're all going to go through the 1st process is going to go through iterations zero to 1000.",
                    "label": 0
                },
                {
                    "sent": "The next process is going to go through 1000 to 19199, and we're going to be decoded by a factor of 1000 because each one of them into tiny fraction.",
                    "label": 0
                },
                {
                    "sent": "Original work.",
                    "label": 0
                },
                {
                    "sent": "That straightforward parallelization you know, as you hope it works with most of your BIG4 loops and code.",
                    "label": 0
                },
                {
                    "sent": "Now the problem.",
                    "label": 0
                }
            ]
        },
        "clip_25": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Miss that you can have perfectly legal code that has a dependency between one iteration of the next.",
                    "label": 0
                },
                {
                    "sent": "So in this case here we've got again perfectly valid code.",
                    "label": 1
                },
                {
                    "sent": "There's nothing wrong with this and you might very well find this in a working serial code that does something useful, But here we have a dependence on this iteration.",
                    "label": 0
                },
                {
                    "sent": "The current iteration for index on a previous iteration and wherever you have a dependence on one iteration of previous iteration, you've got a loop dependency, and this is going to cause a problem.",
                    "label": 0
                },
                {
                    "sent": "When we.",
                    "label": 0
                }
            ]
        },
        "clip_26": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Or spreading things out over processors because what happens here is processed or two when we start this loop up and we've spread our workout, the second processor it wants to start working on Array Element 1000.",
                    "label": 0
                },
                {
                    "sent": "But to figure out what's going on in railing at 1000, it needs the result for element 999 and that result is probably not calculated yet.",
                    "label": 1
                },
                {
                    "sent": "While it's almost certainly not calculated yet because processor number one is way back on element working with Element 0 at the same time.",
                    "label": 1
                },
                {
                    "sent": "So as a result we have two choices.",
                    "label": 0
                }
            ]
        },
        "clip_27": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "We can either take bogus well what open MP will do is just go ahead and do what you said anyway and you'll get some bogus result out of that.",
                    "label": 0
                },
                {
                    "sent": "Open AC Taxi takes a little bit.",
                    "label": 0
                },
                {
                    "sent": "Like I said, more modern approach and open ACC will look at that and say I see a loop dependency there because compilers are pretty good at spotting that kind of stuff and because there are just patterns, loop dependencies and matter of fact, you'll get pretty good spotting yourself.",
                    "label": 0
                },
                {
                    "sent": "It's not hard to see most of them as a gigantic loop.",
                    "label": 0
                },
                {
                    "sent": "It will say there's a loop dependency there.",
                    "label": 0
                },
                {
                    "sent": "I am therefore not going to honor your.",
                    "label": 0
                },
                {
                    "sent": "Your directive to make a kernel and the code will run fine, but it's gonna serial code.",
                    "label": 0
                },
                {
                    "sent": "It's not going to speed up and so this is.",
                    "label": 0
                },
                {
                    "sent": "This is what data dependent.",
                    "label": 0
                }
            ]
        },
        "clip_28": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Is arc and there are lots and lots of these encode an becausw.",
                    "label": 0
                },
                {
                    "sent": "They also greatly affect vectorization, which is the most primitive kind of form of parallelization that you probably ever care about.",
                    "label": 0
                },
                {
                    "sent": "It's so primitive that happens behind the scenes from majority of you, but because it is an issue, loop dependencies affect vectorization.",
                    "label": 0
                },
                {
                    "sent": "Those of you that are serious about optimization have already heard the term loop dependency and you've already kind of tried to optimize your code around it.",
                    "label": 0
                },
                {
                    "sent": "Those of you that don't care about optimizing your code, or.",
                    "label": 1
                },
                {
                    "sent": "Well, you're finding out about this issue now, where it's even more critical to our performance gains.",
                    "label": 0
                },
                {
                    "sent": "But Becauses eliminating loop dependencies has been so important optimization.",
                    "label": 0
                },
                {
                    "sent": "There's along bag of tricks that dates back 40 plus years to help eliminate data dependencies.",
                    "label": 1
                },
                {
                    "sent": "So you can sometimes eliminate data dependences by rearranging things in your loops in some way or another.",
                    "label": 0
                },
                {
                    "sent": "And again, there's a bag of tricks for these.",
                    "label": 0
                },
                {
                    "sent": "And when I had the luxury of just focusing on this topic alone in about 2 hours, I can go over the vast majority.",
                    "label": 0
                },
                {
                    "sent": "Of the clever things that people have come up with over the years to tweak your loops one way or another.",
                    "label": 0
                },
                {
                    "sent": "But a lot of them are common sense are very visible and you can kind of worry about it when you run into it in your code.",
                    "label": 0
                },
                {
                    "sent": "If it's not some easy quick fix, compilers as a matter of fact I've been learning how to do a lot of tricks themselves, and those sometimes do it behind the scenes for you automatically and again, because even for serial code, enabling the vector instructions to work well, kind of these low level Intel instructions that work on multiple elements of an array at once.",
                    "label": 0
                },
                {
                    "sent": "Again, even in a serial code behind the scenes.",
                    "label": 0
                },
                {
                    "sent": "Just letting a serial compiler do.",
                    "label": 1
                },
                {
                    "sent": "That's very important to compiler writers so that they'll do a lot of that even for you.",
                    "label": 1
                },
                {
                    "sent": "However, if at the end of the day you look at a loop and you're like, there really isn't a dependency there, you can override the compilers judgment stick in an independent clause after the kernel and say, hey, these loops are independent.",
                    "label": 0
                },
                {
                    "sent": "I don't care what you think, and then you could override the compilers judgment.",
                    "label": 0
                }
            ]
        },
        "clip_29": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So let's look at a real code here and how we might apply some open ACC to it.",
                    "label": 0
                },
                {
                    "sent": "And by the way, I am I'm happy to take questions at any point.",
                    "label": 0
                },
                {
                    "sent": "Just stick your hand up, jump right in with questions as we start to get into this stuff more and more.",
                    "label": 0
                },
                {
                    "sent": "I won't take so many breaks so you just beat him to the punch.",
                    "label": 0
                },
                {
                    "sent": "Games like.",
                    "label": 0
                },
                {
                    "sent": "The slides should now be online on the wiki, so when I see some people were staring at them with the yes.",
                    "label": 0
                },
                {
                    "sent": "So yes please.",
                    "label": 0
                },
                {
                    "sent": "And especially we get in the code and whatnot.",
                    "label": 0
                },
                {
                    "sent": "You might find it helpful to have them redone.",
                    "label": 0
                },
                {
                    "sent": "Oh ha, I now see that I am missing that.",
                    "label": 0
                },
                {
                    "sent": "That's awful.",
                    "label": 0
                },
                {
                    "sent": "It's on the display over there which thinks it's that.",
                    "label": 0
                },
                {
                    "sent": "That's that's not going to be helpful.",
                    "label": 0
                },
                {
                    "sent": "We get into code.",
                    "label": 0
                },
                {
                    "sent": "Well.",
                    "label": 0
                },
                {
                    "sent": "Uh.",
                    "label": 0
                },
                {
                    "sent": "I just thought it was a great dream tonight.",
                    "label": 0
                },
                {
                    "sent": "No, I I I am let me see.",
                    "label": 0
                },
                {
                    "sent": "Let's see where it goes off the screen here I am.",
                    "label": 0
                },
                {
                    "sent": "Yeah, the headers.",
                    "label": 0
                },
                {
                    "sent": "OK, well from a work around perspective I think you're not going to miss my figure.",
                    "label": 0
                },
                {
                    "sent": "Mostly missing headers on the slides, which since I'm here actually giving you some context, isn't going to be a fatal flaw.",
                    "label": 0
                },
                {
                    "sent": "On the other hand, we get into code.",
                    "label": 0
                },
                {
                    "sent": "It'll be terribly intolerable for me if the code is getting cut off.",
                    "label": 0
                },
                {
                    "sent": "So when next Leon sticks his head in the room, which is smart, you probably want it.",
                    "label": 0
                },
                {
                    "sent": "That might not be bad.",
                    "label": 0
                },
                {
                    "sent": "Thank you.",
                    "label": 0
                },
                {
                    "sent": "I appreciate that.",
                    "label": 0
                },
                {
                    "sent": "Yes.",
                    "label": 0
                },
                {
                    "sent": "Seasonal only.",
                    "label": 0
                },
                {
                    "sent": "Here we have data.",
                    "label": 0
                },
                {
                    "sent": "I'm eating.",
                    "label": 0
                },
                {
                    "sent": "Absolutely, so you're you're a tiny bit ahead of me in that, yes, we can do that.",
                    "label": 0
                },
                {
                    "sent": "We can do it.",
                    "label": 0
                },
                {
                    "sent": "We hope that it happens automatically and sometimes we need to manage it, but that's exactly what we'll be talking about for as I, as I mentioned, a couple slides ago.",
                    "label": 0
                },
                {
                    "sent": "Everybody there are two issues where you as human being have to help the compiler ones loop dependencies, which I hope everybody kind of understands.",
                    "label": 0
                },
                {
                    "sent": "If you don't understand about dependencies now, ask questions now before we move on and the second one was data management.",
                    "label": 0
                },
                {
                    "sent": "So when we get on the data management will be addressing that question.",
                    "label": 0
                },
                {
                    "sent": "Explicitly.",
                    "label": 0
                },
                {
                    "sent": "Some days.",
                    "label": 0
                },
                {
                    "sent": "Even lost because of that, the transmission of data absolutely.",
                    "label": 0
                },
                {
                    "sent": "So you're just a few slides.",
                    "label": 0
                },
                {
                    "sent": "Your slides ahead of me.",
                    "label": 0
                },
                {
                    "sent": "That's exactly the case, so that, no, no.",
                    "label": 0
                },
                {
                    "sent": "I mean you unintentionally you're you're you're anticipating what I'm about to say so I will get on to that subject in about 15 slides.",
                    "label": 0
                },
                {
                    "sent": "Will talk about that a whole lot.",
                    "label": 0
                },
                {
                    "sent": "So distributed just formation.",
                    "label": 0
                },
                {
                    "sent": "There's no coolant in C++ for this.",
                    "label": 0
                },
                {
                    "sent": "The restrict keyword or there is C++.",
                    "label": 0
                },
                {
                    "sent": "There's not have actually the restrict keyword person is not part of the standard, it is an extension everywhere I've ever every compiler ever used because it's so insanely useful, but it is not part of you know C plus oh 11.",
                    "label": 0
                },
                {
                    "sent": "No, it's not an official, so it's always there.",
                    "label": 0
                },
                {
                    "sent": "But it's not.",
                    "label": 0
                },
                {
                    "sent": "Yeah, it's only see.",
                    "label": 0
                },
                {
                    "sent": "To see standard.",
                    "label": 0
                },
                {
                    "sent": "OK then, let's take a look at the exercise that we're going to use here to to see how effective open ACC is.",
                    "label": 0
                },
                {
                    "sent": "To see what some issues are with the real piece of code and to see what kind of performance gains we can get in quantitative way.",
                    "label": 0
                },
                {
                    "sent": "And this is also going to be the foundation of the hybrid challenge exercise.",
                    "label": 0
                },
                {
                    "sent": "We're also going to be able to compare this against what the MPI and Open MP guys are up to and their class, so it's really interesting example for lots of reasons like that.",
                    "label": 0
                },
                {
                    "sent": "I like it also because it's very intuitive.",
                    "label": 0
                },
                {
                    "sent": "Everybody can understand what's going on here with the science.",
                    "label": 0
                },
                {
                    "sent": "We're going to take and run in Laplace solver, which means technically it's solving the Laplace equation right here, so this equation here Del squared over some some field equals 0, but in reality we're doing such a simple physical problem that you could understand that even if you're a mathematical, physics is a little rusty in this, although the so we have.",
                    "label": 1
                },
                {
                    "sent": "If you can compare that screen to that screen, I think you'll see what the problem is.",
                    "label": 0
                },
                {
                    "sent": "And I leave it to you to suggest.",
                    "label": 0
                },
                {
                    "sent": "Wait?",
                    "label": 0
                },
                {
                    "sent": "Yes.",
                    "label": 0
                },
                {
                    "sent": "And yeah.",
                    "label": 0
                },
                {
                    "sent": "Would you take over?",
                    "label": 0
                },
                {
                    "sent": "Think about it, we'll take it on our exercise break.",
                    "label": 0
                },
                {
                    "sent": "I'll talk to you in more detail about it in a few slides.",
                    "label": 0
                },
                {
                    "sent": "Yeah, those icons are.",
                    "label": 0
                },
                {
                    "sent": "Yeah, there's whatever the aspect ratio issue that's going on here will will Trump we.",
                    "label": 0
                },
                {
                    "sent": "We can debug it.",
                    "label": 0
                },
                {
                    "sent": "We can make it to the first exercise and then play around with it.",
                    "label": 0
                },
                {
                    "sent": "Will have some time to play around in about 15 minutes 'cause it won't kill us till then, but I'd like to get rid of it.",
                    "label": 0
                },
                {
                    "sent": "So the Laplace solver here is is the real simple physical problem.",
                    "label": 0
                },
                {
                    "sent": "We've got a square metal plate.",
                    "label": 0
                },
                {
                    "sent": "It's this metal plate right here and it's initially at zero degrees.",
                    "label": 0
                },
                {
                    "sent": "And we start heating it along the edges.",
                    "label": 0
                },
                {
                    "sent": "We keep it cold along these two edges and we heat it in this corner to 100 degrees with a decreasing in temperature to zero degrees in the corner.",
                    "label": 0
                },
                {
                    "sent": "So it's a metal plate that we start heating on its edges in this pattern and we want to see what its final steady state temperature will be, which we can imagine might be something like this solution right here where it's going to end up being really hot in this one corner and it's going to have gradient going across.",
                    "label": 0
                },
                {
                    "sent": "It would be pretty cold in this upper right hand corner, so we can.",
                    "label": 0
                },
                {
                    "sent": "We can picture that that's what's going to happen, and it so happens that the actual.",
                    "label": 0
                },
                {
                    "sent": "Out.",
                    "label": 0
                }
            ]
        },
        "clip_30": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "For them to make this happen is very straightforward, easy to understand.",
                    "label": 0
                },
                {
                    "sent": "The Laplace equation mathematically from a mathematical physics perspective is really just saying that any given point is the average of its neighbors.",
                    "label": 1
                },
                {
                    "sent": "That's actually exactly what the Laplace equation is specifying mathematically.",
                    "label": 0
                },
                {
                    "sent": "What that means is for our algorithm here to solve it all we need to do is we need to take for every point we need to look at its four neighbours.",
                    "label": 0
                },
                {
                    "sent": "So we've got this point.",
                    "label": 0
                },
                {
                    "sent": "Here we look at our four neighbors around us and we just take the average of four neighbors, which is nothing more than adding all four of them together and dividing by 4.",
                    "label": 0
                },
                {
                    "sent": "So this right here just add my 4 neighbors to the North East, South and West and divide by 4 and make that my current value.",
                    "label": 1
                },
                {
                    "sent": "That right there is solving the Laplace equation and we keep doing that until from one iteration to the next.",
                    "label": 0
                },
                {
                    "sent": "It stops changing so much it changes so little that we think it's effectively done.",
                    "label": 0
                },
                {
                    "sent": "It's fixed.",
                    "label": 0
                },
                {
                    "sent": "That's a final solution and we start out.",
                    "label": 0
                },
                {
                    "sent": "There's going to be a lot of changes from one time step, the next eventually will home in on our final steady state, so it's pretty pretty simple, straightforward problem to understand and implement.",
                    "label": 0
                }
            ]
        },
        "clip_31": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And this matter fact here explicitly is the code does that in Fortran and see these are the two loops they're going to solve this problem for us right here.",
                    "label": 0
                },
                {
                    "sent": "And here's the.",
                    "label": 0
                }
            ]
        },
        "clip_32": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "The kernel of the code that actually part of the code that does all the math here, and we're going to find out again.",
                    "label": 0
                },
                {
                    "sent": "One nice thing about directive based approaches to programming paralyzing code is this is pretty much the only part of the code we need to look at.",
                    "label": 0
                },
                {
                    "sent": "Even though the code is not a big sprawling mess, I'll show you the rest of the code in a second, but this is all we need to worry about, which is the guts of the code where all the math happens and what math happens here.",
                    "label": 0
                },
                {
                    "sent": "Well, first of all, we decide how many times we're going to loop.",
                    "label": 0
                },
                {
                    "sent": "So if we look here at this while statement, here it says while the temperature changes below.",
                    "label": 0
                },
                {
                    "sent": "Some threshold that we pick as as as the user of the application.",
                    "label": 0
                },
                {
                    "sent": "In my case, I think I've said this by default to 100 degree.",
                    "label": 0
                },
                {
                    "sent": "So while this code is changing more than 100 degree anywhere from one run to the next, let's keep doing it.",
                    "label": 0
                },
                {
                    "sent": "We don't have our solution or the user has said I only want to run for 1000 iterations.",
                    "label": 0
                },
                {
                    "sent": "I'm just trying to get the bug.",
                    "label": 0
                },
                {
                    "sent": "The code or something.",
                    "label": 0
                },
                {
                    "sent": "I just want to see the solution.",
                    "label": 0
                },
                {
                    "sent": "Looks like after 500 iterations or whatever, so we gotta Max iteration at the user can put in here.",
                    "label": 0
                },
                {
                    "sent": "So while we haven't exceeded the users maximum iteration count.",
                    "label": 0
                },
                {
                    "sent": "And while our tolerance is still below some certain level, and by the way, this is the C version of this, like a cut off, there's a C version of this will do the fortune version in just a second.",
                    "label": 0
                },
                {
                    "sent": "So while we've got more work to do then we run this first loop here, which basically is all the science here.",
                    "label": 0
                },
                {
                    "sent": "It says the temperature is equal to my four neighbors around me and I just run this over the whole array inj, and then we need to have actually two arrays here.",
                    "label": 0
                },
                {
                    "sent": "We need to have an older a from the last time step in a new array, because as we're calculating our new values here for our neighbors.",
                    "label": 0
                },
                {
                    "sent": "Some of them, if we had only one array, some of them will be updated this time step.",
                    "label": 0
                },
                {
                    "sent": "In, some of them would be not updated, so to keep everything straight you need to have a time step the last time step in the new time step.",
                    "label": 0
                },
                {
                    "sent": "So temperature last and temperature is what we have here.",
                    "label": 0
                },
                {
                    "sent": "So every iteration of this loop we copy temperature to temperature last and you know what?",
                    "label": 0
                },
                {
                    "sent": "This is also a good time to find that maximum temperature change because that's important to us.",
                    "label": 0
                },
                {
                    "sent": "We keep running this until the maximum temperature change between any two elements from one time step to the next is below some threshold, so we may as well do that at the same time.",
                    "label": 0
                },
                {
                    "sent": "So the 2nd loop.",
                    "label": 0
                },
                {
                    "sent": "Look for that maximum temperature change and copies temperature to temperature last so that we can go on to the next time step and the last little bit of code here in our main loop is every 100 times steps will print out some results to see how we're progressing here.",
                    "label": 0
                },
                {
                    "sent": "So we have a routine called track progress.",
                    "label": 0
                },
                {
                    "sent": "It just prints out some results, so this is the guts of our code.",
                    "label": 0
                }
            ]
        },
        "clip_33": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "These are a couple of sub routines that help us out in doing this and initialize subroutine.",
                    "label": 0
                },
                {
                    "sent": "There's nothing really amazing here, it just sets the temperature to plate equal to 0 and sets the boundary conditions.",
                    "label": 0
                },
                {
                    "sent": "We have a print routine, it just prints some results out from the little lower left hand corner.",
                    "label": 0
                },
                {
                    "sent": "We don't want to million elements every hundred timesteps.",
                    "label": 0
                },
                {
                    "sent": "Instead, we just print out a few elements in lower corner and that's it.",
                    "label": 0
                }
            ]
        },
        "clip_34": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Here's the entire code, and this is now where I'm starting to get slightly annoyed by by our or cropping issue here.",
                    "label": 0
                },
                {
                    "sent": "So here's the entire code almost, and it's not that big, and this is not meant for you to squint at this font either.",
                    "label": 0
                },
                {
                    "sent": "Don't don't be trying to make this out, I just wanted to show you that the kernel of our code here, this yellow stuff is is what we're going to focus on, but the rest of the code is not a bunch of stuff hidden from you with mysterious happenings going on old codes.",
                    "label": 0
                },
                {
                    "sent": "Pretty pretty brief, and pretty understandable.",
                    "label": 0
                }
            ]
        },
        "clip_35": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So here's the Fortran version of the same thing, and it is exactly the same thing.",
                    "label": 0
                },
                {
                    "sent": "I'm not using any tricky language features there for the rest of the, the course is going to be the same.",
                    "label": 0
                },
                {
                    "sent": "Same kind of examples we've got a while loop here that says while our Delta is greater than some value, and our count is less than whatever the user puts in, do this.",
                    "label": 0
                },
                {
                    "sent": "Do this this new temperature equal to the average of my four neighbors thing, and then when you're done with that, copy temperature, temperature last.",
                    "label": 0
                },
                {
                    "sent": "And while you're at it, figure out what the worst case example is for a change here in.",
                    "label": 0
                },
                {
                    "sent": "In temperature between our elements, then every hundred timesteps dump some result.",
                    "label": 0
                }
            ]
        },
        "clip_36": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Here are the two XR routines that help with that.",
                    "label": 0
                },
                {
                    "sent": "They set the temperature of the grid, the plate equal to 0 in the boundary conditions, and they do some printouts here.",
                    "label": 0
                }
            ]
        },
        "clip_37": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "This is the whole code yet again, so you can see that the kernel of the code, which is where we're going to focus is.",
                    "label": 0
                },
                {
                    "sent": "A significant fraction of the entire code.",
                    "label": 0
                },
                {
                    "sent": "The other XR routines, and every.",
                    "label": 0
                }
            ]
        },
        "clip_38": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "You're not not hiding a lot of stuff, so we're going to go and accelerate this code using the directives that we have available to us, and I haven't given you a whole lot of directors, so there's not a whole lot of options for you here, but we at least now get to get into hands on.",
                    "label": 0
                },
                {
                    "sent": "So if you go into your.",
                    "label": 0
                },
                {
                    "sent": "Whoops, what we did to get here, which we did not set up our exercises here.",
                    "label": 0
                }
            ]
        },
        "clip_39": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And that is to quickly set up.",
                    "label": 0
                }
            ]
        },
        "clip_40": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Your training environment here.",
                    "label": 0
                },
                {
                    "sent": "So before we do our first exercise, what we're going to do is we're going to actually set up a few things that that in our in your exercise directory, so everybody hold off on logging on for second.",
                    "label": 0
                },
                {
                    "sent": "Just follow me on these couple of slides and will log on and do this so.",
                    "label": 0
                },
                {
                    "sent": "What we're going to do this week is we're going to bridges, which is our GPU platform here, and we're going to get everything out.",
                    "label": 1
                }
            ]
        },
        "clip_41": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "The way right now to set up for all of our examples bridges is a fairly large and complex machine with a lot of moving parts to it, because as I mentioned briefly before, it's meant to be a big data analytics and machine learning platform and people in machine learning communities use all kinds of different things.",
                    "label": 0
                },
                {
                    "sent": "They use GPU's, they use very large memory nodes.",
                    "label": 0
                },
                {
                    "sent": "We have 12 terabyte shared memory nodes on this machine with 260 cores.",
                    "label": 0
                },
                {
                    "sent": "So for open MP people, that's a dream machine.",
                    "label": 0
                },
                {
                    "sent": "We have hundreds of 128 gigabyte nodes with these very powerful.",
                    "label": 0
                },
                {
                    "sent": "28 core Broadwell's in there that are very, very good for doing lots of of MPI type test.",
                    "label": 0
                },
                {
                    "sent": "So to keep the machine learning community happy.",
                    "label": 0
                },
                {
                    "sent": "We've got a very flexible machine here.",
                    "label": 0
                },
                {
                    "sent": "It's not the largest machine and a seed in the sense that if you want to do something with a single type of node and run it on 20,000 cores, you would find something like Stampede or blue waters to be better for your purposes.",
                    "label": 0
                },
                {
                    "sent": "But for flexibility we got a lot of stuff we how.",
                    "label": 0
                }
            ]
        },
        "clip_42": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Ever are not going to confuse ourselves by looking at everything we're going to.",
                    "label": 0
                },
                {
                    "sent": "Although you're welcome to explore and play around and ask questions.",
                    "label": 0
                },
                {
                    "sent": "But we're going to focus on the GPU nodes and the GPU nodes on the first phase of this machine.",
                    "label": 0
                },
                {
                    "sent": "It's a brand new machine, so at the moment we have KX 80s, which are the latest greatest NVIDIA GPU's.",
                    "label": 0
                },
                {
                    "sent": "We will very shortly have Pascal nodes in there, which are the newer an an as yet unavailable GPU nodes, but we're going to use the KX 80s and they're on GPU nodes on the machine.",
                    "label": 0
                }
            ]
        },
        "clip_43": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "And we are going to not have to worry about any of the complexity normally have to worry about with a supercomputer.",
                    "label": 0
                },
                {
                    "sent": "So how many of you here have worked on a big HPC platforms before and how to use batch systems?",
                    "label": 0
                },
                {
                    "sent": "Know what batch systems are.",
                    "label": 0
                },
                {
                    "sent": "OK, a fair number of you we're not going to have to deal with the back system at all.",
                    "label": 0
                },
                {
                    "sent": "One of the ideas with bridges is the machine learning community is a lot of a lot of people coming from the laptop world and a workstation world.",
                    "label": 0
                },
                {
                    "sent": "And how powerful of a workstation can buy with my grant money world?",
                    "label": 0
                },
                {
                    "sent": "And that's as far as I'm going to go.",
                    "label": 0
                },
                {
                    "sent": "And so to make those guys have we made this very, very interactive machine?",
                    "label": 0
                },
                {
                    "sent": "I hope you'll appreciate it this week because we'll never have to touch a queuing system when you log on.",
                    "label": 0
                },
                {
                    "sent": "What you will have to type, you'll be on the log.",
                    "label": 0
                },
                {
                    "sent": "I know when you log on, you have to type the command.",
                    "label": 0
                },
                {
                    "sent": "Interact Dash P Space GPU like here and this says give me a GPU just give it to me and let me have it interactive mode like it's my own and I own it.",
                    "label": 0
                },
                {
                    "sent": "You know it's my workstation and then you will find yourself on a GPU node if you get confused at any point in time there by default the command that whoops your command line prompt.",
                    "label": 1
                },
                {
                    "sent": "Your command line prompt when you're on the login node looks like VR 006 or BROO 5, or something like that.",
                    "label": 0
                },
                {
                    "sent": "That's the bridge login known when you actually get interactive GPU node, which you should probably just hang onto for the rest of the day so you know just get one and just let it sit around with your exercises.",
                    "label": 1
                },
                {
                    "sent": "You're welcome to sit on it well between exercises so you don't have to log on and log off of it when you get interactive node.",
                    "label": 1
                },
                {
                    "sent": "It'll say GPU, whatever that tells you you're on a GPU node, so that's what we want to do for exercise.",
                    "label": 0
                }
            ]
        },
        "clip_44": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Is here.",
                    "label": 0
                },
                {
                    "sent": "Predators, by the way, we have Emacs and VI, probably most of you are comfortable with those if you if you're not a Unix person, that's fine too.",
                    "label": 1
                },
                {
                    "sent": "The Nano editor on these machines is incredibly intuitive, straightforward to use, will be fine for all other exercises.",
                    "label": 0
                },
                {
                    "sent": "Just use nano if you're not.",
                    "label": 0
                }
            ]
        },
        "clip_45": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Keymaster by person.",
                    "label": 0
                }
            ]
        },
        "clip_46": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So.",
                    "label": 0
                }
            ]
        },
        "clip_47": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "I'm skipping right ahead here to what matters here, which is the exercises directory that you're about to copy into.",
                    "label": 0
                },
                {
                    "sent": "Your home directory has open ACC folder.",
                    "label": 0
                }
            ]
        },
        "clip_48": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Well, we're going to focus on so there's also open MP versions of it.",
                    "label": 0
                },
                {
                    "sent": "As I already told you, this same code and MPI versions of the same code, and so those of you that are interested will have a chance to compare and contrast.",
                    "label": 0
                },
                {
                    "sent": "And those of you that do the hybrid challenge will be really interesting, 'cause you might use one of those a starting point.",
                    "label": 0
                },
                {
                    "sent": "But we're going to work in the open ACC directory by default for the next day.",
                    "label": 0
                }
            ]
        },
        "clip_49": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "And here is getting all of our nonsense set up right here is not a whole lot to do what we're going to do is we're going to.",
                    "label": 0
                },
                {
                    "sent": "Where is my pencil?",
                    "label": 0
                },
                {
                    "sent": "We're going to not do this.",
                    "label": 0
                },
                {
                    "sent": "We don't need to.",
                    "label": 0
                },
                {
                    "sent": "You're going to log on the bridge is you're going to copy the exercises directory in your home directory.",
                    "label": 1
                },
                {
                    "sent": "You're going to copy the Bash script, so I have set up so you are going to use the PGI compiler for the next day because of no may super compelling reason other than it works great with open ACC and it will allow us to compare it across MPI and open MP without having changed compilers.",
                    "label": 0
                },
                {
                    "sent": "So for those of you that are interested in comparing to things or for those of you that do the hybrid challenge.",
                    "label": 1
                },
                {
                    "sent": "Pgi compilers nice, so we're going to do that.",
                    "label": 0
                },
                {
                    "sent": "I've set all that up for you automatically in the thought bash RC file is a file that runs every time you log onto the machine, so you're going to copy that over as well.",
                    "label": 0
                },
                {
                    "sent": "Then, every time you log on the machine, everything will be set up just fine.",
                    "label": 1
                },
                {
                    "sent": "Whenever you want to grab a GPU node, you can type this interact GPU command right here.",
                    "label": 0
                },
                {
                    "sent": "It'll give you a GPU node and then will compile just right.",
                    "label": 0
                },
                {
                    "sent": "Now to make sure everybody is good, we can compile a test program to make sure everybody is good with compiler and make sure it works.",
                    "label": 0
                },
                {
                    "sent": "So let's step through this sequence right here.",
                    "label": 0
                },
                {
                    "sent": "It should only take us 5 minutes or so to do.",
                    "label": 1
                },
                {
                    "sent": "And make sure everything is good.",
                    "label": 0
                },
                {
                    "sent": "These slides are available there on the wiki.",
                    "label": 0
                },
                {
                    "sent": "No, I heard people saying yes, I see yes is icy nose sounds like.",
                    "label": 0
                },
                {
                    "sent": "Sounds like the definition of wiki is probably not clear to everybody, so.",
                    "label": 0
                },
                {
                    "sent": "11 of you that is staring at it right now.",
                    "label": 0
                },
                {
                    "sent": "If you would be so kind as to to yell out the URL so.",
                    "label": 0
                },
                {
                    "sent": "Or no, OK, everybody seems to be clued in.",
                    "label": 0
                },
                {
                    "sent": "Anybody still doesn't, can't find the wiki slash good, OK?",
                    "label": 0
                }
            ]
        },
        "clip_50": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "OK, So what we will do just for the moment here, because this first exercise is pretty straightforward so I don't feel bad having us do it a little bit slightly awkwardly, which is don't do.",
                    "label": 0
                },
                {
                    "sent": "Don't get on the interactive node then don't ask for GPU node until you actually are ready to run.",
                    "label": 0
                },
                {
                    "sent": "Run it, so let's all have go ahead and do the exercise when you think you've got a working example and you're ready to run, then type interact GPU and run your code and then be nice and get back off, but hopefully within by the time we're done with exercise with the problem solved.",
                    "label": 0
                },
                {
                    "sent": "Does that make sense?",
                    "label": 0
                },
                {
                    "sent": "What I'm telling people to do so you can compile and edit your code and do all the the open ACC stuff on the bridges login node and then when you're ready to run when you've got your aid out sitting there and you want to see how it runs on the GPU type, interact that GPU and then you're on a GPU node.",
                    "label": 0
                },
                {
                    "sent": "Go ahead and run it and see what kind of time you get.",
                    "label": 0
                },
                {
                    "sent": "What kind of results you get, and after you get your time, log back off and let somebody else on because for whatever reason we're we're running into each other.",
                    "label": 0
                },
                {
                    "sent": "But we'll fix that.",
                    "label": 0
                },
                {
                    "sent": "But if you can go ahead 'cause most of you would probably had we not.",
                    "label": 0
                },
                {
                    "sent": "Taking this detour would probably still be in the midst of trying to at least implement a solution to begin with, so let's go ahead and do the exercise you've got.",
                    "label": 1
                },
                {
                    "sent": "Now, the exercises directory open ACC folder.",
                    "label": 0
                },
                {
                    "sent": "In that directory.",
                    "label": 0
                },
                {
                    "sent": "There are solutions, by the way, and for all of these things in there, which you shouldn't have to cheat.",
                    "label": 0
                },
                {
                    "sent": "I think this group, especially nobody, shut the cheat you want to add a directive into your code that will accelerate the code.",
                    "label": 0
                },
                {
                    "sent": "We don't have a lot of directives at hand, so it shouldn't be too confusing to you which one to choose.",
                    "label": 0
                },
                {
                    "sent": "Added directive in.",
                    "label": 0
                },
                {
                    "sent": "Compile it when the compiler is happy with what you were able to compile.",
                    "label": 1
                },
                {
                    "sent": "And so I would recommend that you actually use this.",
                    "label": 0
                }
            ]
        },
        "clip_51": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Dashain Info flag right here we we have everything back on the screen great.",
                    "label": 0
                },
                {
                    "sent": "OK so you can see it you see the whole screen here so when you have here when you're doing this if you use this dash whoops dash M info flag here.",
                    "label": 0
                },
                {
                    "sent": "I think you'll find.",
                    "label": 0
                },
                {
                    "sent": "Find it much more informative so when you can get your code to compile and say accelerator kernel generated like here and it won't be.",
                    "label": 0
                },
                {
                    "sent": "Unfortunately for you won't be color coded.",
                    "label": 0
                },
                {
                    "sent": "You'll have to look for it here, but when it tells you it generated an accelerated kernel, then you know you've got something interesting.",
                    "label": 0
                },
                {
                    "sent": "Then jump on a GPU node, run it and see if you spend it on and Meanwhile will will free up the rest of these.",
                    "label": 0
                },
                {
                    "sent": "GPU is because something stupid is going on, but go ahead and do the exercise and.",
                    "label": 0
                }
            ]
        },
        "clip_52": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And we will let's take about.",
                    "label": 0
                }
            ]
        },
        "clip_53": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "These are general instructions.",
                    "label": 0
                },
                {
                    "sent": "Work will take about 45 minutes to do this.",
                    "label": 0
                },
                {
                    "sent": "By the time we're done with the exercises will have all the GPU's back under our control, yes.",
                    "label": 0
                },
                {
                    "sent": "Sure, I they're still not on the wiki.",
                    "label": 0
                },
                {
                    "sent": "These slides are.",
                    "label": 0
                },
                {
                    "sent": "OK, so yeah, the blue 1 looks like it definitely didn't get there.",
                    "label": 0
                },
                {
                    "sent": "Nobody is firming up but this one now that we're back to the introduction to open ACC this one people are swearing to me is there so that one there so this one with these instructions should be on the wiki so go ahead and find it.",
                    "label": 0
                },
                {
                    "sent": "'cause yeah, it's nice to be able to refer to to commands and previous slides when you're doing this.",
                    "label": 0
                },
                {
                    "sent": "Coding samples here so let me know if you have a problem finding out, but that's absolutely posted.",
                    "label": 0
                },
                {
                    "sent": "Good thumbs up everywhere.",
                    "label": 0
                },
                {
                    "sent": "Wonderful OK good.",
                    "label": 0
                }
            ]
        }
    }
}