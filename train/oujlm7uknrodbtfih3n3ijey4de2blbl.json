{
    "id": "oujlm7uknrodbtfih3n3ijey4de2blbl",
    "title": "Logic in Action",
    "info": {
        "author": [
            "Jan van Eijck, Centrum Wiskunde & Informatica (CWI)"
        ],
        "published": "Sept. 12, 2011",
        "recorded": "August 2011",
        "category": [
            "Top->Computer Science->Logic"
        ]
    },
    "url": "http://videolectures.net/esslli2011_eijck_logic/",
    "segmentation": [
        [
            "OK, since there's only 20 minutes left, I will.",
            "Briefly, connect up to what Young was saying in this single slide, so.",
            "If you want to look at logic from the point of view of computation, and these are notions you would like to compute truth in a model, this is called model checking, satisfiability and survivability checking, and validity checking infects.",
            "What young has been talking about at first when he talked about syllogisms?",
            "Then he talked about like these Venn diagrams and then statements that were true or false in such a picture.",
            "This was.",
            "Model checking, but then the Tableau methods and the validity checking method for.",
            "Syllogisms these for satisfiability and validity checking methods, so for instance with Tableau methods you could see this as a satisfiability check, so you're trying to find a counter model to something so you take the premises and the negation of the Constitution, and then you try to find a model M such that the model makes these premises and the negation of the conclusion too.",
            "If that works out, then you have found your counterexample.",
            "That's the double method.",
            "And validity checking is the inverse of satisfiability checker.",
            "So that's the connection.",
            "OK, so now John has already shown you one computational methods and what I had in mind for slightly more than 20 minutes for us to say something about another method.",
            "Apply this order.",
            "Methods to the case of syllogisms and then finally move on to the general problem of Y predicate logic is not decidable and given general schedule for what's happening, so let's see.",
            "How?"
        ],
        [
            "Far we get fluidity checking into logistics.",
            "Young already gave you some methods by infected defend diagram method.",
            "And there is a key to the reduction to propositional logic, and the fact that if you looked at Young's pictures and you could see that there were several crosses in such a picture, but you only needed one bullet, you only ever only needed one individual to place it somewhere in the tableau or in the in the Venn diagram.",
            "And this is points to very general thing about synergistics.",
            "If a set of syllogistic forms now the forms are the Aristotelian statements.",
            "If such a set is unsatisfiable, then there has to be an existential form.",
            "So he said that together with all the universal forms is unsatisfiable and vice versa.",
            "So you only need a single existential statement.",
            "Combine it with all the universal statements.",
            "To find unsatisfiability so in fact if you would like to test the whole finite set of syllogistic forms, then you would have to take the existential statements one by one and combine them with all the universal statements.",
            "But still this would be fairly efficient and it can be tested with propositional."
        ],
        [
            "Ship OK so this is.",
            "I apologize for this because this is too much text, but OK.",
            "So given that we only talk about a single individual.",
            "And the single individual quality.",
            "It can either have certain properties or it does not have those properties.",
            "Now we can easily reduce the propositional logic, namely.",
            "To express this, this single object extensive property a, we just use to position letter A and a universal statement.",
            "Like all ARB, you now apply it to the single and video.",
            "Now you say that if this individual has property a, then this individual also has property B.",
            "So you say if A, then B.",
            "So you reduce it to professional.",
            "Similarly, some ARB you say that we talk about this single object X if it has property a then it SV so A&B.",
            "Universal negative no ARB.",
            "If it has a then it certainly has not be.",
            "Some A are not B.",
            "The thing has a property A and it does not have property B.",
            "So.",
            "You employ single proposition letters for each property, and there's no existential know exponential blowup here.",
            "So if you have a finite set of syllogistic statements.",
            "And none of them are existential.",
            "Then you will need in test, so you have to combine this.",
            "Each individual existential statement with all of the universal statement.",
            "That would be one test.",
            "And altogether you would have any of those tests.",
            "OK, so how?"
        ],
        [
            "Would this work out now?",
            "I have to tell you something about notation, literals, clauses, and closers, and this is pointing the way towards an efficient way of testing satisfiability for propositional logic.",
            "For a subset of it.",
            "What is a literal?",
            "It's a proposition letter or its negation.",
            "A clause is a set of literals and a closed set is a set of clauses, and the idea is to read a clause as a disjunction and a closed set as a conjunction.",
            "Now, if you compare this to the Tableau methods, then it's kind of jewel thing 'cause what the Tableau method did.",
            "It was constructing branches and the branches conjunctions and like that wasn't a single round was a conjunction.",
            "And the branches themselves for this year.",
            "So yeah, disjunction of a conjunction.",
            "So now here we have conjunction of disjunctions, so a closed form for this.",
            "Conjunction of implications would be like the first clause would be not P together with Q cause P implies Q.",
            "That's equivalent to not P or Q, which is this clause and Q implies R. It's not Q or R. Is this clause and together this is a conjunction.",
            "So it's conjunction of clauses close it."
        ],
        [
            "Now.",
            "Here is a rule 4.",
            "Simplifying.",
            "Close it's and it's called unit propagation, and it's exactly what we need for satisfiability checking for syllogistic's.",
            "And unit propagation works like this.",
            "Look at the members in a closet.",
            "If one member is a Singleton.",
            "And it's you calling the unit then OK, so now remember that these clauses in the closest they express disjunctions.",
            "So if you have this unit, then it's a disjunction with just a single element in it, so that unit has to be true.",
            "Now it means that if this same literal appears somewhere in another clause, then that other clauses trivially also true becausw, like we had a disjunction, we already know that one disjunct has to be true, so it doesn't add any information.",
            "So get rid of it, that's simplification.",
            "So remove every order clause containing this.",
            "Units from the clause sets be cause it has to be true.",
            "We know that these articles have to be true as well because these are disjunctions and no information gets lost by deleting them.",
            "So that's one simplification now.",
            "If you have a literal, then it's made is like if the literal was positive than the mate is negative and vice versa.",
            "So remove the mate of the literal from every clause from which it occurs.",
            "Cause since L has to be true, its negation as to be false, so no information gets loaded.",
            "By deleting this disjunct from the function of the code 'cause we know that's not the guy we need.",
            "OK, now you see that this second step.",
            "It can create other units so you can do unit propagation number of times.",
            "So here's an example.",
            "And the way I talked about this, it should already explain to you that this unit propagation it reduces a clause set to an equivalent losses.",
            "So if the original close and will satisfy aghbal, then the new clause set will also be such farmer, and vice versa.",
            "So nothing is lost, nothing is gained.",
            "But the thing simplifies.",
            "So for instance, here you can take P as a unit.",
            "OK, So what that means is.",
            "OK, so this is made so we have to strike it out so you get this.",
            "And here it occurs again.",
            "So we can delete this whole thing and here we can't do anything.",
            "So we get a new clothes sets which P was still there as units.",
            "Now we have created a new unit and this remains.",
            "OK, so now we can apply unit propagation again, but now for Q.",
            "Now it means that we can remove this.",
            "It's made here so we get.",
            "Singleton P, Singleton Q, Singleton R and this will mean that this original thing.",
            "It has only one satisfying valuation nammack devaluation, where you make P through Q2 and R2.",
            "So this is a way of simplifying close.",
            "It's in such a way that you work your way towards close sets where you can read off the satisfying valuations.",
            "This will not always work, but it will work when the closers are nice.",
            "And now I have to show that if you start with.",
            "The problem of syllogistic.",
            "Then you get nice clauses."
        ],
        [
            "And nice closers are closer to door in the horn.",
            "Fragmente the horn fragment of propositional logic.",
            "This is all close sets where every clause has at most one positive little.",
            "So there could be lots of negative literals, but like if there are positive literacy in close, then there can be only one.",
            "Um?",
            "If unit propagation yields are closers, in which units like there are made occur, then the original cloth sets uncertified certifiable.",
            "Otherwise, the units in the results determine a satisfying valuation.",
            "OK, so now.",
            "Like in the recipe, it spelled out here, but I applied it already in the previous slide.",
            "Like if you have these units, then their proposition letter F to be mapped to the truth value.",
            "That makes the little true and all other proposition that's meant to force.",
            "Now the problem of testing satisfiability for syllogistic forms.",
            "If they contain exactly 1 existential statement, then you can translate them to the whole fragmente.",
            "And."
        ],
        [
            "Just to check that you have to look at all the cases so no ARB, it would be the implication A implies B or equivalent like it would be a closed set with a single clause and there's only one positive little.",
            "So let's horn the second one.",
            "A implies not be close set with two negative clause with two negative literals.",
            "So at most impulsive little some A are B now.",
            "The closest with two clauses and each of them have a positive literal, but it occurs only by itself, so it's again in the horn format and not all ARB is conjunction A and not B2 clauses, one with unit A and one with the unit not be as again in the horn format.",
            "So all these sensations are in the horn fragment and we can do efficient satisfiability checking.",
            "Open.",
            "No, no it can be at most one positive at most one positive little.",
            "Yeah, so there could be more negative literals, but there can't be more positive ones, so this is still OK. And this means that the unit propagation rule work sufficiently here."
        ],
        [
            "OK, so now what I did is this is for those of you who are little bit familiar with programming so.",
            "It is a very nice functional programming language, Hesco, which I invite you to have look at.",
            "I have made an implementation of this method in Haskell and.",
            "I will put the code on the course website and the interesting thing about this is this is a variation on something that we do for the computation of semantic scores next week.",
            "Then I have another method for doing this same satisfiability problem and it turns out that the present methods is more efficient than the official method from from the other cores.",
            "So I would invite you to look at these.",
            "And compare them.",
            "I can show you a little bit of the code.",
            "Who of you is familiar with functional programming.",
            "A few people, yes, OK, so then it's for those and not for the others we cause like.",
            "Like once you get the hang of this language then you will find it marvelous, but it may take you some time."
        ],
        [
            "OK, so I'll give you a code snippet to give you an idea of OK so.",
            "Has unit propagation and unit P. Let's look at the second One South unit P. It says this is a function.",
            "It takes 1 little.",
            "It will take a clause and it will produce a list of clauses and now the first line gives the type for the function and the rest gives the implementation.",
            "Now unit P. Now X is the literal and wise is.",
            "It's now it's a list of letters because it's close now, so you can ask yourself whether X is a member of wise, because the types are correct.",
            "'cause the typing is like this, you start out with.",
            "OK, so.",
            "You define auto literalists and then you say a close.",
            "We define it as a list of literals.",
            "And then a clause set will be a list of clauses.",
            "So now in the implementation you work with these things.",
            "'cause these are the cloth sets and there's these, like represent propositional formulas.",
            "But you build it up like this.",
            "OK, so now if X is an element.",
            "Of your claws then?",
            "You return the empty clause.",
            "This corresponds to saying that like.",
            "If.",
            "X is my unit and I already know that this is true.",
            "Then any other disjunct can be removed?",
            "Now if.",
            "So the negation of my unit is an element of wise or if the negation of my unit is in the clause then.",
            "Delete that from the claws and return that.",
            "Otherwise do nothing.",
            "So this is exactly what unit propagation does, so I take my unit if I find any clause that has that unit in it, remove it.",
            "If I get find any clause that has the negation of the units in it, then remove that negation.",
            "That's what this says.",
            "Otherwise is nothing.",
            "So this is like the core of the infant.",
            "Inference engine for unit propagation, and this is built into the implementation.",
            "OK, so now I think.",
            "We have to leave it at this for now, so I'll just tell you what I had in mind for the other things that I wanted to talk about.",
            "OK so from here.",
            "This is propositional logic from here to predicate logic, it's.",
            "A single step of adding.",
            "To these clauses, informations about constants and variables and then.",
            "To do unit propagation and in general resolution for predicate logic would also give you a method for satisfiability testing.",
            "Again, this is a method that has the same floor as the Tableau method, so it's like if you can compute counterexamples, and if it says there is no counterexample, then that claim is correct, but sometimes it doesn't terminate, so.",
            "The final part of my story would then be like why is that ever the case?",
            "So look whatever method to be invented for predicate logic.",
            "Why is it never a decision method?",
            "And this has to do with the fact that predicate logic is so expressive that you can express if you can express dangerous things in it, you can.",
            "And like most famous example of a dangerous thing is the whole thing statement.",
            "So the statement that certain Turing machine does not hold on certain input.",
            "Now I have slides on though, so I will decide whether to talk about this tomorrow a little bit or otherwise.",
            "I'll just put the slides on the website so you will see that tomorrow and I will also put this piece of code on the Internet for some of you to explore it and tomorrow.",
            "Maybe a little bit more about computation and then onto epistemic logic, thanks."
        ]
    ],
    "summarization": {
        "clip_0": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "OK, since there's only 20 minutes left, I will.",
                    "label": 0
                },
                {
                    "sent": "Briefly, connect up to what Young was saying in this single slide, so.",
                    "label": 0
                },
                {
                    "sent": "If you want to look at logic from the point of view of computation, and these are notions you would like to compute truth in a model, this is called model checking, satisfiability and survivability checking, and validity checking infects.",
                    "label": 0
                },
                {
                    "sent": "What young has been talking about at first when he talked about syllogisms?",
                    "label": 0
                },
                {
                    "sent": "Then he talked about like these Venn diagrams and then statements that were true or false in such a picture.",
                    "label": 0
                },
                {
                    "sent": "This was.",
                    "label": 0
                },
                {
                    "sent": "Model checking, but then the Tableau methods and the validity checking method for.",
                    "label": 0
                },
                {
                    "sent": "Syllogisms these for satisfiability and validity checking methods, so for instance with Tableau methods you could see this as a satisfiability check, so you're trying to find a counter model to something so you take the premises and the negation of the Constitution, and then you try to find a model M such that the model makes these premises and the negation of the conclusion too.",
                    "label": 0
                },
                {
                    "sent": "If that works out, then you have found your counterexample.",
                    "label": 0
                },
                {
                    "sent": "That's the double method.",
                    "label": 0
                },
                {
                    "sent": "And validity checking is the inverse of satisfiability checker.",
                    "label": 0
                },
                {
                    "sent": "So that's the connection.",
                    "label": 0
                },
                {
                    "sent": "OK, so now John has already shown you one computational methods and what I had in mind for slightly more than 20 minutes for us to say something about another method.",
                    "label": 0
                },
                {
                    "sent": "Apply this order.",
                    "label": 0
                },
                {
                    "sent": "Methods to the case of syllogisms and then finally move on to the general problem of Y predicate logic is not decidable and given general schedule for what's happening, so let's see.",
                    "label": 0
                },
                {
                    "sent": "How?",
                    "label": 0
                }
            ]
        },
        "clip_1": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Far we get fluidity checking into logistics.",
                    "label": 0
                },
                {
                    "sent": "Young already gave you some methods by infected defend diagram method.",
                    "label": 0
                },
                {
                    "sent": "And there is a key to the reduction to propositional logic, and the fact that if you looked at Young's pictures and you could see that there were several crosses in such a picture, but you only needed one bullet, you only ever only needed one individual to place it somewhere in the tableau or in the in the Venn diagram.",
                    "label": 0
                },
                {
                    "sent": "And this is points to very general thing about synergistics.",
                    "label": 0
                },
                {
                    "sent": "If a set of syllogistic forms now the forms are the Aristotelian statements.",
                    "label": 0
                },
                {
                    "sent": "If such a set is unsatisfiable, then there has to be an existential form.",
                    "label": 0
                },
                {
                    "sent": "So he said that together with all the universal forms is unsatisfiable and vice versa.",
                    "label": 0
                },
                {
                    "sent": "So you only need a single existential statement.",
                    "label": 0
                },
                {
                    "sent": "Combine it with all the universal statements.",
                    "label": 0
                },
                {
                    "sent": "To find unsatisfiability so in fact if you would like to test the whole finite set of syllogistic forms, then you would have to take the existential statements one by one and combine them with all the universal statements.",
                    "label": 0
                },
                {
                    "sent": "But still this would be fairly efficient and it can be tested with propositional.",
                    "label": 0
                }
            ]
        },
        "clip_2": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Ship OK so this is.",
                    "label": 0
                },
                {
                    "sent": "I apologize for this because this is too much text, but OK.",
                    "label": 0
                },
                {
                    "sent": "So given that we only talk about a single individual.",
                    "label": 0
                },
                {
                    "sent": "And the single individual quality.",
                    "label": 0
                },
                {
                    "sent": "It can either have certain properties or it does not have those properties.",
                    "label": 0
                },
                {
                    "sent": "Now we can easily reduce the propositional logic, namely.",
                    "label": 1
                },
                {
                    "sent": "To express this, this single object extensive property a, we just use to position letter A and a universal statement.",
                    "label": 0
                },
                {
                    "sent": "Like all ARB, you now apply it to the single and video.",
                    "label": 0
                },
                {
                    "sent": "Now you say that if this individual has property a, then this individual also has property B.",
                    "label": 0
                },
                {
                    "sent": "So you say if A, then B.",
                    "label": 0
                },
                {
                    "sent": "So you reduce it to professional.",
                    "label": 0
                },
                {
                    "sent": "Similarly, some ARB you say that we talk about this single object X if it has property a then it SV so A&B.",
                    "label": 0
                },
                {
                    "sent": "Universal negative no ARB.",
                    "label": 0
                },
                {
                    "sent": "If it has a then it certainly has not be.",
                    "label": 0
                },
                {
                    "sent": "Some A are not B.",
                    "label": 0
                },
                {
                    "sent": "The thing has a property A and it does not have property B.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "You employ single proposition letters for each property, and there's no existential know exponential blowup here.",
                    "label": 0
                },
                {
                    "sent": "So if you have a finite set of syllogistic statements.",
                    "label": 1
                },
                {
                    "sent": "And none of them are existential.",
                    "label": 1
                },
                {
                    "sent": "Then you will need in test, so you have to combine this.",
                    "label": 0
                },
                {
                    "sent": "Each individual existential statement with all of the universal statement.",
                    "label": 0
                },
                {
                    "sent": "That would be one test.",
                    "label": 0
                },
                {
                    "sent": "And altogether you would have any of those tests.",
                    "label": 0
                },
                {
                    "sent": "OK, so how?",
                    "label": 0
                }
            ]
        },
        "clip_3": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Would this work out now?",
                    "label": 0
                },
                {
                    "sent": "I have to tell you something about notation, literals, clauses, and closers, and this is pointing the way towards an efficient way of testing satisfiability for propositional logic.",
                    "label": 1
                },
                {
                    "sent": "For a subset of it.",
                    "label": 0
                },
                {
                    "sent": "What is a literal?",
                    "label": 1
                },
                {
                    "sent": "It's a proposition letter or its negation.",
                    "label": 1
                },
                {
                    "sent": "A clause is a set of literals and a closed set is a set of clauses, and the idea is to read a clause as a disjunction and a closed set as a conjunction.",
                    "label": 1
                },
                {
                    "sent": "Now, if you compare this to the Tableau methods, then it's kind of jewel thing 'cause what the Tableau method did.",
                    "label": 1
                },
                {
                    "sent": "It was constructing branches and the branches conjunctions and like that wasn't a single round was a conjunction.",
                    "label": 1
                },
                {
                    "sent": "And the branches themselves for this year.",
                    "label": 0
                },
                {
                    "sent": "So yeah, disjunction of a conjunction.",
                    "label": 0
                },
                {
                    "sent": "So now here we have conjunction of disjunctions, so a closed form for this.",
                    "label": 0
                },
                {
                    "sent": "Conjunction of implications would be like the first clause would be not P together with Q cause P implies Q.",
                    "label": 0
                },
                {
                    "sent": "That's equivalent to not P or Q, which is this clause and Q implies R. It's not Q or R. Is this clause and together this is a conjunction.",
                    "label": 0
                },
                {
                    "sent": "So it's conjunction of clauses close it.",
                    "label": 0
                }
            ]
        },
        "clip_4": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Now.",
                    "label": 0
                },
                {
                    "sent": "Here is a rule 4.",
                    "label": 1
                },
                {
                    "sent": "Simplifying.",
                    "label": 0
                },
                {
                    "sent": "Close it's and it's called unit propagation, and it's exactly what we need for satisfiability checking for syllogistic's.",
                    "label": 0
                },
                {
                    "sent": "And unit propagation works like this.",
                    "label": 0
                },
                {
                    "sent": "Look at the members in a closet.",
                    "label": 0
                },
                {
                    "sent": "If one member is a Singleton.",
                    "label": 0
                },
                {
                    "sent": "And it's you calling the unit then OK, so now remember that these clauses in the closest they express disjunctions.",
                    "label": 1
                },
                {
                    "sent": "So if you have this unit, then it's a disjunction with just a single element in it, so that unit has to be true.",
                    "label": 0
                },
                {
                    "sent": "Now it means that if this same literal appears somewhere in another clause, then that other clauses trivially also true becausw, like we had a disjunction, we already know that one disjunct has to be true, so it doesn't add any information.",
                    "label": 0
                },
                {
                    "sent": "So get rid of it, that's simplification.",
                    "label": 0
                },
                {
                    "sent": "So remove every order clause containing this.",
                    "label": 1
                },
                {
                    "sent": "Units from the clause sets be cause it has to be true.",
                    "label": 0
                },
                {
                    "sent": "We know that these articles have to be true as well because these are disjunctions and no information gets lost by deleting them.",
                    "label": 1
                },
                {
                    "sent": "So that's one simplification now.",
                    "label": 0
                },
                {
                    "sent": "If you have a literal, then it's made is like if the literal was positive than the mate is negative and vice versa.",
                    "label": 1
                },
                {
                    "sent": "So remove the mate of the literal from every clause from which it occurs.",
                    "label": 0
                },
                {
                    "sent": "Cause since L has to be true, its negation as to be false, so no information gets loaded.",
                    "label": 0
                },
                {
                    "sent": "By deleting this disjunct from the function of the code 'cause we know that's not the guy we need.",
                    "label": 0
                },
                {
                    "sent": "OK, now you see that this second step.",
                    "label": 0
                },
                {
                    "sent": "It can create other units so you can do unit propagation number of times.",
                    "label": 1
                },
                {
                    "sent": "So here's an example.",
                    "label": 0
                },
                {
                    "sent": "And the way I talked about this, it should already explain to you that this unit propagation it reduces a clause set to an equivalent losses.",
                    "label": 0
                },
                {
                    "sent": "So if the original close and will satisfy aghbal, then the new clause set will also be such farmer, and vice versa.",
                    "label": 0
                },
                {
                    "sent": "So nothing is lost, nothing is gained.",
                    "label": 0
                },
                {
                    "sent": "But the thing simplifies.",
                    "label": 0
                },
                {
                    "sent": "So for instance, here you can take P as a unit.",
                    "label": 0
                },
                {
                    "sent": "OK, So what that means is.",
                    "label": 0
                },
                {
                    "sent": "OK, so this is made so we have to strike it out so you get this.",
                    "label": 0
                },
                {
                    "sent": "And here it occurs again.",
                    "label": 0
                },
                {
                    "sent": "So we can delete this whole thing and here we can't do anything.",
                    "label": 0
                },
                {
                    "sent": "So we get a new clothes sets which P was still there as units.",
                    "label": 0
                },
                {
                    "sent": "Now we have created a new unit and this remains.",
                    "label": 0
                },
                {
                    "sent": "OK, so now we can apply unit propagation again, but now for Q.",
                    "label": 0
                },
                {
                    "sent": "Now it means that we can remove this.",
                    "label": 0
                },
                {
                    "sent": "It's made here so we get.",
                    "label": 0
                },
                {
                    "sent": "Singleton P, Singleton Q, Singleton R and this will mean that this original thing.",
                    "label": 0
                },
                {
                    "sent": "It has only one satisfying valuation nammack devaluation, where you make P through Q2 and R2.",
                    "label": 0
                },
                {
                    "sent": "So this is a way of simplifying close.",
                    "label": 0
                },
                {
                    "sent": "It's in such a way that you work your way towards close sets where you can read off the satisfying valuations.",
                    "label": 0
                },
                {
                    "sent": "This will not always work, but it will work when the closers are nice.",
                    "label": 0
                },
                {
                    "sent": "And now I have to show that if you start with.",
                    "label": 0
                },
                {
                    "sent": "The problem of syllogistic.",
                    "label": 0
                },
                {
                    "sent": "Then you get nice clauses.",
                    "label": 0
                }
            ]
        },
        "clip_5": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And nice closers are closer to door in the horn.",
                    "label": 0
                },
                {
                    "sent": "Fragmente the horn fragment of propositional logic.",
                    "label": 0
                },
                {
                    "sent": "This is all close sets where every clause has at most one positive little.",
                    "label": 0
                },
                {
                    "sent": "So there could be lots of negative literals, but like if there are positive literacy in close, then there can be only one.",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "If unit propagation yields are closers, in which units like there are made occur, then the original cloth sets uncertified certifiable.",
                    "label": 0
                },
                {
                    "sent": "Otherwise, the units in the results determine a satisfying valuation.",
                    "label": 0
                },
                {
                    "sent": "OK, so now.",
                    "label": 0
                },
                {
                    "sent": "Like in the recipe, it spelled out here, but I applied it already in the previous slide.",
                    "label": 0
                },
                {
                    "sent": "Like if you have these units, then their proposition letter F to be mapped to the truth value.",
                    "label": 0
                },
                {
                    "sent": "That makes the little true and all other proposition that's meant to force.",
                    "label": 0
                },
                {
                    "sent": "Now the problem of testing satisfiability for syllogistic forms.",
                    "label": 0
                },
                {
                    "sent": "If they contain exactly 1 existential statement, then you can translate them to the whole fragmente.",
                    "label": 0
                },
                {
                    "sent": "And.",
                    "label": 0
                }
            ]
        },
        "clip_6": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Just to check that you have to look at all the cases so no ARB, it would be the implication A implies B or equivalent like it would be a closed set with a single clause and there's only one positive little.",
                    "label": 0
                },
                {
                    "sent": "So let's horn the second one.",
                    "label": 0
                },
                {
                    "sent": "A implies not be close set with two negative clause with two negative literals.",
                    "label": 0
                },
                {
                    "sent": "So at most impulsive little some A are B now.",
                    "label": 0
                },
                {
                    "sent": "The closest with two clauses and each of them have a positive literal, but it occurs only by itself, so it's again in the horn format and not all ARB is conjunction A and not B2 clauses, one with unit A and one with the unit not be as again in the horn format.",
                    "label": 1
                },
                {
                    "sent": "So all these sensations are in the horn fragment and we can do efficient satisfiability checking.",
                    "label": 0
                },
                {
                    "sent": "Open.",
                    "label": 0
                },
                {
                    "sent": "No, no it can be at most one positive at most one positive little.",
                    "label": 1
                },
                {
                    "sent": "Yeah, so there could be more negative literals, but there can't be more positive ones, so this is still OK. And this means that the unit propagation rule work sufficiently here.",
                    "label": 0
                }
            ]
        },
        "clip_7": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "OK, so now what I did is this is for those of you who are little bit familiar with programming so.",
                    "label": 0
                },
                {
                    "sent": "It is a very nice functional programming language, Hesco, which I invite you to have look at.",
                    "label": 0
                },
                {
                    "sent": "I have made an implementation of this method in Haskell and.",
                    "label": 0
                },
                {
                    "sent": "I will put the code on the course website and the interesting thing about this is this is a variation on something that we do for the computation of semantic scores next week.",
                    "label": 0
                },
                {
                    "sent": "Then I have another method for doing this same satisfiability problem and it turns out that the present methods is more efficient than the official method from from the other cores.",
                    "label": 0
                },
                {
                    "sent": "So I would invite you to look at these.",
                    "label": 0
                },
                {
                    "sent": "And compare them.",
                    "label": 0
                },
                {
                    "sent": "I can show you a little bit of the code.",
                    "label": 0
                },
                {
                    "sent": "Who of you is familiar with functional programming.",
                    "label": 0
                },
                {
                    "sent": "A few people, yes, OK, so then it's for those and not for the others we cause like.",
                    "label": 0
                },
                {
                    "sent": "Like once you get the hang of this language then you will find it marvelous, but it may take you some time.",
                    "label": 0
                }
            ]
        },
        "clip_8": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "OK, so I'll give you a code snippet to give you an idea of OK so.",
                    "label": 0
                },
                {
                    "sent": "Has unit propagation and unit P. Let's look at the second One South unit P. It says this is a function.",
                    "label": 0
                },
                {
                    "sent": "It takes 1 little.",
                    "label": 0
                },
                {
                    "sent": "It will take a clause and it will produce a list of clauses and now the first line gives the type for the function and the rest gives the implementation.",
                    "label": 0
                },
                {
                    "sent": "Now unit P. Now X is the literal and wise is.",
                    "label": 0
                },
                {
                    "sent": "It's now it's a list of letters because it's close now, so you can ask yourself whether X is a member of wise, because the types are correct.",
                    "label": 0
                },
                {
                    "sent": "'cause the typing is like this, you start out with.",
                    "label": 0
                },
                {
                    "sent": "OK, so.",
                    "label": 0
                },
                {
                    "sent": "You define auto literalists and then you say a close.",
                    "label": 0
                },
                {
                    "sent": "We define it as a list of literals.",
                    "label": 0
                },
                {
                    "sent": "And then a clause set will be a list of clauses.",
                    "label": 0
                },
                {
                    "sent": "So now in the implementation you work with these things.",
                    "label": 1
                },
                {
                    "sent": "'cause these are the cloth sets and there's these, like represent propositional formulas.",
                    "label": 0
                },
                {
                    "sent": "But you build it up like this.",
                    "label": 0
                },
                {
                    "sent": "OK, so now if X is an element.",
                    "label": 0
                },
                {
                    "sent": "Of your claws then?",
                    "label": 0
                },
                {
                    "sent": "You return the empty clause.",
                    "label": 0
                },
                {
                    "sent": "This corresponds to saying that like.",
                    "label": 0
                },
                {
                    "sent": "If.",
                    "label": 0
                },
                {
                    "sent": "X is my unit and I already know that this is true.",
                    "label": 0
                },
                {
                    "sent": "Then any other disjunct can be removed?",
                    "label": 0
                },
                {
                    "sent": "Now if.",
                    "label": 0
                },
                {
                    "sent": "So the negation of my unit is an element of wise or if the negation of my unit is in the clause then.",
                    "label": 0
                },
                {
                    "sent": "Delete that from the claws and return that.",
                    "label": 0
                },
                {
                    "sent": "Otherwise do nothing.",
                    "label": 0
                },
                {
                    "sent": "So this is exactly what unit propagation does, so I take my unit if I find any clause that has that unit in it, remove it.",
                    "label": 0
                },
                {
                    "sent": "If I get find any clause that has the negation of the units in it, then remove that negation.",
                    "label": 0
                },
                {
                    "sent": "That's what this says.",
                    "label": 0
                },
                {
                    "sent": "Otherwise is nothing.",
                    "label": 0
                },
                {
                    "sent": "So this is like the core of the infant.",
                    "label": 0
                },
                {
                    "sent": "Inference engine for unit propagation, and this is built into the implementation.",
                    "label": 0
                },
                {
                    "sent": "OK, so now I think.",
                    "label": 0
                },
                {
                    "sent": "We have to leave it at this for now, so I'll just tell you what I had in mind for the other things that I wanted to talk about.",
                    "label": 0
                },
                {
                    "sent": "OK so from here.",
                    "label": 0
                },
                {
                    "sent": "This is propositional logic from here to predicate logic, it's.",
                    "label": 0
                },
                {
                    "sent": "A single step of adding.",
                    "label": 0
                },
                {
                    "sent": "To these clauses, informations about constants and variables and then.",
                    "label": 0
                },
                {
                    "sent": "To do unit propagation and in general resolution for predicate logic would also give you a method for satisfiability testing.",
                    "label": 0
                },
                {
                    "sent": "Again, this is a method that has the same floor as the Tableau method, so it's like if you can compute counterexamples, and if it says there is no counterexample, then that claim is correct, but sometimes it doesn't terminate, so.",
                    "label": 0
                },
                {
                    "sent": "The final part of my story would then be like why is that ever the case?",
                    "label": 0
                },
                {
                    "sent": "So look whatever method to be invented for predicate logic.",
                    "label": 0
                },
                {
                    "sent": "Why is it never a decision method?",
                    "label": 0
                },
                {
                    "sent": "And this has to do with the fact that predicate logic is so expressive that you can express if you can express dangerous things in it, you can.",
                    "label": 0
                },
                {
                    "sent": "And like most famous example of a dangerous thing is the whole thing statement.",
                    "label": 0
                },
                {
                    "sent": "So the statement that certain Turing machine does not hold on certain input.",
                    "label": 0
                },
                {
                    "sent": "Now I have slides on though, so I will decide whether to talk about this tomorrow a little bit or otherwise.",
                    "label": 0
                },
                {
                    "sent": "I'll just put the slides on the website so you will see that tomorrow and I will also put this piece of code on the Internet for some of you to explore it and tomorrow.",
                    "label": 1
                },
                {
                    "sent": "Maybe a little bit more about computation and then onto epistemic logic, thanks.",
                    "label": 0
                }
            ]
        }
    }
}