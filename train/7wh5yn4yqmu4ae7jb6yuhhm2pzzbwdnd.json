{
    "id": "7wh5yn4yqmu4ae7jb6yuhhm2pzzbwdnd",
    "title": "Computer Verified Exact Analysis",
    "info": {
        "author": [
            "Bas Spitters, Institute of Computing and Information Sciences, Radboud University Nijmegen",
            "Russell O'Connor, Institute of Computing and Information Sciences, Radboud University Nijmegen"
        ],
        "published": "Aug. 24, 2009",
        "recorded": "August 2009",
        "category": [
            "Top->Computer Science->Logic"
        ]
    },
    "url": "http://videolectures.net/aug09_spitters_oconnor_cvia/",
    "segmentation": [
        [
            "So this is joint work together with Russell O'Connor who's sitting here, so he has.",
            "So I'm going to talk about computer verified implementation of analysis."
        ],
        [
            "An so let me first announce that 5th of October does the PGF defense of Russell, an editor that there will be a workshop with a number of interesting speakers.",
            "I just"
        ],
        [
            "No, but any will actually speak, so it's very good.",
            "So we have three hours.",
            "So first thing this will be a very high level introduction and I hope it will be at the right level that Andre ask you.",
            "So I will mainly show you the domain IDs, then the second part will be actually hands-on experience and you can really ask a lot of questions about what is what's going on precisely.",
            "And then we'll have more to share what we actually did, and this is implementing plots an Riemann integration.",
            "So the two motivations for this kind of work.",
            "One is to have provably correct implementation of computations with real numbers, and more generally continuous structures and the other one is to have computer referees.",
            "If you want this word offends some people, but it's it helps you to every actually referee a paper for computer proofs.",
            "Anne Anne our way into this research is.",
            "We go from the theory towards the actual practice."
        ],
        [
            "Most of you will notice, but if you implement real numbers on a computer then you can do first started floating point real numbers with a fixed precision an if you're slightly more funds than use multi precision floats and this has been implemented.",
            "I mean they're very nice packages for this MP of ours one.",
            "Then you can go to intervals if you want to have if we want to keep track of the error that you make and then you take a package like MPF I.",
            "And so a multi position float is just a number like this you have.",
            "Some exponent here an A number there and these numbers are only bounded by the memory size of your computer."
        ],
        [
            "So.",
            "To actually avoid two rounding errors, or more precisely, to keep track of these errors, you use intervals and we'll hear more about this later on.",
            "Yes.",
            "Do you have an idea of how much slower and my phone is too?",
            "No, but nobody will know.",
            "Not exactly.",
            "So I don't have to be ashamed that I don't know."
        ],
        [
            "And then we have these very nice packages like Iran made by Norbert Mueller an RLP."
        ],
        [
            "Anne.",
            "Using intervals we only specify the input precision, so we say, well, this is the position that we know and then the computer keeps track of the error that we make and instead for extract real numbers.",
            "What you want to do is you give the output precision and then the computer will make sure that you get this kind of precision."
        ],
        [
            "And there's a.",
            "So maybe this is one step towards your answer.",
            "I don't know whether North agrees with this, but real IP claims to be only three times slower than what you can do with Floating Points operations.",
            "But we'll hear more about this, I guess in Orbitz talk.",
            "So an exact real number, we just see it as a Cauchy sequence that there are other ways of doing this.",
            "So we just have a computer program which on input N returns an output with precision.",
            "Question yes.",
            "Go back to this time which will be requested or impose with that position.",
            "Um?"
        ],
        [
            "So this is my next slide, so this theory using Cauchy sequences it can be used for all these things.",
            "So basically, how far can you go?",
            "So you basically use a complete separable metric space.",
            "So dense set can be represented directly on a computer, and then these limits are computer programs for the Cauchy sequences.",
            "So examples include, well, you know these examples continuous functions from, say, the unit interval to realign integrable functions C modulo null sets, Hilbert spaces, Banach spaces.",
            "This is one of the things we will use later on, so the metric space of all compact sets in the plane, say with the Hausdorff metric.",
            "This will use too.",
            "Actually plot cross functions.",
            "It is.",
            "OK, So what we're going to use is.",
            "Constructive constructive media theory.",
            "So this word computer program is kept track for us automatically.",
            "So I'm just going to say.",
            "Cauchy sequence, and then I'm going to use a realizability interpretation, and this realizability interpretation will make sure that we actually have a computer program or I'm going to use Curry Howard to actually get a computational interpretation of for this.",
            "So I think."
        ],
        [
            "This is my next slide.",
            "Yes.",
            "So this is my next slide, but yes, so I expected this question, especially because Klaus is here.",
            "So we're using informal, constructive mathematics an we're going to make this precise later on, so so up to this level, everything is informal.",
            "So you can compare this to using Pte via realizability, something that Andre has worked out very nicely.",
            "So at this point of the description, we don't distinguish between Turing compute ability and type 2 compute ability.",
            "Actually everything I'm going to say can be interpreted by realizability interpretation.",
            "In both of these frameworks.",
            "So at this point I don't need the distinction between those two frameworks.",
            "I'll say more about this later on."
        ],
        [
            "So thank you for the question.",
            "So why do we want to use xact analysis?",
            "So it gives you convenience of programming at a small cost.",
            "It gives you data types.",
            "For instance, you can say let H be a subspace.",
            "So this is something that is very inconvenient if you use standard.",
            "Numerics packages because then you can just talk about matrices and not about the actual infinite spaces, and this is good for maintainability.",
            "So if the software is easier to read if there all kinds of invariants that you're actually able to state and able to enforce biotype regime, then it's easier to maintain, especially if someone else has written it then it's very nice, so I may trust my own code, but not someone elses code, and we've done some experiments with parallel computation.",
            "And actually, it happens that if you do functional programming, it seems to work very nicely on multiple machines, so I'll talk about."
        ],
        [
            "Small later on.",
            "This is also the emerging standard of rigor for computer proof, so if you use computers to prove theorems, I'll go into this in a month minute.",
            "Then you also want to have a computer checked.",
            "At a computer to check that your proof is actually correct.",
            "So this is my next slide."
        ],
        [
            "So first I'll tell you about how I want to do this, so our proposal is to use constructive analysis based on type theory.",
            "For computer right implementation of Numerics N as a basis for computer proof.",
            "So we really have those two motivations in our in the back of our minds all the time."
        ],
        [
            "So as I said, we have this emerging standard of rigor for computer proofs, so.",
            "There more and more computer proof, so you use computers to prove theorems.",
            "Probably the most famous computer proof is to prove it to four color theorem.",
            "You look at a map of the world, say and you try to.",
            "I always did this in in high school.",
            "I tried to call out the Maps and then you see well, I only I only need four colors and this is actually a theorem and this theorem has been proved by a computer or actually it has been reduced to a finite number of cases and then the computer checks all these cases.",
            "And there's no way to actually.",
            "Make sure that the proof is correct without running the program.",
            "So why is this a proof?",
            "Another one famous one is the Kepler conjecture.",
            "So you look at these cannonballs or oranges or sweers and you want to pick them and see you want to pick them as tightly as possible.",
            "So the question is, is the obvious thing you try in the supermarket?",
            "Is this the best way of doing it?",
            "And the answer is yes, and this has been proved by Tom Hills.",
            "Um?",
            "Another one is the existence of gales, and this is one of the.",
            "This occurred on on smells list of open problems in mathematics and the typical approach to search proves is that the computer checks are large but finite number of cases.",
            "The computer finds certain bounds for certain computations.",
            "Anne.",
            "But there's no way to actually."
        ],
        [
            "Verify these independently.",
            "So the computer.",
            "So.",
            "What recently has been done and this is also what we started to do is to use computer verified proofs of correctness of these computations.",
            "So computer proofs reserve computer referees."
        ],
        [
            "Anne, this has also been picked up by the AMS, the American Mathematical Society.",
            "So here's the I really recommend this.",
            "This issue of the AMS notices.",
            "So it has four very nice papers on formal proof, formal proof of the four color theorem.",
            "In practice, an getting started.",
            "This was actually written by our colleague Fredeick and you get beautiful pictures like this and this is a new mathematical structure that came up in the computer.",
            "Proof of the four color theorem, just so.",
            "This actually shows that.",
            "If you do computer proofs, you actually find new mathematical structure, and this is also something that I want to emphasize.",
            "You rethink what you're doing, and then you find new mathematical structure."
        ],
        [
            "So what does such a proof assistant look like on a very high level?",
            "So.",
            "That the ideal way of not all persistence are designed is sorry, but the modern ones are usually designed in this way.",
            "You have a small trusted core, say set theory or type theory or whatever you want to take us a foundation for mathematics.",
            "And this can be expected by inspected by hand.",
            "You can test it, you can run it on all kinds of examples.",
            "Typically you would have a few 100,000 users, so if no one finds an error, it's probably it's unlikely that there's a big mistake in the implementation.",
            "John Harrison, for instance, has started to prove that in his own system that he started to bootstrap this method.",
            "So you actually use the system to prove that it's correct itself.",
            "Of course, you cannot really do this because Google shows that you cannot, but you can get very close.",
            "So this is what you also also do with compilers for programming.",
            "Language is one of the first things you try is to Candace.",
            "Compiler actually compile itself, so the same thing is going on improve assistance.",
            "If you want to have a very nice overview, then look at the Hills notes this article.",
            "So on top of this small trusted core, you built a library of mathematics and computer tricks, checks that you actually did this big building you build on top of this core actually is correctly reduced to the core.",
            "So one should trust.",
            "The.",
            "The core and you check that the reduction is correct or you make your own your own separate implementation of this reduction.",
            "Then you can see that the whole library is X."
        ],
        [
            "Correct?",
            "So now some mathematicians feel offended or threatened by this.",
            "This idea of using or giving away our our command of the proofs to a computer.",
            "So here I want to say that usually proves serves two purposes.",
            "One is you want to convey understanding and the other one is you want to certify correctness.",
            "And usually if I refereeing a paper, I'm not so very interested if it's correct.",
            "I mean going along all the details.",
            "It's boring work that needs to be done, but it's not what I get most out of.",
            "I want to see well why is it true?",
            "But so it would be very nice if I get a paper to referee that together with this I get a computer proof that is actually all the technical details workout.",
            "I only have to look at.",
            "Well this is new.",
            "Is this interesting?",
            "This is give us new ID's.",
            "Um?",
            "And the computers like this is the way we see it in the future can help in this purpose, and this is actually the way it it starts to be in some parts of computer science and we hope that this will also work at some point for some parts of mathematics.",
            "So it doesn't have to be so threatening if you just think of it as a variant font spell checker."
        ],
        [
            "Constructing proof is very difficult, but checking proofs is easy.",
            "This is something that can be done."
        ],
        [
            "Buy computer.",
            "So formal proof is written in the language of logic and set theory or type theory.",
            "Ann to check that is correct, you only need to check that if you that only you've used the steps of logic.",
            "So if you know A&B then you can derive a.",
            "So this is all very simple and this is precisely what is done in the core."
        ],
        [
            "But still you can do a lot.",
            "For instance, Conce has actually reimplemented the whole program for the four color theorem, and check to this actually correct.",
            "There's the proof of the prime number theorem.",
            "There's a proof of the constructive fundamental theorem of algebra, which is done by, which has been done by our colleagues in Nijmegen.",
            "There's good ol incompleteness, which has been done by Shankar and has been redone by Verslo Connor.",
            "Russell has expanded on this, and it completely new.",
            "Proof of this.",
            "There much larger projects in progress, so one is the classification of finite simple groups an in fact this is a project done by John Jay to actually look at the fight Thompson theorem.",
            "And then there's the Kepler conjecture, which I mentioned before.",
            "So Tom Hills did the computer proof.",
            "Of the Kepler conjecture and now he has a project to actually do the computer verification of his own computer proof, and this is a big project.",
            "So both the Kepler conjecture and the four color theorem are big proofs which use the computer in an essential way.",
            "There's no separate way of knowing that these proofs are actually correct, so.",
            "To trust these proofs, basically the only thing we can do is use the computer to actually check that the proofs are correct."
        ],
        [
            "So this is what I said, so conce completely formalized the proof of the four color theorem and the implementation of the program and the computer checks it, disinfect all works out."
        ],
        [
            "So as I said, constructing proofs is very difficult, but you can use the computer to help you to construct proofs.",
            "So what we want to do is we want to automate triviality so we can just what we would do, ideally, is to write something down on a computer which is close to what we actually write down on a paper, and then the computer fills in the steps that we find trivial.",
            "Of course, we're never going to get that close, but it's we can get a lot of help from the computer.",
            "So logical technologies, of course, is something that the computer is very good at computations.",
            "So how do you prove that Y is less than three?",
            "Well, you just implement E in a computer and then you approximate it using X actual number computation and you see, well it's it's less than 2.8 and efforts less than three.",
            "This is the easiest way to actually prove this.",
            "Leslie well, we can do both.",
            "Um?",
            "We typically have decision procedure for special theories, say natural numbers with a bunch of operations or linear inequality's over the real numbers or real close fields so.",
            "If you want to do it for the real numbers.",
            "You want to have decidable equality on the polynomials.",
            "You can get help in induction proofs.",
            "There are certain techniques to actually speed up these kind of proofs.",
            "You typically use rewrite databases alot say if you want to have an expression which can be stated in ring theory, then you want to solve it automatically.",
            "You want to simplify things so this kind of things are all standard.",
            "We implemented in all the proof assistants and this works very nicely here.",
            "So if you want to.",
            "Trying to prove illustrate yes.",
            "Trivial way.",
            "Doesn't already require not understanding to prove it.",
            "Um?",
            "Well, so it's.",
            "I mean, what you do is you write down a Cauchy sequence, of course, proving it proving that it's less than three is easy, but proving that it's.",
            "Yeah.",
            "Yeah.",
            "And this is actually something that comes out of our of our work, and this is some decision procedure has been implemented by Russell and this is now used a lot by our colleagues and verification of hybrid systems."
        ],
        [
            "Yeah, so this is a slide that I showed you before, so this is these are the problems and this is our suggested salute."
        ],
        [
            "Chen now we want to use types.",
            "So what are types so types, at least from 11 origin of this is.",
            "And this is the origin that we use.",
            "Is types come from computer programming.",
            "So if we write down three years in integer and we have an array of floats and then we want to add them, we buy.",
            "Because we make a typing error, we say that we want to add 3 to this area floats.",
            "We get a typing error.",
            "Of course, we probably mean something else, but then the computer wants to say, well, I don't understand this.",
            "Please tell me more about what you actually mean, so these type or errors are very important way to catch errors in your programming and you want to have the same."
        ],
        [
            "Support for computer formalization.",
            "My included in a set theoretic setup of mathematics.",
            "This is completely absent.",
            "The question whether the set Pi is an element of the set sinus function is completely valid, so this it's a valid question and it completely depends on on how you've encoded your set theory.",
            "So this is an example by the Brown one of the founders of.",
            "Of proof assistance.",
            "So even if you use set theory, you base you make a layer of type theory on top of it, so in practice you use some kind of type theory."
        ],
        [
            "So what kind of types do you have?",
            "So typically you have some form of inductive types, so you have natural numbers, lists, trees, all those things that you naturally program with.",
            "You have certain type formers, so you have a product of type, sum of type.",
            "So some is a disjoint union.",
            "You have typically have quotients in some way.",
            "So the rationals will be a quotient of a product type, so natural numbers, the product of the natural numbers with itself.",
            "You can have exceptions in programming, so either you return natural number or you return an error.",
            "You can have function types, the type of all functions from A to B.",
            "So you can have arbitrary precision floats, and this is a dependent type, so.",
            "You both give a natural number and then a float of precision N. So this can be seen as a dependent product or dependent function if you like and then you can say well let G be a finite group so it will be a group of order N for some N. So this is.",
            "Disjoint sum so all these type formers typically exists."
        ],
        [
            "An so the non dependent types the."
        ],
        [
            "Yeah, the the top ones that I showed you until the function types.",
            "They show."
        ],
        [
            "Open all the.",
            "Functional programming language to say an already some dependent types are starting to slip into Haskell and O Caml I."
        ],
        [
            "By now you can already write down.",
            "The last two also in Haskell there a dish."
        ],
        [
            "Mr. Haskell, which allow you to do this.",
            "And also the action computer algebra system allows you to write down all these dependent types, so this is something that's slowly moving into the programming community.",
            "But type theory has also originated from the work of Russell, for instance.",
            "Which is ramified type theory, so it can take the role of set theory as a foundation for mathematics.",
            "So the modern proof assistance based on type theory have a type system for all of mathematics, so it's not some artificial set that happens to be good for programming, but it's a type system that allows you to express all of mathematics.",
            "So it's both a foundation for mathematics, and it's a programming language."
        ],
        [
            "So we're going to use the Curry Howard isomorphism between proofs and types.",
            "So it occurred to.",
            "To both Curry and Howard, and independently to the Brown, that there's a very close resemblance between, say, the implication and a function type.",
            "So what does a proof of A implies B look like?",
            "Well, it's a method that allows you to transform a proof of A to approve of B.",
            "And similarly, what is a proof of a conjunction while it's a pair is a proof of a Anna proof of be.",
            "And so on.",
            "So you can go.",
            "So there will be.",
            "The trivial proof of true and there will be no proof of false and similarly.",
            "Approve of.",
            "For all XPX will be a dependent function which takes an input X and then returns a proof of PX.",
            "So we have a correspondence between annotations for proofs, an art type system.",
            "And this is actually a very convenient way of programming."
        ],
        [
            "So now we come back to TD.",
            "Or realizability more generally.",
            "So if you look at the model sets in a realizability model, they precisely support such a bit dependent type theory with inductive and also go inductive types.",
            "And if you look at the semantics of new pro, for instance, which is one of the type theory based proof assistants, then this support such a realizability model.",
            "Actually, for extension of type theory.",
            "An if you did, there's an extension of this, which is called me to pull, and this should allow you to implement.",
            "TTE using K2K2 realizability.",
            "The second linear algebra realizability.",
            "So if you would like to do something like this for Pte.",
            "This may be the way to go there.",
            "There should also be other ways to by extending type theory, but that's a topic for another talk."
        ],
        [
            "So how do you see the real numbers?",
            "So you can see the real number as a dependent type, so it's.",
            "A combination of a function across the sequence.",
            "Sorry, a sequence of rational numbers plus a proof that is actually cozy sequence.",
            "So it's a.",
            "It's a dependent pair of a function pleasure proof, so you actually pick the proof into the type and this is very convenient, yeah?",
            "Selected device here, but maybe we need it online also.",
            "Why?",
            "What is the basis of preferring overseas delivery?",
            "Did I say Dedican cut somewhere?",
            "Hold it, there's a long story about Derek and cuts.",
            "Um?",
            "So in this setting they are equivalent because we have dependent choice.",
            "I mean, I would say that that that by doing this you are, you're involving yourself in a lot of unnecessary code.",
            "I think I would agree with you.",
            "On the other hand, I would like to see all the details of what you're saying.",
            "So I like your project of implementing ASD and Cock, but I would like to see the result.",
            "We know how to do this and we don't completely understand how to do the other thing.",
            "Possibly so so please show us how to do it better than this and your.",
            "Well, Andre did some things but certainly not know.",
            "We knew how to do this thing, so this is what we did and and there's.",
            "This is something that's well understood and the other thing is something that that's in development.",
            "And then once we want the two of you completely understand how to do it, I would love to see the implementation.",
            "But but as you, I'm excited by the IDs.",
            "I mean, did the idea is to use Dikens cuts?",
            "Yes, so as I said, the program and the proof can be completely can be conveniently combined in one dependent type.",
            "So this is one of the example.",
            "One of the advantages of using.",
            "Dependent types and also one of the advantages of using the Curry Howard Isomorphism, because this allows you to treat proofs and programs and pick them both in the same type.",
            "So use one type system for both."
        ],
        [
            "Then there's the issue of constructive logic.",
            "So, for extractable numbers, there's no no zero tests, so I did not mention it in the slides, But there's this infamous.",
            "Computational model I forgot its name which allows you to.",
            "To do search, see quality tests an.",
            "Of course, this this cannot be done.",
            "If you really do.",
            "Continuous continuous computations.",
            "What you can decide is whether a real number is less than epsilon or it's actually strictly bigger than epsilon over 2.",
            "So the moral of this story?"
        ],
        [
            "Use that when program when programming with exact real numbers you actually want to use constructive logic.",
            "You want to avoid the.",
            "Want to avoid taking the decision?",
            "The effective decision?",
            "Be or not be.",
            "While programming, so if you want to.",
            "Keep a close connection between your logic and your computations, which is something which is very convenient for the type of work that we're doing.",
            "We can only use constructive logic and a technical way of saying this is that.",
            "Constructive logic is the only thing that is valid on the realizability pellet.",
            "Into realizability model, or the only thing that holds on the Curry Howard isomorphism.",
            "Yes, pointing out that still OK to have people not being specific cases where you actually know how.",
            "Yes, yes.",
            "Of course, if you cannot decide this for real numbers.",
            "But of course for natural numbers or for rational numbers or all kinds of other.",
            "Decidable structures you do have this decision so.",
            "Yeah, you can decide whether a natural number is equal to 37 or not, so it's.",
            "Yes, of course you can do this.",
            "It's it's mostly about this.",
            "Well, typically these continuous structures, like real numbers."
        ],
        [
            "So actually in the implementation it's more convenient to work not with sequences.",
            "Earth with Maps from the positive rationals to the rationals, so.",
            "Before I had two to the minus N and two to do, minus M for epsilon one and epsilon 2.",
            "But here you have someone more complex.",
            "Somewhat more flexibility.",
            "You can vary those a bit more and this is convenient for to give the models of convergence for the inverse.",
            "For instance the reciprocal function."
        ],
        [
            "And then this completion can be defined for general metric spaces.",
            "So the completion of a metric space will be a function from the positive rationals to X.",
            "Search that this is the the ball relation.",
            "So this says that those two approximations.",
            "For the metric X are close to within this number.",
            "So this ball relation is precisely this relation that we have upstairs here.",
            "In the case of the real numbers.",
            "So this completion completion can be defined for general metric spaces."
        ],
        [
            "And completion is amonut and I want to spend the rest of the first lecture to explain what this means and why this is interesting."
        ],
        [
            "Um?",
            "Walking here, I had some discussion with with Norbert about imperative various versus functional programming, and this is a very hott debate, Ann.",
            "Typically, imperative programs are are slightly faster, but only.",
            "Boat only up to three times faster, but they are much more much more difficult to maintain and there are also cases which I will show later on where functional programs are faster than an.",
            "If you really and typically.",
            "There's a way to separate the functional part from the imperative part, so you want to write most of your program functionally and only very small parts in an imperative way.",
            "So.",
            "Imperative programs are low level heki functional programs are beautiful, high level, nice but somewhat slower.",
            "I don't know which side of the debate you stand up.",
            "I haven't chosen any side.",
            "So what is an imperative program?",
            "No, but there there nice way of combining those so typically.",
            "So what function is this?",
            "I hope I.",
            "Yes, the factorial function.",
            "So this is the way you would do it in a an imperative functional language.",
            "Sorry, and imperative."
        ],
        [
            "In which.",
            "In a functional language like Cock, this is actually actually running code.",
            "I just took this from the standard library.",
            "You would just write down the function so you do a case case distinction on.",
            "Your natural number, if it's zero, you output one.",
            "If it's a successor of a natural number, then.",
            "This is precisely the recursive equation.",
            "So you you are programming style is much more mathematical.",
            "You can use the same like ALGOL type language and writer aggressive program which will be also very clear and straightforward, right?",
            "Yes no debt.",
            "What you are saying basically is that recursive programs in many cases are clearer.",
            "Then what?",
            "Without side effects.",
            "Yes.",
            "Plus, I think you don't need the if statement.",
            "You could just have the forum.",
            "Just remove everything before work else.",
            "Yes, notice.",
            "I'm spoiling it, yes.",
            "I thought about this, but not too long, it's."
        ],
        [
            "In any case, there's a.",
            "Typically you want to be imperative only Porsche, very small cases an you want, but you want to do this in a controlled way an for this to use monads and this is a very nice feature of France is the Haskell programming language."
        ],
        [
            "I want to do a little bit of mathematics category theory.",
            "So you consider.",
            "So.",
            "This may look very different, but I'll come back to the actual.",
            "Actually, the very concrete case in a minute, so you look at algebras over certain signature.",
            "Just think of Monoids.",
            "Now you look at the category of all monoids.",
            "Then there's a forgetful functor from Monoids to sets.",
            "And this is a left adjoint which gives you the free monoid.",
            "Then the composition of those two functors actually defines a monad on the category of sets.",
            "So a monat is an endofunctor of your category.",
            "With two types of natural transformations, so one is.",
            "The unit and the other one is the multiplication of your motor."
        ],
        [
            "Go back to this in a minute.",
            "And So what is very nice is that you can completely capture all the.",
            "Tall algebras as.",
            "Algebras for this monat, an algebra for this monad is.",
            "A functor.",
            "TS2S satisfying certain laws.",
            "So what is a monoid?",
            "It's a map from the free.",
            "What is a general note?",
            "It's a map from the free monoid.",
            "Two sets.",
            "Search search that certain.",
            "Certain laws are satisfied, and one of these laws are the laws for multiplication.",
            "And this is precisely how Monoids are captured.",
            "This is just a section from McLean.",
            "Yeah, this is precisely what I said.",
            "So mono mono.",
            "It is a map from the free monoid, the free monoid over sets are just a list.",
            "2X.",
            "So this is the way to see algebras formula."
        ],
        [
            "Now in computer science you only look at certain.",
            "What are usually called free?",
            "T algebras.",
            "And this can.",
            "We can also be found is the Clash Lee category for this monoid.",
            "So the objects are the same objective C. So sets in our case and Mets are error Maps from X to Y are replaced by Maps from X to the T of Y.",
            "So we look at lists.",
            "Then we have a map from X.",
            "Two list of why?",
            "So we can do everything we can do with free monoids.",
            "We can also do which search Maps."
        ],
        [
            "Now let's go to an example.",
            "So how to do imperative programming in a functional language?",
            "This is the way."
        ],
        [
            "It's done in Haskell, so this was introduced by Margie and then later on popularized by Phil Butler.",
            "So we program.",
            "Which has input X and output Y and has access to a mutable state.",
            "S can be modelled obviously, so your input is an element of X, an element of your state, and the output is an element of Y and a new state.",
            "Now this can be rewritten."
        ],
        [
            "Like so, so it's a map from X2.",
            "Some expression in why?"
        ],
        [
            "Now, turns out there's this type constructor.",
            "Why times S 2DS?",
            "Is a Mona so if you look at this function then this is a function from X.",
            "2 some type an what does this type need?",
            "It needs an input state and returns AY and any output state, so this is precisely what you want if you want to have access to a mutable state."
        ],
        [
            "Demo nuts why plus the bottom element issue partial functions.",
            "So because, well, I do you return something or you return?",
            "Well, there's an error.",
            "There's no no way to convey."
        ],
        [
            "New.",
            "You can also get.",
            "Decidable.",
            "Yes, I know that there's a lot to say about this, but yes, thank you.",
            "Um?",
            "Mystery Damone up, so if you have computer programs which only take inputs but don't give you output, this is the way to model them.",
            "Similarly, you can do output."
        ],
        [
            "So formally.",
            "A monadic triple where you have a type operator return operation in a bind operation.",
            "I think Russell is going to use the bind operation in where the arguments are interchanged.",
            "Anne.",
            "So for instance, if you look at partial functions, then return.",
            "If you have any value then obviously you can take.",
            "If you have an element.",
            "XFX.",
            "Then you can make.",
            "Of type.",
            "So this is a. Injection to the left of X, so this will be an element of type X plus button.",
            "So if you have a total function and it's also partial function.",
            "This would be this is to return.",
            "Yes, you can also have bind.",
            "So if you have a output of type X of a partial function and you have a partial function from X to Y, then you have a way to return a partial return.",
            "Either.",
            "A type an element of Y or an error message.",
            "And this is the way to compose partial function.",
            "So if you have a partial function from X to Y and a partial function from Y to Z, then you compose, compose it to a partial function from X to Z. Anne.",
            "As I said, you can also do this Alternatively using the unit map and joint operations operations.",
            "Which is the ones that I."
        ],
        [
            "Used before.",
            "So this is what I just said.",
            "If you want to.",
            "If you have a function, just think of partial functions.",
            "If you have a partial function from X to Y.",
            "And a partial function from Y to Z.",
            "Then you can compose them using this bind operation.",
            "So what do you do?",
            "You take an X.",
            "Then you apply FX to it.",
            "You get a result which may also be well, it doesn't terminate.",
            "So you're in here.",
            "Then this is a notation for bind, so you plug in G. And then this gives you.",
            "Something easy or it returns you returns an error message.",
            "So this gives you a function from a partial function from X to Z.",
            "So this is a very nicely structured way of doing all kinds of imperative programming in a functional style."
        ],
        [
            "So now the nice observation by Russell.",
            "Well, this this was known long ago.",
            "This is one of the standard examples in Mclean's book, but the observation by Russell is that this can be used very nicely.",
            "In programming to implement.",
            "Implement real numbers, but also other structures.",
            "So completion is amonut, so we can go from.",
            "We have return which is just the embedding of the space in its completion.",
            "If you have a uniformly continuous function from X to Y, then it can be lifted to the completions, obviously.",
            "This is a way of stating density.",
            "And a join so you can go from the completion of the completion of X.",
            "12 to the completion of X.",
            "This is what it means to be a completion.",
            "Anne.",
            "So this is the formulation of a monads using return map and join, but this is equivalent to a formulation using only return and bind.",
            "So another way of saying this is to define a function from.",
            "A completed space to complete to another completed space is by giving it only on a dense set.",
            "So if you look at the concrete case of the rationals, So what do we have to do to give a function from the real numbers to the real numbers?",
            "Well, we take a real number and we take a function from the rational numbers to the real numbers and this will give us automatically your real number.",
            "And this is very convenient because we only have to say what a function does on the rational numbers and then the rest will be taken care of.",
            "US will be taken care of automatically, yes.",
            "Why did you skip the parenthesis?",
            "This is standard convention, so it should be read like this.",
            "No.",
            "Yes yes Yep.",
            "So it's always like that if you have secrets, yes, yeah, yeah.",
            "Yes.",
            "But the corresponding convention with the with applying to arguments.",
            "I think he's actually ends up being the other way.",
            "Rapids, right, left, right, left, right thing like that.",
            "But it also it means that that in the usual situation when you apply a function for several obstacles.",
            "Function function then list the arguments without brackets.",
            "That is kind of.",
            "Difficult program is like 8 to the party to the policy.",
            "8 to the power feature policy, but in this case.",
            "I know when I write my notes I put parenthesis yes.",
            "Subversion yes.",
            "So typically you would have even more arguments and then you would have a large nesting of brackets and this becomes inconvenient."
        ],
        [
            "So this completion mode that actually gives a very nice structured way of working only with the finite decidable objects which are directly representable.",
            "So this is what Android reminded me before.",
            "So in the case where you have the rational numbers here, then you can actually do a case distinction for the rational numbers.",
            "And then as long as this is uniformly continuous, this cannot automatically be extended.",
            "How this is presumably trivial to extend too low?",
            "Um?",
            "No, I didn't say that.",
            "No.",
            "So I mean extensions are possible, but it's it is important.",
            "Of course that we have uniform continuity because otherwise functions don't don't extend local uniform.",
            "Only continuous functions do extend basically.",
            "Then you get into the trouble of defining local, uniformly continuous before and yeah and you.",
            "And it's also not so clear which category you're in, so it's.",
            "I would imagine that something like that is possible, but I don't want to say when videotaped.",
            "I don't want to say definitely yes.",
            "Yes, now general.",
            "There are many different versions of construction wise in there, and I guess if you fix the version it should be following this path tool.",
            "Right?",
            "Yes.",
            "Now things like square root and so on.",
            "There they are implemented in this way."
        ],
        [
            "So now I want to go back to the more high level explanation of this.",
            "So this is if you look at bishops era bishops 67 book their dependencies where he talks about possible computer implementation of his book.",
            "Anne.",
            "So he says, well, as written, this book is person oriented rather than computer oriented, and it would be of great interest to have a computer oriented version without such a version.",
            "It is.",
            "It is hard to predict with any confidence what form computer oriented abstract analysis will eventually assume.",
            "A thoughtful, computer oriented presentation wouldn't cover many interesting phenomena, so.",
            "Already there he set out the program to actually do what we're now doing.",
            "So we actually we want to provide such a presentation and we started to provide such a presentation Bishop himself.",
            "He worked on doing this in a very novel.",
            "Novel programming language which was Uncle 68.",
            "So he started.",
            "This came out only one year after he is finished the book."
        ],
        [
            "So actually we want to do more.",
            "We provide an implementation of all of this independent type theory and this can be used both as a foundation for constructive mathematics an as an efficient programming language with a very expressive type system."
        ],
        [
            "Some very brief history, so this Bishop's book there's the Browns, automats projects, which perhaps was one of the first proof assistants.",
            "There's Martin Live, which introduced constructive type theory as a foundation for Bishop style mathematics.",
            "There are many implementations of type theory.",
            "Neutral cock, Agda currently does epigram.",
            "And I make and we did the current project, which shows that formalization of constructive mathematics in type theory is actually feasible.",
            "So there was a formalization of the fundamental theorem of algebra formalization of the fundamental theorem of calculus.",
            "Um?",
            "Then we started to actually translate all these things in type theory, 2O Caml and then execute the proof so the programs and we made many optimizations, but this turned out to be a very difficult path to do, so we learned about how to restructure the proofs to make them run faster.",
            "But at that point, Russell cannot join our group an he started busy and this is one of the things I suggested him to look at and I think he did it wonderfully to actually implement constructive analysis directly in type theory, so you don't.",
            "Start with Bishop's book and try to give a precise representation of it.",
            "In type theory, you rethink the mathematics and actually think about the programs while doing the proofs.",
            "Anne.",
            "So in Part 2 we have the implementation of real numbers and trig functions.",
            "In part three we have two parts, the plots and the integrals, and this is a part that we programs together.",
            "Um?",
            "And I hope that this is the beginning of a realisation of bishops programming type theory.",
            "We just got a European project funded to to work more on this."
        ],
        [
            "So I've been talking about acceptable number computation just to show you that these are not toy examples.",
            "So what we do is we write new programs which are easy to prove correct.",
            "But the same methodology programming in type theory has been work has been used for very real programs.",
            "So one example is to work by what one of the implementers of the O Caml language and he did a verified compiler for C minor, which is a very large subset of C. And one of the future projects is to actually extend this to the compiler so that you have the whole process of the implementation of Clock which is done in O Caml, which is reduced.",
            "To see this whole part should all be machine verified so that you can completely trust also the implementation."
        ],
        [
            "You can also."
        ],
        [
            "Verify existing programs and this is something that was in the news only last week, so there's a verification of the L4 kernel, which is a complete microkernel, an.",
            "What they do is they actually use a functional prototype as a low level specification of what the kernel of the system does, so you can help in the future to have your.",
            "Program running on O Caml running on C running on a Linux kernel and the whole tower is completely verified in.",
            "Some proof assistant.",
            "Also the CPU.",
            "Yeah there will also be hard hardware verification and so on, so so this is really something that starts to work.",
            "I mean real very real work this and this has really been done.",
            "Andre.",
            "Great.",
            "You don't do anything, it's.",
            "No, of course there's still the possibility that a cosmic Ray hits your processor and you will have to.",
            "This is always possible.",
            "So you don't have absolute certainty, but you can get very close.",
            "Standard for checking gross.",
            "Yes expensive yes."
        ],
        [
            "But of course, this only makes the probability lower.",
            "And here are some references of the work that we did.",
            "I'm done so I'm ready for questions, but we can postpone the questions.",
            "Yes, OK.",
            "So.",
            "Most of what you said is being for metric spaces.",
            "I remember important problems that I know of in dynamics and control which which you don't use metric space and had to use a sensually partially ordered sets.",
            "For example you have.",
            "Cases where you have.",
            "Computer compact sets, but you can't actually get the same lower approximation as some other approximation, yes also.",
            "Listen to back up about different so.",
            "Can you please pull this through to that night?",
            "He, well, I don't think that.",
            "This particular implementation will work, but I.",
            "Similar technology I think will work.",
            "I mean this is something that so you're talking about lower and upper real numbers and these things have been been well understood in constructive mathematics, so we should think about how to.",
            "So typically these are implemented as relations.",
            "In relation to something that we can handle nicely.",
            "So so.",
            "Think it may be for cats approach would work better for ocean sequence approach won't work.",
            "As a friendship house.",
            "Following following naturally from operating helper mode, yes.",
            "I would say the upper and lower rails or months if lovely, but the ordinary rules and then it comes following very naturally from.",
            "So something you would have.",
            "Essentially, if you had an algorithm set without being stepped on upper bounds something, then you would always be able to complete these bounds, and then you might have to have a separate proof that bounce in action.",
            "Yes, actually.",
            "Frequently happens in that back here, except that you took this guys reply while you by being written something.",
            "I've been so many people like paper signs up touching number is not computable when all they mean is that it's an upper or lower yes.",
            "So so you you have a paper on this and I think it can be translated very nicely into upper and lower rules.",
            "Any other questions?",
            "I would like your proof assistant to help me realize ability groups because sometimes you don't worry.",
            "Yes.",
            "I think that this is a so this is related to it, so this is about mechanizing meter theory and this is a very hot topic currently in the in programming language design, so there's a lot, so one of the problems that people struggle with this is variable binding.",
            "So how to actually implement?",
            "So how to reason about syntax in a proof assistant?",
            "And there's a lot of research going on there, so once we've.",
            "Understood how to properly reason about programming languages.",
            "I think we can also use the same technology to reason about reliability.",
            "What is the actual?",
            "Blue some existing serializers.",
            "Structure much harder.",
            "Who forgetting realized?",
            "So I don't know what are.",
            "Anyone has started so so reliability is also used for ex traction from cock to a camel.",
            "And this has been done on paper.",
            "An there is a project going on to actually do this realizability model in cock.",
            "But of course the problem is that you have to have cock talk about itself and there are all kinds of issues with this so.",
            "People are now trying to understand how to do this and.",
            "This is a lot of work.",
            "So for instance, Russell has also worked on this and when doing the formalization of Godel's incompleteness theorem and then the big problem is how to reason about binders.",
            "Um?",
            "And while slowly, we're beginning to understand how to do this.",
            "When I heard.",
            "Which is really good for color conce.",
            "I asked him what did you learn in doing this recommendation?",
            "They found a new representation with planar graphs for made the proof much more efficient.",
            "Thinking about.",
            "Mathematical idea to ask the same question about incompleteness Week.",
            "We learn anything new from the mechanization gardens and completely free.",
            "On the backroom online.",
            "I don't see where else are we doing so.",
            "This is a question you should ask to Russell, who spend a year on doing it, but this is probably something that he could better ask in the next."
        ]
    ],
    "summarization": {
        "clip_0": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So this is joint work together with Russell O'Connor who's sitting here, so he has.",
                    "label": 0
                },
                {
                    "sent": "So I'm going to talk about computer verified implementation of analysis.",
                    "label": 0
                }
            ]
        },
        "clip_1": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "An so let me first announce that 5th of October does the PGF defense of Russell, an editor that there will be a workshop with a number of interesting speakers.",
                    "label": 0
                },
                {
                    "sent": "I just",
                    "label": 0
                }
            ]
        },
        "clip_2": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "No, but any will actually speak, so it's very good.",
                    "label": 0
                },
                {
                    "sent": "So we have three hours.",
                    "label": 0
                },
                {
                    "sent": "So first thing this will be a very high level introduction and I hope it will be at the right level that Andre ask you.",
                    "label": 0
                },
                {
                    "sent": "So I will mainly show you the domain IDs, then the second part will be actually hands-on experience and you can really ask a lot of questions about what is what's going on precisely.",
                    "label": 0
                },
                {
                    "sent": "And then we'll have more to share what we actually did, and this is implementing plots an Riemann integration.",
                    "label": 0
                },
                {
                    "sent": "So the two motivations for this kind of work.",
                    "label": 0
                },
                {
                    "sent": "One is to have provably correct implementation of computations with real numbers, and more generally continuous structures and the other one is to have computer referees.",
                    "label": 0
                },
                {
                    "sent": "If you want this word offends some people, but it's it helps you to every actually referee a paper for computer proofs.",
                    "label": 0
                },
                {
                    "sent": "Anne Anne our way into this research is.",
                    "label": 0
                },
                {
                    "sent": "We go from the theory towards the actual practice.",
                    "label": 0
                }
            ]
        },
        "clip_3": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Most of you will notice, but if you implement real numbers on a computer then you can do first started floating point real numbers with a fixed precision an if you're slightly more funds than use multi precision floats and this has been implemented.",
                    "label": 1
                },
                {
                    "sent": "I mean they're very nice packages for this MP of ours one.",
                    "label": 0
                },
                {
                    "sent": "Then you can go to intervals if you want to have if we want to keep track of the error that you make and then you take a package like MPF I.",
                    "label": 0
                },
                {
                    "sent": "And so a multi position float is just a number like this you have.",
                    "label": 0
                },
                {
                    "sent": "Some exponent here an A number there and these numbers are only bounded by the memory size of your computer.",
                    "label": 1
                }
            ]
        },
        "clip_4": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "To actually avoid two rounding errors, or more precisely, to keep track of these errors, you use intervals and we'll hear more about this later on.",
                    "label": 0
                },
                {
                    "sent": "Yes.",
                    "label": 0
                },
                {
                    "sent": "Do you have an idea of how much slower and my phone is too?",
                    "label": 0
                },
                {
                    "sent": "No, but nobody will know.",
                    "label": 0
                },
                {
                    "sent": "Not exactly.",
                    "label": 0
                },
                {
                    "sent": "So I don't have to be ashamed that I don't know.",
                    "label": 0
                }
            ]
        },
        "clip_5": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And then we have these very nice packages like Iran made by Norbert Mueller an RLP.",
                    "label": 0
                }
            ]
        },
        "clip_6": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Anne.",
                    "label": 0
                },
                {
                    "sent": "Using intervals we only specify the input precision, so we say, well, this is the position that we know and then the computer keeps track of the error that we make and instead for extract real numbers.",
                    "label": 1
                },
                {
                    "sent": "What you want to do is you give the output precision and then the computer will make sure that you get this kind of precision.",
                    "label": 0
                }
            ]
        },
        "clip_7": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "And there's a.",
                    "label": 0
                },
                {
                    "sent": "So maybe this is one step towards your answer.",
                    "label": 0
                },
                {
                    "sent": "I don't know whether North agrees with this, but real IP claims to be only three times slower than what you can do with Floating Points operations.",
                    "label": 0
                },
                {
                    "sent": "But we'll hear more about this, I guess in Orbitz talk.",
                    "label": 0
                },
                {
                    "sent": "So an exact real number, we just see it as a Cauchy sequence that there are other ways of doing this.",
                    "label": 1
                },
                {
                    "sent": "So we just have a computer program which on input N returns an output with precision.",
                    "label": 1
                },
                {
                    "sent": "Question yes.",
                    "label": 0
                },
                {
                    "sent": "Go back to this time which will be requested or impose with that position.",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 0
                }
            ]
        },
        "clip_8": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So this is my next slide, so this theory using Cauchy sequences it can be used for all these things.",
                    "label": 0
                },
                {
                    "sent": "So basically, how far can you go?",
                    "label": 0
                },
                {
                    "sent": "So you basically use a complete separable metric space.",
                    "label": 0
                },
                {
                    "sent": "So dense set can be represented directly on a computer, and then these limits are computer programs for the Cauchy sequences.",
                    "label": 1
                },
                {
                    "sent": "So examples include, well, you know these examples continuous functions from, say, the unit interval to realign integrable functions C modulo null sets, Hilbert spaces, Banach spaces.",
                    "label": 1
                },
                {
                    "sent": "This is one of the things we will use later on, so the metric space of all compact sets in the plane, say with the Hausdorff metric.",
                    "label": 0
                },
                {
                    "sent": "This will use too.",
                    "label": 0
                },
                {
                    "sent": "Actually plot cross functions.",
                    "label": 0
                },
                {
                    "sent": "It is.",
                    "label": 0
                },
                {
                    "sent": "OK, So what we're going to use is.",
                    "label": 0
                },
                {
                    "sent": "Constructive constructive media theory.",
                    "label": 0
                },
                {
                    "sent": "So this word computer program is kept track for us automatically.",
                    "label": 0
                },
                {
                    "sent": "So I'm just going to say.",
                    "label": 0
                },
                {
                    "sent": "Cauchy sequence, and then I'm going to use a realizability interpretation, and this realizability interpretation will make sure that we actually have a computer program or I'm going to use Curry Howard to actually get a computational interpretation of for this.",
                    "label": 0
                },
                {
                    "sent": "So I think.",
                    "label": 0
                }
            ]
        },
        "clip_9": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "This is my next slide.",
                    "label": 0
                },
                {
                    "sent": "Yes.",
                    "label": 0
                },
                {
                    "sent": "So this is my next slide, but yes, so I expected this question, especially because Klaus is here.",
                    "label": 0
                },
                {
                    "sent": "So we're using informal, constructive mathematics an we're going to make this precise later on, so so up to this level, everything is informal.",
                    "label": 0
                },
                {
                    "sent": "So you can compare this to using Pte via realizability, something that Andre has worked out very nicely.",
                    "label": 0
                },
                {
                    "sent": "So at this point of the description, we don't distinguish between Turing compute ability and type 2 compute ability.",
                    "label": 0
                },
                {
                    "sent": "Actually everything I'm going to say can be interpreted by realizability interpretation.",
                    "label": 0
                },
                {
                    "sent": "In both of these frameworks.",
                    "label": 0
                },
                {
                    "sent": "So at this point I don't need the distinction between those two frameworks.",
                    "label": 0
                },
                {
                    "sent": "I'll say more about this later on.",
                    "label": 0
                }
            ]
        },
        "clip_10": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So thank you for the question.",
                    "label": 0
                },
                {
                    "sent": "So why do we want to use xact analysis?",
                    "label": 0
                },
                {
                    "sent": "So it gives you convenience of programming at a small cost.",
                    "label": 1
                },
                {
                    "sent": "It gives you data types.",
                    "label": 1
                },
                {
                    "sent": "For instance, you can say let H be a subspace.",
                    "label": 0
                },
                {
                    "sent": "So this is something that is very inconvenient if you use standard.",
                    "label": 0
                },
                {
                    "sent": "Numerics packages because then you can just talk about matrices and not about the actual infinite spaces, and this is good for maintainability.",
                    "label": 0
                },
                {
                    "sent": "So if the software is easier to read if there all kinds of invariants that you're actually able to state and able to enforce biotype regime, then it's easier to maintain, especially if someone else has written it then it's very nice, so I may trust my own code, but not someone elses code, and we've done some experiments with parallel computation.",
                    "label": 0
                },
                {
                    "sent": "And actually, it happens that if you do functional programming, it seems to work very nicely on multiple machines, so I'll talk about.",
                    "label": 0
                }
            ]
        },
        "clip_11": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Small later on.",
                    "label": 0
                },
                {
                    "sent": "This is also the emerging standard of rigor for computer proof, so if you use computers to prove theorems, I'll go into this in a month minute.",
                    "label": 1
                },
                {
                    "sent": "Then you also want to have a computer checked.",
                    "label": 1
                },
                {
                    "sent": "At a computer to check that your proof is actually correct.",
                    "label": 0
                },
                {
                    "sent": "So this is my next slide.",
                    "label": 0
                }
            ]
        },
        "clip_12": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So first I'll tell you about how I want to do this, so our proposal is to use constructive analysis based on type theory.",
                    "label": 1
                },
                {
                    "sent": "For computer right implementation of Numerics N as a basis for computer proof.",
                    "label": 1
                },
                {
                    "sent": "So we really have those two motivations in our in the back of our minds all the time.",
                    "label": 0
                }
            ]
        },
        "clip_13": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So as I said, we have this emerging standard of rigor for computer proofs, so.",
                    "label": 1
                },
                {
                    "sent": "There more and more computer proof, so you use computers to prove theorems.",
                    "label": 0
                },
                {
                    "sent": "Probably the most famous computer proof is to prove it to four color theorem.",
                    "label": 0
                },
                {
                    "sent": "You look at a map of the world, say and you try to.",
                    "label": 0
                },
                {
                    "sent": "I always did this in in high school.",
                    "label": 0
                },
                {
                    "sent": "I tried to call out the Maps and then you see well, I only I only need four colors and this is actually a theorem and this theorem has been proved by a computer or actually it has been reduced to a finite number of cases and then the computer checks all these cases.",
                    "label": 0
                },
                {
                    "sent": "And there's no way to actually.",
                    "label": 0
                },
                {
                    "sent": "Make sure that the proof is correct without running the program.",
                    "label": 1
                },
                {
                    "sent": "So why is this a proof?",
                    "label": 0
                },
                {
                    "sent": "Another one famous one is the Kepler conjecture.",
                    "label": 0
                },
                {
                    "sent": "So you look at these cannonballs or oranges or sweers and you want to pick them and see you want to pick them as tightly as possible.",
                    "label": 0
                },
                {
                    "sent": "So the question is, is the obvious thing you try in the supermarket?",
                    "label": 0
                },
                {
                    "sent": "Is this the best way of doing it?",
                    "label": 0
                },
                {
                    "sent": "And the answer is yes, and this has been proved by Tom Hills.",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "Another one is the existence of gales, and this is one of the.",
                    "label": 1
                },
                {
                    "sent": "This occurred on on smells list of open problems in mathematics and the typical approach to search proves is that the computer checks are large but finite number of cases.",
                    "label": 0
                },
                {
                    "sent": "The computer finds certain bounds for certain computations.",
                    "label": 0
                },
                {
                    "sent": "Anne.",
                    "label": 0
                },
                {
                    "sent": "But there's no way to actually.",
                    "label": 0
                }
            ]
        },
        "clip_14": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Verify these independently.",
                    "label": 0
                },
                {
                    "sent": "So the computer.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "What recently has been done and this is also what we started to do is to use computer verified proofs of correctness of these computations.",
                    "label": 1
                },
                {
                    "sent": "So computer proofs reserve computer referees.",
                    "label": 0
                }
            ]
        },
        "clip_15": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Anne, this has also been picked up by the AMS, the American Mathematical Society.",
                    "label": 1
                },
                {
                    "sent": "So here's the I really recommend this.",
                    "label": 0
                },
                {
                    "sent": "This issue of the AMS notices.",
                    "label": 0
                },
                {
                    "sent": "So it has four very nice papers on formal proof, formal proof of the four color theorem.",
                    "label": 0
                },
                {
                    "sent": "In practice, an getting started.",
                    "label": 0
                },
                {
                    "sent": "This was actually written by our colleague Fredeick and you get beautiful pictures like this and this is a new mathematical structure that came up in the computer.",
                    "label": 0
                },
                {
                    "sent": "Proof of the four color theorem, just so.",
                    "label": 0
                },
                {
                    "sent": "This actually shows that.",
                    "label": 0
                },
                {
                    "sent": "If you do computer proofs, you actually find new mathematical structure, and this is also something that I want to emphasize.",
                    "label": 0
                },
                {
                    "sent": "You rethink what you're doing, and then you find new mathematical structure.",
                    "label": 0
                }
            ]
        },
        "clip_16": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So what does such a proof assistant look like on a very high level?",
                    "label": 1
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "That the ideal way of not all persistence are designed is sorry, but the modern ones are usually designed in this way.",
                    "label": 0
                },
                {
                    "sent": "You have a small trusted core, say set theory or type theory or whatever you want to take us a foundation for mathematics.",
                    "label": 0
                },
                {
                    "sent": "And this can be expected by inspected by hand.",
                    "label": 1
                },
                {
                    "sent": "You can test it, you can run it on all kinds of examples.",
                    "label": 0
                },
                {
                    "sent": "Typically you would have a few 100,000 users, so if no one finds an error, it's probably it's unlikely that there's a big mistake in the implementation.",
                    "label": 0
                },
                {
                    "sent": "John Harrison, for instance, has started to prove that in his own system that he started to bootstrap this method.",
                    "label": 0
                },
                {
                    "sent": "So you actually use the system to prove that it's correct itself.",
                    "label": 0
                },
                {
                    "sent": "Of course, you cannot really do this because Google shows that you cannot, but you can get very close.",
                    "label": 0
                },
                {
                    "sent": "So this is what you also also do with compilers for programming.",
                    "label": 0
                },
                {
                    "sent": "Language is one of the first things you try is to Candace.",
                    "label": 0
                },
                {
                    "sent": "Compiler actually compile itself, so the same thing is going on improve assistance.",
                    "label": 0
                },
                {
                    "sent": "If you want to have a very nice overview, then look at the Hills notes this article.",
                    "label": 0
                },
                {
                    "sent": "So on top of this small trusted core, you built a library of mathematics and computer tricks, checks that you actually did this big building you build on top of this core actually is correctly reduced to the core.",
                    "label": 1
                },
                {
                    "sent": "So one should trust.",
                    "label": 0
                },
                {
                    "sent": "The.",
                    "label": 0
                },
                {
                    "sent": "The core and you check that the reduction is correct or you make your own your own separate implementation of this reduction.",
                    "label": 0
                },
                {
                    "sent": "Then you can see that the whole library is X.",
                    "label": 0
                }
            ]
        },
        "clip_17": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Correct?",
                    "label": 0
                },
                {
                    "sent": "So now some mathematicians feel offended or threatened by this.",
                    "label": 0
                },
                {
                    "sent": "This idea of using or giving away our our command of the proofs to a computer.",
                    "label": 0
                },
                {
                    "sent": "So here I want to say that usually proves serves two purposes.",
                    "label": 1
                },
                {
                    "sent": "One is you want to convey understanding and the other one is you want to certify correctness.",
                    "label": 0
                },
                {
                    "sent": "And usually if I refereeing a paper, I'm not so very interested if it's correct.",
                    "label": 0
                },
                {
                    "sent": "I mean going along all the details.",
                    "label": 0
                },
                {
                    "sent": "It's boring work that needs to be done, but it's not what I get most out of.",
                    "label": 0
                },
                {
                    "sent": "I want to see well why is it true?",
                    "label": 0
                },
                {
                    "sent": "But so it would be very nice if I get a paper to referee that together with this I get a computer proof that is actually all the technical details workout.",
                    "label": 0
                },
                {
                    "sent": "I only have to look at.",
                    "label": 0
                },
                {
                    "sent": "Well this is new.",
                    "label": 0
                },
                {
                    "sent": "Is this interesting?",
                    "label": 0
                },
                {
                    "sent": "This is give us new ID's.",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 1
                },
                {
                    "sent": "And the computers like this is the way we see it in the future can help in this purpose, and this is actually the way it it starts to be in some parts of computer science and we hope that this will also work at some point for some parts of mathematics.",
                    "label": 1
                },
                {
                    "sent": "So it doesn't have to be so threatening if you just think of it as a variant font spell checker.",
                    "label": 0
                }
            ]
        },
        "clip_18": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Constructing proof is very difficult, but checking proofs is easy.",
                    "label": 0
                },
                {
                    "sent": "This is something that can be done.",
                    "label": 0
                }
            ]
        },
        "clip_19": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Buy computer.",
                    "label": 0
                },
                {
                    "sent": "So formal proof is written in the language of logic and set theory or type theory.",
                    "label": 1
                },
                {
                    "sent": "Ann to check that is correct, you only need to check that if you that only you've used the steps of logic.",
                    "label": 0
                },
                {
                    "sent": "So if you know A&B then you can derive a.",
                    "label": 0
                },
                {
                    "sent": "So this is all very simple and this is precisely what is done in the core.",
                    "label": 0
                }
            ]
        },
        "clip_20": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "But still you can do a lot.",
                    "label": 0
                },
                {
                    "sent": "For instance, Conce has actually reimplemented the whole program for the four color theorem, and check to this actually correct.",
                    "label": 0
                },
                {
                    "sent": "There's the proof of the prime number theorem.",
                    "label": 0
                },
                {
                    "sent": "There's a proof of the constructive fundamental theorem of algebra, which is done by, which has been done by our colleagues in Nijmegen.",
                    "label": 1
                },
                {
                    "sent": "There's good ol incompleteness, which has been done by Shankar and has been redone by Verslo Connor.",
                    "label": 0
                },
                {
                    "sent": "Russell has expanded on this, and it completely new.",
                    "label": 0
                },
                {
                    "sent": "Proof of this.",
                    "label": 0
                },
                {
                    "sent": "There much larger projects in progress, so one is the classification of finite simple groups an in fact this is a project done by John Jay to actually look at the fight Thompson theorem.",
                    "label": 0
                },
                {
                    "sent": "And then there's the Kepler conjecture, which I mentioned before.",
                    "label": 0
                },
                {
                    "sent": "So Tom Hills did the computer proof.",
                    "label": 0
                },
                {
                    "sent": "Of the Kepler conjecture and now he has a project to actually do the computer verification of his own computer proof, and this is a big project.",
                    "label": 1
                },
                {
                    "sent": "So both the Kepler conjecture and the four color theorem are big proofs which use the computer in an essential way.",
                    "label": 0
                },
                {
                    "sent": "There's no separate way of knowing that these proofs are actually correct, so.",
                    "label": 0
                },
                {
                    "sent": "To trust these proofs, basically the only thing we can do is use the computer to actually check that the proofs are correct.",
                    "label": 0
                }
            ]
        },
        "clip_21": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So this is what I said, so conce completely formalized the proof of the four color theorem and the implementation of the program and the computer checks it, disinfect all works out.",
                    "label": 0
                }
            ]
        },
        "clip_22": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So as I said, constructing proofs is very difficult, but you can use the computer to help you to construct proofs.",
                    "label": 1
                },
                {
                    "sent": "So what we want to do is we want to automate triviality so we can just what we would do, ideally, is to write something down on a computer which is close to what we actually write down on a paper, and then the computer fills in the steps that we find trivial.",
                    "label": 0
                },
                {
                    "sent": "Of course, we're never going to get that close, but it's we can get a lot of help from the computer.",
                    "label": 0
                },
                {
                    "sent": "So logical technologies, of course, is something that the computer is very good at computations.",
                    "label": 0
                },
                {
                    "sent": "So how do you prove that Y is less than three?",
                    "label": 0
                },
                {
                    "sent": "Well, you just implement E in a computer and then you approximate it using X actual number computation and you see, well it's it's less than 2.8 and efforts less than three.",
                    "label": 0
                },
                {
                    "sent": "This is the easiest way to actually prove this.",
                    "label": 0
                },
                {
                    "sent": "Leslie well, we can do both.",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "We typically have decision procedure for special theories, say natural numbers with a bunch of operations or linear inequality's over the real numbers or real close fields so.",
                    "label": 1
                },
                {
                    "sent": "If you want to do it for the real numbers.",
                    "label": 1
                },
                {
                    "sent": "You want to have decidable equality on the polynomials.",
                    "label": 0
                },
                {
                    "sent": "You can get help in induction proofs.",
                    "label": 0
                },
                {
                    "sent": "There are certain techniques to actually speed up these kind of proofs.",
                    "label": 0
                },
                {
                    "sent": "You typically use rewrite databases alot say if you want to have an expression which can be stated in ring theory, then you want to solve it automatically.",
                    "label": 0
                },
                {
                    "sent": "You want to simplify things so this kind of things are all standard.",
                    "label": 0
                },
                {
                    "sent": "We implemented in all the proof assistants and this works very nicely here.",
                    "label": 0
                },
                {
                    "sent": "So if you want to.",
                    "label": 0
                },
                {
                    "sent": "Trying to prove illustrate yes.",
                    "label": 0
                },
                {
                    "sent": "Trivial way.",
                    "label": 0
                },
                {
                    "sent": "Doesn't already require not understanding to prove it.",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "Well, so it's.",
                    "label": 0
                },
                {
                    "sent": "I mean, what you do is you write down a Cauchy sequence, of course, proving it proving that it's less than three is easy, but proving that it's.",
                    "label": 0
                },
                {
                    "sent": "Yeah.",
                    "label": 0
                },
                {
                    "sent": "Yeah.",
                    "label": 0
                },
                {
                    "sent": "And this is actually something that comes out of our of our work, and this is some decision procedure has been implemented by Russell and this is now used a lot by our colleagues and verification of hybrid systems.",
                    "label": 0
                }
            ]
        },
        "clip_23": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Yeah, so this is a slide that I showed you before, so this is these are the problems and this is our suggested salute.",
                    "label": 0
                }
            ]
        },
        "clip_24": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Chen now we want to use types.",
                    "label": 0
                },
                {
                    "sent": "So what are types so types, at least from 11 origin of this is.",
                    "label": 0
                },
                {
                    "sent": "And this is the origin that we use.",
                    "label": 0
                },
                {
                    "sent": "Is types come from computer programming.",
                    "label": 1
                },
                {
                    "sent": "So if we write down three years in integer and we have an array of floats and then we want to add them, we buy.",
                    "label": 0
                },
                {
                    "sent": "Because we make a typing error, we say that we want to add 3 to this area floats.",
                    "label": 0
                },
                {
                    "sent": "We get a typing error.",
                    "label": 0
                },
                {
                    "sent": "Of course, we probably mean something else, but then the computer wants to say, well, I don't understand this.",
                    "label": 0
                },
                {
                    "sent": "Please tell me more about what you actually mean, so these type or errors are very important way to catch errors in your programming and you want to have the same.",
                    "label": 0
                }
            ]
        },
        "clip_25": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Support for computer formalization.",
                    "label": 0
                },
                {
                    "sent": "My included in a set theoretic setup of mathematics.",
                    "label": 1
                },
                {
                    "sent": "This is completely absent.",
                    "label": 0
                },
                {
                    "sent": "The question whether the set Pi is an element of the set sinus function is completely valid, so this it's a valid question and it completely depends on on how you've encoded your set theory.",
                    "label": 1
                },
                {
                    "sent": "So this is an example by the Brown one of the founders of.",
                    "label": 0
                },
                {
                    "sent": "Of proof assistance.",
                    "label": 1
                },
                {
                    "sent": "So even if you use set theory, you base you make a layer of type theory on top of it, so in practice you use some kind of type theory.",
                    "label": 0
                }
            ]
        },
        "clip_26": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So what kind of types do you have?",
                    "label": 1
                },
                {
                    "sent": "So typically you have some form of inductive types, so you have natural numbers, lists, trees, all those things that you naturally program with.",
                    "label": 0
                },
                {
                    "sent": "You have certain type formers, so you have a product of type, sum of type.",
                    "label": 1
                },
                {
                    "sent": "So some is a disjoint union.",
                    "label": 0
                },
                {
                    "sent": "You have typically have quotients in some way.",
                    "label": 0
                },
                {
                    "sent": "So the rationals will be a quotient of a product type, so natural numbers, the product of the natural numbers with itself.",
                    "label": 1
                },
                {
                    "sent": "You can have exceptions in programming, so either you return natural number or you return an error.",
                    "label": 0
                },
                {
                    "sent": "You can have function types, the type of all functions from A to B.",
                    "label": 1
                },
                {
                    "sent": "So you can have arbitrary precision floats, and this is a dependent type, so.",
                    "label": 0
                },
                {
                    "sent": "You both give a natural number and then a float of precision N. So this can be seen as a dependent product or dependent function if you like and then you can say well let G be a finite group so it will be a group of order N for some N. So this is.",
                    "label": 0
                },
                {
                    "sent": "Disjoint sum so all these type formers typically exists.",
                    "label": 0
                }
            ]
        },
        "clip_27": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "An so the non dependent types the.",
                    "label": 0
                }
            ]
        },
        "clip_28": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Yeah, the the top ones that I showed you until the function types.",
                    "label": 0
                },
                {
                    "sent": "They show.",
                    "label": 0
                }
            ]
        },
        "clip_29": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Open all the.",
                    "label": 0
                },
                {
                    "sent": "Functional programming language to say an already some dependent types are starting to slip into Haskell and O Caml I.",
                    "label": 0
                }
            ]
        },
        "clip_30": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "By now you can already write down.",
                    "label": 0
                },
                {
                    "sent": "The last two also in Haskell there a dish.",
                    "label": 0
                }
            ]
        },
        "clip_31": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Mr. Haskell, which allow you to do this.",
                    "label": 0
                },
                {
                    "sent": "And also the action computer algebra system allows you to write down all these dependent types, so this is something that's slowly moving into the programming community.",
                    "label": 0
                },
                {
                    "sent": "But type theory has also originated from the work of Russell, for instance.",
                    "label": 0
                },
                {
                    "sent": "Which is ramified type theory, so it can take the role of set theory as a foundation for mathematics.",
                    "label": 1
                },
                {
                    "sent": "So the modern proof assistance based on type theory have a type system for all of mathematics, so it's not some artificial set that happens to be good for programming, but it's a type system that allows you to express all of mathematics.",
                    "label": 1
                },
                {
                    "sent": "So it's both a foundation for mathematics, and it's a programming language.",
                    "label": 0
                }
            ]
        },
        "clip_32": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So we're going to use the Curry Howard isomorphism between proofs and types.",
                    "label": 0
                },
                {
                    "sent": "So it occurred to.",
                    "label": 0
                },
                {
                    "sent": "To both Curry and Howard, and independently to the Brown, that there's a very close resemblance between, say, the implication and a function type.",
                    "label": 0
                },
                {
                    "sent": "So what does a proof of A implies B look like?",
                    "label": 0
                },
                {
                    "sent": "Well, it's a method that allows you to transform a proof of A to approve of B.",
                    "label": 0
                },
                {
                    "sent": "And similarly, what is a proof of a conjunction while it's a pair is a proof of a Anna proof of be.",
                    "label": 0
                },
                {
                    "sent": "And so on.",
                    "label": 0
                },
                {
                    "sent": "So you can go.",
                    "label": 0
                },
                {
                    "sent": "So there will be.",
                    "label": 0
                },
                {
                    "sent": "The trivial proof of true and there will be no proof of false and similarly.",
                    "label": 0
                },
                {
                    "sent": "Approve of.",
                    "label": 0
                },
                {
                    "sent": "For all XPX will be a dependent function which takes an input X and then returns a proof of PX.",
                    "label": 1
                },
                {
                    "sent": "So we have a correspondence between annotations for proofs, an art type system.",
                    "label": 0
                },
                {
                    "sent": "And this is actually a very convenient way of programming.",
                    "label": 0
                }
            ]
        },
        "clip_33": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So now we come back to TD.",
                    "label": 0
                },
                {
                    "sent": "Or realizability more generally.",
                    "label": 0
                },
                {
                    "sent": "So if you look at the model sets in a realizability model, they precisely support such a bit dependent type theory with inductive and also go inductive types.",
                    "label": 1
                },
                {
                    "sent": "And if you look at the semantics of new pro, for instance, which is one of the type theory based proof assistants, then this support such a realizability model.",
                    "label": 0
                },
                {
                    "sent": "Actually, for extension of type theory.",
                    "label": 0
                },
                {
                    "sent": "An if you did, there's an extension of this, which is called me to pull, and this should allow you to implement.",
                    "label": 0
                },
                {
                    "sent": "TTE using K2K2 realizability.",
                    "label": 0
                },
                {
                    "sent": "The second linear algebra realizability.",
                    "label": 0
                },
                {
                    "sent": "So if you would like to do something like this for Pte.",
                    "label": 0
                },
                {
                    "sent": "This may be the way to go there.",
                    "label": 0
                },
                {
                    "sent": "There should also be other ways to by extending type theory, but that's a topic for another talk.",
                    "label": 0
                }
            ]
        },
        "clip_34": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So how do you see the real numbers?",
                    "label": 0
                },
                {
                    "sent": "So you can see the real number as a dependent type, so it's.",
                    "label": 1
                },
                {
                    "sent": "A combination of a function across the sequence.",
                    "label": 1
                },
                {
                    "sent": "Sorry, a sequence of rational numbers plus a proof that is actually cozy sequence.",
                    "label": 0
                },
                {
                    "sent": "So it's a.",
                    "label": 0
                },
                {
                    "sent": "It's a dependent pair of a function pleasure proof, so you actually pick the proof into the type and this is very convenient, yeah?",
                    "label": 0
                },
                {
                    "sent": "Selected device here, but maybe we need it online also.",
                    "label": 1
                },
                {
                    "sent": "Why?",
                    "label": 0
                },
                {
                    "sent": "What is the basis of preferring overseas delivery?",
                    "label": 0
                },
                {
                    "sent": "Did I say Dedican cut somewhere?",
                    "label": 0
                },
                {
                    "sent": "Hold it, there's a long story about Derek and cuts.",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "So in this setting they are equivalent because we have dependent choice.",
                    "label": 0
                },
                {
                    "sent": "I mean, I would say that that that by doing this you are, you're involving yourself in a lot of unnecessary code.",
                    "label": 0
                },
                {
                    "sent": "I think I would agree with you.",
                    "label": 0
                },
                {
                    "sent": "On the other hand, I would like to see all the details of what you're saying.",
                    "label": 0
                },
                {
                    "sent": "So I like your project of implementing ASD and Cock, but I would like to see the result.",
                    "label": 0
                },
                {
                    "sent": "We know how to do this and we don't completely understand how to do the other thing.",
                    "label": 0
                },
                {
                    "sent": "Possibly so so please show us how to do it better than this and your.",
                    "label": 0
                },
                {
                    "sent": "Well, Andre did some things but certainly not know.",
                    "label": 0
                },
                {
                    "sent": "We knew how to do this thing, so this is what we did and and there's.",
                    "label": 0
                },
                {
                    "sent": "This is something that's well understood and the other thing is something that that's in development.",
                    "label": 0
                },
                {
                    "sent": "And then once we want the two of you completely understand how to do it, I would love to see the implementation.",
                    "label": 0
                },
                {
                    "sent": "But but as you, I'm excited by the IDs.",
                    "label": 0
                },
                {
                    "sent": "I mean, did the idea is to use Dikens cuts?",
                    "label": 1
                },
                {
                    "sent": "Yes, so as I said, the program and the proof can be completely can be conveniently combined in one dependent type.",
                    "label": 1
                },
                {
                    "sent": "So this is one of the example.",
                    "label": 0
                },
                {
                    "sent": "One of the advantages of using.",
                    "label": 0
                },
                {
                    "sent": "Dependent types and also one of the advantages of using the Curry Howard Isomorphism, because this allows you to treat proofs and programs and pick them both in the same type.",
                    "label": 0
                },
                {
                    "sent": "So use one type system for both.",
                    "label": 0
                }
            ]
        },
        "clip_35": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Then there's the issue of constructive logic.",
                    "label": 1
                },
                {
                    "sent": "So, for extractable numbers, there's no no zero tests, so I did not mention it in the slides, But there's this infamous.",
                    "label": 0
                },
                {
                    "sent": "Computational model I forgot its name which allows you to.",
                    "label": 0
                },
                {
                    "sent": "To do search, see quality tests an.",
                    "label": 0
                },
                {
                    "sent": "Of course, this this cannot be done.",
                    "label": 0
                },
                {
                    "sent": "If you really do.",
                    "label": 0
                },
                {
                    "sent": "Continuous continuous computations.",
                    "label": 1
                },
                {
                    "sent": "What you can decide is whether a real number is less than epsilon or it's actually strictly bigger than epsilon over 2.",
                    "label": 0
                },
                {
                    "sent": "So the moral of this story?",
                    "label": 0
                }
            ]
        },
        "clip_36": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Use that when program when programming with exact real numbers you actually want to use constructive logic.",
                    "label": 1
                },
                {
                    "sent": "You want to avoid the.",
                    "label": 0
                },
                {
                    "sent": "Want to avoid taking the decision?",
                    "label": 0
                },
                {
                    "sent": "The effective decision?",
                    "label": 0
                },
                {
                    "sent": "Be or not be.",
                    "label": 0
                },
                {
                    "sent": "While programming, so if you want to.",
                    "label": 0
                },
                {
                    "sent": "Keep a close connection between your logic and your computations, which is something which is very convenient for the type of work that we're doing.",
                    "label": 0
                },
                {
                    "sent": "We can only use constructive logic and a technical way of saying this is that.",
                    "label": 1
                },
                {
                    "sent": "Constructive logic is the only thing that is valid on the realizability pellet.",
                    "label": 0
                },
                {
                    "sent": "Into realizability model, or the only thing that holds on the Curry Howard isomorphism.",
                    "label": 0
                },
                {
                    "sent": "Yes, pointing out that still OK to have people not being specific cases where you actually know how.",
                    "label": 0
                },
                {
                    "sent": "Yes, yes.",
                    "label": 0
                },
                {
                    "sent": "Of course, if you cannot decide this for real numbers.",
                    "label": 0
                },
                {
                    "sent": "But of course for natural numbers or for rational numbers or all kinds of other.",
                    "label": 0
                },
                {
                    "sent": "Decidable structures you do have this decision so.",
                    "label": 0
                },
                {
                    "sent": "Yeah, you can decide whether a natural number is equal to 37 or not, so it's.",
                    "label": 0
                },
                {
                    "sent": "Yes, of course you can do this.",
                    "label": 0
                },
                {
                    "sent": "It's it's mostly about this.",
                    "label": 0
                },
                {
                    "sent": "Well, typically these continuous structures, like real numbers.",
                    "label": 0
                }
            ]
        },
        "clip_37": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So actually in the implementation it's more convenient to work not with sequences.",
                    "label": 1
                },
                {
                    "sent": "Earth with Maps from the positive rationals to the rationals, so.",
                    "label": 1
                },
                {
                    "sent": "Before I had two to the minus N and two to do, minus M for epsilon one and epsilon 2.",
                    "label": 0
                },
                {
                    "sent": "But here you have someone more complex.",
                    "label": 1
                },
                {
                    "sent": "Somewhat more flexibility.",
                    "label": 0
                },
                {
                    "sent": "You can vary those a bit more and this is convenient for to give the models of convergence for the inverse.",
                    "label": 0
                },
                {
                    "sent": "For instance the reciprocal function.",
                    "label": 0
                }
            ]
        },
        "clip_38": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "And then this completion can be defined for general metric spaces.",
                    "label": 1
                },
                {
                    "sent": "So the completion of a metric space will be a function from the positive rationals to X.",
                    "label": 0
                },
                {
                    "sent": "Search that this is the the ball relation.",
                    "label": 0
                },
                {
                    "sent": "So this says that those two approximations.",
                    "label": 0
                },
                {
                    "sent": "For the metric X are close to within this number.",
                    "label": 0
                },
                {
                    "sent": "So this ball relation is precisely this relation that we have upstairs here.",
                    "label": 1
                },
                {
                    "sent": "In the case of the real numbers.",
                    "label": 0
                },
                {
                    "sent": "So this completion completion can be defined for general metric spaces.",
                    "label": 0
                }
            ]
        },
        "clip_39": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And completion is amonut and I want to spend the rest of the first lecture to explain what this means and why this is interesting.",
                    "label": 0
                }
            ]
        },
        "clip_40": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "Walking here, I had some discussion with with Norbert about imperative various versus functional programming, and this is a very hott debate, Ann.",
                    "label": 1
                },
                {
                    "sent": "Typically, imperative programs are are slightly faster, but only.",
                    "label": 1
                },
                {
                    "sent": "Boat only up to three times faster, but they are much more much more difficult to maintain and there are also cases which I will show later on where functional programs are faster than an.",
                    "label": 1
                },
                {
                    "sent": "If you really and typically.",
                    "label": 0
                },
                {
                    "sent": "There's a way to separate the functional part from the imperative part, so you want to write most of your program functionally and only very small parts in an imperative way.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "Imperative programs are low level heki functional programs are beautiful, high level, nice but somewhat slower.",
                    "label": 0
                },
                {
                    "sent": "I don't know which side of the debate you stand up.",
                    "label": 0
                },
                {
                    "sent": "I haven't chosen any side.",
                    "label": 0
                },
                {
                    "sent": "So what is an imperative program?",
                    "label": 0
                },
                {
                    "sent": "No, but there there nice way of combining those so typically.",
                    "label": 0
                },
                {
                    "sent": "So what function is this?",
                    "label": 0
                },
                {
                    "sent": "I hope I.",
                    "label": 0
                },
                {
                    "sent": "Yes, the factorial function.",
                    "label": 0
                },
                {
                    "sent": "So this is the way you would do it in a an imperative functional language.",
                    "label": 0
                },
                {
                    "sent": "Sorry, and imperative.",
                    "label": 0
                }
            ]
        },
        "clip_41": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "In which.",
                    "label": 0
                },
                {
                    "sent": "In a functional language like Cock, this is actually actually running code.",
                    "label": 0
                },
                {
                    "sent": "I just took this from the standard library.",
                    "label": 0
                },
                {
                    "sent": "You would just write down the function so you do a case case distinction on.",
                    "label": 0
                },
                {
                    "sent": "Your natural number, if it's zero, you output one.",
                    "label": 0
                },
                {
                    "sent": "If it's a successor of a natural number, then.",
                    "label": 0
                },
                {
                    "sent": "This is precisely the recursive equation.",
                    "label": 0
                },
                {
                    "sent": "So you you are programming style is much more mathematical.",
                    "label": 0
                },
                {
                    "sent": "You can use the same like ALGOL type language and writer aggressive program which will be also very clear and straightforward, right?",
                    "label": 0
                },
                {
                    "sent": "Yes no debt.",
                    "label": 0
                },
                {
                    "sent": "What you are saying basically is that recursive programs in many cases are clearer.",
                    "label": 0
                },
                {
                    "sent": "Then what?",
                    "label": 0
                },
                {
                    "sent": "Without side effects.",
                    "label": 0
                },
                {
                    "sent": "Yes.",
                    "label": 0
                },
                {
                    "sent": "Plus, I think you don't need the if statement.",
                    "label": 0
                },
                {
                    "sent": "You could just have the forum.",
                    "label": 0
                },
                {
                    "sent": "Just remove everything before work else.",
                    "label": 0
                },
                {
                    "sent": "Yes, notice.",
                    "label": 0
                },
                {
                    "sent": "I'm spoiling it, yes.",
                    "label": 0
                },
                {
                    "sent": "I thought about this, but not too long, it's.",
                    "label": 0
                }
            ]
        },
        "clip_42": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "In any case, there's a.",
                    "label": 0
                },
                {
                    "sent": "Typically you want to be imperative only Porsche, very small cases an you want, but you want to do this in a controlled way an for this to use monads and this is a very nice feature of France is the Haskell programming language.",
                    "label": 0
                }
            ]
        },
        "clip_43": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "I want to do a little bit of mathematics category theory.",
                    "label": 0
                },
                {
                    "sent": "So you consider.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "This may look very different, but I'll come back to the actual.",
                    "label": 0
                },
                {
                    "sent": "Actually, the very concrete case in a minute, so you look at algebras over certain signature.",
                    "label": 0
                },
                {
                    "sent": "Just think of Monoids.",
                    "label": 0
                },
                {
                    "sent": "Now you look at the category of all monoids.",
                    "label": 0
                },
                {
                    "sent": "Then there's a forgetful functor from Monoids to sets.",
                    "label": 1
                },
                {
                    "sent": "And this is a left adjoint which gives you the free monoid.",
                    "label": 1
                },
                {
                    "sent": "Then the composition of those two functors actually defines a monad on the category of sets.",
                    "label": 1
                },
                {
                    "sent": "So a monat is an endofunctor of your category.",
                    "label": 0
                },
                {
                    "sent": "With two types of natural transformations, so one is.",
                    "label": 0
                },
                {
                    "sent": "The unit and the other one is the multiplication of your motor.",
                    "label": 0
                }
            ]
        },
        "clip_44": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Go back to this in a minute.",
                    "label": 0
                },
                {
                    "sent": "And So what is very nice is that you can completely capture all the.",
                    "label": 0
                },
                {
                    "sent": "Tall algebras as.",
                    "label": 0
                },
                {
                    "sent": "Algebras for this monat, an algebra for this monad is.",
                    "label": 1
                },
                {
                    "sent": "A functor.",
                    "label": 0
                },
                {
                    "sent": "TS2S satisfying certain laws.",
                    "label": 0
                },
                {
                    "sent": "So what is a monoid?",
                    "label": 1
                },
                {
                    "sent": "It's a map from the free.",
                    "label": 0
                },
                {
                    "sent": "What is a general note?",
                    "label": 0
                },
                {
                    "sent": "It's a map from the free monoid.",
                    "label": 0
                },
                {
                    "sent": "Two sets.",
                    "label": 1
                },
                {
                    "sent": "Search search that certain.",
                    "label": 0
                },
                {
                    "sent": "Certain laws are satisfied, and one of these laws are the laws for multiplication.",
                    "label": 0
                },
                {
                    "sent": "And this is precisely how Monoids are captured.",
                    "label": 0
                },
                {
                    "sent": "This is just a section from McLean.",
                    "label": 0
                },
                {
                    "sent": "Yeah, this is precisely what I said.",
                    "label": 0
                },
                {
                    "sent": "So mono mono.",
                    "label": 0
                },
                {
                    "sent": "It is a map from the free monoid, the free monoid over sets are just a list.",
                    "label": 1
                },
                {
                    "sent": "2X.",
                    "label": 0
                },
                {
                    "sent": "So this is the way to see algebras formula.",
                    "label": 0
                }
            ]
        },
        "clip_45": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Now in computer science you only look at certain.",
                    "label": 0
                },
                {
                    "sent": "What are usually called free?",
                    "label": 0
                },
                {
                    "sent": "T algebras.",
                    "label": 0
                },
                {
                    "sent": "And this can.",
                    "label": 0
                },
                {
                    "sent": "We can also be found is the Clash Lee category for this monoid.",
                    "label": 0
                },
                {
                    "sent": "So the objects are the same objective C. So sets in our case and Mets are error Maps from X to Y are replaced by Maps from X to the T of Y.",
                    "label": 0
                },
                {
                    "sent": "So we look at lists.",
                    "label": 0
                },
                {
                    "sent": "Then we have a map from X.",
                    "label": 0
                },
                {
                    "sent": "Two list of why?",
                    "label": 0
                },
                {
                    "sent": "So we can do everything we can do with free monoids.",
                    "label": 0
                },
                {
                    "sent": "We can also do which search Maps.",
                    "label": 0
                }
            ]
        },
        "clip_46": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Now let's go to an example.",
                    "label": 0
                },
                {
                    "sent": "So how to do imperative programming in a functional language?",
                    "label": 0
                },
                {
                    "sent": "This is the way.",
                    "label": 0
                }
            ]
        },
        "clip_47": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "It's done in Haskell, so this was introduced by Margie and then later on popularized by Phil Butler.",
                    "label": 0
                },
                {
                    "sent": "So we program.",
                    "label": 0
                },
                {
                    "sent": "Which has input X and output Y and has access to a mutable state.",
                    "label": 1
                },
                {
                    "sent": "S can be modelled obviously, so your input is an element of X, an element of your state, and the output is an element of Y and a new state.",
                    "label": 0
                },
                {
                    "sent": "Now this can be rewritten.",
                    "label": 0
                }
            ]
        },
        "clip_48": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Like so, so it's a map from X2.",
                    "label": 0
                },
                {
                    "sent": "Some expression in why?",
                    "label": 0
                }
            ]
        },
        "clip_49": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Now, turns out there's this type constructor.",
                    "label": 1
                },
                {
                    "sent": "Why times S 2DS?",
                    "label": 1
                },
                {
                    "sent": "Is a Mona so if you look at this function then this is a function from X.",
                    "label": 0
                },
                {
                    "sent": "2 some type an what does this type need?",
                    "label": 0
                },
                {
                    "sent": "It needs an input state and returns AY and any output state, so this is precisely what you want if you want to have access to a mutable state.",
                    "label": 1
                }
            ]
        },
        "clip_50": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Demo nuts why plus the bottom element issue partial functions.",
                    "label": 0
                },
                {
                    "sent": "So because, well, I do you return something or you return?",
                    "label": 0
                },
                {
                    "sent": "Well, there's an error.",
                    "label": 0
                },
                {
                    "sent": "There's no no way to convey.",
                    "label": 0
                }
            ]
        },
        "clip_51": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "New.",
                    "label": 0
                },
                {
                    "sent": "You can also get.",
                    "label": 0
                },
                {
                    "sent": "Decidable.",
                    "label": 0
                },
                {
                    "sent": "Yes, I know that there's a lot to say about this, but yes, thank you.",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "Mystery Damone up, so if you have computer programs which only take inputs but don't give you output, this is the way to model them.",
                    "label": 0
                },
                {
                    "sent": "Similarly, you can do output.",
                    "label": 0
                }
            ]
        },
        "clip_52": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So formally.",
                    "label": 0
                },
                {
                    "sent": "A monadic triple where you have a type operator return operation in a bind operation.",
                    "label": 0
                },
                {
                    "sent": "I think Russell is going to use the bind operation in where the arguments are interchanged.",
                    "label": 0
                },
                {
                    "sent": "Anne.",
                    "label": 0
                },
                {
                    "sent": "So for instance, if you look at partial functions, then return.",
                    "label": 0
                },
                {
                    "sent": "If you have any value then obviously you can take.",
                    "label": 0
                },
                {
                    "sent": "If you have an element.",
                    "label": 0
                },
                {
                    "sent": "XFX.",
                    "label": 0
                },
                {
                    "sent": "Then you can make.",
                    "label": 0
                },
                {
                    "sent": "Of type.",
                    "label": 0
                },
                {
                    "sent": "So this is a. Injection to the left of X, so this will be an element of type X plus button.",
                    "label": 0
                },
                {
                    "sent": "So if you have a total function and it's also partial function.",
                    "label": 0
                },
                {
                    "sent": "This would be this is to return.",
                    "label": 0
                },
                {
                    "sent": "Yes, you can also have bind.",
                    "label": 0
                },
                {
                    "sent": "So if you have a output of type X of a partial function and you have a partial function from X to Y, then you have a way to return a partial return.",
                    "label": 0
                },
                {
                    "sent": "Either.",
                    "label": 0
                },
                {
                    "sent": "A type an element of Y or an error message.",
                    "label": 0
                },
                {
                    "sent": "And this is the way to compose partial function.",
                    "label": 0
                },
                {
                    "sent": "So if you have a partial function from X to Y and a partial function from Y to Z, then you compose, compose it to a partial function from X to Z. Anne.",
                    "label": 0
                },
                {
                    "sent": "As I said, you can also do this Alternatively using the unit map and joint operations operations.",
                    "label": 0
                },
                {
                    "sent": "Which is the ones that I.",
                    "label": 0
                }
            ]
        },
        "clip_53": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Used before.",
                    "label": 0
                },
                {
                    "sent": "So this is what I just said.",
                    "label": 0
                },
                {
                    "sent": "If you want to.",
                    "label": 0
                },
                {
                    "sent": "If you have a function, just think of partial functions.",
                    "label": 0
                },
                {
                    "sent": "If you have a partial function from X to Y.",
                    "label": 0
                },
                {
                    "sent": "And a partial function from Y to Z.",
                    "label": 0
                },
                {
                    "sent": "Then you can compose them using this bind operation.",
                    "label": 0
                },
                {
                    "sent": "So what do you do?",
                    "label": 0
                },
                {
                    "sent": "You take an X.",
                    "label": 0
                },
                {
                    "sent": "Then you apply FX to it.",
                    "label": 0
                },
                {
                    "sent": "You get a result which may also be well, it doesn't terminate.",
                    "label": 0
                },
                {
                    "sent": "So you're in here.",
                    "label": 0
                },
                {
                    "sent": "Then this is a notation for bind, so you plug in G. And then this gives you.",
                    "label": 0
                },
                {
                    "sent": "Something easy or it returns you returns an error message.",
                    "label": 0
                },
                {
                    "sent": "So this gives you a function from a partial function from X to Z.",
                    "label": 0
                },
                {
                    "sent": "So this is a very nicely structured way of doing all kinds of imperative programming in a functional style.",
                    "label": 0
                }
            ]
        },
        "clip_54": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So now the nice observation by Russell.",
                    "label": 0
                },
                {
                    "sent": "Well, this this was known long ago.",
                    "label": 0
                },
                {
                    "sent": "This is one of the standard examples in Mclean's book, but the observation by Russell is that this can be used very nicely.",
                    "label": 0
                },
                {
                    "sent": "In programming to implement.",
                    "label": 0
                },
                {
                    "sent": "Implement real numbers, but also other structures.",
                    "label": 0
                },
                {
                    "sent": "So completion is amonut, so we can go from.",
                    "label": 1
                },
                {
                    "sent": "We have return which is just the embedding of the space in its completion.",
                    "label": 0
                },
                {
                    "sent": "If you have a uniformly continuous function from X to Y, then it can be lifted to the completions, obviously.",
                    "label": 1
                },
                {
                    "sent": "This is a way of stating density.",
                    "label": 0
                },
                {
                    "sent": "And a join so you can go from the completion of the completion of X.",
                    "label": 0
                },
                {
                    "sent": "12 to the completion of X.",
                    "label": 0
                },
                {
                    "sent": "This is what it means to be a completion.",
                    "label": 0
                },
                {
                    "sent": "Anne.",
                    "label": 0
                },
                {
                    "sent": "So this is the formulation of a monads using return map and join, but this is equivalent to a formulation using only return and bind.",
                    "label": 1
                },
                {
                    "sent": "So another way of saying this is to define a function from.",
                    "label": 0
                },
                {
                    "sent": "A completed space to complete to another completed space is by giving it only on a dense set.",
                    "label": 0
                },
                {
                    "sent": "So if you look at the concrete case of the rationals, So what do we have to do to give a function from the real numbers to the real numbers?",
                    "label": 0
                },
                {
                    "sent": "Well, we take a real number and we take a function from the rational numbers to the real numbers and this will give us automatically your real number.",
                    "label": 0
                },
                {
                    "sent": "And this is very convenient because we only have to say what a function does on the rational numbers and then the rest will be taken care of.",
                    "label": 0
                },
                {
                    "sent": "US will be taken care of automatically, yes.",
                    "label": 0
                },
                {
                    "sent": "Why did you skip the parenthesis?",
                    "label": 0
                },
                {
                    "sent": "This is standard convention, so it should be read like this.",
                    "label": 0
                },
                {
                    "sent": "No.",
                    "label": 0
                },
                {
                    "sent": "Yes yes Yep.",
                    "label": 0
                },
                {
                    "sent": "So it's always like that if you have secrets, yes, yeah, yeah.",
                    "label": 0
                },
                {
                    "sent": "Yes.",
                    "label": 0
                },
                {
                    "sent": "But the corresponding convention with the with applying to arguments.",
                    "label": 0
                },
                {
                    "sent": "I think he's actually ends up being the other way.",
                    "label": 0
                },
                {
                    "sent": "Rapids, right, left, right, left, right thing like that.",
                    "label": 0
                },
                {
                    "sent": "But it also it means that that in the usual situation when you apply a function for several obstacles.",
                    "label": 0
                },
                {
                    "sent": "Function function then list the arguments without brackets.",
                    "label": 0
                },
                {
                    "sent": "That is kind of.",
                    "label": 0
                },
                {
                    "sent": "Difficult program is like 8 to the party to the policy.",
                    "label": 0
                },
                {
                    "sent": "8 to the power feature policy, but in this case.",
                    "label": 0
                },
                {
                    "sent": "I know when I write my notes I put parenthesis yes.",
                    "label": 0
                },
                {
                    "sent": "Subversion yes.",
                    "label": 0
                },
                {
                    "sent": "So typically you would have even more arguments and then you would have a large nesting of brackets and this becomes inconvenient.",
                    "label": 0
                }
            ]
        },
        "clip_55": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So this completion mode that actually gives a very nice structured way of working only with the finite decidable objects which are directly representable.",
                    "label": 1
                },
                {
                    "sent": "So this is what Android reminded me before.",
                    "label": 0
                },
                {
                    "sent": "So in the case where you have the rational numbers here, then you can actually do a case distinction for the rational numbers.",
                    "label": 0
                },
                {
                    "sent": "And then as long as this is uniformly continuous, this cannot automatically be extended.",
                    "label": 0
                },
                {
                    "sent": "How this is presumably trivial to extend too low?",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "No, I didn't say that.",
                    "label": 0
                },
                {
                    "sent": "No.",
                    "label": 0
                },
                {
                    "sent": "So I mean extensions are possible, but it's it is important.",
                    "label": 0
                },
                {
                    "sent": "Of course that we have uniform continuity because otherwise functions don't don't extend local uniform.",
                    "label": 0
                },
                {
                    "sent": "Only continuous functions do extend basically.",
                    "label": 0
                },
                {
                    "sent": "Then you get into the trouble of defining local, uniformly continuous before and yeah and you.",
                    "label": 0
                },
                {
                    "sent": "And it's also not so clear which category you're in, so it's.",
                    "label": 0
                },
                {
                    "sent": "I would imagine that something like that is possible, but I don't want to say when videotaped.",
                    "label": 0
                },
                {
                    "sent": "I don't want to say definitely yes.",
                    "label": 0
                },
                {
                    "sent": "Yes, now general.",
                    "label": 0
                },
                {
                    "sent": "There are many different versions of construction wise in there, and I guess if you fix the version it should be following this path tool.",
                    "label": 0
                },
                {
                    "sent": "Right?",
                    "label": 0
                },
                {
                    "sent": "Yes.",
                    "label": 0
                },
                {
                    "sent": "Now things like square root and so on.",
                    "label": 0
                },
                {
                    "sent": "There they are implemented in this way.",
                    "label": 0
                }
            ]
        },
        "clip_56": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So now I want to go back to the more high level explanation of this.",
                    "label": 0
                },
                {
                    "sent": "So this is if you look at bishops era bishops 67 book their dependencies where he talks about possible computer implementation of his book.",
                    "label": 0
                },
                {
                    "sent": "Anne.",
                    "label": 0
                },
                {
                    "sent": "So he says, well, as written, this book is person oriented rather than computer oriented, and it would be of great interest to have a computer oriented version without such a version.",
                    "label": 1
                },
                {
                    "sent": "It is.",
                    "label": 1
                },
                {
                    "sent": "It is hard to predict with any confidence what form computer oriented abstract analysis will eventually assume.",
                    "label": 0
                },
                {
                    "sent": "A thoughtful, computer oriented presentation wouldn't cover many interesting phenomena, so.",
                    "label": 0
                },
                {
                    "sent": "Already there he set out the program to actually do what we're now doing.",
                    "label": 0
                },
                {
                    "sent": "So we actually we want to provide such a presentation and we started to provide such a presentation Bishop himself.",
                    "label": 0
                },
                {
                    "sent": "He worked on doing this in a very novel.",
                    "label": 0
                },
                {
                    "sent": "Novel programming language which was Uncle 68.",
                    "label": 0
                },
                {
                    "sent": "So he started.",
                    "label": 0
                },
                {
                    "sent": "This came out only one year after he is finished the book.",
                    "label": 0
                }
            ]
        },
        "clip_57": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So actually we want to do more.",
                    "label": 0
                },
                {
                    "sent": "We provide an implementation of all of this independent type theory and this can be used both as a foundation for constructive mathematics an as an efficient programming language with a very expressive type system.",
                    "label": 0
                }
            ]
        },
        "clip_58": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Some very brief history, so this Bishop's book there's the Browns, automats projects, which perhaps was one of the first proof assistants.",
                    "label": 0
                },
                {
                    "sent": "There's Martin Live, which introduced constructive type theory as a foundation for Bishop style mathematics.",
                    "label": 1
                },
                {
                    "sent": "There are many implementations of type theory.",
                    "label": 0
                },
                {
                    "sent": "Neutral cock, Agda currently does epigram.",
                    "label": 0
                },
                {
                    "sent": "And I make and we did the current project, which shows that formalization of constructive mathematics in type theory is actually feasible.",
                    "label": 1
                },
                {
                    "sent": "So there was a formalization of the fundamental theorem of algebra formalization of the fundamental theorem of calculus.",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "Then we started to actually translate all these things in type theory, 2O Caml and then execute the proof so the programs and we made many optimizations, but this turned out to be a very difficult path to do, so we learned about how to restructure the proofs to make them run faster.",
                    "label": 1
                },
                {
                    "sent": "But at that point, Russell cannot join our group an he started busy and this is one of the things I suggested him to look at and I think he did it wonderfully to actually implement constructive analysis directly in type theory, so you don't.",
                    "label": 0
                },
                {
                    "sent": "Start with Bishop's book and try to give a precise representation of it.",
                    "label": 1
                },
                {
                    "sent": "In type theory, you rethink the mathematics and actually think about the programs while doing the proofs.",
                    "label": 0
                },
                {
                    "sent": "Anne.",
                    "label": 0
                },
                {
                    "sent": "So in Part 2 we have the implementation of real numbers and trig functions.",
                    "label": 0
                },
                {
                    "sent": "In part three we have two parts, the plots and the integrals, and this is a part that we programs together.",
                    "label": 1
                },
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "And I hope that this is the beginning of a realisation of bishops programming type theory.",
                    "label": 0
                },
                {
                    "sent": "We just got a European project funded to to work more on this.",
                    "label": 0
                }
            ]
        },
        "clip_59": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So I've been talking about acceptable number computation just to show you that these are not toy examples.",
                    "label": 0
                },
                {
                    "sent": "So what we do is we write new programs which are easy to prove correct.",
                    "label": 1
                },
                {
                    "sent": "But the same methodology programming in type theory has been work has been used for very real programs.",
                    "label": 0
                },
                {
                    "sent": "So one example is to work by what one of the implementers of the O Caml language and he did a verified compiler for C minor, which is a very large subset of C. And one of the future projects is to actually extend this to the compiler so that you have the whole process of the implementation of Clock which is done in O Caml, which is reduced.",
                    "label": 0
                },
                {
                    "sent": "To see this whole part should all be machine verified so that you can completely trust also the implementation.",
                    "label": 0
                }
            ]
        },
        "clip_60": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "You can also.",
                    "label": 0
                }
            ]
        },
        "clip_61": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Verify existing programs and this is something that was in the news only last week, so there's a verification of the L4 kernel, which is a complete microkernel, an.",
                    "label": 1
                },
                {
                    "sent": "What they do is they actually use a functional prototype as a low level specification of what the kernel of the system does, so you can help in the future to have your.",
                    "label": 0
                },
                {
                    "sent": "Program running on O Caml running on C running on a Linux kernel and the whole tower is completely verified in.",
                    "label": 0
                },
                {
                    "sent": "Some proof assistant.",
                    "label": 0
                },
                {
                    "sent": "Also the CPU.",
                    "label": 0
                },
                {
                    "sent": "Yeah there will also be hard hardware verification and so on, so so this is really something that starts to work.",
                    "label": 0
                },
                {
                    "sent": "I mean real very real work this and this has really been done.",
                    "label": 0
                },
                {
                    "sent": "Andre.",
                    "label": 0
                },
                {
                    "sent": "Great.",
                    "label": 0
                },
                {
                    "sent": "You don't do anything, it's.",
                    "label": 0
                },
                {
                    "sent": "No, of course there's still the possibility that a cosmic Ray hits your processor and you will have to.",
                    "label": 0
                },
                {
                    "sent": "This is always possible.",
                    "label": 0
                },
                {
                    "sent": "So you don't have absolute certainty, but you can get very close.",
                    "label": 0
                },
                {
                    "sent": "Standard for checking gross.",
                    "label": 0
                },
                {
                    "sent": "Yes expensive yes.",
                    "label": 0
                }
            ]
        },
        "clip_62": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "But of course, this only makes the probability lower.",
                    "label": 0
                },
                {
                    "sent": "And here are some references of the work that we did.",
                    "label": 0
                },
                {
                    "sent": "I'm done so I'm ready for questions, but we can postpone the questions.",
                    "label": 0
                },
                {
                    "sent": "Yes, OK.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "Most of what you said is being for metric spaces.",
                    "label": 0
                },
                {
                    "sent": "I remember important problems that I know of in dynamics and control which which you don't use metric space and had to use a sensually partially ordered sets.",
                    "label": 0
                },
                {
                    "sent": "For example you have.",
                    "label": 0
                },
                {
                    "sent": "Cases where you have.",
                    "label": 0
                },
                {
                    "sent": "Computer compact sets, but you can't actually get the same lower approximation as some other approximation, yes also.",
                    "label": 0
                },
                {
                    "sent": "Listen to back up about different so.",
                    "label": 0
                },
                {
                    "sent": "Can you please pull this through to that night?",
                    "label": 0
                },
                {
                    "sent": "He, well, I don't think that.",
                    "label": 0
                },
                {
                    "sent": "This particular implementation will work, but I.",
                    "label": 0
                },
                {
                    "sent": "Similar technology I think will work.",
                    "label": 0
                },
                {
                    "sent": "I mean this is something that so you're talking about lower and upper real numbers and these things have been been well understood in constructive mathematics, so we should think about how to.",
                    "label": 0
                },
                {
                    "sent": "So typically these are implemented as relations.",
                    "label": 0
                },
                {
                    "sent": "In relation to something that we can handle nicely.",
                    "label": 0
                },
                {
                    "sent": "So so.",
                    "label": 0
                },
                {
                    "sent": "Think it may be for cats approach would work better for ocean sequence approach won't work.",
                    "label": 0
                },
                {
                    "sent": "As a friendship house.",
                    "label": 0
                },
                {
                    "sent": "Following following naturally from operating helper mode, yes.",
                    "label": 0
                },
                {
                    "sent": "I would say the upper and lower rails or months if lovely, but the ordinary rules and then it comes following very naturally from.",
                    "label": 0
                },
                {
                    "sent": "So something you would have.",
                    "label": 0
                },
                {
                    "sent": "Essentially, if you had an algorithm set without being stepped on upper bounds something, then you would always be able to complete these bounds, and then you might have to have a separate proof that bounce in action.",
                    "label": 0
                },
                {
                    "sent": "Yes, actually.",
                    "label": 0
                },
                {
                    "sent": "Frequently happens in that back here, except that you took this guys reply while you by being written something.",
                    "label": 0
                },
                {
                    "sent": "I've been so many people like paper signs up touching number is not computable when all they mean is that it's an upper or lower yes.",
                    "label": 0
                },
                {
                    "sent": "So so you you have a paper on this and I think it can be translated very nicely into upper and lower rules.",
                    "label": 0
                },
                {
                    "sent": "Any other questions?",
                    "label": 0
                },
                {
                    "sent": "I would like your proof assistant to help me realize ability groups because sometimes you don't worry.",
                    "label": 0
                },
                {
                    "sent": "Yes.",
                    "label": 0
                },
                {
                    "sent": "I think that this is a so this is related to it, so this is about mechanizing meter theory and this is a very hot topic currently in the in programming language design, so there's a lot, so one of the problems that people struggle with this is variable binding.",
                    "label": 0
                },
                {
                    "sent": "So how to actually implement?",
                    "label": 0
                },
                {
                    "sent": "So how to reason about syntax in a proof assistant?",
                    "label": 0
                },
                {
                    "sent": "And there's a lot of research going on there, so once we've.",
                    "label": 0
                },
                {
                    "sent": "Understood how to properly reason about programming languages.",
                    "label": 0
                },
                {
                    "sent": "I think we can also use the same technology to reason about reliability.",
                    "label": 0
                },
                {
                    "sent": "What is the actual?",
                    "label": 0
                },
                {
                    "sent": "Blue some existing serializers.",
                    "label": 0
                },
                {
                    "sent": "Structure much harder.",
                    "label": 0
                },
                {
                    "sent": "Who forgetting realized?",
                    "label": 0
                },
                {
                    "sent": "So I don't know what are.",
                    "label": 0
                },
                {
                    "sent": "Anyone has started so so reliability is also used for ex traction from cock to a camel.",
                    "label": 0
                },
                {
                    "sent": "And this has been done on paper.",
                    "label": 0
                },
                {
                    "sent": "An there is a project going on to actually do this realizability model in cock.",
                    "label": 0
                },
                {
                    "sent": "But of course the problem is that you have to have cock talk about itself and there are all kinds of issues with this so.",
                    "label": 0
                },
                {
                    "sent": "People are now trying to understand how to do this and.",
                    "label": 0
                },
                {
                    "sent": "This is a lot of work.",
                    "label": 0
                },
                {
                    "sent": "So for instance, Russell has also worked on this and when doing the formalization of Godel's incompleteness theorem and then the big problem is how to reason about binders.",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "And while slowly, we're beginning to understand how to do this.",
                    "label": 0
                },
                {
                    "sent": "When I heard.",
                    "label": 0
                },
                {
                    "sent": "Which is really good for color conce.",
                    "label": 0
                },
                {
                    "sent": "I asked him what did you learn in doing this recommendation?",
                    "label": 0
                },
                {
                    "sent": "They found a new representation with planar graphs for made the proof much more efficient.",
                    "label": 0
                },
                {
                    "sent": "Thinking about.",
                    "label": 0
                },
                {
                    "sent": "Mathematical idea to ask the same question about incompleteness Week.",
                    "label": 0
                },
                {
                    "sent": "We learn anything new from the mechanization gardens and completely free.",
                    "label": 0
                },
                {
                    "sent": "On the backroom online.",
                    "label": 0
                },
                {
                    "sent": "I don't see where else are we doing so.",
                    "label": 0
                },
                {
                    "sent": "This is a question you should ask to Russell, who spend a year on doing it, but this is probably something that he could better ask in the next.",
                    "label": 0
                }
            ]
        }
    }
}