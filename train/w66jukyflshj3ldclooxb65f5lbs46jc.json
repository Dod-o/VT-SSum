{
    "id": "w66jukyflshj3ldclooxb65f5lbs46jc",
    "title": "Julia: A Fresh Approach to Technical Computing",
    "info": {
        "author": [
            "Stefan Karpinski, Massachusetts Institute of Technology, MIT"
        ],
        "published": "Oct. 13, 2014",
        "recorded": "September 2014",
        "category": [
            "Top->Computers->Software->Open-Source Software",
            "Top->Computers->Programming->Python",
            "Top->Computer Science->Optimization Methods",
            "Top->Computer Science->Programming Languages",
            "Top->Computer Science->Machine Learning",
            "Top->Mathematics"
        ]
    },
    "url": "http://videolectures.net/tcmm2014_karpinski_julia_technical_computing/",
    "segmentation": [
        [
            "Good morning everyone.",
            "Thanks for being here.",
            "So Julia is a new, relatively new programming language for scientific computing.",
            "Numerical computing, technical computing.",
            "Whatever you want to call it.",
            "So.",
            "The obvious question is what is a technical or numerical computing language?",
            "What am I?",
            "What are we even talking about here?"
        ],
        [
            "And this is a graphic that I for all one of my Co creators of the language made up awhile ago, and I've been using it ever since.",
            "So I'm guessing that I mean who?",
            "Who is used something in this square of languages?",
            "Here I'm assuming in this room everybody.",
            "I mean this is.",
            "This is familiar territory.",
            "This is not exactly.",
            "I've given talks to audiences where nobody has used anything in this in this whole sort of area of computing, and that's a very different kind of talk, but it's not what we're dealing with today.",
            "So what what exactly does this mean?",
            "Why other than?",
            "Obviously, it's something that's up here.",
            "I mean, one of the definitions I've heard given for a dynamic language is that it's sort of, you know, one of Perl, Python, or Ruby.",
            "Clearly, that's not a terribly general definition, so the obvious answer is that it's something that specialized somehow.",
            "For numerical work, and then the question then becomes what kind of specialization?",
            "How do we mean specialized and that's actually where things start to diverge.",
            "Where you start to get a lot of different answers.",
            "So Matlab, everything is a complex matrix, so that's not true anymore, but that was the original premise of Matlab.",
            "Was that just it was everything as a complex matrix is the best type system ever?",
            "There's only one type.",
            "And you know you can get remarkably far with this premise.",
            "But then at some point you're like well.",
            "I really want to string and then you know, so you start.",
            "You start doing things like turning arrays of character type into into strings and you know things get complicated.",
            "R and before it S whole one of the basic premises here is that you can have this notion of not available.",
            "All your data can be declared to be missing.",
            "Its very important idea in statistics.",
            "Another interesting idea here is that you would take this very, very complicated thing called the data frame, which is essentially sort of an in memory relational table of sorts.",
            "It's got named columns that can have different types, but everything in one column is of the same type and this is going to be one of your basic built-in data types.",
            "It's a very, very complicated data structure for a programming language to just sort of consider fundamental.",
            "The only thing I can think of that's as complicated as arrays in PHP or this sort of crazy multi.",
            "Multifaceted beast that can do just about everything, but it's very unusual for something that complex to be so fundamental Mathematica it's a little bit you know far field.",
            "It's not really numerical, it's more symbolic.",
            "It's a symbolic system that has a lot of numeric capabilities versus a lot of these other things which are numeric with some symbolic capabilities.",
            "And the NUM py NUM py is a little bit different here.",
            "It's basically you take a general purpose language like Python.",
            "It's a nice, reasonable, good, good language to work with.",
            "Very productive.",
            "You can get alot of things done.",
            "You can build a web server.",
            "You can do all sorts of stuff and then you sort of figure out like what things do we need to add to it to make it useful for numerical computing.",
            "And it turns out that the thing you really, really cannot do without is typed arrays.",
            "And what starts to happen here is that you start to see that everywhere here you need to have some notion of type you need to introduce some sort of way of talking about types, if for no other reason than so that you can say this thing here.",
            "This is an array of floating point numbers, and that's all it's ever going to contain.",
            "Um?"
        ],
        [
            "So what's interesting about this is that by this same criterion, other languages that don't fit into that little square.",
            "Are also maybe numerical, so the scheme spec for one of the later versions of scheme.",
            "This is a table of contents you can't really read it from this distance, but that's not really important point I've highlighted.",
            "The parts of it that are numerical and it's 20% of the specification of this like very, very general purpose, very simple, notoriously minimal language is all about numbers and arithmetic and how they're going to work.",
            "This section on the left here that says numbers looks bigger, but it's actually only one page.",
            "It's actually this arithmetic section.",
            "That's the real heavy hitter.",
            "It goes from page 39 to 47.",
            "Every single other high level topic in the entire description of the language, and its standard library.",
            "Is Max one page so this one section on arithmetic is 9 pages?",
            "So there's basically all these complicated behaviors that you have to like bake into the specification.",
            "Because you know numbers are complicated.",
            "The C 99 spec is pretty similar.",
            "It's 20% numerical."
        ],
        [
            "So something, something a little funny is going on here.",
            "What you know, the numerical languages are weirdly diverse.",
            "There's a lot of them.",
            "I mean, that's one of the interesting things about that square is just how many things are in there.",
            "General language are are strangely numerical.",
            "There's more numerical stuff going on in these like general purpose languages than we might expect.",
            "So what's going on?"
        ],
        [
            "So the hypothesis that we hit upon at some point, and this was actually sort of after the fact explanation we had already started to work on Julia when this kind of came about as an explanation, and the idea is that numerical computing is still this under generalized niche.",
            "Each language, the reason there's so many things in that's in that in that picture of numerical computing languages is because the definition of the language of a numerical language is one that specializes in each thing, specializes in a different way.",
            "So, of course, everybody has a different view of what it means.",
            "Oh no, we need to make unavailable data.",
            "That is the most important thing.",
            "Complex arrays.",
            "That is the most important thing.",
            "Everybody's got an idea of what the most important thing is, and as a result you know basically every person wants to invent their own numerical computing language.",
            "It's also the oldest niche.",
            "I don't know if that's necessarily significant, but you know, Fortran was the first compiled programming language, so.",
            "So the hypothesis here is that.",
            "Many diverse languages in this niche can be replaced by a single sufficiently powerful general purpose language, and that's the question, can we do that?",
            "Can we instead of having this like diversity of different things, have one thing that's somehow simpler and more general, but yet can do all of the things that we want to do in all of these other languages?"
        ],
        [
            "So a little bit of history here, and a slight diversion text processing used to be a niche.",
            "And it had a very similar, you know, cornucopia of languages.",
            "Snowball spitball commit track.",
            "You know, some of these you've actually heard of.",
            "SED, awk, Perl 4.",
            "And it was the same sort of thing it was all these different views of how text processing should be done.",
            "And it was this very special purpose area and you don't see these anymore.",
            "This is not a thing that anybody is actually, you know, nobody's programming and snowball that I've heard of in ever.",
            "And so instead people use one of these languages.",
            "I mean, increasingly Python is really winning this whole battleground because Python is this general purpose language that's that's good enough.",
            "It's the difference between being a special purpose language that specializes in some way of doing text processing and being a general purpose language that has really good support for text processing.",
            "You wouldn't call Python a text processing language.",
            "You would just say you know it's a programming language in which you can happen to do this thing."
        ],
        [
            "So the question is text processing used to be diverse and hard.",
            "Now it's unified and easy.",
            "Can we do the same thing for numerical computing?"
        ],
        [
            "Ann, I think the answer is yes, we're trying to do that with Julia and I'll let you be the judge of how well we're doing."
        ],
        [
            "So let's actually see some code.",
            "I think it's not a good idea to pontificate for too long without actually seeing, you know."
        ],
        [
            "A program, so here's this is one of our micro benchmarks that we used to measure.",
            "You know how we're doing?",
            "Compared to Matlab, NUM?",
            "Py are whatever.",
            "And you can see that it is very very MATLAB like.",
            "You basically declare a function, you give it a name.",
            "You give it a couple of arguments T&N you create some vectors of zeros.",
            "Then you do a four loop and you create some Gaussian N by N matrices.",
            "Do some array concatenation and take some powers and traces and then at the end you report some statistics on this.",
            "It's all very straightforward, and if you think anybody who's programmed in Matlab knows exactly what this does.",
            "But you can also do."
        ],
        [
            "Reasonably low level things, so this is also a benchmark.",
            "This is a quicksort benchmark and you know a couple of interesting things that start to deviate a little bit from the whole MATLAB background.",
            "One super trivial one is that there's a.",
            "There's an exclamation point at the end of the name of the function.",
            "What that means is it's just a convention.",
            "Variable names can have exclamation points at the end of them.",
            "That's just a thing, but we use the exclamation points primarily for functions.",
            "That are going to mutate one of their arguments.",
            "So unlike a lot of other languages like Matlab and R which try to do copy on write stuff with a raise, if you pass in an array in a function mutates it, the caller is going to see that.",
            "So in here this quicksort.",
            "This allows the quicksort to actually swap around elements in A and sort the array in place.",
            "The other thing you'll notice, which you could conceivably do in other languages, but it might be really, really slow, so anybody who's been trained to vectorize everything and avoid doing this sort of thing.",
            "You're just sort of manipulating little single elements around in the array and swapping their places, and that's you know.",
            "You know alarms will be going off in your head if you've been trained to program in Matlab and not do this.",
            "This is totally fine.",
            "This will generate low level efficient code that is similar to what C would emit, except with some bounds checks.",
            "There's easy ways to get rid of the bounds checks though."
        ],
        [
            "There's also that that's, you know."
        ],
        [
            "These are very sort of classical looking programming styles."
        ],
        [
            "This is a little different looking.",
            "What is going on here?",
            "This is weird.",
            "This is actually somewhat more idiomatic Julia.",
            "What this does is it defines a modular integer type.",
            "Couple of interesting features.",
            "It makes it a subtype of an integer type, which is an abstraction that you can write generic code tube that doesn't have, doesn't really care what type of integer it's dealing with, only just cares that it's some kind of integer.",
            "So that means you'll inherit a lot of general functionality just by virtue of declaring that this thing is an integer.",
            "It has type parameter.",
            "This type parameter is called NN is actually a number.",
            "So what we're going to do with this type does is it actually declares a new type of modular integer where the there's a whole family of these types, one for each integer N. It's the modulus that you're going to be working in.",
            "Immutable is interesting.",
            "Numeric things tend to be immutable.",
            "I think one of my favorite examples of a bug was that there was an early Fortran compiler.",
            "Bug that allowed you to reassign the value 2 to something else.",
            "You could say 2 = 5 and then from then on in the program to use two you would actually get 5.",
            "That's super, super weird and unintuitive.",
            "The reason it's unintuitive is 'cause numbers are immutable.",
            "They are defined by their value, not by some location in memory which you can write different stuff too.",
            "So, so that's.",
            "It's a little hard to explain the idea of immutable, but numeric things tend to be want to be immutable.",
            "It also allows if you declare something to be immutable.",
            "It allows the compiler to do all sorts of very nice optimizations, so it's both the semantics you want for numeric things and a really great thing for the compiler to know about.",
            "I'll go through this in a little more detail.",
            "How do I want to do this now?",
            "I'll do it a little bit later.",
            "I'll go through a little more detail with this example does later, but for now it suffices to say that just defines a bunch of operations on these on this type and how to make it interact with normal integers and then a little bit of nicety, and how to show it how to print it."
        ],
        [
            "OK.",
            "So why are numbers hard?",
            "Why do we even have?",
            "Why do we have 20% of general purpose language specifications dedicated to American Eric numeric stuff?",
            "And why is it so hard to come up with some general?",
            "System that is really, really good for numeric things.",
            "So I mean the first obvious weird thing about numeric stuff is that for some reason we want special syntax for it.",
            "We want infix operators for plus and times and exponentiation.",
            "And if anybody has tried to write numeric code in Lisp, will immediately understand why the like completely.",
            "Completely gender, you know the the uniform syntax that is so nice for so many other things becomes horrific as soon as you want to do arithmetic.",
            "Not sure why that is, but that's just the way our brains are wired.",
            "Then there's semantics.",
            "It's not just.",
            "It's not just the surface thing.",
            "Numeric operators are usually not just functions, so in C. You cannot write a function that does what the plus operator does.",
            "It's two polymorphic, it does too many different things.",
            "You can add an integer and float, and you can add afloat and afloat.",
            "And an indignant you cannot do that with a function in C because it's completely monomorphic a function if you wrote an add function, you'd have to specify exactly what types of arguments it takes, so already plus is like broken the mold there.",
            "Other languages allow you sort of budget more or less.",
            "You know, C++ allows you to do a fair amount of fudge ING.",
            "Ruby lets you do some, but you know if you switch the order of addition then you're in trouble.",
            "Python has some horrible hack called R Add that lets you actually get away with that, but it's very very specific to addition.",
            "There's also special promotion rules, so this is this is largely.",
            "This is the stuff that is that 20% of the scheme and see specs is like how this stuff works.",
            "So essentially what's going on here is people have been like OK, this stuff is hard.",
            "We're going to make some reasonable decisions about it, bake it into the language, and then you're done.",
            "If you want to make up your own stuff.",
            "Sorry you can't.",
            "You can't make up your own numeric types and have them be as first class is the ones that we baked into the language.",
            "Again, this compact arrays thing.",
            "This is very important.",
            "Will come back to."
        ],
        [
            "But so just to keep things interesting, here are some other things that scientists want extreme convenience.",
            "They want everything to just work or they will just walk away in frustration.",
            "Because why does this thing not work?",
            "I know that's not generally true, but I certainly know some math professors who are not going to put up with Haskell, for example, like that's just not happening.",
            "Ironically, they know a lot of category theory, but I don't think those are actually that related.",
            "They want code that looks like pseudocode.",
            "Huge standard library.",
            "You just sort of want to start the thing up and be able to do pretty much anything.",
            "You know.",
            "Maybe if I got to install a package, I'm going to be a little bit annoyed, but maybe I'll put up with it.",
            "And really, you know top level performance?",
            "Absolutely the best.",
            "So these just keeps keeps life exciting."
        ],
        [
            "So here is a I'm half joking with this slide design overview.",
            "This is way too much stuff to put on one actual slide, but.",
            "At a high level, this is sort of what we decided to do.",
            "We picked a dynamic system rather than a statically compiled system we added.",
            "This is an unusual combination.",
            "We added an expressive type system in a dynamic language.",
            "Usually dynamic languages don't do any type checking and they also just say, you know, we're not even going to let you talk about types.",
            "Don't worry bout types, don't talk about types, just pretend the types aren't around.",
            "So what we decided to do is we're going to give you a language to talk about types, but then we're not going to type check it.",
            "Weird crazy, I don't know.",
            "Seems to be OK, but it does freak people out sometimes.",
            "It's unobtrusive in the sense that you know you saw that code that looks like Matlab.",
            "You never have to mention types if you don't want to.",
            "That code will run at totally fine C, like speed.",
            "It's not really what the type system is for, it's not for performance primarily.",
            "It's for expressing the behaviors of things metaprogramming.",
            "If you're from.",
            "If you're familiar with lists, but this is kind of a thing.",
            "Homoiconic means that your code is represented as data in the language itself, which means that you can use all the power tools of the language to actually generate and manipulate code.",
            "Um?",
            "For a dynamic language, I think this is a no brainer.",
            "I don't know why you wouldn't have metaprogramming and then multiple dispatch.",
            "This is this is a.",
            "This is an old idea.",
            "It's an idea that's been around for a long time.",
            "It basically means that when you when you invoke a function.",
            "When you just want to decide what version of the function to call, you can have multiple different versions and you pick one based on all of its arguments, and I'm going to demonstrate that in a fair amount of detail it's pretty intuitive.",
            "It turns out to be really weirdly powerful.",
            "And it's really sort of the core of the of the language.",
            "And then there's other things that are, you know, important concurrency and parallelism.",
            "You can do distributed computing with relatively little fuss.",
            "IO is based on this same sort of principle and we're working on multithreading.",
            "This is a hard problem.",
            "You can't really do first class multithreading in any of the dynamic languages that you're.",
            "Probably familiar with Python lets you do multithreading, but only one thread can be doing work at a time, so we're working on actually being able to do work in multiple threads at the same time, which it will be awesome when it works.",
            "Keep fingers crossed."
        ],
        [
            "OK, So what does dynamic typing even mean?",
            "I've said this a bunch of times.",
            "It is it basically means that.",
            "Well, there's a.",
            "There's a technical description of it which I didn't put up here.",
            "Basically, the difference between a statically typed language and a dynamically typed languages that in a dynamically typed language there's this notion of the type of every expression, and the compiler sits there and determines what the type of every expression is, and make sure that what you wrote makes sense.",
            "In a dynamic language.",
            "It's not expressions that have values, its types.",
            "It's values that have types.",
            "You just have values floating around.",
            "You can do stuff with them, and when you try to do some operation on some types, whatever the result is, it is, and that's either OK or it's not, so you don't get errors until runtime in particular.",
            "It has this kind of customer is always right.",
            "Feel to it.",
            "You know you can write some code and compile the programming language is not going to be too fussy about.",
            "It's going to try to do it and see how it goes.",
            "Whereas statically typed languages will kind of, you know, complain at you and be like no, no no this is this is not type checking and give you some sort of error very early, which can be good and bad.",
            "The main thing that's really nice about this for data analysis and for interactive work is just that it feels tangible.",
            "Like when you're working with it, you let me let me pull up the Julia REPL, so this is the Julia REPL.",
            "I'll start it again.",
            "Our banner got mangled, but that's a nice little banner.",
            "It's got some color.",
            "You know you can do some very basic things like that.",
            "You can do some more complicated things like.",
            "Hadamard matrix if you want to do it with rational numbers instead of floating point numbers, you can do that as well.",
            "It's pretty easy that the double slash is just a syntax for constructing irrational that we picked.",
            "You can.",
            "You know square things.",
            "You can do elementwise squaring, which then doesn't do doesn't blow up as much.",
            "'cause it's not.",
            "You know you're not relying on the fact that this is a really ill conditioned matrix.",
            "So you can see that it's very tangible.",
            "You can actually interact with and feel that you couldn't do this in C, right?",
            "That's not just not how you interact with C, so this is the kind of feel we really wanted to have, and you know, you get this in all of these dynamic, high level languages.",
            "There's a reason why all of these systems are dynamic.",
            "And this is it.",
            "You can also see a couple of other things you can see.",
            "That were printing the types of things so you know normally, unless you ask for who's in Matlab or some sort of description of something in a language, you don't really see types very much.",
            "But we print types because it's pretty useful to know that this is an array of rationals of in 60 fours and so those curly braces indicate that you have a type parameter of some kind.",
            "You can see that.",
            "You know?",
            "Type of that guys in 64.",
            "That's a float 64, so this is not nothing surprising.",
            "You don't have to go very far before you see that you're getting.",
            "You're getting parametric types, so the rational type is actually.",
            "Let's see, let's see if we can find this.",
            "Wow, this is doing.",
            "OK. OK, so.",
            "So the rational type is actually defined right here in Julia code, and it's similar to that MoD and example that we saw.",
            "It's just it's an immutable type.",
            "It has a numerator and a denominator.",
            "What's interesting about it is that it has a type parameter as well.",
            "Before we saw type parameter, that was a number N. In this case, it's actually a type T. The type parameter is itself a subtype of integer, and rational is a subtype of real, and then what you do is you declare that NUM numerator and denominator are both of type T, so they have to be of the same type.",
            "But that type can be any kind of of integer.",
            "And then the constructor is just this function that we put inside of the type block, which takes a pair of arguments, checks that they're not both 0, does a GCD computation, and then uses this little new thing, which is sort of like a function that only exists inside of the type block and actually gives you a new object.",
            "And you can let me move this over to here.",
            "And you can see that if you do rational.",
            "That's that's actually just exactly what the syntax does, and you can see it's actually it's actually defined right here.",
            "This says that if I do end slash slash D and they're both integers, just call the rational constructor on them.",
            "And then it gives you a bunch of other things you can do.",
            "If you take a rational slash slash an integer, you just get a rational.",
            "Various other stuff.",
            "Similarly, you know if you do.",
            "A complex number.",
            "This is actually also a parametric type.",
            "It's defined very similarly.",
            "You can have any real or any real type of component, so you can do.",
            "You can have a rational integer, but you can also have a rational float.",
            "And this is the the complex or sorry, not not rational complex.",
            "This is the type you're used to working with complex numbers, but you might very well want to actually have this complex integer type because you want to have integer components, and they're more efficient.",
            "The operations can be more efficient.",
            "You can also do things like this.",
            "You can get a.",
            "Complex, rational and.",
            "OK, so let's let's briefly return to.",
            "Let's actually return to that example that I gave.",
            "Examples where am I?",
            "Now, so this is we also have a built in shell mode.",
            "I'm going to switch to.",
            "My Julia directory.",
            "And then.",
            "Here's that modular integer example I was showing you before what we're going to do is just load it so.",
            "Include.",
            "I misspelled include.",
            "Oh, and I don't want to be in shell mode.",
            "OK, so now.",
            "What I can do is I can construct in a modular integer MoD 13 with some random junk and I get this.",
            "I get 7 MoD 13, which is that number reduced MoD 13.",
            "I can come up with some other random junk and I get 3 MoD 13.",
            "I can already do A+B.",
            "Where did that come from?",
            "So the addition?",
            "What happened with the addition?",
            "Is this got called and actually we can see that if you call which which is a macro that looks at an expression and figures out which version of the plus function is going to get called, 'cause there's actually lots of different versions of the plus function floating around, and it shows you that it's in this modern file.",
            "And you can also do edit and it will actually take you right there to the exact line that it's defined on.",
            "So what's going on here?",
            "What's going on here is that.",
            "Well so N is this is this.",
            "Type quantifier.",
            "So basically what this says is we're going to define plus for all N. To apply to two arguments A&B, where a is a MoD int with type parameter N&B is a model of type parameter N. And then in that situation, the way the definition of this is going to be that we're going to add the K fields of A&B, and then we're going to construct a new modern with that.",
            "It's pretty straightforward.",
            "Um?",
            "An interesting thing about this is that if we.",
            "Construct a MoD and MoD 12 say.",
            "And we try to do a plus B as you call.",
            "Works C. Oh OK, it doesn't work.",
            "Which is the reason it doesn't work is because.",
            "It doesn't create.",
            "Can't call this code because the ends don't match.",
            "So A&C have different type parameters, one has has N 12 and the other one is N 13.",
            "And implicit in this definition is that the ends have to be the same.",
            "OK, so this is, you know this is all fun and games but.",
            "You can get a lot more happening than just a little bit of that.",
            "So what I'm going to do here is I'm going to construct a matrix of these guys.",
            "OK, so I applied the map function.",
            "This is your usual functional programming.",
            "The modern 13 type is actually a constructor.",
            "You can just apply it to things like a function and it turns things into that type and then this random one through 1000 just samples random integers between one and 1000 and gives you a 5 by 5 matrix of those.",
            "So the combination of this is that you get an array of modern thirteens.",
            "And it's got 2 dimensions.",
            "That's what the two there stands for.",
            "If it was, a vector would be one.",
            "If it was a three tensor, it would be 3.",
            "OK, that's pretty cool.",
            "We can also square it, which is nice.",
            "Multiply it by two.",
            "You know, add it to itself.",
            "And all of this stuff just gives us exactly what you know.",
            "The correct modular arithmetic does.",
            "And there's a, you know, an efficient implementation of the of the power by squaring methods, so that is not.",
            "That is pretty pretty efficient and fast.",
            "Other interesting things are that.",
            "For example, size of A is exactly 200.",
            "So.",
            "And Sizeof A is is 8, so the storage representation of these guys is very efficient because all it is is that this very thin wrapper around around an integer and int is 8 bytes.",
            "And so, because these guys, these things are immutable, we can just stick them and we know the exact type of the array.",
            "All we need to do is store the data and then the type is actually on the array object.",
            "But all the individual elements don't need any sort of type information, they're just sort of.",
            "You know exactly what they are and what they are, what they are supposed to mean.",
            "All you need is the data.",
            "You just need the 8 bytes for each value.",
            "You can also see that yes.",
            "We're just returning for size of the storage.",
            "So in dynamic systems, which you end up having to do is keep track of the type of everything, 'cause you haven't computed it ahead of time, so these the.",
            "The thing that stores in memory what type something is is known as A tag.",
            "It's basically just a little chunk of words.",
            "It's usually you know 8 bytes right in front of the actual data.",
            "And it's you know.",
            "So that's what you actually are pointing at when you look at an object, and the first thing you do is you look at it and you're like, OK, it's this type.",
            "And then you know how to interpret the data.",
            "Um?",
            "You don't always have to, though, so for example, I'm going to get into an example shortly.",
            "Where will see that this stuff?",
            "A lot of that tag information that's normally so in Python.",
            "The tag is always there, you always have to allocate this thing.",
            "You always have to work with it.",
            "Same thing is generally true for Matlab.",
            "Are all these other languages.",
            "One of the tricks to making things efficient and fast and Julia is that we often have eliminative that need so you can write, you know, high level code the way you want it too.",
            "And conceptually, it's as if you keep this tag information around and do everything dynamically, But what actually ends up happening is you get very, very efficient inline code.",
            "And we'll see an example of that in a bit.",
            "Actually, you can see a little bit of it.",
            "Here in that.",
            "So.",
            "We can see the code for this.",
            "So LVM is the compiler infrastructure that we use.",
            "And you can see that all that's happening when you do.",
            "In addition, here is that you extract some values, which is actually not an operation.",
            "And then you do a remainder, some comparison, some addition, and some remainder.",
            "But there's still more code than I'd like to be seeing here, but it's relatively efficient.",
            "There's an outstanding LVM issue that makes remainder very inefficient, which makes me unhappy, but there's not much I can do about it except argue with LVM people.",
            "So what this Julia Hanson is actually she she was in something called Hacker school when she learned Julia at some point she had this epiphany that Julia uses the type system in all the ways that don't end with the programmer arguing with the compiler.",
            "And I really like that.",
            "So that's sort of a quote.",
            "I like to like to cite."
        ],
        [
            "So the classic everybody loves dynamic environments and the classic compromise that most systems have taken is that you know.",
            "They use a slow, slow language for the convenient high level stuff, and they use a fast language for the low level stuff and it's sort of, you know you stay in the high level slow language as long as you can and you're comfortable with it.",
            "And then as soon as you hit something really performance critical, you drop down into see it's always see sometimes it's Fortran, but it's always see.",
            "An you know this is actually very effective, but it has some issues and I found that one of the biggest issues that huge creates a huge barrier to development so it separates users from developers very.",
            "There's a very sharp line, right?",
            "If you're a NUM PY user, you probably do not have to touch any C code when using it.",
            "If you're an umpire developer, you almost definitely have to touch C code on a regular basis.",
            "And so that means that there's sort of this fairly fairly steep and non porous boundary between the two sides.",
            "The users and the people who work on it, and the people who work with it.",
            "I also think it's just a sign of a poor abstraction barrier.",
            "Poor abstraction if you keep having to go across the barrier.",
            "So every time you're like, oh, this is too slow.",
            "I'm going to have to pretend I'm going to have to breakdown the abstraction boundary and justice like reach into the guts and start programming and see.",
            "So maybe you know the boundary should be somewhere else."
        ],
        [
            "So great and horror is the creator of Rust.",
            "Wrote this very nice and flattering a couple of essays.",
            "It wasn't entirely about Julia is mostly history, but at the end you talked a little bit about it and he described Julia like Dylan, and List which are two other dynamic languages with lots of cool features as Goldilocks languages.",
            "What he means by that is that you're trying to span the whole spectrum of everything that everybody might kind of want to do.",
            "You trying to make one language is good enough for everything, maybe not perfect for everything, but good enough to get it done.",
            "So from low level to high level.",
            "And these are the opposite of the two language systems.",
            "So the two language systems say, hey, now we're not, we're not going to get everything done in one language, so we're just going to.",
            "This is saying, you know, we don't.",
            "We don't want that compromise.",
            "We want to just have one language is good enough for everything."
        ],
        [
            "OK, so let's talk about performance, yes?",
            "After my.",
            "Something similar, yeah, so it's actually very easy to call C. It is.",
            "You don't even have to write a file to do it.",
            "There's a thing called call an you can call, for example the Clock function.",
            "Which.",
            "I believe returns Assynt and takes no arguments.",
            "And it will give you the time.",
            "The epoch Time is an integer.",
            "You can also do other things like.",
            "Get in.",
            "OK, so I'm going to sign sign this to something so get in.",
            "Returns a.",
            "Avoid pointer and takes a void pointer.",
            "An you want to pass it a string.",
            "And let's say I pass it the string shell because I want to get the shell environment variable.",
            "And this gives me a pointer thing, which I'm like.",
            "OK, well, what am I supposed to do with this pointer?",
            "But there's a byte string function which knows how to take a pointer and turned it into a string.",
            "Oh do I have to convert this?",
            "We changed the rules for this recently.",
            "There we go OK. That was suspenseful, right?",
            "I wasn't.",
            "I wasn't sure if this was going to work.",
            "I we made.",
            "We made the bytestring thing a lot more finicky recently 'cause we didn't want people abusing it, but yeah, so I get my.",
            "You can see I'm one of these weird people who uses ZSH.",
            "One true shell.",
            "Yeah, so it's very easy to call C. It's equally easy to call Fortran, although some Fortran compilers have weird calling convention issues.",
            "But if you use G Fortran, it's OK.",
            "Does that answer your question?",
            "Um?",
            "You have four groups you just implemented or concealment right so?",
            "No, in Julia what you would do is you would just write a for loop in Julia and it would be fast.",
            "So let me let me actually.",
            "I'm going to get to this anexample a little later, but um.",
            "Oh hell, let's just go to it right now since it came up now."
        ],
        [
            "Um?",
            "Is anybody familiar with the Collatz conjecture?",
            "It's a room full of mathematicians.",
            "Someone must have heard of it, so the conjecture is that this function here this collatz function, which takes an integer N. What it does is it does this one operation on it.",
            "It checks if it's odd, you multiply it by three and add 1.",
            "And then if it's even, you just divide it by two and I did a little bit twiddling you do a right shift, and that's equivalent to dividing an integer by two, which bear with me.",
            "You could just write end if two and that would work too.",
            "Count how many iterations of this goes on just so you can return a number.",
            "So I mean, it's not entirely clear that this will always stop.",
            "But the Collatz conjecture is that this will always terminate.",
            "Nobody they've checked, you know billions and trillions of numbers and this always seems to terminate, but no one can prove it.",
            "And it's actually even been conjectured that the conjecture is independent of ZFC, so that's you know, even weirder.",
            "So let's take this code.",
            "An actually implement it and you'll forgive me.",
            "This isn't a for loop, but it's a while loop.",
            "You can see that it's probably pretty close though.",
            "And you want to see what this does, OK?",
            "OK, that's sort of interesting.",
            "It'll be more interesting if it shows us what it's doing.",
            "So here you can see that there was a fairly long, you know 46 numbers that it went through.",
            "To get to the end there for 10, it's a much shorter, so this is every number that it goes through.",
            "It starts at 10:10 is Even so it divides it by two.",
            "You get 5.",
            "Five is odd, so you multiply it by three and you add 1.",
            "You get 16 /, 2 yadda yadda yadda.",
            "You know it's this weird thing that this always terminates, but we don't actually know that.",
            "And that we're going to encounter a case where it doesn't these days.",
            "So let's look at the actual native code generated by this.",
            "So this is the OK so you can see that this, even though this is high level code and it's you had a while loop in there.",
            "This ends up being very efficient.",
            "This is not not to be sneezed at.",
            "This is mostly not my work to make this this efficient.",
            "Jeff Bezanson, who's one of my collaborators, is just a genius at making things very fast, so most of the credit is due to him.",
            "Another thing you."
        ],
        [
            "Can do.",
            "That's interesting and you know first of the collatz example is in."
        ],
        [
            "Testing because it's very hard to.",
            "How would you vectorize this?",
            "I don't know what you would do.",
            "I think your only option in MATLAB is to is to write a Max file.",
            "I don't know how you would possibly think about vectorizing this."
        ],
        [
            "And then of course, you know this is this computes all of the collatz numbers up to a certain N. Or the iteration counts, but actually shares work between them.",
            "And this is some like horribly devious algorithms I came up with in a moment of.",
            "Insanity and this you really like.",
            "You know there's no way you could possibly vectorize this, but it's relatively doable this way.",
            "So this uses a for loop and it's sufficient, and it's it's it's 10 times faster approximately than the other than actually just counting them all out and not sharing the work.",
            "I was a little disappointed that it didn't scale better than that, it's just always 10 times faster, so there must be some sort of weird scaling property with like how much work is shared between callouts iterations.",
            "But that's beyond my number theory, so I don't know.",
            "Yeah, so yeah OK. We were talking."
        ],
        [
            "Performance so micro bench so you can see that we generate efficient low level code.",
            "These are some micro benchmarks, some of a couple of them you saw.",
            "On the other the other slides.",
            "The mat Rand Mat stat is one of these guys.",
            "It's the yellow benchmark.",
            "The quicksort implementation is exactly that quicksort one I showed on the slide.",
            "We actually have a cleverer, more heavily tweaked one that's in our standard library, but that's just sort of the really basic one that's in.",
            "That's in the in the benchmarks.",
            "And we're.",
            "You're comparing it to high level implementations in these other languages, you can call a sort function, But the question is really just how quickly does the language manipulate.",
            "You know individual elements in an array.",
            "Not how fast can you do it in C. That's really not the interesting question you want to know how fast the native recursion in the native iteration is.",
            "This is a log scale graph, and it is.",
            "It is the time taken on each benchmark relative to see, so if you're one you're very close to see if your tenure 10 times as slow as see if you're you know 10,000.",
            "Which Octave occasionally is.",
            "You're a lot lot slower than C. So you know you see sort of things that you might expect, which is that Fortran is pretty fast.",
            "Sometimes it's actually way faster than C, sometimes it's way slower, way slower.",
            "One was integer parsing, parsing strings.",
            "So that's actually not too surprising.",
            "Go is pretty fast.",
            "That's sort of in that nice nice performance range.",
            "JavaScript is shockingly fast.",
            "Then you know Python is pretty reasonable, Mathematica R so on.",
            "So I mean, these are these are micro benchmarks.",
            "They're relatively contrived, we wrote them originally to test ourselves and see how we were doing, and we were terrible at these at 1st and then eventually we got better.",
            "And now we're very close to see on every on every benchmark.",
            "But you know this may not be fair.",
            "It may not be realistic.",
            "It may not be real."
        ],
        [
            "So here are some reports from the real world on performance.",
            "Julia gives rather significant boosts over Matlab, R sometimes, but even more than the benchmarks might suggest.",
            "That was surprising to me, since I expected the gap to be largest for benchmarks.",
            "This is Tim holy.",
            "He's one of our major contributors, but this was early on when he was assessing the language.",
            "He seems to think, and I think this is plausible that it's because you have a little more control over how you use memory, so remember that exclamation point on the quicksort example.",
            "The fact that you can just pre allocate an array and then use an inplace algorithm on it gives you a lot of latitude to avoid allocation an.",
            "You know if anybody has tried to avoid allocation in other languages, you know that it's kind of, it's tricky.",
            "Python makes it easier, but R and Matlab certainly make it very difficult."
        ],
        [
            "These are some simplex benchmarks.",
            "This was Miles Lubin and Iain Dunning are at MIT, and they do a lot of optimization work.",
            "Arguably they should probably be talking here instead of me, but I know you gotta settle for me.",
            "They did some benchmarking of sort of the basic operations you need to do sparse sparse simplex algorithms, sparse mat, VEC, sparse vector scan, XPY, and they found that it was the same sort of thing that Julia is within.",
            "You know, between one and two times slower than C An.",
            "You know this.",
            "Obviously C++ with no bounds checking is the fastest thing you can come up with."
        ],
        [
            "This guy Rama batheon.",
            "Did a comparison of finite element programming in a couple of different systems an wrote a fairly simple Julia."
        ],
        [
            "Solver and it scales pretty well.",
            "Compare is OK.",
            "It's slightly faster or slower.",
            "It's sort of between these guys for some of the time, but it does OK."
        ],
        [
            "And this is what he had to say about it.",
            "The relative ease with which various strategies can be implemented and tested without learning leading to code swell, while at the same time resulting in high performance code.",
            "So that's sort of what we're aiming for is that you can write simple, clear, high level code an it's going to have reasonable performance, and if it doesn't have reasonable performance, the first time you write it, you can tweak it without too much fuss and get something that's OK."
        ],
        [
            "OK.",
            "So how does it go fast these days?",
            "There's a lot of systems that are high level dynamic languages that are actually pretty performant.",
            "JavaScript V8, which is what was on the benchmarks that was, you know, shockingly far over there.",
            "This is running in your Google Chrome browser.",
            "Lua jit pypi.",
            "These all actually completely work in a different way than what Julia does.",
            "Julie, to static compilation at runtime.",
            "Which is a weird quote that I didn't understand at first.",
            "This guy Carl Bolts is a pie pie developer and he said this to me at dinner one night and I just I was like what are you talking about and what he meant is that all these other systems they use this just in time compilation to mean doing all sorts of tricks like compiling something, expecting it to do one thing and then if it doesn't do the thing you expected it to do, replacing the code dynamically while it's running with some other code.",
            "Which is nuts.",
            "But it works.",
            "This is how these systems work.",
            "We don't do that if we've compiled some code, we leave it alone.",
            "That's it.",
            "It's always going to be the code that's going to run.",
            "We just haven't given ourselves enough type information to do that fairly correctly.",
            "Actually, just correctly, it may not be optimal, but it's always correct.",
            "So basically we've cheated.",
            "We just designed this language to make it easy to run fast instead of taking an existing language that's hard to make, run fast, and you know doing crazy acrobatics to make it faster.",
            "We just were like, well, we just tweak a few things that make things a lot easier for us.",
            "Alright, so we already looked so."
        ],
        [
            "Other key performance tricks.",
            "So just in time code generation is crucial to this.",
            "This means that if when I enter code at the prompt system is never seen it before it compiles it.",
            "When it runs it.",
            "So the first time it runs the lots code it has to compile a version of it.",
            "If I ran it for.",
            "So let's say.",
            "You know this is the version that runs on integers, but let's say I wanted to run it on.",
            "Big integers, it had to compile a new version.",
            "So now I can run this on, you know, a really big integer.",
            "Something really fishy is going on here.",
            "With power.",
            "It's possible there's something wrong with one of these methods for big integers.",
            "Oh oh, it's power of two.",
            "Yeah exactly.",
            "I just picked a bad example, that's why.",
            "I'm glad someone's awake.",
            "And it's not me.",
            "There we go.",
            "OK, yes.",
            "OK, so we can you know that took a little while but you can do this with big integers as well as integers and it's just it's different code running.",
            "But you don't really have to think about the fact that that compilation step is happening, which is what is what's nice.",
            "That's the dynamic interactive part.",
            "So there's also this very clever dataflow type inference implementation that I have a notebook that I can talk about, but it's a little I think you guys probably aren't that interested in it, so if someone wants to ask me about it later, they can, but I'm not going to go through it now.",
            "Jeff Bezanson, like I said, is the true performance artist.",
            "Here he's the guy who makes all of this possible."
        ],
        [
            "But Julia isn't really about performance.",
            "That's not the point.",
            "You, the benchmarks grab people, but the real killer is writing this high level generic code and having it applied to lots of different types and generate good code so you don't have to write lots of boilerplate or lots of C. And it sounds esoteric, but really crucial to this whole thing is multiple dispatch.",
            "Which I'm going to explain now.",
            "So what is multiple dispatch?"
        ],
        [
            "So dispatch means choosing what version of some function version of a function is known as a method based on the runtime types, not the static types.",
            "And it's based on all of the arguments, not just the receiver.",
            "This is some you know if you've programmed in object oriented languages, you'll recognize AF of B, C as a method call on the object A.",
            "You don't write things like this because in multiple dispatch that which version of F gets called depends on a B&C.",
            "Not just a.",
            "It's different than method overloading, but I don't really want to get into how."
        ],
        [
            "Exactly.",
            "Instead, I'm just going to.",
            "Give you a little bit of a taste of it.",
            "So this is the I Julia notebook, which is if you use the Ipython notebook.",
            "This is basically the same thing, except it's gotten a Julia kernel running in the back.",
            "We spent a very productive week.",
            "A while back with Fernando Perez, who was the original creator of the Ipython notebook, he invited us out to Berkeley and we hacked this out and it's been very popular ever since, and it's good for giving demonstrations.",
            "So what I'm going to do is I'm going to create this function F. And I'm going to define a bunch of different methods for it and the way this works is that you know I say F of A comma B equals fall back.",
            "This is equivalent to leaving this off, so if you leave a type annotation, that's what the colon: and then the thing thing afterwards is the type.",
            "If you leave it off, it's assumed to be any, so this fall back will get called be called if I don't know anything more specific to do, and I have two arguments A&B.",
            "This next method.",
            "Will be called if I have two things that are both numbers and I don't have anything more specific to call.",
            "This FA number and B anything will be called if A is a number and I don't know anything better about B and so on.",
            "OK, So what you see here is those methods that we just defined.",
            "Another interesting thing about this output is that they're output in a very particular order.",
            "Their output from most specific to least specific.",
            "So when you're looking for what version of something to call, you can look down this list and just conceptually what happens is that the system just looks down this list and calls the first one that matches.",
            "So.",
            "Essentially, you know.",
            "So let's say we have this function call.",
            "F of 1.5, 2.",
            "What happens here is it goes to the first method and says OK, I've got A&BA is a floating point number and B is an integer.",
            "Does the first method match?",
            "No, because a is not an integer.",
            "Does the second method match yes and we are both numbers, so I'm going to call that method and the method.",
            "What that method does is it prints the, returns the string.",
            "A&B are both numbers and you can see that that's exactly what happens here.",
            "Now if you do something like call F with one and a string bar.",
            "It goes down the same list and it goes OK. Is is an integer?",
            "Yes it is B.",
            "It's not an integer is a number.",
            "Yes it is.",
            "Is it be a number?",
            "No it's not.",
            "Get to the third one you say is a number.",
            "Yes, is B?",
            "Well, we don't have any restrictions on be here.",
            "OK, so that's the method you call.",
            "Conceptually.",
            "This is what happens in actual practice.",
            "Obviously, like scanning through a list like this would be super slow.",
            "That's not how it's done.",
            "But you can think of it that way so you can see that these.",
            "You know this method here.",
            "The method that's called here is the fall back because we don't know anything specific to do with a string in an array of integers.",
            "That's just not a thing we know how to deal with, so we just called the fall back.",
            "If you call it with, we've only given it methods that take two arguments.",
            "So if you call F of 123, you'll get an error that says F has no method matching this type signature, which is 3 integers.",
            "OK, so this is.",
            "This is the basics of multiple dispatch.",
            "It's pretty intuitive.",
            "I think it probably makes sense to you know most people right away.",
            "Nothing crazy.",
            "There's a number of other languages that actually support stuff like this.",
            "There's very in Common Lisp can do this closure as support for it.",
            "Similar to pattern matching and you know in a lot of EM languages.",
            "Mathematica can do very similar stuff.",
            "Here are some of this is some of the interesting features that you know we've already touched on a little bit, but that are a little bit strange.",
            "So here F. We give it a new a new method that is have got one of those type parameters.",
            "So it's gotta gotta type parameter T which is got to be a number and then A&B are both of type T. So what does this mean?",
            "Why is this?",
            "What is going on here?",
            "What this means is that A&B are going to be.",
            "T is going to be some subtype of number an A&B are both going to be of the same type.",
            "We don't know what type of subtype of number, but it's going to be something it's gotta match.",
            "That's the key here, so this is distinct from the rule we had up here where it was just a is any kind of number is B and it be is any kind of number, and that this says this is going to get called if A&B are both of some type and it's the same type.",
            "So now what we can see is that if we call it on two big ints or two big floats rather we get the message A&B are both big floats.",
            "Another thing you'll notice is that the type parameter could can be used in the method body.",
            "So it's something that you actually have access to when you're writing code, which can be handy sometimes.",
            "The integer rule is still more specific.",
            "And it only applies to things that are numbers.",
            "Because of the type constraint in the in the quantifier.",
            "So this sort of thing turns out to be really, you end up doing this a lot in numerical code because it's very common to be like.",
            "Well, I know how to add two things if they are of the same type, but if they're not of the same type, I gotta do something else.",
            "I've got to convert 1 to some other type and then try again.",
            "Which is why we added this feature.",
            "It's a sort of fancy feature and you know we wouldn't have added it unless we really felt like we needed it.",
            "Yes, yes, so this is now.",
            "You can see that.",
            "Yeah, methods F you've got this extra method stuck in there.",
            "And you can see that it's you can also see where it falls on the specificity hierarchy.",
            "It's less specific than two integers.",
            "But it is more specific than two numbers where they're not constrained to be the same, so we refer to this as diagonal dispatch.",
            "An if you think about a table with the type of A and the type of be along the side and the top.",
            "The reason its diagonals because the places where it matches is down the middle where the type of A and the type of beer equal.",
            "It's like the diagonal of a matrix, the matrix of where the dimensions are types.",
            "Um?",
            "You can also do things like.",
            "This is getting even more fancy.",
            "Variable numbers of arguments, so this dot dot says that Args can be any number of.",
            "Any number of numbers.",
            "You can also do this diagonally, so this is going to be any number of numbers.",
            "Or elements of type T where T is some type of number, but they all have to match, so this is going to match for you.",
            "Call it with any number of arguments, but they're all of the same type and it's all some kind of number.",
            "Can you do things with the dispatch system and Julia?",
            "That's impossible with dumb plates in sqlplus for instance?",
            "That's a good question.",
            "The C template system is Turing complete, so it is hard to come up with something that you can't do with it.",
            "Whether you want to do it is a different question.",
            "I don't know.",
            "I'll have to think about that.",
            "That's a good question.",
            "You can do some crazy stuff with C templates, so it's I'm not entirely sure.",
            "So what you'll see here is that this this prints out heterogeneous or homogeneous calls.",
            "So unary homogeneous call, well, you know there's only one argument, so it has to match itself, so it's homogeneous.",
            "Um?",
            "This is a ternary homogeneous call that they're all in tight integers, so it all matches.",
            "But if we throw a floating point number in there now, it's now it's heterogeneous.",
            "So.",
            "So this one is interesting.",
            "Zero area heterogeneous.",
            "Why is that one heterogeneous?",
            "The zero things took me awhile to puzzle this one out.",
            "It is because.",
            "Up here you're allowed the T has to be bound to something because you can, for example, use it in the in the function body.",
            "So if there are zero arguments, you don't know what to bind it to, so it actually doesn't call that method.",
            "But you know if we really, really want this to be.",
            "We can just call this, you know zero.",
            "And then.",
            "You know, we've basically just patched in the behavior we wanted there.",
            "OK, now it does what we want, but that does demonstrate one of the nice things about this system is that you can very easily sort of Patch in special case behaviors, which is really common, so you know, for example, let's say you're writing some numerical code and you have some function that you want to call it on particular types of matrices, and we have special types of matrices, for example.",
            "You tried symmetric tridiagonal matrices.",
            "That's a special type.",
            "It's got special storage representation.",
            "We can call special lapack versions of things that are much more efficient.",
            "An you know you want to call a general version if you have one, you know if.",
            "You want to call special version of the function when both arguments are symmetric tridiagonal matrices.",
            "It's a completely plausable thing to do in numerical computing.",
            "You'd have to go in and sort of hack into the definition a bunch of if else clauses in without multiple dispatch, but with multiple dispatch, all you have to do is add 1 little method and now it's done and it just calls the exact right thing, so that's sort of why this is so handy for this type of computing, and I'm not sure I don't really know exactly why numerical computing has so much of that sort of thing.",
            "But you know, calling selecting the right code is just a very important thing to be able to do."
        ],
        [
            "So another thing about multiple dispatch that's nice is that it actually seems very intuitive.",
            "Intuitive enough that I discovered I realized at some point that it's baked into the standard library of a lot of languages, and since I've done a fair amount of Ruby programming, I went through the Ruby book and found all of the standard library things that actually emulate multiple dispatch, so these are all the cases where some different behavior happens based on the runtime types, types of multiple arguments.",
            "So I mean, the specific details aren't really important, but what you can see is that there's a fair amount of this type of polymorphism.",
            "That actually happens in like a normal language, so I just think it's convenient."
        ],
        [
            "To think about, and I thought about it some more and I realized I was like.",
            "Why is this so familiar?",
            "It seems so natural, and then I realized that language is also very.",
            "Multiple dispatch E. So you can say you know you can have related meanings that are slightly different based on the type of you know the adverb for a place adverb.",
            "It means one thing for manner adverb it means a different thing.",
            "You know it goes.",
            "So you know it goes well or she goes home.",
            "They mean different things, but they're related and it just it's sort of dispatched on the type of the arguments.",
            "You can also supply default arguments the same way, right?",
            "So you know if I just say go.",
            "Go home then you know the person is is implicit.",
            "It's I'm talking to you.",
            "I'm talking telling you to go home.",
            "If you don't specify the place, then you get a default place which is just somewhere I don't care where you go.",
            "Just go somewhere, and if you just say go, that's imperative, but you know it means that both the subject and the place are both implied, so I don't know this just just struck me when I was after.",
            "I'd used multiple dispatch for awhile that it just was very intuitive and I couldn't put my finger on why, and I think this might be.",
            "It is that it's just very linguistic.",
            "OK.",
            "I'm not sure I want to go into this.",
            "OK, let's stop and take some questions.",
            "I feel like people might have some questions at this point and.",
            "Yeah, would you?",
            "Maybe also demonstrate the user best Philly and I can validate composition.",
            "Yeah, absolutely.",
            "So I mean most things we you know we use the same well we actually use.",
            "We use open Blas which is a good open source Blas so.",
            "It has pretty good implementations with these things.",
            "It's sort of neck and neck with MCL where MCL is better at some things than others.",
            "It's there's no clear winner.",
            "I wish MKL was open source, but it's not.",
            "So let's say you want to take an SVD or something.",
            "I don't know, let's.",
            "I'm going to do the puniest SVD of all time.",
            "OK, you know you get the pieces.",
            "One thing that slightly different is we return S as a vector because most of the time I always wanted a vector.",
            "I don't know.",
            "There were some debates about this and everybody seemed to think that returning a vector for us was better.",
            "So to reconstruct the matrix you have to do.",
            "I can't, I shouldn't have done something I should have done something rectangular, 'cause then I would know which one it was.",
            "Yeah.",
            "That looks good, that's close.",
            "Those are all very small.",
            "So yeah, you can do SVD's.",
            "There's actually a fairly sophisticated system of special.",
            "Special matrix types, so this is this.",
            "I find sort of interesting.",
            "So if you want to factor X. Factorise, that's what it is factor is.",
            "So you know how well\\ is sort of this Poly.",
            "This Poly algorithm in MATLAB and in other systems that sort of looks at properties of your matrix and tries to figure out exactly what the best thing to do might be.",
            "So we've factored this out, so to speak into a factorized function which actually looks at your matrix and returns its particular whatever it thinks the best type of factorization might be.",
            "So in this case.",
            "It returns an Lu factorization because for just a general random matrix value is the best you're going to do.",
            "But for example, if you have.",
            "You know?",
            "Something that's symmetric.",
            "Then this bunch Kaufman factorization, which I've never heard of before this, but apparently is the best thing you can do for a general symmetric matrix.",
            "Anne.",
            "You know, if you have a permission matrix, then the Cholesky factorization is better, so this factorization is kind of nice.",
            "What it does is it actually ends up acting just like.",
            "Well, you can do things like.",
            "Yeah, so you can use it as the left hand side of\\ So and that's actually how Backslashes implemented.",
            "What it does is it takes a general matrix, factorizes it, and then calls back, then calls the specific version of\\ for that factorization.",
            "But it means you can also sort of do things like take the factorization 1st and then the code looks exactly the same as if you just use the matrix itself, because the matrix.",
            "Max the factorization object is sort of a pre pre solved version of the matrix.",
            "This lets you do some kind of nice things.",
            "It's it seems, seems to be a pretty nice design.",
            "I didn't come up with this, this is.",
            "You know collaboration of various.",
            "Yeah, I mean it's all comfortable.",
            "It depends on your machine.",
            "We've got a machine at MIT with a TB of RAM and 80 cores, so we've done some fairly large problems on that.",
            "This is not what I do on a day to day basis.",
            "I work on the language, but Alan Edelman, who is one of the collaborators.",
            "He's ecstatic about the things he can do in Matlab with.",
            "With Julia on this machine.",
            "Partly because he.",
            "It's very easy to spin up, you know 80 parallel Julia processes, each doing some small computation and then collecting the results back, which is different than doing a really one really huge computation, But you can do either.",
            "One of those will both work.",
            "Or yes, it should, because it's going to use blah switch in the blouse is threaded, so Julia currently doesn't support threading in the language we're working on.",
            "That, which is what I referred to earlier.",
            "But if you call a multithreaded library, it'll be fully multithreaded.",
            "Open blossom issues with.",
            "Threading thresholds it's actually great for big problems.",
            "It's terrible for medium sized problems 'cause it doesn't really know.",
            "I mean, it does ridiculous things like you know, for a four by four matrix that uses 8 cores and you're like that's not a reasonable thing to do for a four by four matrix, you just do it on one thread.",
            "MCL is much better with medium sized problems.",
            "Yeah.",
            "Suki of.",
            "Yeah yeah, I just saved it.",
            "I mean, it's this this guy.",
            "So.",
            "Yeah so F is F is the type of F is this.",
            "It's this Cholesky factorization object.",
            "Well, so this is this is going to give you so F was the factorization version of.",
            "What did I define it as I think.",
            "Yeah, right?",
            "Right and so.",
            "So I'm going to define that and then.",
            "So if I do XX transpose by well, let's say V equals Rand.",
            "10 So if I do F\\ V. Versus XX transpose V. I get the same answer.",
            "Right?",
            "So what it is doing is it will do the factorization and then do the\\ and then toss out the factorization.",
            "So the natural thing you would want to do if you're going to use this multiple times, call factorize up front and then just use.",
            "You know where you would have used XX transpose.",
            "Now you just use F. Which is nice because you can optimize your code really easily.",
            "You don't have to pull one thing out.",
            "You can see why your talk really sort of got my gears turning yesterday.",
            "Provide.",
            "It's hard to put a timeline on it.",
            "We did a lot of work over the summer and we have a we have a threads branch that has.",
            "Mostly working threading with not very good API that you just sort of.",
            "You know you say.",
            "I mean, it's by not very good API.",
            "I think it's like approximately equivalent to open MP.",
            "Yeah, it's not it.",
            "You can get by.",
            "It's not great what we're going to do.",
            "Is so there are asynchronous tasks, so the way IO works in.",
            "And Julia is, well, you can create something.",
            "You can create a task so.",
            "So this I'm going to create a task object.",
            "Which you can see is a task.",
            "It's in the runnable state.",
            "It's got an address you don't really need that stuff.",
            "But what you can do is you can consume.",
            "Values from it.",
            "Anne, you'll get.",
            "The values and now you can collect the rest of them.",
            "No, well that's sorry collecti, and you get the rest.",
            "And so what's happening there is the task is just you give it a function which you say I would like you to run this I want you to run it on its own stack and it goes off and runs it on another stack.",
            "It doesn't start immediately, but as soon as the current stack blocks because it's waiting for a value from another task then that other task will run until it produces value and yields back to the current tasks.",
            "So that's just a you know.",
            "That's the coroutine control flow construct what we're going to do is we're going to make tasks the unit of work for multi threading as well.",
            "Which means that when you start a task, it actually will potentially start running immediately on another thread.",
            "So not only does it get its own stack, it gets its own thread, but tasks get mapped onto threads.",
            "There's going to be a fixed number of threads that correspond to your actual physical cores, and then they can communicate with each other using channels or something like that.",
            "It will probably be very similar to go.",
            "But we're going to pay very careful attention to making sure that the scaling performance is very good, which I don't think is a priority for go.",
            "They want the IO performance to be really good.",
            "What we want to be able to do is you should be able to write.",
            "You know your own parallel Blas or something like that in it, or you know your own Laplace.",
            "You know stencil or something along those lines should be doable.",
            "Yeah, yeah, it's called threads.",
            "If you search for multithreading on Julia Dev List, you'll turn it up pretty quickly.",
            "Yeah.",
            "I said it before.",
            "Great language, thank you.",
            "No great yeah.",
            "Question so you are using the development version.",
            "Or are you making a copy of it?",
            "Yes, yes, we're going to change this.",
            "So currently when you slice into an array, when you transpose an array that creates a copy.",
            "This is, you know, not great.",
            "Seems like a good idea at the time.",
            "It's also very hard to generalize, not copying one of the major goals for the next big release of Julia, which is .4.",
            "So not not to 1.0 yet.",
            "'cause the API is still sort of in the air, but is that we're going to change exactly that and make everything.",
            "Make as few copies as possible, much closer to what NUM Py does.",
            "She also says something about sports.",
            "So yes, by structure do you mean?",
            "Yeah, we don't.",
            "I don't think we have.",
            "We don't have.",
            "We don't have a representation for Hankel matrix, but one of the nice things is that it's very easy to make these things yourself.",
            "I did mention you know symmetric tridiagonal.",
            "Um?",
            "So you can give random 10 random 11.",
            "I forget the order of these.",
            "OK, so.",
            "And so that's especially represented symmetric tridiagonal matrix that only requires those two vectors.",
            "It says it's storage.",
            "The.",
            "Code for this is.",
            "Here.",
            "And you can see that the definition of this type is not terribly onerous.",
            "All you have to do is say, OK, it's this type.",
            "You know you give it, give it some supertypes and you have the diagonal, the subdiagonal, a constructor that checks that the dimensions are correct.",
            "And then you do have to do it.",
            "Define a bunch of functionality for it, because otherwise it doesn't know what to do with itself.",
            "But none of this functionality is terribly crazy.",
            "A lot of it is in fact.",
            "Hooking in the appropriate calls to elkei pack so that you'll get really fast versions of things.",
            "But I do think that this, you know this is significantly easier than it would be, say to try to do the same thing in Matlab or in Python.",
            "You know you get some interesting.",
            "Inversion of a tridiagonal Jacobi matrix.",
            "So someone you know went to town and found a good algorithm for this and decided to implement it, and you see some fun stuff like you can use Unicode characters as variables, which was slightly unreasonable because it was hard to input them, but then we did this and so now you can type Unicode very easily.",
            "And you can even do things like this.",
            "So X hat equals 1.5.",
            "So that suddenly makes it very easy to enter Unicode.",
            "There was some other questions I guess maybe running out of time.",
            "I don't know, yes.",
            "Press on.",
            "Author.",
            "Is there something?",
            "I would definitely not say that we don't put an emphasis on code reuse.",
            "In fact, I'd say that the generic programming facilities make it very easy to reuse code, because what you would do is you would write.",
            "General version of some algorithm and then it just sort of applies to all sorts of different types, so I mean.",
            "The fact that.",
            "Super.",
            "Um?",
            "Super calls are pretty easy, you can just use the invoke function to invoke us.",
            "A different method than the one that you're currently in.",
            "Yeah, but it's a lot more complicated than in Java and Java.",
            "There's like 1 unique.",
            "Thing that is your super method, multiple dispatcher like which way do you want to walk up the lattice?",
            "There is potentially a lot of different ways to climb the lattice.",
            "There's not just one potential super method.",
            "So.",
            "Yeah, yeah.",
            "But they were kind of complicated, but they are.",
            "They are great languages, but they're very little complicated.",
            "We haven't spent a lot of time on it, just I don't find the need to invoke super methods very often.",
            "But let's talk about it later.",
            "If you have good ideas, I'd like to hear them, and there was one other question over here.",
            "Did you yeah?",
            "Can you use manual memory management in Julia?",
            "You cannot use manual memory management.",
            "What you can do is you can.",
            "Take over a chunk of memory for an array and indicate that you don't want to manage it.",
            "So for example C hands you a chunk of memory and expects to free itself.",
            "You can say wrap this in an array and don't try to free it.",
            "That's pretty much the extent of it.",
            "That's as much manual memory management as you're going to get.",
            "What you can do though, is you know, for example.",
            "You know?",
            "You can.",
            "Sort something which returns a copy.",
            "The original value is unchanged, but if you use this sort bang version then you get it sorted in place.",
            "Doesn't seem like a big deal, but what this allows you to do, for example, is let's say you have some loop where you discover that.",
            "The allocation is the real bottleneck, which it often is.",
            "I mean, allocation in a loop is death.",
            "So what you do is you figure out OK, I'm just going to pre allocate this an I'm going to allocate it before the for loop and then I'm going to pass it into a mutating version of this function inside the for loop and then I don't have to do any allocation.",
            "Maybe you need two different arrays.",
            "You can just swap them back and forth and do double buffering, so usually not.",
            "So I mean the approach we're not trying to take is to have a sufficiently clever compiler that can just fall solve every problem for you, but the rather make it really easy to write the straightforward correct version, discover what is wrong with it, what's low, and then make it not terribly hard to make it a little bit faster by tweaking things like allocation and type stability.",
            "So.",
            "Yes.",
            "Very simple market sweep.",
            "It's very straightforward.",
            "It's not great, but it has good throughput, so it's pretty good for numerical things.",
            "If you want to do real time computing, it's not a good thing at all.",
            "There's one guy who's doing.",
            "Sound generation live, real time sound generation, and he's he really wants the garbage collector to get better.",
            "But you know?",
            "That's priorities.",
            "There's only so many things you can fix at a time.",
            "Yeah, OK, thank you very much everyone."
        ]
    ],
    "summarization": {
        "clip_0": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Good morning everyone.",
                    "label": 0
                },
                {
                    "sent": "Thanks for being here.",
                    "label": 0
                },
                {
                    "sent": "So Julia is a new, relatively new programming language for scientific computing.",
                    "label": 1
                },
                {
                    "sent": "Numerical computing, technical computing.",
                    "label": 0
                },
                {
                    "sent": "Whatever you want to call it.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "The obvious question is what is a technical or numerical computing language?",
                    "label": 0
                },
                {
                    "sent": "What am I?",
                    "label": 0
                },
                {
                    "sent": "What are we even talking about here?",
                    "label": 0
                }
            ]
        },
        "clip_1": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "And this is a graphic that I for all one of my Co creators of the language made up awhile ago, and I've been using it ever since.",
                    "label": 0
                },
                {
                    "sent": "So I'm guessing that I mean who?",
                    "label": 0
                },
                {
                    "sent": "Who is used something in this square of languages?",
                    "label": 0
                },
                {
                    "sent": "Here I'm assuming in this room everybody.",
                    "label": 0
                },
                {
                    "sent": "I mean this is.",
                    "label": 0
                },
                {
                    "sent": "This is familiar territory.",
                    "label": 0
                },
                {
                    "sent": "This is not exactly.",
                    "label": 0
                },
                {
                    "sent": "I've given talks to audiences where nobody has used anything in this in this whole sort of area of computing, and that's a very different kind of talk, but it's not what we're dealing with today.",
                    "label": 0
                },
                {
                    "sent": "So what what exactly does this mean?",
                    "label": 0
                },
                {
                    "sent": "Why other than?",
                    "label": 0
                },
                {
                    "sent": "Obviously, it's something that's up here.",
                    "label": 0
                },
                {
                    "sent": "I mean, one of the definitions I've heard given for a dynamic language is that it's sort of, you know, one of Perl, Python, or Ruby.",
                    "label": 0
                },
                {
                    "sent": "Clearly, that's not a terribly general definition, so the obvious answer is that it's something that specialized somehow.",
                    "label": 0
                },
                {
                    "sent": "For numerical work, and then the question then becomes what kind of specialization?",
                    "label": 0
                },
                {
                    "sent": "How do we mean specialized and that's actually where things start to diverge.",
                    "label": 0
                },
                {
                    "sent": "Where you start to get a lot of different answers.",
                    "label": 0
                },
                {
                    "sent": "So Matlab, everything is a complex matrix, so that's not true anymore, but that was the original premise of Matlab.",
                    "label": 1
                },
                {
                    "sent": "Was that just it was everything as a complex matrix is the best type system ever?",
                    "label": 0
                },
                {
                    "sent": "There's only one type.",
                    "label": 0
                },
                {
                    "sent": "And you know you can get remarkably far with this premise.",
                    "label": 0
                },
                {
                    "sent": "But then at some point you're like well.",
                    "label": 0
                },
                {
                    "sent": "I really want to string and then you know, so you start.",
                    "label": 0
                },
                {
                    "sent": "You start doing things like turning arrays of character type into into strings and you know things get complicated.",
                    "label": 0
                },
                {
                    "sent": "R and before it S whole one of the basic premises here is that you can have this notion of not available.",
                    "label": 0
                },
                {
                    "sent": "All your data can be declared to be missing.",
                    "label": 0
                },
                {
                    "sent": "Its very important idea in statistics.",
                    "label": 0
                },
                {
                    "sent": "Another interesting idea here is that you would take this very, very complicated thing called the data frame, which is essentially sort of an in memory relational table of sorts.",
                    "label": 0
                },
                {
                    "sent": "It's got named columns that can have different types, but everything in one column is of the same type and this is going to be one of your basic built-in data types.",
                    "label": 0
                },
                {
                    "sent": "It's a very, very complicated data structure for a programming language to just sort of consider fundamental.",
                    "label": 0
                },
                {
                    "sent": "The only thing I can think of that's as complicated as arrays in PHP or this sort of crazy multi.",
                    "label": 0
                },
                {
                    "sent": "Multifaceted beast that can do just about everything, but it's very unusual for something that complex to be so fundamental Mathematica it's a little bit you know far field.",
                    "label": 0
                },
                {
                    "sent": "It's not really numerical, it's more symbolic.",
                    "label": 0
                },
                {
                    "sent": "It's a symbolic system that has a lot of numeric capabilities versus a lot of these other things which are numeric with some symbolic capabilities.",
                    "label": 0
                },
                {
                    "sent": "And the NUM py NUM py is a little bit different here.",
                    "label": 0
                },
                {
                    "sent": "It's basically you take a general purpose language like Python.",
                    "label": 0
                },
                {
                    "sent": "It's a nice, reasonable, good, good language to work with.",
                    "label": 0
                },
                {
                    "sent": "Very productive.",
                    "label": 0
                },
                {
                    "sent": "You can get alot of things done.",
                    "label": 0
                },
                {
                    "sent": "You can build a web server.",
                    "label": 0
                },
                {
                    "sent": "You can do all sorts of stuff and then you sort of figure out like what things do we need to add to it to make it useful for numerical computing.",
                    "label": 0
                },
                {
                    "sent": "And it turns out that the thing you really, really cannot do without is typed arrays.",
                    "label": 0
                },
                {
                    "sent": "And what starts to happen here is that you start to see that everywhere here you need to have some notion of type you need to introduce some sort of way of talking about types, if for no other reason than so that you can say this thing here.",
                    "label": 0
                },
                {
                    "sent": "This is an array of floating point numbers, and that's all it's ever going to contain.",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 0
                }
            ]
        },
        "clip_2": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So what's interesting about this is that by this same criterion, other languages that don't fit into that little square.",
                    "label": 0
                },
                {
                    "sent": "Are also maybe numerical, so the scheme spec for one of the later versions of scheme.",
                    "label": 0
                },
                {
                    "sent": "This is a table of contents you can't really read it from this distance, but that's not really important point I've highlighted.",
                    "label": 0
                },
                {
                    "sent": "The parts of it that are numerical and it's 20% of the specification of this like very, very general purpose, very simple, notoriously minimal language is all about numbers and arithmetic and how they're going to work.",
                    "label": 0
                },
                {
                    "sent": "This section on the left here that says numbers looks bigger, but it's actually only one page.",
                    "label": 0
                },
                {
                    "sent": "It's actually this arithmetic section.",
                    "label": 0
                },
                {
                    "sent": "That's the real heavy hitter.",
                    "label": 0
                },
                {
                    "sent": "It goes from page 39 to 47.",
                    "label": 0
                },
                {
                    "sent": "Every single other high level topic in the entire description of the language, and its standard library.",
                    "label": 0
                },
                {
                    "sent": "Is Max one page so this one section on arithmetic is 9 pages?",
                    "label": 0
                },
                {
                    "sent": "So there's basically all these complicated behaviors that you have to like bake into the specification.",
                    "label": 0
                },
                {
                    "sent": "Because you know numbers are complicated.",
                    "label": 0
                },
                {
                    "sent": "The C 99 spec is pretty similar.",
                    "label": 0
                },
                {
                    "sent": "It's 20% numerical.",
                    "label": 0
                }
            ]
        },
        "clip_3": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So something, something a little funny is going on here.",
                    "label": 1
                },
                {
                    "sent": "What you know, the numerical languages are weirdly diverse.",
                    "label": 1
                },
                {
                    "sent": "There's a lot of them.",
                    "label": 0
                },
                {
                    "sent": "I mean, that's one of the interesting things about that square is just how many things are in there.",
                    "label": 0
                },
                {
                    "sent": "General language are are strangely numerical.",
                    "label": 1
                },
                {
                    "sent": "There's more numerical stuff going on in these like general purpose languages than we might expect.",
                    "label": 0
                },
                {
                    "sent": "So what's going on?",
                    "label": 0
                }
            ]
        },
        "clip_4": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So the hypothesis that we hit upon at some point, and this was actually sort of after the fact explanation we had already started to work on Julia when this kind of came about as an explanation, and the idea is that numerical computing is still this under generalized niche.",
                    "label": 0
                },
                {
                    "sent": "Each language, the reason there's so many things in that's in that in that picture of numerical computing languages is because the definition of the language of a numerical language is one that specializes in each thing, specializes in a different way.",
                    "label": 0
                },
                {
                    "sent": "So, of course, everybody has a different view of what it means.",
                    "label": 0
                },
                {
                    "sent": "Oh no, we need to make unavailable data.",
                    "label": 0
                },
                {
                    "sent": "That is the most important thing.",
                    "label": 0
                },
                {
                    "sent": "Complex arrays.",
                    "label": 0
                },
                {
                    "sent": "That is the most important thing.",
                    "label": 0
                },
                {
                    "sent": "Everybody's got an idea of what the most important thing is, and as a result you know basically every person wants to invent their own numerical computing language.",
                    "label": 0
                },
                {
                    "sent": "It's also the oldest niche.",
                    "label": 0
                },
                {
                    "sent": "I don't know if that's necessarily significant, but you know, Fortran was the first compiled programming language, so.",
                    "label": 0
                },
                {
                    "sent": "So the hypothesis here is that.",
                    "label": 0
                },
                {
                    "sent": "Many diverse languages in this niche can be replaced by a single sufficiently powerful general purpose language, and that's the question, can we do that?",
                    "label": 1
                },
                {
                    "sent": "Can we instead of having this like diversity of different things, have one thing that's somehow simpler and more general, but yet can do all of the things that we want to do in all of these other languages?",
                    "label": 0
                }
            ]
        },
        "clip_5": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So a little bit of history here, and a slight diversion text processing used to be a niche.",
                    "label": 0
                },
                {
                    "sent": "And it had a very similar, you know, cornucopia of languages.",
                    "label": 1
                },
                {
                    "sent": "Snowball spitball commit track.",
                    "label": 0
                },
                {
                    "sent": "You know, some of these you've actually heard of.",
                    "label": 0
                },
                {
                    "sent": "SED, awk, Perl 4.",
                    "label": 0
                },
                {
                    "sent": "And it was the same sort of thing it was all these different views of how text processing should be done.",
                    "label": 1
                },
                {
                    "sent": "And it was this very special purpose area and you don't see these anymore.",
                    "label": 1
                },
                {
                    "sent": "This is not a thing that anybody is actually, you know, nobody's programming and snowball that I've heard of in ever.",
                    "label": 0
                },
                {
                    "sent": "And so instead people use one of these languages.",
                    "label": 1
                },
                {
                    "sent": "I mean, increasingly Python is really winning this whole battleground because Python is this general purpose language that's that's good enough.",
                    "label": 0
                },
                {
                    "sent": "It's the difference between being a special purpose language that specializes in some way of doing text processing and being a general purpose language that has really good support for text processing.",
                    "label": 0
                },
                {
                    "sent": "You wouldn't call Python a text processing language.",
                    "label": 0
                },
                {
                    "sent": "You would just say you know it's a programming language in which you can happen to do this thing.",
                    "label": 0
                }
            ]
        },
        "clip_6": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So the question is text processing used to be diverse and hard.",
                    "label": 0
                },
                {
                    "sent": "Now it's unified and easy.",
                    "label": 1
                },
                {
                    "sent": "Can we do the same thing for numerical computing?",
                    "label": 1
                }
            ]
        },
        "clip_7": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Ann, I think the answer is yes, we're trying to do that with Julia and I'll let you be the judge of how well we're doing.",
                    "label": 0
                }
            ]
        },
        "clip_8": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So let's actually see some code.",
                    "label": 0
                },
                {
                    "sent": "I think it's not a good idea to pontificate for too long without actually seeing, you know.",
                    "label": 0
                }
            ]
        },
        "clip_9": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "A program, so here's this is one of our micro benchmarks that we used to measure.",
                    "label": 0
                },
                {
                    "sent": "You know how we're doing?",
                    "label": 0
                },
                {
                    "sent": "Compared to Matlab, NUM?",
                    "label": 0
                },
                {
                    "sent": "Py are whatever.",
                    "label": 0
                },
                {
                    "sent": "And you can see that it is very very MATLAB like.",
                    "label": 0
                },
                {
                    "sent": "You basically declare a function, you give it a name.",
                    "label": 0
                },
                {
                    "sent": "You give it a couple of arguments T&N you create some vectors of zeros.",
                    "label": 0
                },
                {
                    "sent": "Then you do a four loop and you create some Gaussian N by N matrices.",
                    "label": 0
                },
                {
                    "sent": "Do some array concatenation and take some powers and traces and then at the end you report some statistics on this.",
                    "label": 0
                },
                {
                    "sent": "It's all very straightforward, and if you think anybody who's programmed in Matlab knows exactly what this does.",
                    "label": 0
                },
                {
                    "sent": "But you can also do.",
                    "label": 0
                }
            ]
        },
        "clip_10": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Reasonably low level things, so this is also a benchmark.",
                    "label": 0
                },
                {
                    "sent": "This is a quicksort benchmark and you know a couple of interesting things that start to deviate a little bit from the whole MATLAB background.",
                    "label": 0
                },
                {
                    "sent": "One super trivial one is that there's a.",
                    "label": 0
                },
                {
                    "sent": "There's an exclamation point at the end of the name of the function.",
                    "label": 0
                },
                {
                    "sent": "What that means is it's just a convention.",
                    "label": 0
                },
                {
                    "sent": "Variable names can have exclamation points at the end of them.",
                    "label": 0
                },
                {
                    "sent": "That's just a thing, but we use the exclamation points primarily for functions.",
                    "label": 0
                },
                {
                    "sent": "That are going to mutate one of their arguments.",
                    "label": 0
                },
                {
                    "sent": "So unlike a lot of other languages like Matlab and R which try to do copy on write stuff with a raise, if you pass in an array in a function mutates it, the caller is going to see that.",
                    "label": 0
                },
                {
                    "sent": "So in here this quicksort.",
                    "label": 0
                },
                {
                    "sent": "This allows the quicksort to actually swap around elements in A and sort the array in place.",
                    "label": 0
                },
                {
                    "sent": "The other thing you'll notice, which you could conceivably do in other languages, but it might be really, really slow, so anybody who's been trained to vectorize everything and avoid doing this sort of thing.",
                    "label": 0
                },
                {
                    "sent": "You're just sort of manipulating little single elements around in the array and swapping their places, and that's you know.",
                    "label": 0
                },
                {
                    "sent": "You know alarms will be going off in your head if you've been trained to program in Matlab and not do this.",
                    "label": 0
                },
                {
                    "sent": "This is totally fine.",
                    "label": 0
                },
                {
                    "sent": "This will generate low level efficient code that is similar to what C would emit, except with some bounds checks.",
                    "label": 0
                },
                {
                    "sent": "There's easy ways to get rid of the bounds checks though.",
                    "label": 0
                }
            ]
        },
        "clip_11": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "There's also that that's, you know.",
                    "label": 0
                }
            ]
        },
        "clip_12": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "These are very sort of classical looking programming styles.",
                    "label": 0
                }
            ]
        },
        "clip_13": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "This is a little different looking.",
                    "label": 0
                },
                {
                    "sent": "What is going on here?",
                    "label": 0
                },
                {
                    "sent": "This is weird.",
                    "label": 0
                },
                {
                    "sent": "This is actually somewhat more idiomatic Julia.",
                    "label": 0
                },
                {
                    "sent": "What this does is it defines a modular integer type.",
                    "label": 0
                },
                {
                    "sent": "Couple of interesting features.",
                    "label": 0
                },
                {
                    "sent": "It makes it a subtype of an integer type, which is an abstraction that you can write generic code tube that doesn't have, doesn't really care what type of integer it's dealing with, only just cares that it's some kind of integer.",
                    "label": 0
                },
                {
                    "sent": "So that means you'll inherit a lot of general functionality just by virtue of declaring that this thing is an integer.",
                    "label": 0
                },
                {
                    "sent": "It has type parameter.",
                    "label": 0
                },
                {
                    "sent": "This type parameter is called NN is actually a number.",
                    "label": 0
                },
                {
                    "sent": "So what we're going to do with this type does is it actually declares a new type of modular integer where the there's a whole family of these types, one for each integer N. It's the modulus that you're going to be working in.",
                    "label": 0
                },
                {
                    "sent": "Immutable is interesting.",
                    "label": 0
                },
                {
                    "sent": "Numeric things tend to be immutable.",
                    "label": 0
                },
                {
                    "sent": "I think one of my favorite examples of a bug was that there was an early Fortran compiler.",
                    "label": 0
                },
                {
                    "sent": "Bug that allowed you to reassign the value 2 to something else.",
                    "label": 0
                },
                {
                    "sent": "You could say 2 = 5 and then from then on in the program to use two you would actually get 5.",
                    "label": 0
                },
                {
                    "sent": "That's super, super weird and unintuitive.",
                    "label": 0
                },
                {
                    "sent": "The reason it's unintuitive is 'cause numbers are immutable.",
                    "label": 0
                },
                {
                    "sent": "They are defined by their value, not by some location in memory which you can write different stuff too.",
                    "label": 0
                },
                {
                    "sent": "So, so that's.",
                    "label": 0
                },
                {
                    "sent": "It's a little hard to explain the idea of immutable, but numeric things tend to be want to be immutable.",
                    "label": 0
                },
                {
                    "sent": "It also allows if you declare something to be immutable.",
                    "label": 0
                },
                {
                    "sent": "It allows the compiler to do all sorts of very nice optimizations, so it's both the semantics you want for numeric things and a really great thing for the compiler to know about.",
                    "label": 0
                },
                {
                    "sent": "I'll go through this in a little more detail.",
                    "label": 0
                },
                {
                    "sent": "How do I want to do this now?",
                    "label": 0
                },
                {
                    "sent": "I'll do it a little bit later.",
                    "label": 0
                },
                {
                    "sent": "I'll go through a little more detail with this example does later, but for now it suffices to say that just defines a bunch of operations on these on this type and how to make it interact with normal integers and then a little bit of nicety, and how to show it how to print it.",
                    "label": 0
                }
            ]
        },
        "clip_14": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "OK.",
                    "label": 0
                },
                {
                    "sent": "So why are numbers hard?",
                    "label": 1
                },
                {
                    "sent": "Why do we even have?",
                    "label": 0
                },
                {
                    "sent": "Why do we have 20% of general purpose language specifications dedicated to American Eric numeric stuff?",
                    "label": 0
                },
                {
                    "sent": "And why is it so hard to come up with some general?",
                    "label": 0
                },
                {
                    "sent": "System that is really, really good for numeric things.",
                    "label": 0
                },
                {
                    "sent": "So I mean the first obvious weird thing about numeric stuff is that for some reason we want special syntax for it.",
                    "label": 0
                },
                {
                    "sent": "We want infix operators for plus and times and exponentiation.",
                    "label": 0
                },
                {
                    "sent": "And if anybody has tried to write numeric code in Lisp, will immediately understand why the like completely.",
                    "label": 0
                },
                {
                    "sent": "Completely gender, you know the the uniform syntax that is so nice for so many other things becomes horrific as soon as you want to do arithmetic.",
                    "label": 0
                },
                {
                    "sent": "Not sure why that is, but that's just the way our brains are wired.",
                    "label": 0
                },
                {
                    "sent": "Then there's semantics.",
                    "label": 0
                },
                {
                    "sent": "It's not just.",
                    "label": 0
                },
                {
                    "sent": "It's not just the surface thing.",
                    "label": 0
                },
                {
                    "sent": "Numeric operators are usually not just functions, so in C. You cannot write a function that does what the plus operator does.",
                    "label": 1
                },
                {
                    "sent": "It's two polymorphic, it does too many different things.",
                    "label": 0
                },
                {
                    "sent": "You can add an integer and float, and you can add afloat and afloat.",
                    "label": 0
                },
                {
                    "sent": "And an indignant you cannot do that with a function in C because it's completely monomorphic a function if you wrote an add function, you'd have to specify exactly what types of arguments it takes, so already plus is like broken the mold there.",
                    "label": 0
                },
                {
                    "sent": "Other languages allow you sort of budget more or less.",
                    "label": 0
                },
                {
                    "sent": "You know, C++ allows you to do a fair amount of fudge ING.",
                    "label": 0
                },
                {
                    "sent": "Ruby lets you do some, but you know if you switch the order of addition then you're in trouble.",
                    "label": 0
                },
                {
                    "sent": "Python has some horrible hack called R Add that lets you actually get away with that, but it's very very specific to addition.",
                    "label": 0
                },
                {
                    "sent": "There's also special promotion rules, so this is this is largely.",
                    "label": 0
                },
                {
                    "sent": "This is the stuff that is that 20% of the scheme and see specs is like how this stuff works.",
                    "label": 0
                },
                {
                    "sent": "So essentially what's going on here is people have been like OK, this stuff is hard.",
                    "label": 0
                },
                {
                    "sent": "We're going to make some reasonable decisions about it, bake it into the language, and then you're done.",
                    "label": 0
                },
                {
                    "sent": "If you want to make up your own stuff.",
                    "label": 0
                },
                {
                    "sent": "Sorry you can't.",
                    "label": 1
                },
                {
                    "sent": "You can't make up your own numeric types and have them be as first class is the ones that we baked into the language.",
                    "label": 0
                },
                {
                    "sent": "Again, this compact arrays thing.",
                    "label": 0
                },
                {
                    "sent": "This is very important.",
                    "label": 0
                },
                {
                    "sent": "Will come back to.",
                    "label": 0
                }
            ]
        },
        "clip_15": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "But so just to keep things interesting, here are some other things that scientists want extreme convenience.",
                    "label": 1
                },
                {
                    "sent": "They want everything to just work or they will just walk away in frustration.",
                    "label": 0
                },
                {
                    "sent": "Because why does this thing not work?",
                    "label": 0
                },
                {
                    "sent": "I know that's not generally true, but I certainly know some math professors who are not going to put up with Haskell, for example, like that's just not happening.",
                    "label": 0
                },
                {
                    "sent": "Ironically, they know a lot of category theory, but I don't think those are actually that related.",
                    "label": 1
                },
                {
                    "sent": "They want code that looks like pseudocode.",
                    "label": 0
                },
                {
                    "sent": "Huge standard library.",
                    "label": 0
                },
                {
                    "sent": "You just sort of want to start the thing up and be able to do pretty much anything.",
                    "label": 0
                },
                {
                    "sent": "You know.",
                    "label": 0
                },
                {
                    "sent": "Maybe if I got to install a package, I'm going to be a little bit annoyed, but maybe I'll put up with it.",
                    "label": 0
                },
                {
                    "sent": "And really, you know top level performance?",
                    "label": 0
                },
                {
                    "sent": "Absolutely the best.",
                    "label": 0
                },
                {
                    "sent": "So these just keeps keeps life exciting.",
                    "label": 0
                }
            ]
        },
        "clip_16": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So here is a I'm half joking with this slide design overview.",
                    "label": 1
                },
                {
                    "sent": "This is way too much stuff to put on one actual slide, but.",
                    "label": 0
                },
                {
                    "sent": "At a high level, this is sort of what we decided to do.",
                    "label": 0
                },
                {
                    "sent": "We picked a dynamic system rather than a statically compiled system we added.",
                    "label": 0
                },
                {
                    "sent": "This is an unusual combination.",
                    "label": 0
                },
                {
                    "sent": "We added an expressive type system in a dynamic language.",
                    "label": 0
                },
                {
                    "sent": "Usually dynamic languages don't do any type checking and they also just say, you know, we're not even going to let you talk about types.",
                    "label": 0
                },
                {
                    "sent": "Don't worry bout types, don't talk about types, just pretend the types aren't around.",
                    "label": 0
                },
                {
                    "sent": "So what we decided to do is we're going to give you a language to talk about types, but then we're not going to type check it.",
                    "label": 0
                },
                {
                    "sent": "Weird crazy, I don't know.",
                    "label": 0
                },
                {
                    "sent": "Seems to be OK, but it does freak people out sometimes.",
                    "label": 0
                },
                {
                    "sent": "It's unobtrusive in the sense that you know you saw that code that looks like Matlab.",
                    "label": 0
                },
                {
                    "sent": "You never have to mention types if you don't want to.",
                    "label": 1
                },
                {
                    "sent": "That code will run at totally fine C, like speed.",
                    "label": 0
                },
                {
                    "sent": "It's not really what the type system is for, it's not for performance primarily.",
                    "label": 0
                },
                {
                    "sent": "It's for expressing the behaviors of things metaprogramming.",
                    "label": 0
                },
                {
                    "sent": "If you're from.",
                    "label": 1
                },
                {
                    "sent": "If you're familiar with lists, but this is kind of a thing.",
                    "label": 0
                },
                {
                    "sent": "Homoiconic means that your code is represented as data in the language itself, which means that you can use all the power tools of the language to actually generate and manipulate code.",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 1
                },
                {
                    "sent": "For a dynamic language, I think this is a no brainer.",
                    "label": 0
                },
                {
                    "sent": "I don't know why you wouldn't have metaprogramming and then multiple dispatch.",
                    "label": 0
                },
                {
                    "sent": "This is this is a.",
                    "label": 0
                },
                {
                    "sent": "This is an old idea.",
                    "label": 0
                },
                {
                    "sent": "It's an idea that's been around for a long time.",
                    "label": 0
                },
                {
                    "sent": "It basically means that when you when you invoke a function.",
                    "label": 0
                },
                {
                    "sent": "When you just want to decide what version of the function to call, you can have multiple different versions and you pick one based on all of its arguments, and I'm going to demonstrate that in a fair amount of detail it's pretty intuitive.",
                    "label": 0
                },
                {
                    "sent": "It turns out to be really weirdly powerful.",
                    "label": 0
                },
                {
                    "sent": "And it's really sort of the core of the of the language.",
                    "label": 0
                },
                {
                    "sent": "And then there's other things that are, you know, important concurrency and parallelism.",
                    "label": 0
                },
                {
                    "sent": "You can do distributed computing with relatively little fuss.",
                    "label": 0
                },
                {
                    "sent": "IO is based on this same sort of principle and we're working on multithreading.",
                    "label": 1
                },
                {
                    "sent": "This is a hard problem.",
                    "label": 0
                },
                {
                    "sent": "You can't really do first class multithreading in any of the dynamic languages that you're.",
                    "label": 0
                },
                {
                    "sent": "Probably familiar with Python lets you do multithreading, but only one thread can be doing work at a time, so we're working on actually being able to do work in multiple threads at the same time, which it will be awesome when it works.",
                    "label": 0
                },
                {
                    "sent": "Keep fingers crossed.",
                    "label": 0
                }
            ]
        },
        "clip_17": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "OK, So what does dynamic typing even mean?",
                    "label": 0
                },
                {
                    "sent": "I've said this a bunch of times.",
                    "label": 0
                },
                {
                    "sent": "It is it basically means that.",
                    "label": 0
                },
                {
                    "sent": "Well, there's a.",
                    "label": 0
                },
                {
                    "sent": "There's a technical description of it which I didn't put up here.",
                    "label": 0
                },
                {
                    "sent": "Basically, the difference between a statically typed language and a dynamically typed languages that in a dynamically typed language there's this notion of the type of every expression, and the compiler sits there and determines what the type of every expression is, and make sure that what you wrote makes sense.",
                    "label": 0
                },
                {
                    "sent": "In a dynamic language.",
                    "label": 0
                },
                {
                    "sent": "It's not expressions that have values, its types.",
                    "label": 0
                },
                {
                    "sent": "It's values that have types.",
                    "label": 0
                },
                {
                    "sent": "You just have values floating around.",
                    "label": 0
                },
                {
                    "sent": "You can do stuff with them, and when you try to do some operation on some types, whatever the result is, it is, and that's either OK or it's not, so you don't get errors until runtime in particular.",
                    "label": 0
                },
                {
                    "sent": "It has this kind of customer is always right.",
                    "label": 0
                },
                {
                    "sent": "Feel to it.",
                    "label": 0
                },
                {
                    "sent": "You know you can write some code and compile the programming language is not going to be too fussy about.",
                    "label": 0
                },
                {
                    "sent": "It's going to try to do it and see how it goes.",
                    "label": 0
                },
                {
                    "sent": "Whereas statically typed languages will kind of, you know, complain at you and be like no, no no this is this is not type checking and give you some sort of error very early, which can be good and bad.",
                    "label": 0
                },
                {
                    "sent": "The main thing that's really nice about this for data analysis and for interactive work is just that it feels tangible.",
                    "label": 0
                },
                {
                    "sent": "Like when you're working with it, you let me let me pull up the Julia REPL, so this is the Julia REPL.",
                    "label": 0
                },
                {
                    "sent": "I'll start it again.",
                    "label": 0
                },
                {
                    "sent": "Our banner got mangled, but that's a nice little banner.",
                    "label": 0
                },
                {
                    "sent": "It's got some color.",
                    "label": 0
                },
                {
                    "sent": "You know you can do some very basic things like that.",
                    "label": 0
                },
                {
                    "sent": "You can do some more complicated things like.",
                    "label": 0
                },
                {
                    "sent": "Hadamard matrix if you want to do it with rational numbers instead of floating point numbers, you can do that as well.",
                    "label": 0
                },
                {
                    "sent": "It's pretty easy that the double slash is just a syntax for constructing irrational that we picked.",
                    "label": 0
                },
                {
                    "sent": "You can.",
                    "label": 0
                },
                {
                    "sent": "You know square things.",
                    "label": 0
                },
                {
                    "sent": "You can do elementwise squaring, which then doesn't do doesn't blow up as much.",
                    "label": 0
                },
                {
                    "sent": "'cause it's not.",
                    "label": 0
                },
                {
                    "sent": "You know you're not relying on the fact that this is a really ill conditioned matrix.",
                    "label": 0
                },
                {
                    "sent": "So you can see that it's very tangible.",
                    "label": 0
                },
                {
                    "sent": "You can actually interact with and feel that you couldn't do this in C, right?",
                    "label": 0
                },
                {
                    "sent": "That's not just not how you interact with C, so this is the kind of feel we really wanted to have, and you know, you get this in all of these dynamic, high level languages.",
                    "label": 0
                },
                {
                    "sent": "There's a reason why all of these systems are dynamic.",
                    "label": 0
                },
                {
                    "sent": "And this is it.",
                    "label": 0
                },
                {
                    "sent": "You can also see a couple of other things you can see.",
                    "label": 0
                },
                {
                    "sent": "That were printing the types of things so you know normally, unless you ask for who's in Matlab or some sort of description of something in a language, you don't really see types very much.",
                    "label": 0
                },
                {
                    "sent": "But we print types because it's pretty useful to know that this is an array of rationals of in 60 fours and so those curly braces indicate that you have a type parameter of some kind.",
                    "label": 0
                },
                {
                    "sent": "You can see that.",
                    "label": 0
                },
                {
                    "sent": "You know?",
                    "label": 0
                },
                {
                    "sent": "Type of that guys in 64.",
                    "label": 0
                },
                {
                    "sent": "That's a float 64, so this is not nothing surprising.",
                    "label": 0
                },
                {
                    "sent": "You don't have to go very far before you see that you're getting.",
                    "label": 0
                },
                {
                    "sent": "You're getting parametric types, so the rational type is actually.",
                    "label": 0
                },
                {
                    "sent": "Let's see, let's see if we can find this.",
                    "label": 0
                },
                {
                    "sent": "Wow, this is doing.",
                    "label": 0
                },
                {
                    "sent": "OK. OK, so.",
                    "label": 0
                },
                {
                    "sent": "So the rational type is actually defined right here in Julia code, and it's similar to that MoD and example that we saw.",
                    "label": 0
                },
                {
                    "sent": "It's just it's an immutable type.",
                    "label": 0
                },
                {
                    "sent": "It has a numerator and a denominator.",
                    "label": 0
                },
                {
                    "sent": "What's interesting about it is that it has a type parameter as well.",
                    "label": 0
                },
                {
                    "sent": "Before we saw type parameter, that was a number N. In this case, it's actually a type T. The type parameter is itself a subtype of integer, and rational is a subtype of real, and then what you do is you declare that NUM numerator and denominator are both of type T, so they have to be of the same type.",
                    "label": 0
                },
                {
                    "sent": "But that type can be any kind of of integer.",
                    "label": 0
                },
                {
                    "sent": "And then the constructor is just this function that we put inside of the type block, which takes a pair of arguments, checks that they're not both 0, does a GCD computation, and then uses this little new thing, which is sort of like a function that only exists inside of the type block and actually gives you a new object.",
                    "label": 0
                },
                {
                    "sent": "And you can let me move this over to here.",
                    "label": 0
                },
                {
                    "sent": "And you can see that if you do rational.",
                    "label": 0
                },
                {
                    "sent": "That's that's actually just exactly what the syntax does, and you can see it's actually it's actually defined right here.",
                    "label": 0
                },
                {
                    "sent": "This says that if I do end slash slash D and they're both integers, just call the rational constructor on them.",
                    "label": 0
                },
                {
                    "sent": "And then it gives you a bunch of other things you can do.",
                    "label": 0
                },
                {
                    "sent": "If you take a rational slash slash an integer, you just get a rational.",
                    "label": 0
                },
                {
                    "sent": "Various other stuff.",
                    "label": 0
                },
                {
                    "sent": "Similarly, you know if you do.",
                    "label": 0
                },
                {
                    "sent": "A complex number.",
                    "label": 0
                },
                {
                    "sent": "This is actually also a parametric type.",
                    "label": 0
                },
                {
                    "sent": "It's defined very similarly.",
                    "label": 0
                },
                {
                    "sent": "You can have any real or any real type of component, so you can do.",
                    "label": 0
                },
                {
                    "sent": "You can have a rational integer, but you can also have a rational float.",
                    "label": 0
                },
                {
                    "sent": "And this is the the complex or sorry, not not rational complex.",
                    "label": 0
                },
                {
                    "sent": "This is the type you're used to working with complex numbers, but you might very well want to actually have this complex integer type because you want to have integer components, and they're more efficient.",
                    "label": 0
                },
                {
                    "sent": "The operations can be more efficient.",
                    "label": 0
                },
                {
                    "sent": "You can also do things like this.",
                    "label": 0
                },
                {
                    "sent": "You can get a.",
                    "label": 0
                },
                {
                    "sent": "Complex, rational and.",
                    "label": 0
                },
                {
                    "sent": "OK, so let's let's briefly return to.",
                    "label": 0
                },
                {
                    "sent": "Let's actually return to that example that I gave.",
                    "label": 0
                },
                {
                    "sent": "Examples where am I?",
                    "label": 0
                },
                {
                    "sent": "Now, so this is we also have a built in shell mode.",
                    "label": 0
                },
                {
                    "sent": "I'm going to switch to.",
                    "label": 0
                },
                {
                    "sent": "My Julia directory.",
                    "label": 0
                },
                {
                    "sent": "And then.",
                    "label": 0
                },
                {
                    "sent": "Here's that modular integer example I was showing you before what we're going to do is just load it so.",
                    "label": 0
                },
                {
                    "sent": "Include.",
                    "label": 0
                },
                {
                    "sent": "I misspelled include.",
                    "label": 0
                },
                {
                    "sent": "Oh, and I don't want to be in shell mode.",
                    "label": 0
                },
                {
                    "sent": "OK, so now.",
                    "label": 0
                },
                {
                    "sent": "What I can do is I can construct in a modular integer MoD 13 with some random junk and I get this.",
                    "label": 0
                },
                {
                    "sent": "I get 7 MoD 13, which is that number reduced MoD 13.",
                    "label": 0
                },
                {
                    "sent": "I can come up with some other random junk and I get 3 MoD 13.",
                    "label": 0
                },
                {
                    "sent": "I can already do A+B.",
                    "label": 0
                },
                {
                    "sent": "Where did that come from?",
                    "label": 0
                },
                {
                    "sent": "So the addition?",
                    "label": 0
                },
                {
                    "sent": "What happened with the addition?",
                    "label": 0
                },
                {
                    "sent": "Is this got called and actually we can see that if you call which which is a macro that looks at an expression and figures out which version of the plus function is going to get called, 'cause there's actually lots of different versions of the plus function floating around, and it shows you that it's in this modern file.",
                    "label": 0
                },
                {
                    "sent": "And you can also do edit and it will actually take you right there to the exact line that it's defined on.",
                    "label": 0
                },
                {
                    "sent": "So what's going on here?",
                    "label": 0
                },
                {
                    "sent": "What's going on here is that.",
                    "label": 0
                },
                {
                    "sent": "Well so N is this is this.",
                    "label": 0
                },
                {
                    "sent": "Type quantifier.",
                    "label": 0
                },
                {
                    "sent": "So basically what this says is we're going to define plus for all N. To apply to two arguments A&B, where a is a MoD int with type parameter N&B is a model of type parameter N. And then in that situation, the way the definition of this is going to be that we're going to add the K fields of A&B, and then we're going to construct a new modern with that.",
                    "label": 0
                },
                {
                    "sent": "It's pretty straightforward.",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "An interesting thing about this is that if we.",
                    "label": 0
                },
                {
                    "sent": "Construct a MoD and MoD 12 say.",
                    "label": 0
                },
                {
                    "sent": "And we try to do a plus B as you call.",
                    "label": 0
                },
                {
                    "sent": "Works C. Oh OK, it doesn't work.",
                    "label": 0
                },
                {
                    "sent": "Which is the reason it doesn't work is because.",
                    "label": 0
                },
                {
                    "sent": "It doesn't create.",
                    "label": 0
                },
                {
                    "sent": "Can't call this code because the ends don't match.",
                    "label": 0
                },
                {
                    "sent": "So A&C have different type parameters, one has has N 12 and the other one is N 13.",
                    "label": 0
                },
                {
                    "sent": "And implicit in this definition is that the ends have to be the same.",
                    "label": 0
                },
                {
                    "sent": "OK, so this is, you know this is all fun and games but.",
                    "label": 0
                },
                {
                    "sent": "You can get a lot more happening than just a little bit of that.",
                    "label": 0
                },
                {
                    "sent": "So what I'm going to do here is I'm going to construct a matrix of these guys.",
                    "label": 0
                },
                {
                    "sent": "OK, so I applied the map function.",
                    "label": 0
                },
                {
                    "sent": "This is your usual functional programming.",
                    "label": 0
                },
                {
                    "sent": "The modern 13 type is actually a constructor.",
                    "label": 0
                },
                {
                    "sent": "You can just apply it to things like a function and it turns things into that type and then this random one through 1000 just samples random integers between one and 1000 and gives you a 5 by 5 matrix of those.",
                    "label": 0
                },
                {
                    "sent": "So the combination of this is that you get an array of modern thirteens.",
                    "label": 0
                },
                {
                    "sent": "And it's got 2 dimensions.",
                    "label": 0
                },
                {
                    "sent": "That's what the two there stands for.",
                    "label": 0
                },
                {
                    "sent": "If it was, a vector would be one.",
                    "label": 0
                },
                {
                    "sent": "If it was a three tensor, it would be 3.",
                    "label": 0
                },
                {
                    "sent": "OK, that's pretty cool.",
                    "label": 0
                },
                {
                    "sent": "We can also square it, which is nice.",
                    "label": 0
                },
                {
                    "sent": "Multiply it by two.",
                    "label": 0
                },
                {
                    "sent": "You know, add it to itself.",
                    "label": 0
                },
                {
                    "sent": "And all of this stuff just gives us exactly what you know.",
                    "label": 0
                },
                {
                    "sent": "The correct modular arithmetic does.",
                    "label": 0
                },
                {
                    "sent": "And there's a, you know, an efficient implementation of the of the power by squaring methods, so that is not.",
                    "label": 0
                },
                {
                    "sent": "That is pretty pretty efficient and fast.",
                    "label": 0
                },
                {
                    "sent": "Other interesting things are that.",
                    "label": 0
                },
                {
                    "sent": "For example, size of A is exactly 200.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "And Sizeof A is is 8, so the storage representation of these guys is very efficient because all it is is that this very thin wrapper around around an integer and int is 8 bytes.",
                    "label": 0
                },
                {
                    "sent": "And so, because these guys, these things are immutable, we can just stick them and we know the exact type of the array.",
                    "label": 0
                },
                {
                    "sent": "All we need to do is store the data and then the type is actually on the array object.",
                    "label": 0
                },
                {
                    "sent": "But all the individual elements don't need any sort of type information, they're just sort of.",
                    "label": 0
                },
                {
                    "sent": "You know exactly what they are and what they are, what they are supposed to mean.",
                    "label": 0
                },
                {
                    "sent": "All you need is the data.",
                    "label": 0
                },
                {
                    "sent": "You just need the 8 bytes for each value.",
                    "label": 0
                },
                {
                    "sent": "You can also see that yes.",
                    "label": 0
                },
                {
                    "sent": "We're just returning for size of the storage.",
                    "label": 0
                },
                {
                    "sent": "So in dynamic systems, which you end up having to do is keep track of the type of everything, 'cause you haven't computed it ahead of time, so these the.",
                    "label": 0
                },
                {
                    "sent": "The thing that stores in memory what type something is is known as A tag.",
                    "label": 0
                },
                {
                    "sent": "It's basically just a little chunk of words.",
                    "label": 0
                },
                {
                    "sent": "It's usually you know 8 bytes right in front of the actual data.",
                    "label": 0
                },
                {
                    "sent": "And it's you know.",
                    "label": 0
                },
                {
                    "sent": "So that's what you actually are pointing at when you look at an object, and the first thing you do is you look at it and you're like, OK, it's this type.",
                    "label": 0
                },
                {
                    "sent": "And then you know how to interpret the data.",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "You don't always have to, though, so for example, I'm going to get into an example shortly.",
                    "label": 0
                },
                {
                    "sent": "Where will see that this stuff?",
                    "label": 0
                },
                {
                    "sent": "A lot of that tag information that's normally so in Python.",
                    "label": 0
                },
                {
                    "sent": "The tag is always there, you always have to allocate this thing.",
                    "label": 0
                },
                {
                    "sent": "You always have to work with it.",
                    "label": 0
                },
                {
                    "sent": "Same thing is generally true for Matlab.",
                    "label": 0
                },
                {
                    "sent": "Are all these other languages.",
                    "label": 0
                },
                {
                    "sent": "One of the tricks to making things efficient and fast and Julia is that we often have eliminative that need so you can write, you know, high level code the way you want it too.",
                    "label": 0
                },
                {
                    "sent": "And conceptually, it's as if you keep this tag information around and do everything dynamically, But what actually ends up happening is you get very, very efficient inline code.",
                    "label": 0
                },
                {
                    "sent": "And we'll see an example of that in a bit.",
                    "label": 0
                },
                {
                    "sent": "Actually, you can see a little bit of it.",
                    "label": 0
                },
                {
                    "sent": "Here in that.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "We can see the code for this.",
                    "label": 0
                },
                {
                    "sent": "So LVM is the compiler infrastructure that we use.",
                    "label": 0
                },
                {
                    "sent": "And you can see that all that's happening when you do.",
                    "label": 0
                },
                {
                    "sent": "In addition, here is that you extract some values, which is actually not an operation.",
                    "label": 0
                },
                {
                    "sent": "And then you do a remainder, some comparison, some addition, and some remainder.",
                    "label": 0
                },
                {
                    "sent": "But there's still more code than I'd like to be seeing here, but it's relatively efficient.",
                    "label": 0
                },
                {
                    "sent": "There's an outstanding LVM issue that makes remainder very inefficient, which makes me unhappy, but there's not much I can do about it except argue with LVM people.",
                    "label": 0
                },
                {
                    "sent": "So what this Julia Hanson is actually she she was in something called Hacker school when she learned Julia at some point she had this epiphany that Julia uses the type system in all the ways that don't end with the programmer arguing with the compiler.",
                    "label": 1
                },
                {
                    "sent": "And I really like that.",
                    "label": 0
                },
                {
                    "sent": "So that's sort of a quote.",
                    "label": 0
                },
                {
                    "sent": "I like to like to cite.",
                    "label": 0
                }
            ]
        },
        "clip_18": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So the classic everybody loves dynamic environments and the classic compromise that most systems have taken is that you know.",
                    "label": 0
                },
                {
                    "sent": "They use a slow, slow language for the convenient high level stuff, and they use a fast language for the low level stuff and it's sort of, you know you stay in the high level slow language as long as you can and you're comfortable with it.",
                    "label": 0
                },
                {
                    "sent": "And then as soon as you hit something really performance critical, you drop down into see it's always see sometimes it's Fortran, but it's always see.",
                    "label": 0
                },
                {
                    "sent": "An you know this is actually very effective, but it has some issues and I found that one of the biggest issues that huge creates a huge barrier to development so it separates users from developers very.",
                    "label": 1
                },
                {
                    "sent": "There's a very sharp line, right?",
                    "label": 0
                },
                {
                    "sent": "If you're a NUM PY user, you probably do not have to touch any C code when using it.",
                    "label": 0
                },
                {
                    "sent": "If you're an umpire developer, you almost definitely have to touch C code on a regular basis.",
                    "label": 0
                },
                {
                    "sent": "And so that means that there's sort of this fairly fairly steep and non porous boundary between the two sides.",
                    "label": 0
                },
                {
                    "sent": "The users and the people who work on it, and the people who work with it.",
                    "label": 1
                },
                {
                    "sent": "I also think it's just a sign of a poor abstraction barrier.",
                    "label": 0
                },
                {
                    "sent": "Poor abstraction if you keep having to go across the barrier.",
                    "label": 0
                },
                {
                    "sent": "So every time you're like, oh, this is too slow.",
                    "label": 0
                },
                {
                    "sent": "I'm going to have to pretend I'm going to have to breakdown the abstraction boundary and justice like reach into the guts and start programming and see.",
                    "label": 0
                },
                {
                    "sent": "So maybe you know the boundary should be somewhere else.",
                    "label": 0
                }
            ]
        },
        "clip_19": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So great and horror is the creator of Rust.",
                    "label": 1
                },
                {
                    "sent": "Wrote this very nice and flattering a couple of essays.",
                    "label": 0
                },
                {
                    "sent": "It wasn't entirely about Julia is mostly history, but at the end you talked a little bit about it and he described Julia like Dylan, and List which are two other dynamic languages with lots of cool features as Goldilocks languages.",
                    "label": 0
                },
                {
                    "sent": "What he means by that is that you're trying to span the whole spectrum of everything that everybody might kind of want to do.",
                    "label": 1
                },
                {
                    "sent": "You trying to make one language is good enough for everything, maybe not perfect for everything, but good enough to get it done.",
                    "label": 1
                },
                {
                    "sent": "So from low level to high level.",
                    "label": 1
                },
                {
                    "sent": "And these are the opposite of the two language systems.",
                    "label": 0
                },
                {
                    "sent": "So the two language systems say, hey, now we're not, we're not going to get everything done in one language, so we're just going to.",
                    "label": 0
                },
                {
                    "sent": "This is saying, you know, we don't.",
                    "label": 0
                },
                {
                    "sent": "We don't want that compromise.",
                    "label": 0
                },
                {
                    "sent": "We want to just have one language is good enough for everything.",
                    "label": 0
                }
            ]
        },
        "clip_20": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "OK, so let's talk about performance, yes?",
                    "label": 0
                },
                {
                    "sent": "After my.",
                    "label": 0
                },
                {
                    "sent": "Something similar, yeah, so it's actually very easy to call C. It is.",
                    "label": 0
                },
                {
                    "sent": "You don't even have to write a file to do it.",
                    "label": 0
                },
                {
                    "sent": "There's a thing called call an you can call, for example the Clock function.",
                    "label": 0
                },
                {
                    "sent": "Which.",
                    "label": 0
                },
                {
                    "sent": "I believe returns Assynt and takes no arguments.",
                    "label": 0
                },
                {
                    "sent": "And it will give you the time.",
                    "label": 0
                },
                {
                    "sent": "The epoch Time is an integer.",
                    "label": 0
                },
                {
                    "sent": "You can also do other things like.",
                    "label": 0
                },
                {
                    "sent": "Get in.",
                    "label": 0
                },
                {
                    "sent": "OK, so I'm going to sign sign this to something so get in.",
                    "label": 0
                },
                {
                    "sent": "Returns a.",
                    "label": 0
                },
                {
                    "sent": "Avoid pointer and takes a void pointer.",
                    "label": 0
                },
                {
                    "sent": "An you want to pass it a string.",
                    "label": 0
                },
                {
                    "sent": "And let's say I pass it the string shell because I want to get the shell environment variable.",
                    "label": 0
                },
                {
                    "sent": "And this gives me a pointer thing, which I'm like.",
                    "label": 0
                },
                {
                    "sent": "OK, well, what am I supposed to do with this pointer?",
                    "label": 0
                },
                {
                    "sent": "But there's a byte string function which knows how to take a pointer and turned it into a string.",
                    "label": 0
                },
                {
                    "sent": "Oh do I have to convert this?",
                    "label": 0
                },
                {
                    "sent": "We changed the rules for this recently.",
                    "label": 0
                },
                {
                    "sent": "There we go OK. That was suspenseful, right?",
                    "label": 0
                },
                {
                    "sent": "I wasn't.",
                    "label": 0
                },
                {
                    "sent": "I wasn't sure if this was going to work.",
                    "label": 0
                },
                {
                    "sent": "I we made.",
                    "label": 0
                },
                {
                    "sent": "We made the bytestring thing a lot more finicky recently 'cause we didn't want people abusing it, but yeah, so I get my.",
                    "label": 0
                },
                {
                    "sent": "You can see I'm one of these weird people who uses ZSH.",
                    "label": 0
                },
                {
                    "sent": "One true shell.",
                    "label": 0
                },
                {
                    "sent": "Yeah, so it's very easy to call C. It's equally easy to call Fortran, although some Fortran compilers have weird calling convention issues.",
                    "label": 0
                },
                {
                    "sent": "But if you use G Fortran, it's OK.",
                    "label": 0
                },
                {
                    "sent": "Does that answer your question?",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "You have four groups you just implemented or concealment right so?",
                    "label": 0
                },
                {
                    "sent": "No, in Julia what you would do is you would just write a for loop in Julia and it would be fast.",
                    "label": 0
                },
                {
                    "sent": "So let me let me actually.",
                    "label": 0
                },
                {
                    "sent": "I'm going to get to this anexample a little later, but um.",
                    "label": 0
                },
                {
                    "sent": "Oh hell, let's just go to it right now since it came up now.",
                    "label": 0
                }
            ]
        },
        "clip_21": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "Is anybody familiar with the Collatz conjecture?",
                    "label": 1
                },
                {
                    "sent": "It's a room full of mathematicians.",
                    "label": 0
                },
                {
                    "sent": "Someone must have heard of it, so the conjecture is that this function here this collatz function, which takes an integer N. What it does is it does this one operation on it.",
                    "label": 0
                },
                {
                    "sent": "It checks if it's odd, you multiply it by three and add 1.",
                    "label": 0
                },
                {
                    "sent": "And then if it's even, you just divide it by two and I did a little bit twiddling you do a right shift, and that's equivalent to dividing an integer by two, which bear with me.",
                    "label": 0
                },
                {
                    "sent": "You could just write end if two and that would work too.",
                    "label": 0
                },
                {
                    "sent": "Count how many iterations of this goes on just so you can return a number.",
                    "label": 0
                },
                {
                    "sent": "So I mean, it's not entirely clear that this will always stop.",
                    "label": 0
                },
                {
                    "sent": "But the Collatz conjecture is that this will always terminate.",
                    "label": 0
                },
                {
                    "sent": "Nobody they've checked, you know billions and trillions of numbers and this always seems to terminate, but no one can prove it.",
                    "label": 0
                },
                {
                    "sent": "And it's actually even been conjectured that the conjecture is independent of ZFC, so that's you know, even weirder.",
                    "label": 0
                },
                {
                    "sent": "So let's take this code.",
                    "label": 0
                },
                {
                    "sent": "An actually implement it and you'll forgive me.",
                    "label": 0
                },
                {
                    "sent": "This isn't a for loop, but it's a while loop.",
                    "label": 0
                },
                {
                    "sent": "You can see that it's probably pretty close though.",
                    "label": 0
                },
                {
                    "sent": "And you want to see what this does, OK?",
                    "label": 0
                },
                {
                    "sent": "OK, that's sort of interesting.",
                    "label": 0
                },
                {
                    "sent": "It'll be more interesting if it shows us what it's doing.",
                    "label": 0
                },
                {
                    "sent": "So here you can see that there was a fairly long, you know 46 numbers that it went through.",
                    "label": 0
                },
                {
                    "sent": "To get to the end there for 10, it's a much shorter, so this is every number that it goes through.",
                    "label": 0
                },
                {
                    "sent": "It starts at 10:10 is Even so it divides it by two.",
                    "label": 0
                },
                {
                    "sent": "You get 5.",
                    "label": 0
                },
                {
                    "sent": "Five is odd, so you multiply it by three and you add 1.",
                    "label": 0
                },
                {
                    "sent": "You get 16 /, 2 yadda yadda yadda.",
                    "label": 0
                },
                {
                    "sent": "You know it's this weird thing that this always terminates, but we don't actually know that.",
                    "label": 0
                },
                {
                    "sent": "And that we're going to encounter a case where it doesn't these days.",
                    "label": 0
                },
                {
                    "sent": "So let's look at the actual native code generated by this.",
                    "label": 0
                },
                {
                    "sent": "So this is the OK so you can see that this, even though this is high level code and it's you had a while loop in there.",
                    "label": 0
                },
                {
                    "sent": "This ends up being very efficient.",
                    "label": 0
                },
                {
                    "sent": "This is not not to be sneezed at.",
                    "label": 0
                },
                {
                    "sent": "This is mostly not my work to make this this efficient.",
                    "label": 0
                },
                {
                    "sent": "Jeff Bezanson, who's one of my collaborators, is just a genius at making things very fast, so most of the credit is due to him.",
                    "label": 0
                },
                {
                    "sent": "Another thing you.",
                    "label": 0
                }
            ]
        },
        "clip_22": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Can do.",
                    "label": 0
                },
                {
                    "sent": "That's interesting and you know first of the collatz example is in.",
                    "label": 0
                }
            ]
        },
        "clip_23": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Testing because it's very hard to.",
                    "label": 0
                },
                {
                    "sent": "How would you vectorize this?",
                    "label": 0
                },
                {
                    "sent": "I don't know what you would do.",
                    "label": 0
                },
                {
                    "sent": "I think your only option in MATLAB is to is to write a Max file.",
                    "label": 0
                },
                {
                    "sent": "I don't know how you would possibly think about vectorizing this.",
                    "label": 0
                }
            ]
        },
        "clip_24": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And then of course, you know this is this computes all of the collatz numbers up to a certain N. Or the iteration counts, but actually shares work between them.",
                    "label": 0
                },
                {
                    "sent": "And this is some like horribly devious algorithms I came up with in a moment of.",
                    "label": 0
                },
                {
                    "sent": "Insanity and this you really like.",
                    "label": 0
                },
                {
                    "sent": "You know there's no way you could possibly vectorize this, but it's relatively doable this way.",
                    "label": 0
                },
                {
                    "sent": "So this uses a for loop and it's sufficient, and it's it's it's 10 times faster approximately than the other than actually just counting them all out and not sharing the work.",
                    "label": 0
                },
                {
                    "sent": "I was a little disappointed that it didn't scale better than that, it's just always 10 times faster, so there must be some sort of weird scaling property with like how much work is shared between callouts iterations.",
                    "label": 0
                },
                {
                    "sent": "But that's beyond my number theory, so I don't know.",
                    "label": 0
                },
                {
                    "sent": "Yeah, so yeah OK. We were talking.",
                    "label": 0
                }
            ]
        },
        "clip_25": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Performance so micro bench so you can see that we generate efficient low level code.",
                    "label": 0
                },
                {
                    "sent": "These are some micro benchmarks, some of a couple of them you saw.",
                    "label": 0
                },
                {
                    "sent": "On the other the other slides.",
                    "label": 0
                },
                {
                    "sent": "The mat Rand Mat stat is one of these guys.",
                    "label": 0
                },
                {
                    "sent": "It's the yellow benchmark.",
                    "label": 0
                },
                {
                    "sent": "The quicksort implementation is exactly that quicksort one I showed on the slide.",
                    "label": 0
                },
                {
                    "sent": "We actually have a cleverer, more heavily tweaked one that's in our standard library, but that's just sort of the really basic one that's in.",
                    "label": 0
                },
                {
                    "sent": "That's in the in the benchmarks.",
                    "label": 0
                },
                {
                    "sent": "And we're.",
                    "label": 0
                },
                {
                    "sent": "You're comparing it to high level implementations in these other languages, you can call a sort function, But the question is really just how quickly does the language manipulate.",
                    "label": 0
                },
                {
                    "sent": "You know individual elements in an array.",
                    "label": 0
                },
                {
                    "sent": "Not how fast can you do it in C. That's really not the interesting question you want to know how fast the native recursion in the native iteration is.",
                    "label": 0
                },
                {
                    "sent": "This is a log scale graph, and it is.",
                    "label": 0
                },
                {
                    "sent": "It is the time taken on each benchmark relative to see, so if you're one you're very close to see if your tenure 10 times as slow as see if you're you know 10,000.",
                    "label": 0
                },
                {
                    "sent": "Which Octave occasionally is.",
                    "label": 0
                },
                {
                    "sent": "You're a lot lot slower than C. So you know you see sort of things that you might expect, which is that Fortran is pretty fast.",
                    "label": 0
                },
                {
                    "sent": "Sometimes it's actually way faster than C, sometimes it's way slower, way slower.",
                    "label": 0
                },
                {
                    "sent": "One was integer parsing, parsing strings.",
                    "label": 0
                },
                {
                    "sent": "So that's actually not too surprising.",
                    "label": 0
                },
                {
                    "sent": "Go is pretty fast.",
                    "label": 0
                },
                {
                    "sent": "That's sort of in that nice nice performance range.",
                    "label": 0
                },
                {
                    "sent": "JavaScript is shockingly fast.",
                    "label": 0
                },
                {
                    "sent": "Then you know Python is pretty reasonable, Mathematica R so on.",
                    "label": 0
                },
                {
                    "sent": "So I mean, these are these are micro benchmarks.",
                    "label": 0
                },
                {
                    "sent": "They're relatively contrived, we wrote them originally to test ourselves and see how we were doing, and we were terrible at these at 1st and then eventually we got better.",
                    "label": 0
                },
                {
                    "sent": "And now we're very close to see on every on every benchmark.",
                    "label": 0
                },
                {
                    "sent": "But you know this may not be fair.",
                    "label": 0
                },
                {
                    "sent": "It may not be realistic.",
                    "label": 0
                },
                {
                    "sent": "It may not be real.",
                    "label": 0
                }
            ]
        },
        "clip_26": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So here are some reports from the real world on performance.",
                    "label": 1
                },
                {
                    "sent": "Julia gives rather significant boosts over Matlab, R sometimes, but even more than the benchmarks might suggest.",
                    "label": 1
                },
                {
                    "sent": "That was surprising to me, since I expected the gap to be largest for benchmarks.",
                    "label": 1
                },
                {
                    "sent": "This is Tim holy.",
                    "label": 0
                },
                {
                    "sent": "He's one of our major contributors, but this was early on when he was assessing the language.",
                    "label": 0
                },
                {
                    "sent": "He seems to think, and I think this is plausible that it's because you have a little more control over how you use memory, so remember that exclamation point on the quicksort example.",
                    "label": 0
                },
                {
                    "sent": "The fact that you can just pre allocate an array and then use an inplace algorithm on it gives you a lot of latitude to avoid allocation an.",
                    "label": 0
                },
                {
                    "sent": "You know if anybody has tried to avoid allocation in other languages, you know that it's kind of, it's tricky.",
                    "label": 0
                },
                {
                    "sent": "Python makes it easier, but R and Matlab certainly make it very difficult.",
                    "label": 0
                }
            ]
        },
        "clip_27": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "These are some simplex benchmarks.",
                    "label": 0
                },
                {
                    "sent": "This was Miles Lubin and Iain Dunning are at MIT, and they do a lot of optimization work.",
                    "label": 1
                },
                {
                    "sent": "Arguably they should probably be talking here instead of me, but I know you gotta settle for me.",
                    "label": 0
                },
                {
                    "sent": "They did some benchmarking of sort of the basic operations you need to do sparse sparse simplex algorithms, sparse mat, VEC, sparse vector scan, XPY, and they found that it was the same sort of thing that Julia is within.",
                    "label": 0
                },
                {
                    "sent": "You know, between one and two times slower than C An.",
                    "label": 0
                },
                {
                    "sent": "You know this.",
                    "label": 0
                },
                {
                    "sent": "Obviously C++ with no bounds checking is the fastest thing you can come up with.",
                    "label": 1
                }
            ]
        },
        "clip_28": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "This guy Rama batheon.",
                    "label": 0
                },
                {
                    "sent": "Did a comparison of finite element programming in a couple of different systems an wrote a fairly simple Julia.",
                    "label": 0
                }
            ]
        },
        "clip_29": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Solver and it scales pretty well.",
                    "label": 0
                },
                {
                    "sent": "Compare is OK.",
                    "label": 0
                },
                {
                    "sent": "It's slightly faster or slower.",
                    "label": 0
                },
                {
                    "sent": "It's sort of between these guys for some of the time, but it does OK.",
                    "label": 0
                }
            ]
        },
        "clip_30": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And this is what he had to say about it.",
                    "label": 0
                },
                {
                    "sent": "The relative ease with which various strategies can be implemented and tested without learning leading to code swell, while at the same time resulting in high performance code.",
                    "label": 0
                },
                {
                    "sent": "So that's sort of what we're aiming for is that you can write simple, clear, high level code an it's going to have reasonable performance, and if it doesn't have reasonable performance, the first time you write it, you can tweak it without too much fuss and get something that's OK.",
                    "label": 0
                }
            ]
        },
        "clip_31": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "OK.",
                    "label": 0
                },
                {
                    "sent": "So how does it go fast these days?",
                    "label": 1
                },
                {
                    "sent": "There's a lot of systems that are high level dynamic languages that are actually pretty performant.",
                    "label": 0
                },
                {
                    "sent": "JavaScript V8, which is what was on the benchmarks that was, you know, shockingly far over there.",
                    "label": 0
                },
                {
                    "sent": "This is running in your Google Chrome browser.",
                    "label": 0
                },
                {
                    "sent": "Lua jit pypi.",
                    "label": 1
                },
                {
                    "sent": "These all actually completely work in a different way than what Julia does.",
                    "label": 1
                },
                {
                    "sent": "Julie, to static compilation at runtime.",
                    "label": 0
                },
                {
                    "sent": "Which is a weird quote that I didn't understand at first.",
                    "label": 0
                },
                {
                    "sent": "This guy Carl Bolts is a pie pie developer and he said this to me at dinner one night and I just I was like what are you talking about and what he meant is that all these other systems they use this just in time compilation to mean doing all sorts of tricks like compiling something, expecting it to do one thing and then if it doesn't do the thing you expected it to do, replacing the code dynamically while it's running with some other code.",
                    "label": 0
                },
                {
                    "sent": "Which is nuts.",
                    "label": 0
                },
                {
                    "sent": "But it works.",
                    "label": 0
                },
                {
                    "sent": "This is how these systems work.",
                    "label": 0
                },
                {
                    "sent": "We don't do that if we've compiled some code, we leave it alone.",
                    "label": 0
                },
                {
                    "sent": "That's it.",
                    "label": 0
                },
                {
                    "sent": "It's always going to be the code that's going to run.",
                    "label": 0
                },
                {
                    "sent": "We just haven't given ourselves enough type information to do that fairly correctly.",
                    "label": 0
                },
                {
                    "sent": "Actually, just correctly, it may not be optimal, but it's always correct.",
                    "label": 0
                },
                {
                    "sent": "So basically we've cheated.",
                    "label": 1
                },
                {
                    "sent": "We just designed this language to make it easy to run fast instead of taking an existing language that's hard to make, run fast, and you know doing crazy acrobatics to make it faster.",
                    "label": 0
                },
                {
                    "sent": "We just were like, well, we just tweak a few things that make things a lot easier for us.",
                    "label": 0
                },
                {
                    "sent": "Alright, so we already looked so.",
                    "label": 0
                }
            ]
        },
        "clip_32": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Other key performance tricks.",
                    "label": 0
                },
                {
                    "sent": "So just in time code generation is crucial to this.",
                    "label": 0
                },
                {
                    "sent": "This means that if when I enter code at the prompt system is never seen it before it compiles it.",
                    "label": 0
                },
                {
                    "sent": "When it runs it.",
                    "label": 0
                },
                {
                    "sent": "So the first time it runs the lots code it has to compile a version of it.",
                    "label": 0
                },
                {
                    "sent": "If I ran it for.",
                    "label": 0
                },
                {
                    "sent": "So let's say.",
                    "label": 0
                },
                {
                    "sent": "You know this is the version that runs on integers, but let's say I wanted to run it on.",
                    "label": 0
                },
                {
                    "sent": "Big integers, it had to compile a new version.",
                    "label": 0
                },
                {
                    "sent": "So now I can run this on, you know, a really big integer.",
                    "label": 0
                },
                {
                    "sent": "Something really fishy is going on here.",
                    "label": 0
                },
                {
                    "sent": "With power.",
                    "label": 0
                },
                {
                    "sent": "It's possible there's something wrong with one of these methods for big integers.",
                    "label": 0
                },
                {
                    "sent": "Oh oh, it's power of two.",
                    "label": 0
                },
                {
                    "sent": "Yeah exactly.",
                    "label": 0
                },
                {
                    "sent": "I just picked a bad example, that's why.",
                    "label": 0
                },
                {
                    "sent": "I'm glad someone's awake.",
                    "label": 0
                },
                {
                    "sent": "And it's not me.",
                    "label": 0
                },
                {
                    "sent": "There we go.",
                    "label": 0
                },
                {
                    "sent": "OK, yes.",
                    "label": 0
                },
                {
                    "sent": "OK, so we can you know that took a little while but you can do this with big integers as well as integers and it's just it's different code running.",
                    "label": 0
                },
                {
                    "sent": "But you don't really have to think about the fact that that compilation step is happening, which is what is what's nice.",
                    "label": 0
                },
                {
                    "sent": "That's the dynamic interactive part.",
                    "label": 0
                },
                {
                    "sent": "So there's also this very clever dataflow type inference implementation that I have a notebook that I can talk about, but it's a little I think you guys probably aren't that interested in it, so if someone wants to ask me about it later, they can, but I'm not going to go through it now.",
                    "label": 0
                },
                {
                    "sent": "Jeff Bezanson, like I said, is the true performance artist.",
                    "label": 1
                },
                {
                    "sent": "Here he's the guy who makes all of this possible.",
                    "label": 0
                }
            ]
        },
        "clip_33": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "But Julia isn't really about performance.",
                    "label": 1
                },
                {
                    "sent": "That's not the point.",
                    "label": 0
                },
                {
                    "sent": "You, the benchmarks grab people, but the real killer is writing this high level generic code and having it applied to lots of different types and generate good code so you don't have to write lots of boilerplate or lots of C. And it sounds esoteric, but really crucial to this whole thing is multiple dispatch.",
                    "label": 1
                },
                {
                    "sent": "Which I'm going to explain now.",
                    "label": 0
                },
                {
                    "sent": "So what is multiple dispatch?",
                    "label": 0
                }
            ]
        },
        "clip_34": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So dispatch means choosing what version of some function version of a function is known as a method based on the runtime types, not the static types.",
                    "label": 1
                },
                {
                    "sent": "And it's based on all of the arguments, not just the receiver.",
                    "label": 1
                },
                {
                    "sent": "This is some you know if you've programmed in object oriented languages, you'll recognize AF of B, C as a method call on the object A.",
                    "label": 0
                },
                {
                    "sent": "You don't write things like this because in multiple dispatch that which version of F gets called depends on a B&C.",
                    "label": 0
                },
                {
                    "sent": "Not just a.",
                    "label": 0
                },
                {
                    "sent": "It's different than method overloading, but I don't really want to get into how.",
                    "label": 0
                }
            ]
        },
        "clip_35": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Exactly.",
                    "label": 0
                },
                {
                    "sent": "Instead, I'm just going to.",
                    "label": 0
                },
                {
                    "sent": "Give you a little bit of a taste of it.",
                    "label": 0
                },
                {
                    "sent": "So this is the I Julia notebook, which is if you use the Ipython notebook.",
                    "label": 0
                },
                {
                    "sent": "This is basically the same thing, except it's gotten a Julia kernel running in the back.",
                    "label": 0
                },
                {
                    "sent": "We spent a very productive week.",
                    "label": 0
                },
                {
                    "sent": "A while back with Fernando Perez, who was the original creator of the Ipython notebook, he invited us out to Berkeley and we hacked this out and it's been very popular ever since, and it's good for giving demonstrations.",
                    "label": 0
                },
                {
                    "sent": "So what I'm going to do is I'm going to create this function F. And I'm going to define a bunch of different methods for it and the way this works is that you know I say F of A comma B equals fall back.",
                    "label": 0
                },
                {
                    "sent": "This is equivalent to leaving this off, so if you leave a type annotation, that's what the colon: and then the thing thing afterwards is the type.",
                    "label": 0
                },
                {
                    "sent": "If you leave it off, it's assumed to be any, so this fall back will get called be called if I don't know anything more specific to do, and I have two arguments A&B.",
                    "label": 0
                },
                {
                    "sent": "This next method.",
                    "label": 0
                },
                {
                    "sent": "Will be called if I have two things that are both numbers and I don't have anything more specific to call.",
                    "label": 0
                },
                {
                    "sent": "This FA number and B anything will be called if A is a number and I don't know anything better about B and so on.",
                    "label": 0
                },
                {
                    "sent": "OK, So what you see here is those methods that we just defined.",
                    "label": 0
                },
                {
                    "sent": "Another interesting thing about this output is that they're output in a very particular order.",
                    "label": 0
                },
                {
                    "sent": "Their output from most specific to least specific.",
                    "label": 0
                },
                {
                    "sent": "So when you're looking for what version of something to call, you can look down this list and just conceptually what happens is that the system just looks down this list and calls the first one that matches.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "Essentially, you know.",
                    "label": 0
                },
                {
                    "sent": "So let's say we have this function call.",
                    "label": 0
                },
                {
                    "sent": "F of 1.5, 2.",
                    "label": 0
                },
                {
                    "sent": "What happens here is it goes to the first method and says OK, I've got A&BA is a floating point number and B is an integer.",
                    "label": 0
                },
                {
                    "sent": "Does the first method match?",
                    "label": 0
                },
                {
                    "sent": "No, because a is not an integer.",
                    "label": 0
                },
                {
                    "sent": "Does the second method match yes and we are both numbers, so I'm going to call that method and the method.",
                    "label": 0
                },
                {
                    "sent": "What that method does is it prints the, returns the string.",
                    "label": 0
                },
                {
                    "sent": "A&B are both numbers and you can see that that's exactly what happens here.",
                    "label": 0
                },
                {
                    "sent": "Now if you do something like call F with one and a string bar.",
                    "label": 0
                },
                {
                    "sent": "It goes down the same list and it goes OK. Is is an integer?",
                    "label": 0
                },
                {
                    "sent": "Yes it is B.",
                    "label": 0
                },
                {
                    "sent": "It's not an integer is a number.",
                    "label": 0
                },
                {
                    "sent": "Yes it is.",
                    "label": 0
                },
                {
                    "sent": "Is it be a number?",
                    "label": 0
                },
                {
                    "sent": "No it's not.",
                    "label": 0
                },
                {
                    "sent": "Get to the third one you say is a number.",
                    "label": 1
                },
                {
                    "sent": "Yes, is B?",
                    "label": 0
                },
                {
                    "sent": "Well, we don't have any restrictions on be here.",
                    "label": 0
                },
                {
                    "sent": "OK, so that's the method you call.",
                    "label": 0
                },
                {
                    "sent": "Conceptually.",
                    "label": 0
                },
                {
                    "sent": "This is what happens in actual practice.",
                    "label": 0
                },
                {
                    "sent": "Obviously, like scanning through a list like this would be super slow.",
                    "label": 0
                },
                {
                    "sent": "That's not how it's done.",
                    "label": 0
                },
                {
                    "sent": "But you can think of it that way so you can see that these.",
                    "label": 0
                },
                {
                    "sent": "You know this method here.",
                    "label": 0
                },
                {
                    "sent": "The method that's called here is the fall back because we don't know anything specific to do with a string in an array of integers.",
                    "label": 0
                },
                {
                    "sent": "That's just not a thing we know how to deal with, so we just called the fall back.",
                    "label": 0
                },
                {
                    "sent": "If you call it with, we've only given it methods that take two arguments.",
                    "label": 0
                },
                {
                    "sent": "So if you call F of 123, you'll get an error that says F has no method matching this type signature, which is 3 integers.",
                    "label": 0
                },
                {
                    "sent": "OK, so this is.",
                    "label": 0
                },
                {
                    "sent": "This is the basics of multiple dispatch.",
                    "label": 1
                },
                {
                    "sent": "It's pretty intuitive.",
                    "label": 0
                },
                {
                    "sent": "I think it probably makes sense to you know most people right away.",
                    "label": 0
                },
                {
                    "sent": "Nothing crazy.",
                    "label": 0
                },
                {
                    "sent": "There's a number of other languages that actually support stuff like this.",
                    "label": 0
                },
                {
                    "sent": "There's very in Common Lisp can do this closure as support for it.",
                    "label": 0
                },
                {
                    "sent": "Similar to pattern matching and you know in a lot of EM languages.",
                    "label": 0
                },
                {
                    "sent": "Mathematica can do very similar stuff.",
                    "label": 0
                },
                {
                    "sent": "Here are some of this is some of the interesting features that you know we've already touched on a little bit, but that are a little bit strange.",
                    "label": 0
                },
                {
                    "sent": "So here F. We give it a new a new method that is have got one of those type parameters.",
                    "label": 0
                },
                {
                    "sent": "So it's gotta gotta type parameter T which is got to be a number and then A&B are both of type T. So what does this mean?",
                    "label": 0
                },
                {
                    "sent": "Why is this?",
                    "label": 0
                },
                {
                    "sent": "What is going on here?",
                    "label": 0
                },
                {
                    "sent": "What this means is that A&B are going to be.",
                    "label": 0
                },
                {
                    "sent": "T is going to be some subtype of number an A&B are both going to be of the same type.",
                    "label": 0
                },
                {
                    "sent": "We don't know what type of subtype of number, but it's going to be something it's gotta match.",
                    "label": 0
                },
                {
                    "sent": "That's the key here, so this is distinct from the rule we had up here where it was just a is any kind of number is B and it be is any kind of number, and that this says this is going to get called if A&B are both of some type and it's the same type.",
                    "label": 0
                },
                {
                    "sent": "So now what we can see is that if we call it on two big ints or two big floats rather we get the message A&B are both big floats.",
                    "label": 0
                },
                {
                    "sent": "Another thing you'll notice is that the type parameter could can be used in the method body.",
                    "label": 0
                },
                {
                    "sent": "So it's something that you actually have access to when you're writing code, which can be handy sometimes.",
                    "label": 0
                },
                {
                    "sent": "The integer rule is still more specific.",
                    "label": 0
                },
                {
                    "sent": "And it only applies to things that are numbers.",
                    "label": 0
                },
                {
                    "sent": "Because of the type constraint in the in the quantifier.",
                    "label": 0
                },
                {
                    "sent": "So this sort of thing turns out to be really, you end up doing this a lot in numerical code because it's very common to be like.",
                    "label": 0
                },
                {
                    "sent": "Well, I know how to add two things if they are of the same type, but if they're not of the same type, I gotta do something else.",
                    "label": 0
                },
                {
                    "sent": "I've got to convert 1 to some other type and then try again.",
                    "label": 0
                },
                {
                    "sent": "Which is why we added this feature.",
                    "label": 0
                },
                {
                    "sent": "It's a sort of fancy feature and you know we wouldn't have added it unless we really felt like we needed it.",
                    "label": 0
                },
                {
                    "sent": "Yes, yes, so this is now.",
                    "label": 0
                },
                {
                    "sent": "You can see that.",
                    "label": 0
                },
                {
                    "sent": "Yeah, methods F you've got this extra method stuck in there.",
                    "label": 0
                },
                {
                    "sent": "And you can see that it's you can also see where it falls on the specificity hierarchy.",
                    "label": 0
                },
                {
                    "sent": "It's less specific than two integers.",
                    "label": 0
                },
                {
                    "sent": "But it is more specific than two numbers where they're not constrained to be the same, so we refer to this as diagonal dispatch.",
                    "label": 0
                },
                {
                    "sent": "An if you think about a table with the type of A and the type of be along the side and the top.",
                    "label": 0
                },
                {
                    "sent": "The reason its diagonals because the places where it matches is down the middle where the type of A and the type of beer equal.",
                    "label": 0
                },
                {
                    "sent": "It's like the diagonal of a matrix, the matrix of where the dimensions are types.",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "You can also do things like.",
                    "label": 0
                },
                {
                    "sent": "This is getting even more fancy.",
                    "label": 0
                },
                {
                    "sent": "Variable numbers of arguments, so this dot dot says that Args can be any number of.",
                    "label": 0
                },
                {
                    "sent": "Any number of numbers.",
                    "label": 0
                },
                {
                    "sent": "You can also do this diagonally, so this is going to be any number of numbers.",
                    "label": 0
                },
                {
                    "sent": "Or elements of type T where T is some type of number, but they all have to match, so this is going to match for you.",
                    "label": 0
                },
                {
                    "sent": "Call it with any number of arguments, but they're all of the same type and it's all some kind of number.",
                    "label": 0
                },
                {
                    "sent": "Can you do things with the dispatch system and Julia?",
                    "label": 0
                },
                {
                    "sent": "That's impossible with dumb plates in sqlplus for instance?",
                    "label": 0
                },
                {
                    "sent": "That's a good question.",
                    "label": 0
                },
                {
                    "sent": "The C template system is Turing complete, so it is hard to come up with something that you can't do with it.",
                    "label": 0
                },
                {
                    "sent": "Whether you want to do it is a different question.",
                    "label": 0
                },
                {
                    "sent": "I don't know.",
                    "label": 0
                },
                {
                    "sent": "I'll have to think about that.",
                    "label": 0
                },
                {
                    "sent": "That's a good question.",
                    "label": 0
                },
                {
                    "sent": "You can do some crazy stuff with C templates, so it's I'm not entirely sure.",
                    "label": 0
                },
                {
                    "sent": "So what you'll see here is that this this prints out heterogeneous or homogeneous calls.",
                    "label": 0
                },
                {
                    "sent": "So unary homogeneous call, well, you know there's only one argument, so it has to match itself, so it's homogeneous.",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "This is a ternary homogeneous call that they're all in tight integers, so it all matches.",
                    "label": 0
                },
                {
                    "sent": "But if we throw a floating point number in there now, it's now it's heterogeneous.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "So this one is interesting.",
                    "label": 0
                },
                {
                    "sent": "Zero area heterogeneous.",
                    "label": 0
                },
                {
                    "sent": "Why is that one heterogeneous?",
                    "label": 0
                },
                {
                    "sent": "The zero things took me awhile to puzzle this one out.",
                    "label": 0
                },
                {
                    "sent": "It is because.",
                    "label": 0
                },
                {
                    "sent": "Up here you're allowed the T has to be bound to something because you can, for example, use it in the in the function body.",
                    "label": 0
                },
                {
                    "sent": "So if there are zero arguments, you don't know what to bind it to, so it actually doesn't call that method.",
                    "label": 0
                },
                {
                    "sent": "But you know if we really, really want this to be.",
                    "label": 0
                },
                {
                    "sent": "We can just call this, you know zero.",
                    "label": 0
                },
                {
                    "sent": "And then.",
                    "label": 0
                },
                {
                    "sent": "You know, we've basically just patched in the behavior we wanted there.",
                    "label": 0
                },
                {
                    "sent": "OK, now it does what we want, but that does demonstrate one of the nice things about this system is that you can very easily sort of Patch in special case behaviors, which is really common, so you know, for example, let's say you're writing some numerical code and you have some function that you want to call it on particular types of matrices, and we have special types of matrices, for example.",
                    "label": 0
                },
                {
                    "sent": "You tried symmetric tridiagonal matrices.",
                    "label": 0
                },
                {
                    "sent": "That's a special type.",
                    "label": 0
                },
                {
                    "sent": "It's got special storage representation.",
                    "label": 0
                },
                {
                    "sent": "We can call special lapack versions of things that are much more efficient.",
                    "label": 0
                },
                {
                    "sent": "An you know you want to call a general version if you have one, you know if.",
                    "label": 0
                },
                {
                    "sent": "You want to call special version of the function when both arguments are symmetric tridiagonal matrices.",
                    "label": 0
                },
                {
                    "sent": "It's a completely plausable thing to do in numerical computing.",
                    "label": 0
                },
                {
                    "sent": "You'd have to go in and sort of hack into the definition a bunch of if else clauses in without multiple dispatch, but with multiple dispatch, all you have to do is add 1 little method and now it's done and it just calls the exact right thing, so that's sort of why this is so handy for this type of computing, and I'm not sure I don't really know exactly why numerical computing has so much of that sort of thing.",
                    "label": 0
                },
                {
                    "sent": "But you know, calling selecting the right code is just a very important thing to be able to do.",
                    "label": 0
                }
            ]
        },
        "clip_36": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So another thing about multiple dispatch that's nice is that it actually seems very intuitive.",
                    "label": 0
                },
                {
                    "sent": "Intuitive enough that I discovered I realized at some point that it's baked into the standard library of a lot of languages, and since I've done a fair amount of Ruby programming, I went through the Ruby book and found all of the standard library things that actually emulate multiple dispatch, so these are all the cases where some different behavior happens based on the runtime types, types of multiple arguments.",
                    "label": 0
                },
                {
                    "sent": "So I mean, the specific details aren't really important, but what you can see is that there's a fair amount of this type of polymorphism.",
                    "label": 0
                },
                {
                    "sent": "That actually happens in like a normal language, so I just think it's convenient.",
                    "label": 0
                }
            ]
        },
        "clip_37": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "To think about, and I thought about it some more and I realized I was like.",
                    "label": 0
                },
                {
                    "sent": "Why is this so familiar?",
                    "label": 0
                },
                {
                    "sent": "It seems so natural, and then I realized that language is also very.",
                    "label": 0
                },
                {
                    "sent": "Multiple dispatch E. So you can say you know you can have related meanings that are slightly different based on the type of you know the adverb for a place adverb.",
                    "label": 1
                },
                {
                    "sent": "It means one thing for manner adverb it means a different thing.",
                    "label": 0
                },
                {
                    "sent": "You know it goes.",
                    "label": 0
                },
                {
                    "sent": "So you know it goes well or she goes home.",
                    "label": 0
                },
                {
                    "sent": "They mean different things, but they're related and it just it's sort of dispatched on the type of the arguments.",
                    "label": 0
                },
                {
                    "sent": "You can also supply default arguments the same way, right?",
                    "label": 0
                },
                {
                    "sent": "So you know if I just say go.",
                    "label": 0
                },
                {
                    "sent": "Go home then you know the person is is implicit.",
                    "label": 0
                },
                {
                    "sent": "It's I'm talking to you.",
                    "label": 0
                },
                {
                    "sent": "I'm talking telling you to go home.",
                    "label": 0
                },
                {
                    "sent": "If you don't specify the place, then you get a default place which is just somewhere I don't care where you go.",
                    "label": 0
                },
                {
                    "sent": "Just go somewhere, and if you just say go, that's imperative, but you know it means that both the subject and the place are both implied, so I don't know this just just struck me when I was after.",
                    "label": 0
                },
                {
                    "sent": "I'd used multiple dispatch for awhile that it just was very intuitive and I couldn't put my finger on why, and I think this might be.",
                    "label": 0
                },
                {
                    "sent": "It is that it's just very linguistic.",
                    "label": 0
                },
                {
                    "sent": "OK.",
                    "label": 0
                },
                {
                    "sent": "I'm not sure I want to go into this.",
                    "label": 0
                },
                {
                    "sent": "OK, let's stop and take some questions.",
                    "label": 0
                },
                {
                    "sent": "I feel like people might have some questions at this point and.",
                    "label": 0
                },
                {
                    "sent": "Yeah, would you?",
                    "label": 0
                },
                {
                    "sent": "Maybe also demonstrate the user best Philly and I can validate composition.",
                    "label": 0
                },
                {
                    "sent": "Yeah, absolutely.",
                    "label": 0
                },
                {
                    "sent": "So I mean most things we you know we use the same well we actually use.",
                    "label": 0
                },
                {
                    "sent": "We use open Blas which is a good open source Blas so.",
                    "label": 0
                },
                {
                    "sent": "It has pretty good implementations with these things.",
                    "label": 0
                },
                {
                    "sent": "It's sort of neck and neck with MCL where MCL is better at some things than others.",
                    "label": 0
                },
                {
                    "sent": "It's there's no clear winner.",
                    "label": 0
                },
                {
                    "sent": "I wish MKL was open source, but it's not.",
                    "label": 0
                },
                {
                    "sent": "So let's say you want to take an SVD or something.",
                    "label": 0
                },
                {
                    "sent": "I don't know, let's.",
                    "label": 0
                },
                {
                    "sent": "I'm going to do the puniest SVD of all time.",
                    "label": 0
                },
                {
                    "sent": "OK, you know you get the pieces.",
                    "label": 0
                },
                {
                    "sent": "One thing that slightly different is we return S as a vector because most of the time I always wanted a vector.",
                    "label": 0
                },
                {
                    "sent": "I don't know.",
                    "label": 0
                },
                {
                    "sent": "There were some debates about this and everybody seemed to think that returning a vector for us was better.",
                    "label": 0
                },
                {
                    "sent": "So to reconstruct the matrix you have to do.",
                    "label": 0
                },
                {
                    "sent": "I can't, I shouldn't have done something I should have done something rectangular, 'cause then I would know which one it was.",
                    "label": 0
                },
                {
                    "sent": "Yeah.",
                    "label": 0
                },
                {
                    "sent": "That looks good, that's close.",
                    "label": 0
                },
                {
                    "sent": "Those are all very small.",
                    "label": 0
                },
                {
                    "sent": "So yeah, you can do SVD's.",
                    "label": 0
                },
                {
                    "sent": "There's actually a fairly sophisticated system of special.",
                    "label": 0
                },
                {
                    "sent": "Special matrix types, so this is this.",
                    "label": 0
                },
                {
                    "sent": "I find sort of interesting.",
                    "label": 0
                },
                {
                    "sent": "So if you want to factor X. Factorise, that's what it is factor is.",
                    "label": 0
                },
                {
                    "sent": "So you know how well\\ is sort of this Poly.",
                    "label": 0
                },
                {
                    "sent": "This Poly algorithm in MATLAB and in other systems that sort of looks at properties of your matrix and tries to figure out exactly what the best thing to do might be.",
                    "label": 0
                },
                {
                    "sent": "So we've factored this out, so to speak into a factorized function which actually looks at your matrix and returns its particular whatever it thinks the best type of factorization might be.",
                    "label": 0
                },
                {
                    "sent": "So in this case.",
                    "label": 0
                },
                {
                    "sent": "It returns an Lu factorization because for just a general random matrix value is the best you're going to do.",
                    "label": 0
                },
                {
                    "sent": "But for example, if you have.",
                    "label": 0
                },
                {
                    "sent": "You know?",
                    "label": 0
                },
                {
                    "sent": "Something that's symmetric.",
                    "label": 0
                },
                {
                    "sent": "Then this bunch Kaufman factorization, which I've never heard of before this, but apparently is the best thing you can do for a general symmetric matrix.",
                    "label": 0
                },
                {
                    "sent": "Anne.",
                    "label": 0
                },
                {
                    "sent": "You know, if you have a permission matrix, then the Cholesky factorization is better, so this factorization is kind of nice.",
                    "label": 0
                },
                {
                    "sent": "What it does is it actually ends up acting just like.",
                    "label": 0
                },
                {
                    "sent": "Well, you can do things like.",
                    "label": 0
                },
                {
                    "sent": "Yeah, so you can use it as the left hand side of\\ So and that's actually how Backslashes implemented.",
                    "label": 0
                },
                {
                    "sent": "What it does is it takes a general matrix, factorizes it, and then calls back, then calls the specific version of\\ for that factorization.",
                    "label": 0
                },
                {
                    "sent": "But it means you can also sort of do things like take the factorization 1st and then the code looks exactly the same as if you just use the matrix itself, because the matrix.",
                    "label": 0
                },
                {
                    "sent": "Max the factorization object is sort of a pre pre solved version of the matrix.",
                    "label": 0
                },
                {
                    "sent": "This lets you do some kind of nice things.",
                    "label": 0
                },
                {
                    "sent": "It's it seems, seems to be a pretty nice design.",
                    "label": 0
                },
                {
                    "sent": "I didn't come up with this, this is.",
                    "label": 0
                },
                {
                    "sent": "You know collaboration of various.",
                    "label": 0
                },
                {
                    "sent": "Yeah, I mean it's all comfortable.",
                    "label": 0
                },
                {
                    "sent": "It depends on your machine.",
                    "label": 0
                },
                {
                    "sent": "We've got a machine at MIT with a TB of RAM and 80 cores, so we've done some fairly large problems on that.",
                    "label": 0
                },
                {
                    "sent": "This is not what I do on a day to day basis.",
                    "label": 0
                },
                {
                    "sent": "I work on the language, but Alan Edelman, who is one of the collaborators.",
                    "label": 0
                },
                {
                    "sent": "He's ecstatic about the things he can do in Matlab with.",
                    "label": 0
                },
                {
                    "sent": "With Julia on this machine.",
                    "label": 0
                },
                {
                    "sent": "Partly because he.",
                    "label": 0
                },
                {
                    "sent": "It's very easy to spin up, you know 80 parallel Julia processes, each doing some small computation and then collecting the results back, which is different than doing a really one really huge computation, But you can do either.",
                    "label": 0
                },
                {
                    "sent": "One of those will both work.",
                    "label": 0
                },
                {
                    "sent": "Or yes, it should, because it's going to use blah switch in the blouse is threaded, so Julia currently doesn't support threading in the language we're working on.",
                    "label": 0
                },
                {
                    "sent": "That, which is what I referred to earlier.",
                    "label": 0
                },
                {
                    "sent": "But if you call a multithreaded library, it'll be fully multithreaded.",
                    "label": 0
                },
                {
                    "sent": "Open blossom issues with.",
                    "label": 0
                },
                {
                    "sent": "Threading thresholds it's actually great for big problems.",
                    "label": 0
                },
                {
                    "sent": "It's terrible for medium sized problems 'cause it doesn't really know.",
                    "label": 0
                },
                {
                    "sent": "I mean, it does ridiculous things like you know, for a four by four matrix that uses 8 cores and you're like that's not a reasonable thing to do for a four by four matrix, you just do it on one thread.",
                    "label": 0
                },
                {
                    "sent": "MCL is much better with medium sized problems.",
                    "label": 0
                },
                {
                    "sent": "Yeah.",
                    "label": 0
                },
                {
                    "sent": "Suki of.",
                    "label": 0
                },
                {
                    "sent": "Yeah yeah, I just saved it.",
                    "label": 0
                },
                {
                    "sent": "I mean, it's this this guy.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "Yeah so F is F is the type of F is this.",
                    "label": 0
                },
                {
                    "sent": "It's this Cholesky factorization object.",
                    "label": 0
                },
                {
                    "sent": "Well, so this is this is going to give you so F was the factorization version of.",
                    "label": 0
                },
                {
                    "sent": "What did I define it as I think.",
                    "label": 0
                },
                {
                    "sent": "Yeah, right?",
                    "label": 0
                },
                {
                    "sent": "Right and so.",
                    "label": 0
                },
                {
                    "sent": "So I'm going to define that and then.",
                    "label": 0
                },
                {
                    "sent": "So if I do XX transpose by well, let's say V equals Rand.",
                    "label": 0
                },
                {
                    "sent": "10 So if I do F\\ V. Versus XX transpose V. I get the same answer.",
                    "label": 0
                },
                {
                    "sent": "Right?",
                    "label": 0
                },
                {
                    "sent": "So what it is doing is it will do the factorization and then do the\\ and then toss out the factorization.",
                    "label": 0
                },
                {
                    "sent": "So the natural thing you would want to do if you're going to use this multiple times, call factorize up front and then just use.",
                    "label": 0
                },
                {
                    "sent": "You know where you would have used XX transpose.",
                    "label": 0
                },
                {
                    "sent": "Now you just use F. Which is nice because you can optimize your code really easily.",
                    "label": 0
                },
                {
                    "sent": "You don't have to pull one thing out.",
                    "label": 0
                },
                {
                    "sent": "You can see why your talk really sort of got my gears turning yesterday.",
                    "label": 0
                },
                {
                    "sent": "Provide.",
                    "label": 0
                },
                {
                    "sent": "It's hard to put a timeline on it.",
                    "label": 0
                },
                {
                    "sent": "We did a lot of work over the summer and we have a we have a threads branch that has.",
                    "label": 0
                },
                {
                    "sent": "Mostly working threading with not very good API that you just sort of.",
                    "label": 0
                },
                {
                    "sent": "You know you say.",
                    "label": 0
                },
                {
                    "sent": "I mean, it's by not very good API.",
                    "label": 0
                },
                {
                    "sent": "I think it's like approximately equivalent to open MP.",
                    "label": 0
                },
                {
                    "sent": "Yeah, it's not it.",
                    "label": 0
                },
                {
                    "sent": "You can get by.",
                    "label": 0
                },
                {
                    "sent": "It's not great what we're going to do.",
                    "label": 0
                },
                {
                    "sent": "Is so there are asynchronous tasks, so the way IO works in.",
                    "label": 0
                },
                {
                    "sent": "And Julia is, well, you can create something.",
                    "label": 0
                },
                {
                    "sent": "You can create a task so.",
                    "label": 0
                },
                {
                    "sent": "So this I'm going to create a task object.",
                    "label": 0
                },
                {
                    "sent": "Which you can see is a task.",
                    "label": 0
                },
                {
                    "sent": "It's in the runnable state.",
                    "label": 0
                },
                {
                    "sent": "It's got an address you don't really need that stuff.",
                    "label": 0
                },
                {
                    "sent": "But what you can do is you can consume.",
                    "label": 0
                },
                {
                    "sent": "Values from it.",
                    "label": 0
                },
                {
                    "sent": "Anne, you'll get.",
                    "label": 0
                },
                {
                    "sent": "The values and now you can collect the rest of them.",
                    "label": 0
                },
                {
                    "sent": "No, well that's sorry collecti, and you get the rest.",
                    "label": 0
                },
                {
                    "sent": "And so what's happening there is the task is just you give it a function which you say I would like you to run this I want you to run it on its own stack and it goes off and runs it on another stack.",
                    "label": 0
                },
                {
                    "sent": "It doesn't start immediately, but as soon as the current stack blocks because it's waiting for a value from another task then that other task will run until it produces value and yields back to the current tasks.",
                    "label": 0
                },
                {
                    "sent": "So that's just a you know.",
                    "label": 0
                },
                {
                    "sent": "That's the coroutine control flow construct what we're going to do is we're going to make tasks the unit of work for multi threading as well.",
                    "label": 0
                },
                {
                    "sent": "Which means that when you start a task, it actually will potentially start running immediately on another thread.",
                    "label": 0
                },
                {
                    "sent": "So not only does it get its own stack, it gets its own thread, but tasks get mapped onto threads.",
                    "label": 0
                },
                {
                    "sent": "There's going to be a fixed number of threads that correspond to your actual physical cores, and then they can communicate with each other using channels or something like that.",
                    "label": 0
                },
                {
                    "sent": "It will probably be very similar to go.",
                    "label": 0
                },
                {
                    "sent": "But we're going to pay very careful attention to making sure that the scaling performance is very good, which I don't think is a priority for go.",
                    "label": 0
                },
                {
                    "sent": "They want the IO performance to be really good.",
                    "label": 0
                },
                {
                    "sent": "What we want to be able to do is you should be able to write.",
                    "label": 0
                },
                {
                    "sent": "You know your own parallel Blas or something like that in it, or you know your own Laplace.",
                    "label": 0
                },
                {
                    "sent": "You know stencil or something along those lines should be doable.",
                    "label": 0
                },
                {
                    "sent": "Yeah, yeah, it's called threads.",
                    "label": 0
                },
                {
                    "sent": "If you search for multithreading on Julia Dev List, you'll turn it up pretty quickly.",
                    "label": 0
                },
                {
                    "sent": "Yeah.",
                    "label": 0
                },
                {
                    "sent": "I said it before.",
                    "label": 0
                },
                {
                    "sent": "Great language, thank you.",
                    "label": 0
                },
                {
                    "sent": "No great yeah.",
                    "label": 0
                },
                {
                    "sent": "Question so you are using the development version.",
                    "label": 0
                },
                {
                    "sent": "Or are you making a copy of it?",
                    "label": 0
                },
                {
                    "sent": "Yes, yes, we're going to change this.",
                    "label": 0
                },
                {
                    "sent": "So currently when you slice into an array, when you transpose an array that creates a copy.",
                    "label": 0
                },
                {
                    "sent": "This is, you know, not great.",
                    "label": 0
                },
                {
                    "sent": "Seems like a good idea at the time.",
                    "label": 0
                },
                {
                    "sent": "It's also very hard to generalize, not copying one of the major goals for the next big release of Julia, which is .4.",
                    "label": 0
                },
                {
                    "sent": "So not not to 1.0 yet.",
                    "label": 0
                },
                {
                    "sent": "'cause the API is still sort of in the air, but is that we're going to change exactly that and make everything.",
                    "label": 0
                },
                {
                    "sent": "Make as few copies as possible, much closer to what NUM Py does.",
                    "label": 0
                },
                {
                    "sent": "She also says something about sports.",
                    "label": 0
                },
                {
                    "sent": "So yes, by structure do you mean?",
                    "label": 0
                },
                {
                    "sent": "Yeah, we don't.",
                    "label": 0
                },
                {
                    "sent": "I don't think we have.",
                    "label": 0
                },
                {
                    "sent": "We don't have.",
                    "label": 0
                },
                {
                    "sent": "We don't have a representation for Hankel matrix, but one of the nice things is that it's very easy to make these things yourself.",
                    "label": 0
                },
                {
                    "sent": "I did mention you know symmetric tridiagonal.",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "So you can give random 10 random 11.",
                    "label": 0
                },
                {
                    "sent": "I forget the order of these.",
                    "label": 0
                },
                {
                    "sent": "OK, so.",
                    "label": 0
                },
                {
                    "sent": "And so that's especially represented symmetric tridiagonal matrix that only requires those two vectors.",
                    "label": 0
                },
                {
                    "sent": "It says it's storage.",
                    "label": 0
                },
                {
                    "sent": "The.",
                    "label": 0
                },
                {
                    "sent": "Code for this is.",
                    "label": 0
                },
                {
                    "sent": "Here.",
                    "label": 0
                },
                {
                    "sent": "And you can see that the definition of this type is not terribly onerous.",
                    "label": 0
                },
                {
                    "sent": "All you have to do is say, OK, it's this type.",
                    "label": 0
                },
                {
                    "sent": "You know you give it, give it some supertypes and you have the diagonal, the subdiagonal, a constructor that checks that the dimensions are correct.",
                    "label": 0
                },
                {
                    "sent": "And then you do have to do it.",
                    "label": 0
                },
                {
                    "sent": "Define a bunch of functionality for it, because otherwise it doesn't know what to do with itself.",
                    "label": 0
                },
                {
                    "sent": "But none of this functionality is terribly crazy.",
                    "label": 0
                },
                {
                    "sent": "A lot of it is in fact.",
                    "label": 0
                },
                {
                    "sent": "Hooking in the appropriate calls to elkei pack so that you'll get really fast versions of things.",
                    "label": 0
                },
                {
                    "sent": "But I do think that this, you know this is significantly easier than it would be, say to try to do the same thing in Matlab or in Python.",
                    "label": 0
                },
                {
                    "sent": "You know you get some interesting.",
                    "label": 0
                },
                {
                    "sent": "Inversion of a tridiagonal Jacobi matrix.",
                    "label": 0
                },
                {
                    "sent": "So someone you know went to town and found a good algorithm for this and decided to implement it, and you see some fun stuff like you can use Unicode characters as variables, which was slightly unreasonable because it was hard to input them, but then we did this and so now you can type Unicode very easily.",
                    "label": 0
                },
                {
                    "sent": "And you can even do things like this.",
                    "label": 0
                },
                {
                    "sent": "So X hat equals 1.5.",
                    "label": 0
                },
                {
                    "sent": "So that suddenly makes it very easy to enter Unicode.",
                    "label": 0
                },
                {
                    "sent": "There was some other questions I guess maybe running out of time.",
                    "label": 0
                },
                {
                    "sent": "I don't know, yes.",
                    "label": 0
                },
                {
                    "sent": "Press on.",
                    "label": 0
                },
                {
                    "sent": "Author.",
                    "label": 0
                },
                {
                    "sent": "Is there something?",
                    "label": 0
                },
                {
                    "sent": "I would definitely not say that we don't put an emphasis on code reuse.",
                    "label": 0
                },
                {
                    "sent": "In fact, I'd say that the generic programming facilities make it very easy to reuse code, because what you would do is you would write.",
                    "label": 0
                },
                {
                    "sent": "General version of some algorithm and then it just sort of applies to all sorts of different types, so I mean.",
                    "label": 0
                },
                {
                    "sent": "The fact that.",
                    "label": 0
                },
                {
                    "sent": "Super.",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "Super calls are pretty easy, you can just use the invoke function to invoke us.",
                    "label": 0
                },
                {
                    "sent": "A different method than the one that you're currently in.",
                    "label": 0
                },
                {
                    "sent": "Yeah, but it's a lot more complicated than in Java and Java.",
                    "label": 0
                },
                {
                    "sent": "There's like 1 unique.",
                    "label": 0
                },
                {
                    "sent": "Thing that is your super method, multiple dispatcher like which way do you want to walk up the lattice?",
                    "label": 0
                },
                {
                    "sent": "There is potentially a lot of different ways to climb the lattice.",
                    "label": 0
                },
                {
                    "sent": "There's not just one potential super method.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "Yeah, yeah.",
                    "label": 0
                },
                {
                    "sent": "But they were kind of complicated, but they are.",
                    "label": 0
                },
                {
                    "sent": "They are great languages, but they're very little complicated.",
                    "label": 0
                },
                {
                    "sent": "We haven't spent a lot of time on it, just I don't find the need to invoke super methods very often.",
                    "label": 0
                },
                {
                    "sent": "But let's talk about it later.",
                    "label": 0
                },
                {
                    "sent": "If you have good ideas, I'd like to hear them, and there was one other question over here.",
                    "label": 0
                },
                {
                    "sent": "Did you yeah?",
                    "label": 0
                },
                {
                    "sent": "Can you use manual memory management in Julia?",
                    "label": 0
                },
                {
                    "sent": "You cannot use manual memory management.",
                    "label": 0
                },
                {
                    "sent": "What you can do is you can.",
                    "label": 0
                },
                {
                    "sent": "Take over a chunk of memory for an array and indicate that you don't want to manage it.",
                    "label": 0
                },
                {
                    "sent": "So for example C hands you a chunk of memory and expects to free itself.",
                    "label": 0
                },
                {
                    "sent": "You can say wrap this in an array and don't try to free it.",
                    "label": 0
                },
                {
                    "sent": "That's pretty much the extent of it.",
                    "label": 0
                },
                {
                    "sent": "That's as much manual memory management as you're going to get.",
                    "label": 0
                },
                {
                    "sent": "What you can do though, is you know, for example.",
                    "label": 0
                },
                {
                    "sent": "You know?",
                    "label": 0
                },
                {
                    "sent": "You can.",
                    "label": 0
                },
                {
                    "sent": "Sort something which returns a copy.",
                    "label": 0
                },
                {
                    "sent": "The original value is unchanged, but if you use this sort bang version then you get it sorted in place.",
                    "label": 0
                },
                {
                    "sent": "Doesn't seem like a big deal, but what this allows you to do, for example, is let's say you have some loop where you discover that.",
                    "label": 0
                },
                {
                    "sent": "The allocation is the real bottleneck, which it often is.",
                    "label": 0
                },
                {
                    "sent": "I mean, allocation in a loop is death.",
                    "label": 0
                },
                {
                    "sent": "So what you do is you figure out OK, I'm just going to pre allocate this an I'm going to allocate it before the for loop and then I'm going to pass it into a mutating version of this function inside the for loop and then I don't have to do any allocation.",
                    "label": 0
                },
                {
                    "sent": "Maybe you need two different arrays.",
                    "label": 0
                },
                {
                    "sent": "You can just swap them back and forth and do double buffering, so usually not.",
                    "label": 0
                },
                {
                    "sent": "So I mean the approach we're not trying to take is to have a sufficiently clever compiler that can just fall solve every problem for you, but the rather make it really easy to write the straightforward correct version, discover what is wrong with it, what's low, and then make it not terribly hard to make it a little bit faster by tweaking things like allocation and type stability.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "Yes.",
                    "label": 0
                },
                {
                    "sent": "Very simple market sweep.",
                    "label": 0
                },
                {
                    "sent": "It's very straightforward.",
                    "label": 0
                },
                {
                    "sent": "It's not great, but it has good throughput, so it's pretty good for numerical things.",
                    "label": 0
                },
                {
                    "sent": "If you want to do real time computing, it's not a good thing at all.",
                    "label": 0
                },
                {
                    "sent": "There's one guy who's doing.",
                    "label": 0
                },
                {
                    "sent": "Sound generation live, real time sound generation, and he's he really wants the garbage collector to get better.",
                    "label": 0
                },
                {
                    "sent": "But you know?",
                    "label": 0
                },
                {
                    "sent": "That's priorities.",
                    "label": 0
                },
                {
                    "sent": "There's only so many things you can fix at a time.",
                    "label": 0
                },
                {
                    "sent": "Yeah, OK, thank you very much everyone.",
                    "label": 0
                }
            ]
        }
    }
}