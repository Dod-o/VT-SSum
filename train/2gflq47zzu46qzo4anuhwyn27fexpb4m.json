{
    "id": "2gflq47zzu46qzo4anuhwyn27fexpb4m",
    "title": "Learning Multifractal Structure in Large Networks",
    "info": {
        "author": [
            "Sven Peter Schmit, Institute for Computational and Mathematical Engineering, Stanford University",
            "Austin R. Benson, Institute for Computational and Mathematical Engineering, Stanford University"
        ],
        "published": "Oct. 7, 2014",
        "recorded": "August 2014",
        "category": [
            "Top->Computer Science->Data Mining",
            "Top->Computer Science->Knowledge Extraction"
        ]
    },
    "url": "http://videolectures.net/kdd2014_benson_schmit_large_networks/",
    "segmentation": [
        [
            "So we're talking about learning multifractal structure in large networks.",
            "So we did this work with Carlos, who is a fellow classmate of ours."
        ],
        [
            "So let me first briefly talk about the setting, so we're interested in models for generating random graphs that mimic structure that we see in real world graphs, such as say a Twitter not Facebook network.",
            "So to be precise were interested in undirected graphs here, and we're looking we're interested in finding models that can generate graphs that like have the same structure, such as a power law, degree distribution, high clustering coefficient, small diameter things like that.",
            "So there lately there have been many models that have been proposed for this.",
            "For example a stochastic Chronicle, graphs and there's this one paper where Paula and others introduced the Multifractal network generators, which we think is kind of a generalization of stochastic Chronicle graphs in some sense."
        ],
        [
            "So our contributions here are that we want to make this multifractal network generator feasible for modeling large scale network so that it can scale up to graphs much larger than the most previously possible."
        ],
        [
            "Let me see.",
            "OK, so first we given a very intuitive theoretical result that helps us scale this method to.",
            "Two large scale graphs and then we show how we can fit the parameters of a multifractal network generator to a specific graph and we do that that is independent of the size of the graph.",
            "So in theory this could scale to arbitrarily large graphs.",
            "Then it's not very useful to have a generator, but not being able to generate any graphs from it.",
            "So we also developed a fast heuristic that will generate an approximation of this multifractal network.",
            "Generator graph.",
            "And finally, we demonstrate the effectiveness of our approach to in both synthetic and real world settings."
        ],
        [
            "OK, so let me give you a brief introduction to this multifractal network generators.",
            "So the ingredients are the following.",
            "We start with the number of nodes N and then we have a number of categories that we have to specify which are M and usually this is two or three and they have specified lengths which I'll come back to.",
            "And then there's a number of recursive levels K and this is kind of the order the logarithm of N. Although this is not necessary.",
            "This is kind of what you would.",
            "Think is reasonable.",
            "So and then we have say a probability matrix that gives the probability of an edge between nodes in two different categories.",
            "So this is a storage we can store this in matrix P that's M by N."
        ],
        [
            "So that's the parameters of our model and then how is this generated?",
            "So let's first look at the simple case where there's no recursion.",
            "This is kind of similar to a stochastic block model, but let me define us in the following way.",
            "So we start, say with a line from an interval from zero to one.",
            "As you can see at the bottom, we divide this line into M intervals with specified lengths.",
            "And then we simply sample uniformly on the line.",
            "These endnotes so you can see that nodes X1 and X2 belong to category one, and then node X3 is in Category 2."
        ],
        [
            "So what we do next is we create a square from this line.",
            "So we basically duplicate the line vertically.",
            "Now we get some sort of box where to get the probability of an edge between two nodes.",
            "We simply look at where if we intersect we in what box we end up.",
            "So for example, the probability of an edge between nodes X1 and X2 is PC1C1.",
            "But then the probability of an edge between node X1 and X3 is PC1C2.",
            "OK, so this is a very basic so."
        ],
        [
            "Let's see what happens if we add recursion.",
            "So the idea is the following.",
            "So we have these subintervals, or these intervals, and we're going to recursively split them again according to the same lengths.",
            "So for example, we take this this category C one we again assume it's kind of length one, and we split it again.",
            "So in this case we see that in a second level, node X1 belongs again to category one, but not X2 belongs to Category 2."
        ],
        [
            "And similarly, you could deduce that kind of you can see that not X3 would belong in both level one and Level 2 to the second category, and now to the probability of an edge between two nodes.",
            "We simply multiply the probabilities that were given in the matrix, so I'm hope you're all still with me.",
            "So in this case the probability of an edge between node X1 and X2 is given by PC1C one times PC1C2.",
            "So that's the basic setup now."
        ],
        [
            "Now if we expand this recursion, we can get a full probability matrix, so that for every say if we get this set of categories for that are all possible sets of categories that we get.",
            "We can get this kind of adjacency matrix Q that would be M to the power cable, M to the power K large.",
            "And here we have like all the necessary probabilities.",
            "But the problem is that this.",
            "The matrix Q grows very fast with K, so it becomes difficult to do any computation with it, and so we don't want to do that an intuitively, it seems like this is not necessary, right?",
            "All the information that we need to start in this P already in the L. There's nothing new that we add here, so our intuition is that we can do better here."
        ],
        [
            "So our main theoretical result is a fairly simple observation.",
            "So really what we can do is suppose we have this multifractal network generator with K levels of recursion.",
            "What if we just take one level of recursion and then have K of these?",
            "So we take instead of 1 generator with K levels of recursions.",
            "We copied the generator K times or sample K graphs with just one level of recursion.",
            "And then if we take the intersection of the edge sets from all these graphs.",
            "We get a new graph and this graph is actually.",
            "Equal in distribution to a multi fractal generator with K levels.",
            "So this allows us to compute several properties of graphs fairly easily, and Austin will take over and tell you more about that.",
            "Alright thanks Finn.",
            "So why did we go through all of that work?"
        ],
        [
            "The reason is it makes it really easy to compute the expected number of several graph properties that we're interested in.",
            "So in this example I'm just going to say how to compute the expected number of edges so it's fence set as we really only need to look at one level and then treated as the intersection of K graphs.",
            "And so here the probability of an edge between any two nodes.",
            "We can just condition on which which box they fall into, which categories they belong to, and that conditioning is given by the lengths.",
            "And then we get the probability from the probability matrix and then we just raise that to the power of the number of recursive levels.",
            "Incense all the nodes are independently sampled.",
            "By linearity of expectation, we get we get the total number of edges."
        ],
        [
            "OK, so we can actually do all of these.",
            "The same computation for a bunch of other graph properties, in particular things like wedges, three stars, four stars triangles and four cliques."
        ],
        [
            "So that's very useful, because what we're going to do to try and fit real networks to this multifractal framework is we're going to empirically count the number of these subgraphs that occur and try to find parameters such that in expectation these match.",
            "And so this this strategy is is called the method of moments.",
            "This optimization problem just says I'm going to try and find parameters such that an expectation I match the empirical values.",
            "And I satisfy all the constraints of the generator.",
            "And so once we have all of the empirical counts that we want, so once we've counted the number of triangles and counted the number for cliques and so on, this optimization procedure is very fast.",
            "In fact, it's independent of the size of the graph, which is really nice.",
            "So there is some time that we might have to invest in actually computing these counts.",
            "So like for example, computing the number for clicks can be pretty expensive, but there's a lot of great work on estimating these values, and there's even some work at KDD here this year.",
            "I'm doing that."
        ],
        [
            "Alright, so does this actually work?",
            "That's what we're going to try and see.",
            "So in this example, we basically constructed a synthetic network according to the Multifractal network generator.",
            "And try to see if we could recover it with the method of moments.",
            "So in the left hand plot is a few different sub graph counts an in the red color is the distribution for the original network, the one that we created.",
            "And so again it's a random generator, so this would just took many samples.",
            "We took a single sample which is the blue line to use to fit our method of moments on and then the green is the distributions that we recovered and so we see that this does tend to recover recover things pretty well on the right hand side plot is a degree distribution for the original in the recovered networks.",
            "And again they match on the bottom of the screen.",
            "Shows shows the actual parameters that we used and recovered, and they also match.",
            "So this is good."
        ],
        [
            "But it actually works on synthetic networks.",
            "But can we actually use it for real grass?",
            "The answer is yes, so this left hand plot on the Y axis shows the ratio of the expected number of these sub graph counts to the empirical number.",
            "So the horizontal bar is a is at y = 1, which means the expected value is right on with the empirical value in.",
            "The blue bars are what we're doing and we can see that most of these cases were able to match it fairly well.",
            "In particular, compared to stochastic Chronicle graphs, we are much better able to capture things like triangles and for cliques.",
            "On the right hand side is the degree distribution.",
            "So we tried this with two categories in three categories and so in green is with two categories and Blues with three categories.",
            "And the degree distribution is kind of match.",
            "And there's some weird oscillations going on with the degree distributions."
        ],
        [
            "So this this is the same experiment just on a different network, so this is a citation graph.",
            "The high energy physics one from archive.",
            "And again we see the same basic properties that our method is able to capture things like triangles and for cliques that other methods struggle with.",
            "And again, the degree distribution we kind of have some similar characteristics.",
            "We do get this these kind of noisy oscillations going on that you can see with with the Green plot here the green line.",
            "There's actually a way to kind of dampen that those oscillations, so there's some work by session, others at Sandia that we employ for for this framework as well.",
            "And we have the details of that in the paper."
        ],
        [
            "OK, so one one thing that we haven't talked about yet is how do you actually sample these graphs in practice.",
            "So the original framework for these multifractal network generators that were using it for very small graphs and they only provided a simple quadratic algorithm for sampling them.",
            "So you could just flip a coin based on the probabilities for each node pair and create the edge with that probability.",
            "Hi, this is not really scalable for the networks that we were interested in, so we developed a heuristic that's kind of a fast sampler and we use the idea from stochastic Chronicle graphs which is called the ball dropping scheme.",
            "So instead of looking at each node pair, you first fix the number of edges and then try and match those edges to the nodes.",
            "Note pairs in the graph.",
            "And so the key difference with what we're doing is that you can end up with many node pairs within a single box.",
            "So we kind of have to do some some weighting schemes to get it to work out.",
            "And there are a lot of details and caveats to this, and I'll just leave that to the paper."
        ],
        [
            "Alright, so overall we feel that we've made the multifractal network generator scalable and a good model for for real large networks and networks that.",
            "That people here are interested in, and so our theory on showing the decomposition of the graphs is really what allowed us to do fast estimation of parameters.",
            "In particular, we're able to match triangles and for cliques and those types of structures are hard for other generators to match, and we have also shown that this does effectively model real graphs.",
            "I showed the Twitter and citation network in this talk, and we have a few others in the paper as well."
        ]
    ],
    "summarization": {
        "clip_0": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So we're talking about learning multifractal structure in large networks.",
                    "label": 0
                },
                {
                    "sent": "So we did this work with Carlos, who is a fellow classmate of ours.",
                    "label": 0
                }
            ]
        },
        "clip_1": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So let me first briefly talk about the setting, so we're interested in models for generating random graphs that mimic structure that we see in real world graphs, such as say a Twitter not Facebook network.",
                    "label": 0
                },
                {
                    "sent": "So to be precise were interested in undirected graphs here, and we're looking we're interested in finding models that can generate graphs that like have the same structure, such as a power law, degree distribution, high clustering coefficient, small diameter things like that.",
                    "label": 1
                },
                {
                    "sent": "So there lately there have been many models that have been proposed for this.",
                    "label": 0
                },
                {
                    "sent": "For example a stochastic Chronicle, graphs and there's this one paper where Paula and others introduced the Multifractal network generators, which we think is kind of a generalization of stochastic Chronicle graphs in some sense.",
                    "label": 0
                }
            ]
        },
        "clip_2": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So our contributions here are that we want to make this multifractal network generator feasible for modeling large scale network so that it can scale up to graphs much larger than the most previously possible.",
                    "label": 0
                }
            ]
        },
        "clip_3": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Let me see.",
                    "label": 0
                },
                {
                    "sent": "OK, so first we given a very intuitive theoretical result that helps us scale this method to.",
                    "label": 1
                },
                {
                    "sent": "Two large scale graphs and then we show how we can fit the parameters of a multifractal network generator to a specific graph and we do that that is independent of the size of the graph.",
                    "label": 1
                },
                {
                    "sent": "So in theory this could scale to arbitrarily large graphs.",
                    "label": 0
                },
                {
                    "sent": "Then it's not very useful to have a generator, but not being able to generate any graphs from it.",
                    "label": 0
                },
                {
                    "sent": "So we also developed a fast heuristic that will generate an approximation of this multifractal network.",
                    "label": 0
                },
                {
                    "sent": "Generator graph.",
                    "label": 1
                },
                {
                    "sent": "And finally, we demonstrate the effectiveness of our approach to in both synthetic and real world settings.",
                    "label": 0
                }
            ]
        },
        "clip_4": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "OK, so let me give you a brief introduction to this multifractal network generators.",
                    "label": 1
                },
                {
                    "sent": "So the ingredients are the following.",
                    "label": 1
                },
                {
                    "sent": "We start with the number of nodes N and then we have a number of categories that we have to specify which are M and usually this is two or three and they have specified lengths which I'll come back to.",
                    "label": 0
                },
                {
                    "sent": "And then there's a number of recursive levels K and this is kind of the order the logarithm of N. Although this is not necessary.",
                    "label": 1
                },
                {
                    "sent": "This is kind of what you would.",
                    "label": 0
                },
                {
                    "sent": "Think is reasonable.",
                    "label": 0
                },
                {
                    "sent": "So and then we have say a probability matrix that gives the probability of an edge between nodes in two different categories.",
                    "label": 0
                },
                {
                    "sent": "So this is a storage we can store this in matrix P that's M by N.",
                    "label": 0
                }
            ]
        },
        "clip_5": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So that's the parameters of our model and then how is this generated?",
                    "label": 0
                },
                {
                    "sent": "So let's first look at the simple case where there's no recursion.",
                    "label": 1
                },
                {
                    "sent": "This is kind of similar to a stochastic block model, but let me define us in the following way.",
                    "label": 1
                },
                {
                    "sent": "So we start, say with a line from an interval from zero to one.",
                    "label": 0
                },
                {
                    "sent": "As you can see at the bottom, we divide this line into M intervals with specified lengths.",
                    "label": 1
                },
                {
                    "sent": "And then we simply sample uniformly on the line.",
                    "label": 0
                },
                {
                    "sent": "These endnotes so you can see that nodes X1 and X2 belong to category one, and then node X3 is in Category 2.",
                    "label": 0
                }
            ]
        },
        "clip_6": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So what we do next is we create a square from this line.",
                    "label": 0
                },
                {
                    "sent": "So we basically duplicate the line vertically.",
                    "label": 0
                },
                {
                    "sent": "Now we get some sort of box where to get the probability of an edge between two nodes.",
                    "label": 1
                },
                {
                    "sent": "We simply look at where if we intersect we in what box we end up.",
                    "label": 0
                },
                {
                    "sent": "So for example, the probability of an edge between nodes X1 and X2 is PC1C1.",
                    "label": 0
                },
                {
                    "sent": "But then the probability of an edge between node X1 and X3 is PC1C2.",
                    "label": 0
                },
                {
                    "sent": "OK, so this is a very basic so.",
                    "label": 0
                }
            ]
        },
        "clip_7": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Let's see what happens if we add recursion.",
                    "label": 0
                },
                {
                    "sent": "So the idea is the following.",
                    "label": 0
                },
                {
                    "sent": "So we have these subintervals, or these intervals, and we're going to recursively split them again according to the same lengths.",
                    "label": 0
                },
                {
                    "sent": "So for example, we take this this category C one we again assume it's kind of length one, and we split it again.",
                    "label": 0
                },
                {
                    "sent": "So in this case we see that in a second level, node X1 belongs again to category one, but not X2 belongs to Category 2.",
                    "label": 0
                }
            ]
        },
        "clip_8": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "And similarly, you could deduce that kind of you can see that not X3 would belong in both level one and Level 2 to the second category, and now to the probability of an edge between two nodes.",
                    "label": 0
                },
                {
                    "sent": "We simply multiply the probabilities that were given in the matrix, so I'm hope you're all still with me.",
                    "label": 0
                },
                {
                    "sent": "So in this case the probability of an edge between node X1 and X2 is given by PC1C one times PC1C2.",
                    "label": 1
                },
                {
                    "sent": "So that's the basic setup now.",
                    "label": 0
                }
            ]
        },
        "clip_9": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Now if we expand this recursion, we can get a full probability matrix, so that for every say if we get this set of categories for that are all possible sets of categories that we get.",
                    "label": 0
                },
                {
                    "sent": "We can get this kind of adjacency matrix Q that would be M to the power cable, M to the power K large.",
                    "label": 0
                },
                {
                    "sent": "And here we have like all the necessary probabilities.",
                    "label": 0
                },
                {
                    "sent": "But the problem is that this.",
                    "label": 0
                },
                {
                    "sent": "The matrix Q grows very fast with K, so it becomes difficult to do any computation with it, and so we don't want to do that an intuitively, it seems like this is not necessary, right?",
                    "label": 1
                },
                {
                    "sent": "All the information that we need to start in this P already in the L. There's nothing new that we add here, so our intuition is that we can do better here.",
                    "label": 0
                }
            ]
        },
        "clip_10": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So our main theoretical result is a fairly simple observation.",
                    "label": 1
                },
                {
                    "sent": "So really what we can do is suppose we have this multifractal network generator with K levels of recursion.",
                    "label": 0
                },
                {
                    "sent": "What if we just take one level of recursion and then have K of these?",
                    "label": 0
                },
                {
                    "sent": "So we take instead of 1 generator with K levels of recursions.",
                    "label": 0
                },
                {
                    "sent": "We copied the generator K times or sample K graphs with just one level of recursion.",
                    "label": 0
                },
                {
                    "sent": "And then if we take the intersection of the edge sets from all these graphs.",
                    "label": 1
                },
                {
                    "sent": "We get a new graph and this graph is actually.",
                    "label": 0
                },
                {
                    "sent": "Equal in distribution to a multi fractal generator with K levels.",
                    "label": 0
                },
                {
                    "sent": "So this allows us to compute several properties of graphs fairly easily, and Austin will take over and tell you more about that.",
                    "label": 0
                },
                {
                    "sent": "Alright thanks Finn.",
                    "label": 0
                },
                {
                    "sent": "So why did we go through all of that work?",
                    "label": 0
                }
            ]
        },
        "clip_11": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "The reason is it makes it really easy to compute the expected number of several graph properties that we're interested in.",
                    "label": 1
                },
                {
                    "sent": "So in this example I'm just going to say how to compute the expected number of edges so it's fence set as we really only need to look at one level and then treated as the intersection of K graphs.",
                    "label": 0
                },
                {
                    "sent": "And so here the probability of an edge between any two nodes.",
                    "label": 0
                },
                {
                    "sent": "We can just condition on which which box they fall into, which categories they belong to, and that conditioning is given by the lengths.",
                    "label": 0
                },
                {
                    "sent": "And then we get the probability from the probability matrix and then we just raise that to the power of the number of recursive levels.",
                    "label": 0
                },
                {
                    "sent": "Incense all the nodes are independently sampled.",
                    "label": 0
                },
                {
                    "sent": "By linearity of expectation, we get we get the total number of edges.",
                    "label": 1
                }
            ]
        },
        "clip_12": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "OK, so we can actually do all of these.",
                    "label": 0
                },
                {
                    "sent": "The same computation for a bunch of other graph properties, in particular things like wedges, three stars, four stars triangles and four cliques.",
                    "label": 0
                }
            ]
        },
        "clip_13": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So that's very useful, because what we're going to do to try and fit real networks to this multifractal framework is we're going to empirically count the number of these subgraphs that occur and try to find parameters such that in expectation these match.",
                    "label": 0
                },
                {
                    "sent": "And so this this strategy is is called the method of moments.",
                    "label": 1
                },
                {
                    "sent": "This optimization problem just says I'm going to try and find parameters such that an expectation I match the empirical values.",
                    "label": 1
                },
                {
                    "sent": "And I satisfy all the constraints of the generator.",
                    "label": 1
                },
                {
                    "sent": "And so once we have all of the empirical counts that we want, so once we've counted the number of triangles and counted the number for cliques and so on, this optimization procedure is very fast.",
                    "label": 0
                },
                {
                    "sent": "In fact, it's independent of the size of the graph, which is really nice.",
                    "label": 1
                },
                {
                    "sent": "So there is some time that we might have to invest in actually computing these counts.",
                    "label": 0
                },
                {
                    "sent": "So like for example, computing the number for clicks can be pretty expensive, but there's a lot of great work on estimating these values, and there's even some work at KDD here this year.",
                    "label": 0
                },
                {
                    "sent": "I'm doing that.",
                    "label": 0
                }
            ]
        },
        "clip_14": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Alright, so does this actually work?",
                    "label": 0
                },
                {
                    "sent": "That's what we're going to try and see.",
                    "label": 0
                },
                {
                    "sent": "So in this example, we basically constructed a synthetic network according to the Multifractal network generator.",
                    "label": 0
                },
                {
                    "sent": "And try to see if we could recover it with the method of moments.",
                    "label": 1
                },
                {
                    "sent": "So in the left hand plot is a few different sub graph counts an in the red color is the distribution for the original network, the one that we created.",
                    "label": 0
                },
                {
                    "sent": "And so again it's a random generator, so this would just took many samples.",
                    "label": 0
                },
                {
                    "sent": "We took a single sample which is the blue line to use to fit our method of moments on and then the green is the distributions that we recovered and so we see that this does tend to recover recover things pretty well on the right hand side plot is a degree distribution for the original in the recovered networks.",
                    "label": 0
                },
                {
                    "sent": "And again they match on the bottom of the screen.",
                    "label": 0
                },
                {
                    "sent": "Shows shows the actual parameters that we used and recovered, and they also match.",
                    "label": 0
                },
                {
                    "sent": "So this is good.",
                    "label": 0
                }
            ]
        },
        "clip_15": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "But it actually works on synthetic networks.",
                    "label": 0
                },
                {
                    "sent": "But can we actually use it for real grass?",
                    "label": 0
                },
                {
                    "sent": "The answer is yes, so this left hand plot on the Y axis shows the ratio of the expected number of these sub graph counts to the empirical number.",
                    "label": 0
                },
                {
                    "sent": "So the horizontal bar is a is at y = 1, which means the expected value is right on with the empirical value in.",
                    "label": 0
                },
                {
                    "sent": "The blue bars are what we're doing and we can see that most of these cases were able to match it fairly well.",
                    "label": 0
                },
                {
                    "sent": "In particular, compared to stochastic Chronicle graphs, we are much better able to capture things like triangles and for cliques.",
                    "label": 0
                },
                {
                    "sent": "On the right hand side is the degree distribution.",
                    "label": 0
                },
                {
                    "sent": "So we tried this with two categories in three categories and so in green is with two categories and Blues with three categories.",
                    "label": 0
                },
                {
                    "sent": "And the degree distribution is kind of match.",
                    "label": 0
                },
                {
                    "sent": "And there's some weird oscillations going on with the degree distributions.",
                    "label": 0
                }
            ]
        },
        "clip_16": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So this this is the same experiment just on a different network, so this is a citation graph.",
                    "label": 0
                },
                {
                    "sent": "The high energy physics one from archive.",
                    "label": 0
                },
                {
                    "sent": "And again we see the same basic properties that our method is able to capture things like triangles and for cliques that other methods struggle with.",
                    "label": 1
                },
                {
                    "sent": "And again, the degree distribution we kind of have some similar characteristics.",
                    "label": 1
                },
                {
                    "sent": "We do get this these kind of noisy oscillations going on that you can see with with the Green plot here the green line.",
                    "label": 0
                },
                {
                    "sent": "There's actually a way to kind of dampen that those oscillations, so there's some work by session, others at Sandia that we employ for for this framework as well.",
                    "label": 0
                },
                {
                    "sent": "And we have the details of that in the paper.",
                    "label": 0
                }
            ]
        },
        "clip_17": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "OK, so one one thing that we haven't talked about yet is how do you actually sample these graphs in practice.",
                    "label": 0
                },
                {
                    "sent": "So the original framework for these multifractal network generators that were using it for very small graphs and they only provided a simple quadratic algorithm for sampling them.",
                    "label": 0
                },
                {
                    "sent": "So you could just flip a coin based on the probabilities for each node pair and create the edge with that probability.",
                    "label": 1
                },
                {
                    "sent": "Hi, this is not really scalable for the networks that we were interested in, so we developed a heuristic that's kind of a fast sampler and we use the idea from stochastic Chronicle graphs which is called the ball dropping scheme.",
                    "label": 0
                },
                {
                    "sent": "So instead of looking at each node pair, you first fix the number of edges and then try and match those edges to the nodes.",
                    "label": 1
                },
                {
                    "sent": "Note pairs in the graph.",
                    "label": 0
                },
                {
                    "sent": "And so the key difference with what we're doing is that you can end up with many node pairs within a single box.",
                    "label": 0
                },
                {
                    "sent": "So we kind of have to do some some weighting schemes to get it to work out.",
                    "label": 0
                },
                {
                    "sent": "And there are a lot of details and caveats to this, and I'll just leave that to the paper.",
                    "label": 0
                }
            ]
        },
        "clip_18": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Alright, so overall we feel that we've made the multifractal network generator scalable and a good model for for real large networks and networks that.",
                    "label": 0
                },
                {
                    "sent": "That people here are interested in, and so our theory on showing the decomposition of the graphs is really what allowed us to do fast estimation of parameters.",
                    "label": 0
                },
                {
                    "sent": "In particular, we're able to match triangles and for cliques and those types of structures are hard for other generators to match, and we have also shown that this does effectively model real graphs.",
                    "label": 0
                },
                {
                    "sent": "I showed the Twitter and citation network in this talk, and we have a few others in the paper as well.",
                    "label": 0
                }
            ]
        }
    }
}