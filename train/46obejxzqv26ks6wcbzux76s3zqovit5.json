{
    "id": "46obejxzqv26ks6wcbzux76s3zqovit5",
    "title": "Comunica: a Modular SPARQL Query Engine for the Web",
    "info": {
        "author": [
            "Ruben Taelman, Ghent University"
        ],
        "published": "Nov. 22, 2018",
        "recorded": "October 2018",
        "category": [
            "Top->Computer Science->Semantic Web"
        ]
    },
    "url": "http://videolectures.net/iswc2018_taelman_comunica_modular_sparql/",
    "segmentation": [
        [
            "Alright.",
            "As you may know, querying linked data is quite of a."
        ],
        [
            "A multifaceted story because you have a bunch of different ways to do a lot of different things.",
            "For example, we have different ways of querying based on different query languages and querying extensions.",
            "Next to that you also have different ways of publishing linked data.",
            "Like for example you have linked data documents you can publish through Sparkle endpoints.",
            "You can use triple pattern fragments, interfaces and so on, and that you also have different algorithms to optimize your your query query evaluation.",
            "So a lot of different things now the."
        ],
        [
            "Problem of this these different facets is that it tends to get quite complicated to compare different facets in a fairway.",
            "For example, what could go wrong is if you do something like this like let's say we want to compare two different algorithms an.",
            "Let's say we use an engine a that implements this first algorithm and an engine B that implements this second algorithm.",
            "No, we could, let's say compare the performance of certain queries and these two engine's an contain some well results in some different performance results.",
            "Now The thing is, you don't really compare these two algorithms.",
            "You actually compare a lot of different things outside of these algorithms as well.",
            "So if you.",
            "Come up with some conclusions on these experiments.",
            "It's actually possible that you don't really compare those two algorithms, So what would be a better way of?"
        ],
        [
            "Comparing those algorithms would be to have some kind of.",
            "Yeah, very flexible engine in which you can just plug in those two different algorithms and then you can compare these two agents in a more fairway.",
            "Because in this case only the only difference between these two engines will be only the algorithm, so any difference in results will be caused by the difference in these algorithms.",
            "So this is exactly what we aim to achieve."
        ],
        [
            "If with communication, which is a highly modular meta query engine with meta query engine, we mean that you can use communicate to instantiate specific query engines based on some algorithms and so on.",
            "And we do this using a flexible configuration system which you can.",
            "Define which algorithms and so on you want to use.",
            "So."
        ],
        [
            "This presentation will be split up into three main parts.",
            "In.",
            "The first part will have a look at the main architecture behind the community, and the second part I'll show you some quick implementation details and finally I'll give you some pointers on how you can actually start using communicate yourself.",
            "So regarding the architecture, community is based on the actor model, so the."
        ],
        [
            "Actor model allows you to actually separate logic into separate actors, where each actor is responsible for independently performing a very specific task.",
            "For example, you could have an actor that parses Jason LD documents.",
            "You could have another actor that takes the Sparkle union of two binding streams, or you could even have another actor that also takes the Union.",
            "But is this in a slightly different way?",
            "So in practice we."
        ],
        [
            "Can have a lot of these different actors and we can actually combine them and communicate to solve more complex tasks.",
            "And we do this using the publish subscribe pattern where you actually let actor subscribe to so called task specific buses where it asked specific bus.",
            "As for example, let's say you have two actors that parse Jason LD documents, but in a slightly different way.",
            "Then you could have a Jason LD parsing bus.",
            "And these actors are responsible before doing the same thing, but in a different way.",
            "So.",
            "In case you have multiple of these actors that do the same thing, we can use so-called mediators who actually choose the most optimal actor for a certain circumstance to solve a certain task.",
            "So so in practice we have.",
            "Three big types of modules in communica we have the actors.",
            "We have the mediators and we have the buses and they are wired as follows with each other.",
            "So in practice actors will never communicate with each other directly.",
            "Instead, when an actor wants to solve a certain sub task, it will always go to a mediator and this mediator will try to determine the best actor for the bus to solve this task.",
            "Now."
        ],
        [
            "Let's let's have a look at the simple example of how this works in practice.",
            "So let's assume we want to parse something like a like an RDF document as fast as possible."
        ],
        [
            "For this we could, for example have the following four modules.",
            "First, we have a mediator.",
            "For example, a mediator that tries to do something as fast as possible.",
            "And then we have also a parsing bus onto which two parsing actors are subscribed.",
            "In this example, the first actor could, for example, parse as fast as possible and the second actor could, for example, parse a bit slower.",
            "But for example, be more memory efficient.",
            "So so our logic starts here at the top left side at the mediator.",
            "So the Mediator receives a parsing action.",
            "This mediator is actually split up into two phases.",
            "First testing phase, and then they're running phase and the testing phase.",
            "The mediator will try to determine the best actor for this task, and then after this face it will enter the running phase and to which it will simply execute this task.",
            "With this best actor.",
            "Right, so in the testing phase, the Mediator will simply send a test action to through the parsing bus to each of the two actors.",
            "These"
        ],
        [
            "Do actors will then reply with with with the testing results, the fast parsing actor could for example reply saying that it can approximately execute this action in one millisecond but use 10 megabytes of memory and the slow parsing actor could, for example, do this in approximately 10 millisecond, but with one MB of memory.",
            "So these testing results then end up back at the Mediator and then the Mediator can now determine the fastest actor, which in this case will obviously need be the fast parsing actor.",
            "So then it can enter the running phase so.",
            "It simply sense our original parsing action to this four stars actor, and then we're done.",
            "So in practice, communication contains a lot of these sequences with mediators, buses and actors.",
            "An in order to make this this wiring as flexible as possible, we actually use a semantic dependency injection framework called components or JS which allows you to define how these actors, mediators and buses are wired together, how they are parameterized, and so on."
        ],
        [
            "So let's have a look at some some implementation details now."
        ],
        [
            "It might be relevant so community is fully open source and available under the MIT license.",
            "We have implemented.",
            "We have implemented it and TypeScript which is actually super set of JavaScript that adds types which is very useful for large projects like this to have well defined interfaces.",
            "As you may have noticed, Community is not like a monolithic project.",
            "It actually consists of a lot of very small modules.",
            "Which are these actors, mediators, an buses?",
            "So the advantage of this is that when you use communicate to instantiate a specific engine, you actually.",
            "Probably don't need all of the available modules, so in this case only the modules that are relevant to you might be packed into one application, so we don't bloat your application with code you don't do not really need, so this is to keep it lightweight basically.",
            "During development, we put a strong focus on correctness, so our test suite contains over a lot of unit tests for the full testing coverage.",
            "Last not least, communicate is fully compatible with the JavaScript API specification as laid out by the RDF JS WTC Community Group.",
            "Now the advantage of this is that communication can be used to right out of the box with many of the existing JavaScript applications out there.",
            "At the moment, Communica has nearly full Sparkle 1.1 support.",
            "An we aim for."
        ],
        [
            "Full compliance before the end of this year, next to Sparkle.",
            "We also support the form of graph QL queries.",
            "If you are interested in that, be sure to come visit our demo later today.",
            "And another important feature of communicate is that it supports flexible Federated querying, overheat, or genius data sources.",
            "At the moment we support these types of data sources of link data, documents, triple patterns, interfaces, SPARQL endpoints, local HTTP files, an JavaScript objects that implement RDF source interface.",
            "So in practice any combination of these sources can be.",
            "Can be used to show you an example of this here so."
        ],
        [
            "Here we have a very simple query where we federate over the DBPR triple Pattern fragments interface Anna Simple Link data document.",
            "So if the.",
            "Internet doesn't fail me.",
            "We should see some results coming in so.",
            "This worked, so that's good.",
            "One important thing to note here that you saw the results streaming and so this is also an important feature of communica.",
            "Everything happens streaming wise so if you even if you have slow Internet like here even then you will from the moment that one result comes in you can start processing that.",
            "Alright."
        ],
        [
            "So here are some pointers on how we can actually start using."
        ],
        [
            "Monica yourself the easiest way is to simply go to querythatlinkdatafragments.org an use any of the example queries there too.",
            "To query writes from within your browser without having to install anything.",
            "If you want to use communication your JavaScript applications to, for example, execute some sparkle queries and you can install it from MPN or you can actually also use some of the pre built browser scripts VR CDM.",
            "If you want to use communica in your research to develop some new modules, for example, you can go to our GitHub repository there and followed Readme.",
            "And we also have some extensive documentation here on the last link, in which we explain how we can use communicate yourself and start implementing things and towards it.",
            "Also has a bunch of tutorials on how to do different things.",
            "So."
        ],
        [
            "So in conclusion, Communica aims to be a a platform to do fair comparisons of query algorithms, and it does this using a highly modular architecture and as a bonus feature not only can communicate be used in the research domain, it actually also lowers the barrier for non researchers to start consuming linked data.",
            "So in summary, Communities Fair Modular an for everyone.",
            "Thank you.",
            "For questions, yes.",
            "Thanks for this.",
            "I like the idea of this approach for testing different algorithms or approaches to query answering.",
            "I wonder if you had any thoughts though on whether the abstraction introduced by the actor model might.",
            "Prevent.",
            "Print looking at some approaches that wouldn't break down along the same abstraction.",
            "So approaches that might subsume multiple actors in your system, or that might take half of the responsibility of 1 actor in one you know.",
            "Could your system handle that sort of situation?",
            "Yeah well yeah indeed, there might indeed be some some.",
            "Yeah, it might be more complicated if you want to have some some algorithm that needs, for example overview of the whole query evaluation plan.",
            "In that case it might become more complicated indeed to use Communica for that, but we are starting to.",
            "To use communicator shells to implement these kinds of algorithms and it's it works.",
            "It's indeed more complicated than just implementing.",
            "It's just in one monolithic block, but.",
            "Yeah, when you do it based on the actor model we get a lot of the advantages where you.",
            "Yeah, I can come take advantage of you.",
            "Any of the already existing algorithms that you can just plug in there and there are some advantages to that, definitely.",
            "Thanks.",
            "I had a question about whether it's easy to plug in my own query engine there or Moreover Federated Core engine across several sparkle endpoints, but not query engine switch query those endpoints.",
            "So for example, if I have a couple of our operations working Python, can they be plugged in communica?",
            "To be included in this benchmark of quirion, sorry.",
            "I'm not sure if I understood your question.",
            "Yeah, monstering if I can.",
            "If it's possible to plug in my own query engine communicate because you told are you test different query execution algorithms and strategies.",
            "So is it easy to extend modules and actors and add my own actors which involved?",
            "For example some Python query engines or not?",
            "Python, Java, whatever?",
            "Yeah, so so as as far as I understand your question you you're wondering if you can like plug in a.",
            "More expressive query engine as part of Communica right?",
            "Yeah yeah you can definitely do that.",
            "You could get for example just create an actor that.",
            "Basically, is a proxy for this query engine.",
            "Plug it into any of the buses here at a very high level, and then it's definitely possible and it will be routed to the engine, but not at the end point, right?",
            "So if I want to use my engine to over DPS four week data, SPARQL endpoint you will not you at first there will be some inputs querying directly those and some snacks will be covering those.",
            "Custom query engines.",
            "Right now it should be possible.",
            "Yeah yeah thank you.",
            "Hi, thank you for the tool.",
            "Did you run the W 3C sparkle one?",
            "That one compliant test can we see the result query by query to see exactly what is implemented?",
            "What is working?",
            "Yeah yeah we don't have them on publicly available yet, but we like we have a continuous integration tool for every commit we do to communicate.",
            "So there you can see for.",
            "Each new built.",
            "You can see the Sparkle 1.1 compliance results, so we are not yet fully compliant as the built results will show, but we aim for full compliance before the end of this year.",
            "The big thing that is still missing is is expressions between.",
            "We are working on that.",
            "OK."
        ]
    ],
    "summarization": {
        "clip_0": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Alright.",
                    "label": 0
                },
                {
                    "sent": "As you may know, querying linked data is quite of a.",
                    "label": 0
                }
            ]
        },
        "clip_1": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "A multifaceted story because you have a bunch of different ways to do a lot of different things.",
                    "label": 1
                },
                {
                    "sent": "For example, we have different ways of querying based on different query languages and querying extensions.",
                    "label": 1
                },
                {
                    "sent": "Next to that you also have different ways of publishing linked data.",
                    "label": 0
                },
                {
                    "sent": "Like for example you have linked data documents you can publish through Sparkle endpoints.",
                    "label": 0
                },
                {
                    "sent": "You can use triple pattern fragments, interfaces and so on, and that you also have different algorithms to optimize your your query query evaluation.",
                    "label": 0
                },
                {
                    "sent": "So a lot of different things now the.",
                    "label": 0
                }
            ]
        },
        "clip_2": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Problem of this these different facets is that it tends to get quite complicated to compare different facets in a fairway.",
                    "label": 0
                },
                {
                    "sent": "For example, what could go wrong is if you do something like this like let's say we want to compare two different algorithms an.",
                    "label": 0
                },
                {
                    "sent": "Let's say we use an engine a that implements this first algorithm and an engine B that implements this second algorithm.",
                    "label": 1
                },
                {
                    "sent": "No, we could, let's say compare the performance of certain queries and these two engine's an contain some well results in some different performance results.",
                    "label": 0
                },
                {
                    "sent": "Now The thing is, you don't really compare these two algorithms.",
                    "label": 0
                },
                {
                    "sent": "You actually compare a lot of different things outside of these algorithms as well.",
                    "label": 0
                },
                {
                    "sent": "So if you.",
                    "label": 0
                },
                {
                    "sent": "Come up with some conclusions on these experiments.",
                    "label": 0
                },
                {
                    "sent": "It's actually possible that you don't really compare those two algorithms, So what would be a better way of?",
                    "label": 0
                }
            ]
        },
        "clip_3": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Comparing those algorithms would be to have some kind of.",
                    "label": 0
                },
                {
                    "sent": "Yeah, very flexible engine in which you can just plug in those two different algorithms and then you can compare these two agents in a more fairway.",
                    "label": 1
                },
                {
                    "sent": "Because in this case only the only difference between these two engines will be only the algorithm, so any difference in results will be caused by the difference in these algorithms.",
                    "label": 0
                },
                {
                    "sent": "So this is exactly what we aim to achieve.",
                    "label": 0
                }
            ]
        },
        "clip_4": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "If with communication, which is a highly modular meta query engine with meta query engine, we mean that you can use communicate to instantiate specific query engines based on some algorithms and so on.",
                    "label": 1
                },
                {
                    "sent": "And we do this using a flexible configuration system which you can.",
                    "label": 0
                },
                {
                    "sent": "Define which algorithms and so on you want to use.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                }
            ]
        },
        "clip_5": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "This presentation will be split up into three main parts.",
                    "label": 0
                },
                {
                    "sent": "In.",
                    "label": 0
                },
                {
                    "sent": "The first part will have a look at the main architecture behind the community, and the second part I'll show you some quick implementation details and finally I'll give you some pointers on how you can actually start using communicate yourself.",
                    "label": 0
                },
                {
                    "sent": "So regarding the architecture, community is based on the actor model, so the.",
                    "label": 0
                }
            ]
        },
        "clip_6": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Actor model allows you to actually separate logic into separate actors, where each actor is responsible for independently performing a very specific task.",
                    "label": 1
                },
                {
                    "sent": "For example, you could have an actor that parses Jason LD documents.",
                    "label": 0
                },
                {
                    "sent": "You could have another actor that takes the Sparkle union of two binding streams, or you could even have another actor that also takes the Union.",
                    "label": 0
                },
                {
                    "sent": "But is this in a slightly different way?",
                    "label": 0
                },
                {
                    "sent": "So in practice we.",
                    "label": 0
                }
            ]
        },
        "clip_7": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Can have a lot of these different actors and we can actually combine them and communicate to solve more complex tasks.",
                    "label": 1
                },
                {
                    "sent": "And we do this using the publish subscribe pattern where you actually let actor subscribe to so called task specific buses where it asked specific bus.",
                    "label": 0
                },
                {
                    "sent": "As for example, let's say you have two actors that parse Jason LD documents, but in a slightly different way.",
                    "label": 0
                },
                {
                    "sent": "Then you could have a Jason LD parsing bus.",
                    "label": 0
                },
                {
                    "sent": "And these actors are responsible before doing the same thing, but in a different way.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "In case you have multiple of these actors that do the same thing, we can use so-called mediators who actually choose the most optimal actor for a certain circumstance to solve a certain task.",
                    "label": 1
                },
                {
                    "sent": "So so in practice we have.",
                    "label": 0
                },
                {
                    "sent": "Three big types of modules in communica we have the actors.",
                    "label": 0
                },
                {
                    "sent": "We have the mediators and we have the buses and they are wired as follows with each other.",
                    "label": 0
                },
                {
                    "sent": "So in practice actors will never communicate with each other directly.",
                    "label": 0
                },
                {
                    "sent": "Instead, when an actor wants to solve a certain sub task, it will always go to a mediator and this mediator will try to determine the best actor for the bus to solve this task.",
                    "label": 0
                },
                {
                    "sent": "Now.",
                    "label": 0
                }
            ]
        },
        "clip_8": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Let's let's have a look at the simple example of how this works in practice.",
                    "label": 0
                },
                {
                    "sent": "So let's assume we want to parse something like a like an RDF document as fast as possible.",
                    "label": 0
                }
            ]
        },
        "clip_9": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "For this we could, for example have the following four modules.",
                    "label": 0
                },
                {
                    "sent": "First, we have a mediator.",
                    "label": 0
                },
                {
                    "sent": "For example, a mediator that tries to do something as fast as possible.",
                    "label": 0
                },
                {
                    "sent": "And then we have also a parsing bus onto which two parsing actors are subscribed.",
                    "label": 0
                },
                {
                    "sent": "In this example, the first actor could, for example, parse as fast as possible and the second actor could, for example, parse a bit slower.",
                    "label": 0
                },
                {
                    "sent": "But for example, be more memory efficient.",
                    "label": 0
                },
                {
                    "sent": "So so our logic starts here at the top left side at the mediator.",
                    "label": 0
                },
                {
                    "sent": "So the Mediator receives a parsing action.",
                    "label": 0
                },
                {
                    "sent": "This mediator is actually split up into two phases.",
                    "label": 0
                },
                {
                    "sent": "First testing phase, and then they're running phase and the testing phase.",
                    "label": 0
                },
                {
                    "sent": "The mediator will try to determine the best actor for this task, and then after this face it will enter the running phase and to which it will simply execute this task.",
                    "label": 0
                },
                {
                    "sent": "With this best actor.",
                    "label": 0
                },
                {
                    "sent": "Right, so in the testing phase, the Mediator will simply send a test action to through the parsing bus to each of the two actors.",
                    "label": 0
                },
                {
                    "sent": "These",
                    "label": 0
                }
            ]
        },
        "clip_10": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Do actors will then reply with with with the testing results, the fast parsing actor could for example reply saying that it can approximately execute this action in one millisecond but use 10 megabytes of memory and the slow parsing actor could, for example, do this in approximately 10 millisecond, but with one MB of memory.",
                    "label": 0
                },
                {
                    "sent": "So these testing results then end up back at the Mediator and then the Mediator can now determine the fastest actor, which in this case will obviously need be the fast parsing actor.",
                    "label": 0
                },
                {
                    "sent": "So then it can enter the running phase so.",
                    "label": 0
                },
                {
                    "sent": "It simply sense our original parsing action to this four stars actor, and then we're done.",
                    "label": 0
                },
                {
                    "sent": "So in practice, communication contains a lot of these sequences with mediators, buses and actors.",
                    "label": 0
                },
                {
                    "sent": "An in order to make this this wiring as flexible as possible, we actually use a semantic dependency injection framework called components or JS which allows you to define how these actors, mediators and buses are wired together, how they are parameterized, and so on.",
                    "label": 0
                }
            ]
        },
        "clip_11": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So let's have a look at some some implementation details now.",
                    "label": 0
                }
            ]
        },
        "clip_12": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "It might be relevant so community is fully open source and available under the MIT license.",
                    "label": 0
                },
                {
                    "sent": "We have implemented.",
                    "label": 0
                },
                {
                    "sent": "We have implemented it and TypeScript which is actually super set of JavaScript that adds types which is very useful for large projects like this to have well defined interfaces.",
                    "label": 0
                },
                {
                    "sent": "As you may have noticed, Community is not like a monolithic project.",
                    "label": 0
                },
                {
                    "sent": "It actually consists of a lot of very small modules.",
                    "label": 0
                },
                {
                    "sent": "Which are these actors, mediators, an buses?",
                    "label": 0
                },
                {
                    "sent": "So the advantage of this is that when you use communicate to instantiate a specific engine, you actually.",
                    "label": 0
                },
                {
                    "sent": "Probably don't need all of the available modules, so in this case only the modules that are relevant to you might be packed into one application, so we don't bloat your application with code you don't do not really need, so this is to keep it lightweight basically.",
                    "label": 0
                },
                {
                    "sent": "During development, we put a strong focus on correctness, so our test suite contains over a lot of unit tests for the full testing coverage.",
                    "label": 0
                },
                {
                    "sent": "Last not least, communicate is fully compatible with the JavaScript API specification as laid out by the RDF JS WTC Community Group.",
                    "label": 1
                },
                {
                    "sent": "Now the advantage of this is that communication can be used to right out of the box with many of the existing JavaScript applications out there.",
                    "label": 0
                },
                {
                    "sent": "At the moment, Communica has nearly full Sparkle 1.1 support.",
                    "label": 0
                },
                {
                    "sent": "An we aim for.",
                    "label": 0
                }
            ]
        },
        "clip_13": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Full compliance before the end of this year, next to Sparkle.",
                    "label": 0
                },
                {
                    "sent": "We also support the form of graph QL queries.",
                    "label": 0
                },
                {
                    "sent": "If you are interested in that, be sure to come visit our demo later today.",
                    "label": 0
                },
                {
                    "sent": "And another important feature of communicate is that it supports flexible Federated querying, overheat, or genius data sources.",
                    "label": 1
                },
                {
                    "sent": "At the moment we support these types of data sources of link data, documents, triple patterns, interfaces, SPARQL endpoints, local HTTP files, an JavaScript objects that implement RDF source interface.",
                    "label": 0
                },
                {
                    "sent": "So in practice any combination of these sources can be.",
                    "label": 1
                },
                {
                    "sent": "Can be used to show you an example of this here so.",
                    "label": 0
                }
            ]
        },
        "clip_14": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Here we have a very simple query where we federate over the DBPR triple Pattern fragments interface Anna Simple Link data document.",
                    "label": 1
                },
                {
                    "sent": "So if the.",
                    "label": 0
                },
                {
                    "sent": "Internet doesn't fail me.",
                    "label": 0
                },
                {
                    "sent": "We should see some results coming in so.",
                    "label": 0
                },
                {
                    "sent": "This worked, so that's good.",
                    "label": 0
                },
                {
                    "sent": "One important thing to note here that you saw the results streaming and so this is also an important feature of communica.",
                    "label": 0
                },
                {
                    "sent": "Everything happens streaming wise so if you even if you have slow Internet like here even then you will from the moment that one result comes in you can start processing that.",
                    "label": 0
                },
                {
                    "sent": "Alright.",
                    "label": 0
                }
            ]
        },
        "clip_15": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So here are some pointers on how we can actually start using.",
                    "label": 0
                }
            ]
        },
        "clip_16": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Monica yourself the easiest way is to simply go to querythatlinkdatafragments.org an use any of the example queries there too.",
                    "label": 0
                },
                {
                    "sent": "To query writes from within your browser without having to install anything.",
                    "label": 1
                },
                {
                    "sent": "If you want to use communication your JavaScript applications to, for example, execute some sparkle queries and you can install it from MPN or you can actually also use some of the pre built browser scripts VR CDM.",
                    "label": 1
                },
                {
                    "sent": "If you want to use communica in your research to develop some new modules, for example, you can go to our GitHub repository there and followed Readme.",
                    "label": 0
                },
                {
                    "sent": "And we also have some extensive documentation here on the last link, in which we explain how we can use communicate yourself and start implementing things and towards it.",
                    "label": 0
                },
                {
                    "sent": "Also has a bunch of tutorials on how to do different things.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                }
            ]
        },
        "clip_17": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So in conclusion, Communica aims to be a a platform to do fair comparisons of query algorithms, and it does this using a highly modular architecture and as a bonus feature not only can communicate be used in the research domain, it actually also lowers the barrier for non researchers to start consuming linked data.",
                    "label": 0
                },
                {
                    "sent": "So in summary, Communities Fair Modular an for everyone.",
                    "label": 1
                },
                {
                    "sent": "Thank you.",
                    "label": 0
                },
                {
                    "sent": "For questions, yes.",
                    "label": 0
                },
                {
                    "sent": "Thanks for this.",
                    "label": 0
                },
                {
                    "sent": "I like the idea of this approach for testing different algorithms or approaches to query answering.",
                    "label": 0
                },
                {
                    "sent": "I wonder if you had any thoughts though on whether the abstraction introduced by the actor model might.",
                    "label": 0
                },
                {
                    "sent": "Prevent.",
                    "label": 0
                },
                {
                    "sent": "Print looking at some approaches that wouldn't break down along the same abstraction.",
                    "label": 0
                },
                {
                    "sent": "So approaches that might subsume multiple actors in your system, or that might take half of the responsibility of 1 actor in one you know.",
                    "label": 0
                },
                {
                    "sent": "Could your system handle that sort of situation?",
                    "label": 0
                },
                {
                    "sent": "Yeah well yeah indeed, there might indeed be some some.",
                    "label": 0
                },
                {
                    "sent": "Yeah, it might be more complicated if you want to have some some algorithm that needs, for example overview of the whole query evaluation plan.",
                    "label": 0
                },
                {
                    "sent": "In that case it might become more complicated indeed to use Communica for that, but we are starting to.",
                    "label": 0
                },
                {
                    "sent": "To use communicator shells to implement these kinds of algorithms and it's it works.",
                    "label": 0
                },
                {
                    "sent": "It's indeed more complicated than just implementing.",
                    "label": 0
                },
                {
                    "sent": "It's just in one monolithic block, but.",
                    "label": 0
                },
                {
                    "sent": "Yeah, when you do it based on the actor model we get a lot of the advantages where you.",
                    "label": 0
                },
                {
                    "sent": "Yeah, I can come take advantage of you.",
                    "label": 0
                },
                {
                    "sent": "Any of the already existing algorithms that you can just plug in there and there are some advantages to that, definitely.",
                    "label": 0
                },
                {
                    "sent": "Thanks.",
                    "label": 0
                },
                {
                    "sent": "I had a question about whether it's easy to plug in my own query engine there or Moreover Federated Core engine across several sparkle endpoints, but not query engine switch query those endpoints.",
                    "label": 0
                },
                {
                    "sent": "So for example, if I have a couple of our operations working Python, can they be plugged in communica?",
                    "label": 0
                },
                {
                    "sent": "To be included in this benchmark of quirion, sorry.",
                    "label": 0
                },
                {
                    "sent": "I'm not sure if I understood your question.",
                    "label": 0
                },
                {
                    "sent": "Yeah, monstering if I can.",
                    "label": 0
                },
                {
                    "sent": "If it's possible to plug in my own query engine communicate because you told are you test different query execution algorithms and strategies.",
                    "label": 0
                },
                {
                    "sent": "So is it easy to extend modules and actors and add my own actors which involved?",
                    "label": 0
                },
                {
                    "sent": "For example some Python query engines or not?",
                    "label": 0
                },
                {
                    "sent": "Python, Java, whatever?",
                    "label": 0
                },
                {
                    "sent": "Yeah, so so as as far as I understand your question you you're wondering if you can like plug in a.",
                    "label": 0
                },
                {
                    "sent": "More expressive query engine as part of Communica right?",
                    "label": 0
                },
                {
                    "sent": "Yeah yeah you can definitely do that.",
                    "label": 0
                },
                {
                    "sent": "You could get for example just create an actor that.",
                    "label": 0
                },
                {
                    "sent": "Basically, is a proxy for this query engine.",
                    "label": 0
                },
                {
                    "sent": "Plug it into any of the buses here at a very high level, and then it's definitely possible and it will be routed to the engine, but not at the end point, right?",
                    "label": 0
                },
                {
                    "sent": "So if I want to use my engine to over DPS four week data, SPARQL endpoint you will not you at first there will be some inputs querying directly those and some snacks will be covering those.",
                    "label": 0
                },
                {
                    "sent": "Custom query engines.",
                    "label": 0
                },
                {
                    "sent": "Right now it should be possible.",
                    "label": 0
                },
                {
                    "sent": "Yeah yeah thank you.",
                    "label": 0
                },
                {
                    "sent": "Hi, thank you for the tool.",
                    "label": 0
                },
                {
                    "sent": "Did you run the W 3C sparkle one?",
                    "label": 0
                },
                {
                    "sent": "That one compliant test can we see the result query by query to see exactly what is implemented?",
                    "label": 0
                },
                {
                    "sent": "What is working?",
                    "label": 0
                },
                {
                    "sent": "Yeah yeah we don't have them on publicly available yet, but we like we have a continuous integration tool for every commit we do to communicate.",
                    "label": 0
                },
                {
                    "sent": "So there you can see for.",
                    "label": 0
                },
                {
                    "sent": "Each new built.",
                    "label": 0
                },
                {
                    "sent": "You can see the Sparkle 1.1 compliance results, so we are not yet fully compliant as the built results will show, but we aim for full compliance before the end of this year.",
                    "label": 0
                },
                {
                    "sent": "The big thing that is still missing is is expressions between.",
                    "label": 0
                },
                {
                    "sent": "We are working on that.",
                    "label": 0
                },
                {
                    "sent": "OK.",
                    "label": 0
                }
            ]
        }
    }
}