{
    "id": "iqiscf7n6n76rq62djcirqcz2vnq7ibt",
    "title": "Property-based Typing for RDF-Access",
    "info": {
        "author": [
            "Gerd Gr\u00f6ner, University of Koblenz-Landau"
        ],
        "published": "Dec. 3, 2012",
        "recorded": "November 2012",
        "category": [
            "Top->Computer Science->Semantic Web->RDF - Resource Description Framework"
        ]
    },
    "url": "http://videolectures.net/iswc2012_groener_rdf_access/",
    "segmentation": [
        [
            "My name is Katherine from University of Copeland's.",
            "I will present a joint work with Steven Sugarman and this paper is a position paper so therefore I just want to bring some statement or some position or even a vision to you but no solution is just basically an idea what we should think about in order to program some semantic, web and data access on the semantic web.",
            "So the paper is about property based typing.",
            "Of RDF access."
        ],
        [
            "So first of all, when you think about RDF and especially about publishing linked data on the web, the current status, they're basically, let's say two successes.",
            "The first one is that we already have huge collection of open data open and governmental data that are published on the web as linked data.",
            "As you can see in the famous Linked Data Cloud.",
            "And Furthermore, we have a lot of enrichment of data in terms of meta data, microformats and so on, which I used in order to research data and explore data.",
            "Well, if you look at these underlying success, that's basically about representation.",
            "So the representation formalism that we use in order to publish data on the web.",
            "And the technique?"
        ],
        [
            "Achieve behind this, there are basically two things to manage.",
            "In, the first one is RDF as a formal data model language with the semantics to have a flexible, flexible data representation that allows you to extendable represent data.",
            "And also to deal with incomplete and missing statements, which is quite common in the web.",
            "The second issue is linked data, so link data is kind of best practice in order to publish data, especially structured and structured data on the web.",
            "Now.",
            "But I already mentioned is we can observe here a success in publishing and also in querying or exploring data on the web.",
            "But now the basic question is what is the problem now?",
            "If you want to have this flexible?"
        ],
        [
            "Data representation on one side and we want to build applications that use this data that access this data, then modify this link data on the web.",
            "So there we have basically two worlds.",
            "The first one is the programming world.",
            "I have mentioned this year with API to access data and there quite usual.",
            "We rely on the type system and fixed data schema so that we have the common notion of classes and in this class as we specify, for instance properties.",
            "But on the other hand we have RDF as already mentioned.",
            "So we have a quite flexible data model.",
            "But usually we have missing type statements, which is quite common in RDF, so and also we have to deal with incomplete information so that there are some statements about resources, but some other statements are missing, so we have to deal with this.",
            "We have to deal with changing data.",
            "And different heterogeneous data.",
            "And this is actually the problem, but we are talking about here, so we want to connect to bridge between these different worlds in order to guarantee and to enable a data access.",
            "So to sum up what we want to have, we want to connect this programming paradigm.",
            "Which is mainly based on definition of classes or let's say in the object oriented world and on the other side this quite flexible representation of data."
        ],
        [
            "On the web.",
            "For for example, just to give you an example scenario where someone approaches useful.",
            "Let's think about the participation platform where citizens are able to enter information to collaborate or to participate in discussions and also to get back some information from the government.",
            "So if you have such a E participation platform, then we have users and users have accounts where the data of the users are represented.",
            "So there are different accounts or data of the users available.",
            "For instance we have platform users so they enter their data directly in the platform.",
            "But you can also think about that this user can register using existing accounts in social networks like Facebook and LinkedIn.",
            "Now our problem is we want to enable the engineering the programmers of Daisy participation platform to provide access data access for this application on this user data that are represented in, for instance, in RDF on the web.",
            "So what we want to do with this, what we refer to as data access.",
            "That means you want to read user data.",
            "We want also to send emails to send notifications to the user in order to get some kind of collaboration and to get some feedback from this user now.",
            "Just look at an example representation."
        ],
        [
            "In RDF, on the left side you can see some statements in RDF that we have.",
            "Three, no four citizen.",
            "That's the first 4 lines.",
            "There are four individuals, Alice, Bob, Dave and Eric that I mentioned explicitly by type statements as citizen.",
            "Then there are some property like here for Alice.",
            "You can see there's name, email address and we have also an interest of Alice and the same one for Bob.",
            "So we have the name, the email address, interest and so on.",
            "But we can see also there is another person candy and candy has also a name and email address, but there is no explicit statement of type, so there's no statement that candy is citizen.",
            "Now what could be problem if we have such a say in participation platform, we want to access this data in order to send emails to the users.",
            "For instance, we want to send the email to all citizens.",
            "With name and email address for sure we can use.",
            "We can send email to Alice and Bob.",
            "Both are explicitly stated as Citizen, but we wouldn't find candy because she has name and email address, but she's not explicitly mentioned as a citizen, but for this case it doesn't matter.",
            "We just want to have all people that are registered in our platform and in order to send some notifications we just need the name and email address.",
            "We don't care about any tapes type statements here.",
            "So another example, if you want to modify or read the interest of all citizens, then we can see that for instance, Dave has no interest mentioned.",
            "So in this case this explicit typing is explicit property statement doesn't hold."
        ],
        [
            "Another example is for instance we want to find the interest of Eric so, but as you can see here Eric, there is no direct interest.",
            "Statement for Eric.",
            "But Eric is associated with a certain group.",
            "And because of this member statement, and this group has an interest in a certain field.",
            "So now we can assume or we can infer that if for instance, person like Eric is member of a certain group and this group has an interest, then this also holds for Eric as an individual.",
            "That's just an example of a kind of more flexible way.",
            "In order to identify the users with a particular interest for our application, but it's not given if we assume such a very strict.",
            "Type statement.",
            "So.",
            "Whoa."
        ],
        [
            "What should our solution look like?",
            "Well, if you consider again these three examples of these three cases, how we ask?",
            "Or we want to ask our application, then there are at least three challenges or three problems that we want to solve.",
            "So we have to deal with missing type statements.",
            "As you can see in the first example, candy was not stated explicitly as a citizen, but for our case just to send the email, we are only interested in all people.",
            "They have the email address and the name.",
            "So it might be more interesting to look at the properties of individuals.",
            "Now.",
            "The second example works about missing properties.",
            "So for instance, we can think about, well, what is the difference?",
            "Actually, if a statement is missing, does this mean that maybe an optional property is just missing, so we don't care?",
            "Or is it actually a required property and this property is missing, so there's a difference, But this should be also reflected in our method in order to access.",
            "Data on the web.",
            "And finally, how can we deal with, let's say, implicit properties as in the last example, where we have disconnection from an individual to accrue and the group has interest statements about the Members?",
            "So this could be another interesting idea that we apply some inference in order to get properties based on further statements which are not explicitly stated for an individual."
        ],
        [
            "So now the question is, how can we achieve this possible solution?",
            "Well, there is existing work on this.",
            "For instance, we can do something like an object triple mapping.",
            "So I would say that's a quite straightforward idea.",
            "If we have RDF as a data representation, we want to come up with in, let's say object oriented data model.",
            "For instance, the background.",
            "So the background is from the database."
        ],
        [
            "Called the object relational mapping.",
            "So it's basically a collection of patterns or design patterns.",
            "How we can derive from object rational data model from database domain model by mappings.",
            "So on one side we have the data based model and the right side and the left side we have a domain model, let's say an object oriented model and between we define these mappers which are as I said, basically a collection of patterns.",
            "For instance, I give you an example here.",
            "If you map classes to tables.",
            "The right side assume we have a database with tables on the left side.",
            "We have our object oriented data model.",
            "Then for instance, we say well the table is mapped to a class and then the columns of a table are attributes, differing keys, object relations.",
            "And the two pull off.",
            "A database becomes an object of a certain class well, and if we map triples to object, that's quite straightforward.",
            "So we extend this notion as it is done here in the mapping from the relational model, it's extended to two pills, for instance.",
            "We have few triple and the basic idea is that we say well if we have a type."
        ],
        [
            "Statement we build classes in our model and then.",
            "We make each resource to an object that belongs to a certain type.",
            "So because for each type statement we already created the classes and finally we use these predicates and attributes to represent relations."
        ],
        [
            "Now the question is, is this already our solution?",
            "Does this solve the problem well?",
            "One problem is that we need these types for the classes in order to build the classes that.",
            "Instances belong to, so you can see here the problem is again, that can be worse not mentioned explicitly as a citizen, so we do not know how candy will be aligned in this class hierarchy.",
            "So we cannot say that candy is member of Citizen.",
            "Another thing is that in this case we cannot state properties as optional, so we can not distinguish whether a certain property is required or is even optional.",
            "Well, another idea is if we sing about class definitions.",
            "The idea is that we can think about more complicated class definitions as we know them from our so that we can have some definitions where we say well certain property."
        ],
        [
            "These are required or optional or must occur in the."
        ],
        [
            "Open class for instance.",
            "In all, we have quite complicated constructs in order to define classes of instance, we can say, well, each citizen must have a name and the mailbox that's required.",
            "Or we can say that citizens all interest statements of citizens are at a given by a direct topic or by a topic group.",
            "So it's kind of collection of topics.",
            "But we can also make more complex statements that we say well, if someone has a name and then a mailbox that would be a citizen.",
            "For our case, yes.",
            "OK thanks, that would be a citizen for our case, so if you if we are in our participation platform then we could use the search statement this year in order to get all.",
            "Instances that satisfy this property without any type statement.",
            "That's a kind of how we can define a certain class of instances that satisfy properties that we want to have.",
            "Well, that's quite fine, but the question again is that the solver problem we say?",
            "Well, that's usually not not all of them, is done in RDF, and it's also not realized in linked data."
        ],
        [
            "Another idea is, well, we can say if we want to have types, it would be straightforward if we can somehow extract the schema and then apply.",
            "For instance type providers."
        ],
        [
            "That would be another idea so that we say, well, if we have the link data here.",
            "Then we extract the schema and basically here we get some grouping of instances that share some common or some common properties and this instances of this group of instances build types."
        ],
        [
            "And then if we have this, well, we can for instance use such famous paradigms like type providers in order to ensure that.",
            "That individuals belong to a certain type.",
            "Now, but in this case a schema is only a kind of snapshot."
        ],
        [
            "Now the question is that was what is already done, not a question is how we expect the solution should look like.",
            "Well, what we want to have that was already mentioned is it."
        ],
        [
            "Template kind of property based typing.",
            "So I have written here no names in this class is, but these classes are somehow characterized by a number of properties they have, and in this typing let's say in this typing you want to have also some kind of hierarchies or specialization.",
            "But here for instance given by properties so that the number of properties will specialize, a class or objects of a certain class.",
            "So in a sense we want to have a kind of typing.",
            "Based on the collection or a set of properties.",
            "What you also?"
        ],
        [
            "To have is given such typing based on a property collection.",
            "If you also have the ability to be somehow extendable, as we say here, well we want to be quite flexible and say, well I have a collection of properties that build the class, but I want to be able to change this so that phone is replaced by Skype for instance, or that I can say well instead of Mail address.",
            "I wouldn't be more flexible and have both 8:00 AM or 8 or the detras.",
            "Or a web page.",
            "And finally, it would be also interesting to have some inference."
        ],
        [
            "So for instance that we derive certain properties as you can see here that this class with properties name and mbox.",
            "These instances of this class are member of a group and this group has.",
            "This group members have a certain interest.",
            "So then we want to infer somehow that these instances has also the interest property."
        ],
        [
            "So again, the current status we are dealing here with this, let's say trade off on the one side we have acquired fix typing with a given schema or even extracted schema on the other side we have described this flexible, sometimes even incomplete data representation in RDF where we have missing type statements and we have rather property centric or property based.",
            "Representation of the data.",
            "And what we want to do, we want to bridge between both."
        ],
        [
            "Now the idea what we have here.",
            "The idea is basically that we."
        ],
        [
            "Say we want to come up with a new paradigm, new programming paradigm, and that's actually called property based typing for RDF data access.",
            "Basic idea is described here, so here on the top we have our programming access.",
            "For instance given by an API there is specify operations.",
            "So for instance we also specify methods.",
            "And below we have our data types.",
            "So I'm typing.",
            "Here is basically build on two components.",
            "The first one are types, because if there are types we don't want to throw them away.",
            "We still use this types on the one side, but Additionally we also want to have this property, so we want to use property.",
            "So let's say a set of properties in order to extend our typing.",
            "So here the basic idea and it's actually the challenge is to have both Santa combine those in order to have.",
            "This kind of data type in here, which is the basic foreign access of the data from our programming API.",
            "So for instance, coming back to this example."
        ],
        [
            "In this case, if you want to send a notification to our participants, we would say well, here we have a collection of, let's say traits and this is given by the name and by the email address and we are only interested in all instances that satisfy this.",
            "Let's say type definition on the right side, but without explicit typing of this instances."
        ],
        [
            "And.",
            "As I said, as this was a position paper, I don't want to conclude here, I would rather start discussion.",
            "We propose this new paradigm.",
            "Which is really on considering the properties.",
            "The properties of RDF data is a kind of typing.",
            "In order to get an excess excess in terms of, for instance, reading data and methods based on types to the RDF data.",
            "So and once we have this.",
            "Representation this paradigm that we apply.",
            "There are a number of challenges, for instance.",
            "The question is, what is actually the challenge?",
            "So what does it mean for the programming language?",
            "Now we pose this challenge that this is an appropriate idea to access this data, but what does this mean for the programming language?",
            "I will just give you 3 examples now.",
            "First of all."
        ],
        [
            "I mentioned this type hierarchy that is property based.",
            "But the question is really how to build such a type here arkie I already mentioned.",
            "Well, we can use this kind of schema extraction as a preprocessing step in order to have this property based clustering.",
            "We could also think about from the concept analysis.",
            "So in order to group together.",
            "Instances with certain common property combinations.",
            "But another question is well, if you have this, how can we combine this is already mentioned, so we want still to have types type statements, but this should be extended or enriched with this implicitly derived property based types.",
            "So this would be a really challenging question if we look at the programming side.",
            "The other thing is."
        ],
        [
            "This already mentioned the incompleteness.",
            "So how do we interpret missing statements property statements?",
            "Well, for sure we can say a property statement is optional, but property statement can also be required.",
            "So is there a chance to distinguish between?",
            "A missing statement due to optionality or if a statement is really missing.",
            "And how can we achieve such a type inference like in RDF's that we have the hierarchy where we can inference.",
            "But now we want to have this hierarchy not in this explicit type statements, but rather on this collection of properties.",
            "So that would be the next question that we want to pose here."
        ],
        [
            "And finally, for instance, if you think about the programming paradigm about contracts so that you have methods and type contracts, now we extend this.",
            "We no longer want only status on types, but we won't also have contracts on.",
            "This types that are based on a collection of properties.",
            "So now the question is, how can we declare this?",
            "How can we declare optional and required properties?",
            "That's really challenged in this case, once we no longer rely only on typing an explicit type, but on a collection of properties.",
            "And while we can even sing about whether we want to support global or local contracts, for instance, local contracts means only in a certain method that we have a single method where we say well, here we require a certain type of this type is again specified only by a collection of properties that the instances have.",
            "And at this point I want to stop my presentation.",
            "There are a lot of challenges.",
            "Again, we posed this paradigm.",
            "This shifting paradigm that seems to be appropriate to access to program linked data represented in RDF.",
            "And now the second step is what is the challenge?",
            "For this paradigm to the concrete programming language to the concrete realization in a programming language.",
            "And yeah, therefore I want to start discussion I think.",
            "Thank you a lot for your attention and looking forward to your comments.",
            "Thanks a lot."
        ]
    ],
    "summarization": {
        "clip_0": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "My name is Katherine from University of Copeland's.",
                    "label": 1
                },
                {
                    "sent": "I will present a joint work with Steven Sugarman and this paper is a position paper so therefore I just want to bring some statement or some position or even a vision to you but no solution is just basically an idea what we should think about in order to program some semantic, web and data access on the semantic web.",
                    "label": 0
                },
                {
                    "sent": "So the paper is about property based typing.",
                    "label": 0
                },
                {
                    "sent": "Of RDF access.",
                    "label": 0
                }
            ]
        },
        "clip_1": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So first of all, when you think about RDF and especially about publishing linked data on the web, the current status, they're basically, let's say two successes.",
                    "label": 0
                },
                {
                    "sent": "The first one is that we already have huge collection of open data open and governmental data that are published on the web as linked data.",
                    "label": 1
                },
                {
                    "sent": "As you can see in the famous Linked Data Cloud.",
                    "label": 0
                },
                {
                    "sent": "And Furthermore, we have a lot of enrichment of data in terms of meta data, microformats and so on, which I used in order to research data and explore data.",
                    "label": 0
                },
                {
                    "sent": "Well, if you look at these underlying success, that's basically about representation.",
                    "label": 0
                },
                {
                    "sent": "So the representation formalism that we use in order to publish data on the web.",
                    "label": 0
                },
                {
                    "sent": "And the technique?",
                    "label": 0
                }
            ]
        },
        "clip_2": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Achieve behind this, there are basically two things to manage.",
                    "label": 0
                },
                {
                    "sent": "In, the first one is RDF as a formal data model language with the semantics to have a flexible, flexible data representation that allows you to extendable represent data.",
                    "label": 0
                },
                {
                    "sent": "And also to deal with incomplete and missing statements, which is quite common in the web.",
                    "label": 1
                },
                {
                    "sent": "The second issue is linked data, so link data is kind of best practice in order to publish data, especially structured and structured data on the web.",
                    "label": 1
                },
                {
                    "sent": "Now.",
                    "label": 1
                },
                {
                    "sent": "But I already mentioned is we can observe here a success in publishing and also in querying or exploring data on the web.",
                    "label": 0
                },
                {
                    "sent": "But now the basic question is what is the problem now?",
                    "label": 0
                },
                {
                    "sent": "If you want to have this flexible?",
                    "label": 0
                }
            ]
        },
        "clip_3": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Data representation on one side and we want to build applications that use this data that access this data, then modify this link data on the web.",
                    "label": 0
                },
                {
                    "sent": "So there we have basically two worlds.",
                    "label": 0
                },
                {
                    "sent": "The first one is the programming world.",
                    "label": 1
                },
                {
                    "sent": "I have mentioned this year with API to access data and there quite usual.",
                    "label": 0
                },
                {
                    "sent": "We rely on the type system and fixed data schema so that we have the common notion of classes and in this class as we specify, for instance properties.",
                    "label": 1
                },
                {
                    "sent": "But on the other hand we have RDF as already mentioned.",
                    "label": 1
                },
                {
                    "sent": "So we have a quite flexible data model.",
                    "label": 0
                },
                {
                    "sent": "But usually we have missing type statements, which is quite common in RDF, so and also we have to deal with incomplete information so that there are some statements about resources, but some other statements are missing, so we have to deal with this.",
                    "label": 0
                },
                {
                    "sent": "We have to deal with changing data.",
                    "label": 0
                },
                {
                    "sent": "And different heterogeneous data.",
                    "label": 0
                },
                {
                    "sent": "And this is actually the problem, but we are talking about here, so we want to connect to bridge between these different worlds in order to guarantee and to enable a data access.",
                    "label": 0
                },
                {
                    "sent": "So to sum up what we want to have, we want to connect this programming paradigm.",
                    "label": 0
                },
                {
                    "sent": "Which is mainly based on definition of classes or let's say in the object oriented world and on the other side this quite flexible representation of data.",
                    "label": 0
                }
            ]
        },
        "clip_4": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "On the web.",
                    "label": 0
                },
                {
                    "sent": "For for example, just to give you an example scenario where someone approaches useful.",
                    "label": 1
                },
                {
                    "sent": "Let's think about the participation platform where citizens are able to enter information to collaborate or to participate in discussions and also to get back some information from the government.",
                    "label": 0
                },
                {
                    "sent": "So if you have such a E participation platform, then we have users and users have accounts where the data of the users are represented.",
                    "label": 0
                },
                {
                    "sent": "So there are different accounts or data of the users available.",
                    "label": 1
                },
                {
                    "sent": "For instance we have platform users so they enter their data directly in the platform.",
                    "label": 0
                },
                {
                    "sent": "But you can also think about that this user can register using existing accounts in social networks like Facebook and LinkedIn.",
                    "label": 1
                },
                {
                    "sent": "Now our problem is we want to enable the engineering the programmers of Daisy participation platform to provide access data access for this application on this user data that are represented in, for instance, in RDF on the web.",
                    "label": 0
                },
                {
                    "sent": "So what we want to do with this, what we refer to as data access.",
                    "label": 0
                },
                {
                    "sent": "That means you want to read user data.",
                    "label": 1
                },
                {
                    "sent": "We want also to send emails to send notifications to the user in order to get some kind of collaboration and to get some feedback from this user now.",
                    "label": 0
                },
                {
                    "sent": "Just look at an example representation.",
                    "label": 0
                }
            ]
        },
        "clip_5": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "In RDF, on the left side you can see some statements in RDF that we have.",
                    "label": 0
                },
                {
                    "sent": "Three, no four citizen.",
                    "label": 0
                },
                {
                    "sent": "That's the first 4 lines.",
                    "label": 0
                },
                {
                    "sent": "There are four individuals, Alice, Bob, Dave and Eric that I mentioned explicitly by type statements as citizen.",
                    "label": 0
                },
                {
                    "sent": "Then there are some property like here for Alice.",
                    "label": 0
                },
                {
                    "sent": "You can see there's name, email address and we have also an interest of Alice and the same one for Bob.",
                    "label": 0
                },
                {
                    "sent": "So we have the name, the email address, interest and so on.",
                    "label": 0
                },
                {
                    "sent": "But we can see also there is another person candy and candy has also a name and email address, but there is no explicit statement of type, so there's no statement that candy is citizen.",
                    "label": 0
                },
                {
                    "sent": "Now what could be problem if we have such a say in participation platform, we want to access this data in order to send emails to the users.",
                    "label": 0
                },
                {
                    "sent": "For instance, we want to send the email to all citizens.",
                    "label": 1
                },
                {
                    "sent": "With name and email address for sure we can use.",
                    "label": 1
                },
                {
                    "sent": "We can send email to Alice and Bob.",
                    "label": 0
                },
                {
                    "sent": "Both are explicitly stated as Citizen, but we wouldn't find candy because she has name and email address, but she's not explicitly mentioned as a citizen, but for this case it doesn't matter.",
                    "label": 0
                },
                {
                    "sent": "We just want to have all people that are registered in our platform and in order to send some notifications we just need the name and email address.",
                    "label": 0
                },
                {
                    "sent": "We don't care about any tapes type statements here.",
                    "label": 1
                },
                {
                    "sent": "So another example, if you want to modify or read the interest of all citizens, then we can see that for instance, Dave has no interest mentioned.",
                    "label": 0
                },
                {
                    "sent": "So in this case this explicit typing is explicit property statement doesn't hold.",
                    "label": 0
                }
            ]
        },
        "clip_6": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Another example is for instance we want to find the interest of Eric so, but as you can see here Eric, there is no direct interest.",
                    "label": 0
                },
                {
                    "sent": "Statement for Eric.",
                    "label": 0
                },
                {
                    "sent": "But Eric is associated with a certain group.",
                    "label": 0
                },
                {
                    "sent": "And because of this member statement, and this group has an interest in a certain field.",
                    "label": 0
                },
                {
                    "sent": "So now we can assume or we can infer that if for instance, person like Eric is member of a certain group and this group has an interest, then this also holds for Eric as an individual.",
                    "label": 0
                },
                {
                    "sent": "That's just an example of a kind of more flexible way.",
                    "label": 0
                },
                {
                    "sent": "In order to identify the users with a particular interest for our application, but it's not given if we assume such a very strict.",
                    "label": 0
                },
                {
                    "sent": "Type statement.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "Whoa.",
                    "label": 0
                }
            ]
        },
        "clip_7": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "What should our solution look like?",
                    "label": 1
                },
                {
                    "sent": "Well, if you consider again these three examples of these three cases, how we ask?",
                    "label": 0
                },
                {
                    "sent": "Or we want to ask our application, then there are at least three challenges or three problems that we want to solve.",
                    "label": 0
                },
                {
                    "sent": "So we have to deal with missing type statements.",
                    "label": 0
                },
                {
                    "sent": "As you can see in the first example, candy was not stated explicitly as a citizen, but for our case just to send the email, we are only interested in all people.",
                    "label": 0
                },
                {
                    "sent": "They have the email address and the name.",
                    "label": 0
                },
                {
                    "sent": "So it might be more interesting to look at the properties of individuals.",
                    "label": 0
                },
                {
                    "sent": "Now.",
                    "label": 0
                },
                {
                    "sent": "The second example works about missing properties.",
                    "label": 0
                },
                {
                    "sent": "So for instance, we can think about, well, what is the difference?",
                    "label": 0
                },
                {
                    "sent": "Actually, if a statement is missing, does this mean that maybe an optional property is just missing, so we don't care?",
                    "label": 0
                },
                {
                    "sent": "Or is it actually a required property and this property is missing, so there's a difference, But this should be also reflected in our method in order to access.",
                    "label": 0
                },
                {
                    "sent": "Data on the web.",
                    "label": 0
                },
                {
                    "sent": "And finally, how can we deal with, let's say, implicit properties as in the last example, where we have disconnection from an individual to accrue and the group has interest statements about the Members?",
                    "label": 0
                },
                {
                    "sent": "So this could be another interesting idea that we apply some inference in order to get properties based on further statements which are not explicitly stated for an individual.",
                    "label": 0
                }
            ]
        },
        "clip_8": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So now the question is, how can we achieve this possible solution?",
                    "label": 1
                },
                {
                    "sent": "Well, there is existing work on this.",
                    "label": 0
                },
                {
                    "sent": "For instance, we can do something like an object triple mapping.",
                    "label": 1
                },
                {
                    "sent": "So I would say that's a quite straightforward idea.",
                    "label": 0
                },
                {
                    "sent": "If we have RDF as a data representation, we want to come up with in, let's say object oriented data model.",
                    "label": 0
                },
                {
                    "sent": "For instance, the background.",
                    "label": 0
                },
                {
                    "sent": "So the background is from the database.",
                    "label": 0
                }
            ]
        },
        "clip_9": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Called the object relational mapping.",
                    "label": 1
                },
                {
                    "sent": "So it's basically a collection of patterns or design patterns.",
                    "label": 0
                },
                {
                    "sent": "How we can derive from object rational data model from database domain model by mappings.",
                    "label": 0
                },
                {
                    "sent": "So on one side we have the data based model and the right side and the left side we have a domain model, let's say an object oriented model and between we define these mappers which are as I said, basically a collection of patterns.",
                    "label": 0
                },
                {
                    "sent": "For instance, I give you an example here.",
                    "label": 0
                },
                {
                    "sent": "If you map classes to tables.",
                    "label": 0
                },
                {
                    "sent": "The right side assume we have a database with tables on the left side.",
                    "label": 0
                },
                {
                    "sent": "We have our object oriented data model.",
                    "label": 0
                },
                {
                    "sent": "Then for instance, we say well the table is mapped to a class and then the columns of a table are attributes, differing keys, object relations.",
                    "label": 0
                },
                {
                    "sent": "And the two pull off.",
                    "label": 0
                },
                {
                    "sent": "A database becomes an object of a certain class well, and if we map triples to object, that's quite straightforward.",
                    "label": 1
                },
                {
                    "sent": "So we extend this notion as it is done here in the mapping from the relational model, it's extended to two pills, for instance.",
                    "label": 0
                },
                {
                    "sent": "We have few triple and the basic idea is that we say well if we have a type.",
                    "label": 0
                }
            ]
        },
        "clip_10": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Statement we build classes in our model and then.",
                    "label": 0
                },
                {
                    "sent": "We make each resource to an object that belongs to a certain type.",
                    "label": 0
                },
                {
                    "sent": "So because for each type statement we already created the classes and finally we use these predicates and attributes to represent relations.",
                    "label": 1
                }
            ]
        },
        "clip_11": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Now the question is, is this already our solution?",
                    "label": 0
                },
                {
                    "sent": "Does this solve the problem well?",
                    "label": 1
                },
                {
                    "sent": "One problem is that we need these types for the classes in order to build the classes that.",
                    "label": 0
                },
                {
                    "sent": "Instances belong to, so you can see here the problem is again, that can be worse not mentioned explicitly as a citizen, so we do not know how candy will be aligned in this class hierarchy.",
                    "label": 0
                },
                {
                    "sent": "So we cannot say that candy is member of Citizen.",
                    "label": 1
                },
                {
                    "sent": "Another thing is that in this case we cannot state properties as optional, so we can not distinguish whether a certain property is required or is even optional.",
                    "label": 0
                },
                {
                    "sent": "Well, another idea is if we sing about class definitions.",
                    "label": 0
                },
                {
                    "sent": "The idea is that we can think about more complicated class definitions as we know them from our so that we can have some definitions where we say well certain property.",
                    "label": 0
                }
            ]
        },
        "clip_12": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "These are required or optional or must occur in the.",
                    "label": 0
                }
            ]
        },
        "clip_13": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Open class for instance.",
                    "label": 0
                },
                {
                    "sent": "In all, we have quite complicated constructs in order to define classes of instance, we can say, well, each citizen must have a name and the mailbox that's required.",
                    "label": 0
                },
                {
                    "sent": "Or we can say that citizens all interest statements of citizens are at a given by a direct topic or by a topic group.",
                    "label": 0
                },
                {
                    "sent": "So it's kind of collection of topics.",
                    "label": 0
                },
                {
                    "sent": "But we can also make more complex statements that we say well, if someone has a name and then a mailbox that would be a citizen.",
                    "label": 0
                },
                {
                    "sent": "For our case, yes.",
                    "label": 0
                },
                {
                    "sent": "OK thanks, that would be a citizen for our case, so if you if we are in our participation platform then we could use the search statement this year in order to get all.",
                    "label": 0
                },
                {
                    "sent": "Instances that satisfy this property without any type statement.",
                    "label": 0
                },
                {
                    "sent": "That's a kind of how we can define a certain class of instances that satisfy properties that we want to have.",
                    "label": 0
                },
                {
                    "sent": "Well, that's quite fine, but the question again is that the solver problem we say?",
                    "label": 0
                },
                {
                    "sent": "Well, that's usually not not all of them, is done in RDF, and it's also not realized in linked data.",
                    "label": 1
                }
            ]
        },
        "clip_14": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Another idea is, well, we can say if we want to have types, it would be straightforward if we can somehow extract the schema and then apply.",
                    "label": 0
                },
                {
                    "sent": "For instance type providers.",
                    "label": 0
                }
            ]
        },
        "clip_15": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "That would be another idea so that we say, well, if we have the link data here.",
                    "label": 0
                },
                {
                    "sent": "Then we extract the schema and basically here we get some grouping of instances that share some common or some common properties and this instances of this group of instances build types.",
                    "label": 0
                }
            ]
        },
        "clip_16": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And then if we have this, well, we can for instance use such famous paradigms like type providers in order to ensure that.",
                    "label": 0
                },
                {
                    "sent": "That individuals belong to a certain type.",
                    "label": 0
                },
                {
                    "sent": "Now, but in this case a schema is only a kind of snapshot.",
                    "label": 0
                }
            ]
        },
        "clip_17": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Now the question is that was what is already done, not a question is how we expect the solution should look like.",
                    "label": 0
                },
                {
                    "sent": "Well, what we want to have that was already mentioned is it.",
                    "label": 0
                }
            ]
        },
        "clip_18": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Template kind of property based typing.",
                    "label": 0
                },
                {
                    "sent": "So I have written here no names in this class is, but these classes are somehow characterized by a number of properties they have, and in this typing let's say in this typing you want to have also some kind of hierarchies or specialization.",
                    "label": 0
                },
                {
                    "sent": "But here for instance given by properties so that the number of properties will specialize, a class or objects of a certain class.",
                    "label": 0
                },
                {
                    "sent": "So in a sense we want to have a kind of typing.",
                    "label": 0
                },
                {
                    "sent": "Based on the collection or a set of properties.",
                    "label": 0
                },
                {
                    "sent": "What you also?",
                    "label": 0
                }
            ]
        },
        "clip_19": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "To have is given such typing based on a property collection.",
                    "label": 0
                },
                {
                    "sent": "If you also have the ability to be somehow extendable, as we say here, well we want to be quite flexible and say, well I have a collection of properties that build the class, but I want to be able to change this so that phone is replaced by Skype for instance, or that I can say well instead of Mail address.",
                    "label": 0
                },
                {
                    "sent": "I wouldn't be more flexible and have both 8:00 AM or 8 or the detras.",
                    "label": 0
                },
                {
                    "sent": "Or a web page.",
                    "label": 0
                },
                {
                    "sent": "And finally, it would be also interesting to have some inference.",
                    "label": 0
                }
            ]
        },
        "clip_20": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So for instance that we derive certain properties as you can see here that this class with properties name and mbox.",
                    "label": 0
                },
                {
                    "sent": "These instances of this class are member of a group and this group has.",
                    "label": 0
                },
                {
                    "sent": "This group members have a certain interest.",
                    "label": 0
                },
                {
                    "sent": "So then we want to infer somehow that these instances has also the interest property.",
                    "label": 0
                }
            ]
        },
        "clip_21": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So again, the current status we are dealing here with this, let's say trade off on the one side we have acquired fix typing with a given schema or even extracted schema on the other side we have described this flexible, sometimes even incomplete data representation in RDF where we have missing type statements and we have rather property centric or property based.",
                    "label": 1
                },
                {
                    "sent": "Representation of the data.",
                    "label": 0
                },
                {
                    "sent": "And what we want to do, we want to bridge between both.",
                    "label": 0
                }
            ]
        },
        "clip_22": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Now the idea what we have here.",
                    "label": 0
                },
                {
                    "sent": "The idea is basically that we.",
                    "label": 0
                }
            ]
        },
        "clip_23": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Say we want to come up with a new paradigm, new programming paradigm, and that's actually called property based typing for RDF data access.",
                    "label": 1
                },
                {
                    "sent": "Basic idea is described here, so here on the top we have our programming access.",
                    "label": 0
                },
                {
                    "sent": "For instance given by an API there is specify operations.",
                    "label": 0
                },
                {
                    "sent": "So for instance we also specify methods.",
                    "label": 0
                },
                {
                    "sent": "And below we have our data types.",
                    "label": 0
                },
                {
                    "sent": "So I'm typing.",
                    "label": 0
                },
                {
                    "sent": "Here is basically build on two components.",
                    "label": 0
                },
                {
                    "sent": "The first one are types, because if there are types we don't want to throw them away.",
                    "label": 0
                },
                {
                    "sent": "We still use this types on the one side, but Additionally we also want to have this property, so we want to use property.",
                    "label": 0
                },
                {
                    "sent": "So let's say a set of properties in order to extend our typing.",
                    "label": 0
                },
                {
                    "sent": "So here the basic idea and it's actually the challenge is to have both Santa combine those in order to have.",
                    "label": 0
                },
                {
                    "sent": "This kind of data type in here, which is the basic foreign access of the data from our programming API.",
                    "label": 0
                },
                {
                    "sent": "So for instance, coming back to this example.",
                    "label": 0
                }
            ]
        },
        "clip_24": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "In this case, if you want to send a notification to our participants, we would say well, here we have a collection of, let's say traits and this is given by the name and by the email address and we are only interested in all instances that satisfy this.",
                    "label": 0
                },
                {
                    "sent": "Let's say type definition on the right side, but without explicit typing of this instances.",
                    "label": 0
                }
            ]
        },
        "clip_25": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And.",
                    "label": 0
                },
                {
                    "sent": "As I said, as this was a position paper, I don't want to conclude here, I would rather start discussion.",
                    "label": 0
                },
                {
                    "sent": "We propose this new paradigm.",
                    "label": 0
                },
                {
                    "sent": "Which is really on considering the properties.",
                    "label": 0
                },
                {
                    "sent": "The properties of RDF data is a kind of typing.",
                    "label": 0
                },
                {
                    "sent": "In order to get an excess excess in terms of, for instance, reading data and methods based on types to the RDF data.",
                    "label": 0
                },
                {
                    "sent": "So and once we have this.",
                    "label": 0
                },
                {
                    "sent": "Representation this paradigm that we apply.",
                    "label": 0
                },
                {
                    "sent": "There are a number of challenges, for instance.",
                    "label": 0
                },
                {
                    "sent": "The question is, what is actually the challenge?",
                    "label": 0
                },
                {
                    "sent": "So what does it mean for the programming language?",
                    "label": 0
                },
                {
                    "sent": "Now we pose this challenge that this is an appropriate idea to access this data, but what does this mean for the programming language?",
                    "label": 0
                },
                {
                    "sent": "I will just give you 3 examples now.",
                    "label": 0
                },
                {
                    "sent": "First of all.",
                    "label": 0
                }
            ]
        },
        "clip_26": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "I mentioned this type hierarchy that is property based.",
                    "label": 1
                },
                {
                    "sent": "But the question is really how to build such a type here arkie I already mentioned.",
                    "label": 1
                },
                {
                    "sent": "Well, we can use this kind of schema extraction as a preprocessing step in order to have this property based clustering.",
                    "label": 0
                },
                {
                    "sent": "We could also think about from the concept analysis.",
                    "label": 0
                },
                {
                    "sent": "So in order to group together.",
                    "label": 1
                },
                {
                    "sent": "Instances with certain common property combinations.",
                    "label": 0
                },
                {
                    "sent": "But another question is well, if you have this, how can we combine this is already mentioned, so we want still to have types type statements, but this should be extended or enriched with this implicitly derived property based types.",
                    "label": 0
                },
                {
                    "sent": "So this would be a really challenging question if we look at the programming side.",
                    "label": 0
                },
                {
                    "sent": "The other thing is.",
                    "label": 0
                }
            ]
        },
        "clip_27": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "This already mentioned the incompleteness.",
                    "label": 0
                },
                {
                    "sent": "So how do we interpret missing statements property statements?",
                    "label": 0
                },
                {
                    "sent": "Well, for sure we can say a property statement is optional, but property statement can also be required.",
                    "label": 0
                },
                {
                    "sent": "So is there a chance to distinguish between?",
                    "label": 0
                },
                {
                    "sent": "A missing statement due to optionality or if a statement is really missing.",
                    "label": 0
                },
                {
                    "sent": "And how can we achieve such a type inference like in RDF's that we have the hierarchy where we can inference.",
                    "label": 1
                },
                {
                    "sent": "But now we want to have this hierarchy not in this explicit type statements, but rather on this collection of properties.",
                    "label": 0
                },
                {
                    "sent": "So that would be the next question that we want to pose here.",
                    "label": 0
                }
            ]
        },
        "clip_28": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "And finally, for instance, if you think about the programming paradigm about contracts so that you have methods and type contracts, now we extend this.",
                    "label": 0
                },
                {
                    "sent": "We no longer want only status on types, but we won't also have contracts on.",
                    "label": 0
                },
                {
                    "sent": "This types that are based on a collection of properties.",
                    "label": 0
                },
                {
                    "sent": "So now the question is, how can we declare this?",
                    "label": 0
                },
                {
                    "sent": "How can we declare optional and required properties?",
                    "label": 1
                },
                {
                    "sent": "That's really challenged in this case, once we no longer rely only on typing an explicit type, but on a collection of properties.",
                    "label": 0
                },
                {
                    "sent": "And while we can even sing about whether we want to support global or local contracts, for instance, local contracts means only in a certain method that we have a single method where we say well, here we require a certain type of this type is again specified only by a collection of properties that the instances have.",
                    "label": 0
                },
                {
                    "sent": "And at this point I want to stop my presentation.",
                    "label": 0
                },
                {
                    "sent": "There are a lot of challenges.",
                    "label": 0
                },
                {
                    "sent": "Again, we posed this paradigm.",
                    "label": 0
                },
                {
                    "sent": "This shifting paradigm that seems to be appropriate to access to program linked data represented in RDF.",
                    "label": 0
                },
                {
                    "sent": "And now the second step is what is the challenge?",
                    "label": 0
                },
                {
                    "sent": "For this paradigm to the concrete programming language to the concrete realization in a programming language.",
                    "label": 0
                },
                {
                    "sent": "And yeah, therefore I want to start discussion I think.",
                    "label": 0
                },
                {
                    "sent": "Thank you a lot for your attention and looking forward to your comments.",
                    "label": 0
                },
                {
                    "sent": "Thanks a lot.",
                    "label": 0
                }
            ]
        }
    }
}