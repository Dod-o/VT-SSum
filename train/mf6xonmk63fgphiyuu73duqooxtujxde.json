{
    "id": "mf6xonmk63fgphiyuu73duqooxtujxde",
    "title": "HPC Software Engineering",
    "info": {
        "author": [
            "Erik Lindahl, SciLifeLab"
        ],
        "published": "Sept. 19, 2016",
        "recorded": "June 2016",
        "category": [
            "Top->Computer Science",
            "Top->Computers->Programming"
        ]
    },
    "url": "http://videolectures.net/ihpcss2016_lindahl_HPC_software_engineering/",
    "segmentation": [
        [
            "Thanks, then we are looking forward to the presentation of Eric Lindell on State of the Art H PC software engineering.",
            "What to do?",
            "What not to do?",
            "I'm not sure whether it's a state of the art, but I think there's something important we have to slide so I'll get started right away.",
            "The whole point of software."
        ],
        [
            "Nearing is really to help you write better code.",
            "The sad or good.",
            "Without this, the quality of code that we write in science is pretty hopeless compared to what people do in academia.",
            "Virtually all my code that I wrote as a student, and I would guess the vast majority of your code.",
            "If you committed that inside Google or Microsoft and we just rejected, it's not acceptable quality.",
            "You can certainly have they're going to be since I have a bunch of slides that we might be some slides that I just skipped, but the reason for that is that then you have them and you can look at them and they're available online.",
            "So."
        ],
        [
            "So what I want to try to help you in this talk is first to improve the quality of the software you're writing.",
            "There are some related aspects here that could potentially help you get a successful career in HBC, either as faculty versus enter an industry.",
            "Part of this is related to how you engage in the community.",
            "The problem is that when you just developing your own code, you're in charge, but by the time you ten 2050 developers, you have to compromise and you have to sell some joint standards in the projects, and in particular, I think I'm going to try to be fairly concrete and probably even start with showing you a bunch of tools that the first one some of you have already heard about, but I suspect there are some advanced stuff here that you might not be using.",
            "So most of the things I'm going to talk about is base."
        ],
        [
            "On the experience of 20 years of developing our software code gromacs, I'm not going to talk about indie at all here.",
            "That's completely irrelevant here, but this is a large software code by any standards in science is over 3 million lines of code.",
            "It's by now developing very rapidly.",
            "There are a bunch of challenges from this.",
            "There are some challenges with building a community that I'm going to talk a little bit about, and in particular I'm going to talk.",
            "How do we gradually transition from old horrible code to modern code?",
            "That is, while not ideal, maybe definitely not state of the art, but code that is better than it used to be.",
            "Why do you need this?",
            "Well, the problem is that.",
            "Once you start getting these large codes every change you do is going to have side effects, and before you know it the changes are going to more side effects than good effects.",
            "So if you don't do this, you're going to be stuck in a situation where as you trying to add features your code just gets worse and worse and worse and worse.",
            "And this comes down."
        ],
        [
            "The fairly fundamental difference between how we write software in academia versus how real professionals write software.",
            "Most of you are trained in physics, chemistry, or some other scientific discipline.",
            "We care.",
            "We could say we care about the problem, and nastier thing could be to say that we care bout getting the publication out quickly.",
            "If you're a professor or getting a job.",
            "From this point of view, if you can add a new code that does something fancy, that's a great asset, you can publish it.",
            "And this typically leads to most of us writing much more code and reading old code.",
            "Yeah, that was an old paper.",
            "I'm focusing on getting the current paperwork.",
            "If you're a software engineer, though, in particular, if you're in industry, you care more about the code than what it actually does.",
            "The long term maintenance of the code any new feature while the feature is nice to have, there will have to be somebody supporting this code.",
            "And the question is, who?",
            "All these projects it feels so great, right?",
            "I'm happy to donate 100,000 lines of codes to this product.",
            "Why don't they accept that?",
            "Well the question is, will you maintain this next year or are they going to maintain it?",
            "Somebody will have to maintain it.",
            "At the end of the day, this means to that good programmers they probably read a factor 100 more code than they write, and that means that's why it's so important documentation and getting code that's high quality.",
            "When you start doing this, you as I originally felt, you can feel that this is such a waste of time.",
            "You used to be so amazingly productive and now you're going to spend probably 3 times as much time doing designer writing documentation that you spend coding.",
            "When you just spend coding, you produce a factor of four more code.",
            "The only problem is that that's a lie, because this is just like take out a mortgage in the House or something you might not afford a house now, but you get a bank loan, but at some point in time you will have to start paying this, and it's exactly the same thing with code.",
            "If you don't do software engineering, there are three alternatives other U year from now will have to spend Sunday, spend six months just fixing old code, and then you're going to be completely unproductive or somebody else in the team will have to do it.",
            "Or you go bankrupt in the sense that your code dies.",
            "Nobody uses us because it's so horribly buggy that it's useless for anybody else.",
            "And I can promise you that's not good for your career.",
            "We"
        ],
        [
            "We were roughly in this situation until 5, six years ago.",
            "We have so many other products used, a simple source code for poster called CBS.",
            "I'll get back to that.",
            "Sorry that the colors are washed out here.",
            "We used a very simple tools to build our code so I get back to what build chains are too.",
            "We had we tried to keep track of our bugs, so I think we were not horrible by any definition, but when it comes to testing and making sure that with high quality, that basically meant that for every release a bunch of us sat down and tried to test as many things we had time for for two or three months, and then you had a beta release and you had lots of bug reports coming back.",
            "And then you tried the end to fix as many of them as you could before releasing."
        ],
        [
            "That is not how you should do it.",
            "So what I'm going to start by showing you is a couple of modern development tools that I would strongly advise you to use.",
            "I would even go further than that.",
            "I would like all of you to commit to start using at least one of these tools that you have not used before.",
            "If you're a complete novice, just pick the first tool.",
            "If you're only using three of them, pick the 4th two."
        ],
        [
            "So the reason for using this is that if we compared to the situation when I gave this talk in Toronto a year ago, what's happened in the last year in our code is that there's been 957 commits.",
            "4100 files change.",
            "There are almost 400,000 lines of code that had changed.",
            "If this program crashes on you the first time you do, how do you start debugging it?",
            "400,000 lines of code have changed.",
            "It would take you a month to find that bug if you just had you had the version from last year and you have the version from this year.",
            "And you have all seen this on a much smaller scale, maybe even some of those.",
            "Some of you that have been sitting in doing this challenge right yesterday night or something.",
            "You had this working 30 minutes ago and now it's not working and you're not quite sure why you've changed lots of things, but you're not sure what change made it work worse.",
            "And the first thing you need to do there is."
        ],
        [
            "Is a source code revision control system.",
            "Along time ago the only tools available."
        ],
        [
            "It was called CVS or CBM.",
            "Don't even call 1 called.",
            "RCS.",
            "The point is not the name of the tool, but how we are.",
            "Traditionally.",
            "You create some sort of central repository and then each developer checks out this report centaurian when I want to push a change back.",
            "If somebody else has changed this, it won't allow me to push my change back, but still this creates a central cave for your code and it's very easy to see what has changed.",
            "There's going to be a line describing every single change.",
            "There is a much more powerful tool that has conquered the word the last 10 years due to Linux and it's called."
        ],
        [
            "Egypt.",
            "Get us a very complicated tool, but the amazing thing was get is that there is really not any central repository anymore, so get us away if I have a piece of code I just I can pull in a piece of code from Herman or Scott or anybody else they can pull for me.",
            "We don't have to synchronize all the time, it's just you have some code I want.",
            "I have some code that I want to push to repository and it's a beautiful way to keeping track of this so called diff sets between all these developers and you're always going to have a strict definition.",
            "What changed between version one and two.",
            "And what are the differences between all these developers?",
            "There are a."
        ],
        [
            "Bunch of features you can use this code.",
            "I'm not going to go into details or interests of time, but the point here is that you can use these for free.",
            "You do not have to set these up on your server.",
            "The only reason to even think of setting up a server yourself.",
            "This if you have 50 developers or something.",
            "Go to GitHub or at last him.",
            "Get up is free for everybody at last, and is free if you're an academic for both of these stores.",
            "Some limitations, the number of users, but there too if you just upload a Mail showing that you're in academia, they're going to give you a professional account for free.",
            "Will take 5 minutes to sign up and then you have a professional backed up server and everything."
        ],
        [
            "Git has tons of features that I young won't go into all the details for, but the most important thing is that you can track changes and this has some also ways to bisect, so you basically doing a binary tree difference so those 4000 different patches, or something that would tell me take complete 10 compiles, then I would know exactly what change was it that created a bug, and then I'm down to 100 lines of code.",
            "In 15 minutes.",
            "That's pretty good for four 100,000 lines of change code.",
            "The problem with that is that get this a bit special.",
            "There are some very long complicated commands that even I don't remember.",
            "So what everybody does, it's not quite as bad as it is in the picture there, but with git when you want to do, you can do absolutely anything yet, but to do anything you frequently have to go to Google and find a very long command to type and then paste that in.",
            "It usually works."
        ],
        [
            "What you should think about though, two things first.",
            "How many of you are using it today?",
            "Oh awesome, I love this.",
            "Those of you don't.",
            "I guess you're not using it because you think your code is small.",
            "The point is, start using it when your code is small, because when you just, it's trivial to use for your code this morning when it's large that it gets complicated.",
            "So start by doing very, very tiny commits.",
            "That makes it easy to find the bargain, because by the time you have bugs, this by section will find.",
            "This will isolate the bug to one commit.",
            "If it's 10 lines per commit, you already found the bug.",
            "The other thing."
        ],
        [
            "I want to bring up is whether your code is portable.",
            "Most of us think that we're writing in a standard language such as Fortran, C or C++.",
            "The problem is that there is a difference between portable with a lowercase P and then uppercase P. Does your code compile on?",
            "Ask yourself this windows with Microsoft Visual C compilers.",
            "Pgi pathscale the blue Jean compilers.",
            "The clang compilers on blue Jean.",
            "And the K computer that Fujitsu compilers arm ARM 64.",
            "PowerPC, that's pretty much.",
            "Power Seven is pretty much the only big endian platform you have.",
            "When I was a student, there were half the platforms out there were big endian and the other half were little endian.",
            "But of course you can introduce a check for this.",
            "You can check if the architecture is called_PPC and then assume that it's big ended.",
            "That worked really well until roughly a year ago when IBM released Little Endian Openpower so suddenly PowerPC can be either big endian or little endian.",
            "That's virtually guaranteed to break your code if you're doing any manipulation of bytes.",
            "So the problem is that you're going to need to check this.",
            "You can't assume that PowerPC, for instance, has a particular endianness.",
            "So the only way to really oleti.",
            "So you're going to need to when you start building your tools, you would like to have some sort of program that checks this at the beginning.",
            "And this is usually what we call these so called."
        ],
        [
            "Oil change most users start to by just issuing your compiler commands automatically.",
            "Then I guess you would start use writing some sort of make files and then you edit makefiles and eventually 20 different makefiles, one for each architecture and the idea with this build chances to completely automate the generation of makefiles.",
            "So at some point you're running a if you've never installed the Unix tool, you probably run this dot slash configure right?",
            "And that's a script that tries to detect lots of things.",
            "Then it generates the make files for you, and then you just issue the make command.",
            "Those new out the tools are 20 years old and it sadly shows."
        ],
        [
            "So the things that you would like to do in configuration is to ask all these type of questions and check it on the system where you're building.",
            "And here I have a strong recommend.",
            "Very strong recommendation for you and this is getting stronger every year they build tool to use today is called."
        ],
        [
            "Teammate Cross platform 8 this works on every single Unix architecture and it works on Windows and it works on Macs and you generate build files if you want to build files for Xcode it will do it for you.",
            "I will not have time to go into the details there, but the point is that the."
        ],
        [
            "Probably there way more than 100 tests now there probably 200 CMake tests built in for all these different features.",
            "But then the point is that large projects like ours, we end up writing our own tests, so I had to write some tests to detect some bugs in large file support on Linux.",
            "And then I actually had a bug in my own test, so I started to search for C, make a large file support about him a couple of months ago.",
            "And then I realized, well, there was nobody else that had fixed it, but there.",
            "By that time there were like 25 other projects using the file I had written.",
            "Which is of course great fun to it's to me as a scientist.",
            "That's the greatest appreciation I can have that people appreciate what I do and they use it.",
            "But of course, that those meant that I had introduced that bug in all of their programs.",
            "The other party would like to do with these things."
        ],
        [
            "That you can do something called out of source builds.",
            "So if I have again, Gromacs is a gigantic source code and I can certainly build things in my source code tree.",
            "Lee only problem is that there is one small change I want to do, and then if I'm not going to build for five different architectures I had to do a make clean and then make again and it takes a couple of minutes.",
            "So what you can do then again both how to make and see make supports this natively, is that parallel to the source code.",
            "You have different directories an in these directories you just have the built files.",
            "The binaries in the libraries.",
            "So if I now go in and we once more changes in the source code, then I just CD to each of these directors and builds and might take 3 seconds to build this 3 million lines of source code because it only rebuilds the things that have changed.",
            "And.",
            "Since they live in different directories, I don't have to erase one to build the other.",
            "The third part tool is that."
        ],
        [
            "Gonna live with your code for years and in particular remember if you're going to use the reading code Affecter 100 more than you write it.",
            "This has to be properly documented.",
            "There are only two types of documentation documentation that stays in."
        ],
        [
            "Source code and documentation that is not up to date.",
            "The documentation has to be in the source code.",
            "There is now a universal tool that does this.",
            "Doxygen that the next ride you write your documentation in your comments for each routine, and then doxygen will extract that.",
            "I will show you that isn't demo in one minute."
        ],
        [
            "When it comes to documents to code documentation, the important thing is that we all make this mistake that if we have I = I + 1 and then we make a comment increment I with one you know most programmers don't need the comment to understand that you're incrementing I with one.",
            "But you have to explain why you need to increment line with one here, so get used to writing comments that explain the difficult parts of the logic, not the easy part.",
            "The easy part should be self evident from your code.",
            "I'll show you a demo of this in one minute."
        ],
        [
            "But there are also a bunch of things that are not necessarily related to direct source files.",
            "For is.",
            "How are you going to install the package?",
            "What are the supported compilers for this package?",
            "This is some new stuff actually that we didn't have last year, but there is a great tool called Sphinx which is used to build all the Python documentation and incidentally old every single tool I describe is free.",
            "So we use things to write a very, very simple type of inline documentation that we then extract automatically at build time.",
            "So all these tools in CMake I just run make documentation and I will show you one or two examples of that.",
            "So this is an example of a source file.",
            "You don't need to see the exact details here, but.",
            "At all the green stuff here is documentation.",
            "And would you have to get used to after wireless writing at least as much documentation as you write codes, this takes time.",
            "This takes a lot of time.",
            "The point is that it saves more time in the end.",
            "You don't think that is going to save you time, but the point is that this takes the most boring thing you're doing debugging because suddenly when you have bugs, you're going to find them in one minute instead of a week.",
            "So trust me, every hour you spend on writing, documentation is an hour that probably pays back to factor 5.",
            "So what you do for a typical routine as such have a brief explanation and then you have an explanation for each parameter here.",
            "This is well documented oxygen and then in this case it's C++ code, so we explained that it can throw an exception under some circumstances.",
            "What that then results in is.",
            "Let's see if we can have the.",
            "With that, then results in when you just run doxygen is that you get a beautiful definition of all the modules we have.",
            "We can look at the assembly intrinsics, doesn't matter what the code.",
            "Also, every single defining the code is explained.",
            "I can look at a routine here.",
            "I can double click on that routine and then I will get detailed documentation of all the parameters.",
            "What are the requirements of memory alignment and everything?",
            "Now this takes time to write, but when you are sitting in trying to understand somebody else module, this is paradise.",
            "Because you don't have to understand all the details of the code, it's Esther.",
            "Unfortunately, I had a bug in the graphics library on my Mac here, but otherwise doxygen will even create You Beautiful images to show how different modules depend on each other and I'll get back to that in a second.",
            "The other thing you do with this very simple Sphinx documentation is that.",
            "Let's see.",
            "So here we get Sphinx.",
            "All these things are really simple stuff written this.",
            "This looks like it's a lot of work, but the point is that all the formatting and everything here is done automatically.",
            "Just this is for Python, so you just all these very.",
            "This basically right if you have adult it's automatically gonna turn it into lists.",
            "This saves so much time because for us is also means we don't have to support users, we just tell them go read the documentation.",
            "And it the voice is huge amount of bugs."
        ],
        [
            "The next thing is that.",
            "This is not necessarily a tool, but when it comes to finding and in particular preventing bugs, preventing bugs as much more than finding them, there are a couple of systematic things you can use.",
            "The most important thing is actually what those of you have taken a programming class, what they teach you in chapter one of the book you know that chapter of the programming book that we all skipped because we don't understand the point of it.",
            "And that has to do with boring things like."
        ],
        [
            "Modularisation having modules to clear separate tasks.",
            "Having a well designed interface.",
            "Your code making sure that you have unit tests in particular.",
            "You can do this in any language, but I would argue that.",
            "By far the easiest way to accomplish this is to move to language that supports it, such as C++.",
            "C++ does not have a great reputation in HPC, but today I would say C++ and in particular C + + 11 is likely the best HPC language in the world.",
            "Now the price for that is that you will have to give up some old Fortran libraries that you depend on, but I think we've started to see that shift 10 years ago 14 was completely dominant in HPC, it's no longer anymore."
        ],
        [
            "I'm not gonna go into much into details with language.",
            "Is the whole point with all these, it's a bunch of funny thing.",
            "We have a bunch of these sick quotes in gromacs.",
            "The whole point is that if you write bad code, you can do it in any language.",
            "You can also write good code in any language, but some modern languages have more features that can support you in writing good code.",
            "And the main advantage of C++ is that."
        ],
        [
            "Test first, it has a lot of modern language things like threads isn't important.",
            "Threads is a natural important part of the C++ language.",
            "You have an extremely powerful library with things like hashes, vectors and everything so that you don't have to recreate them yourself all the time, and that helps you get that helps you avoid bugs.",
            "What I like with C++ is that it's by my definition.",
            "It's a very low level language.",
            "I control exactly what the data does and where it lives.",
            "The bad thing with C++ it's it's a gigantic language.",
            "It's a really complex language.",
            "And that also means that it's really easy to do bad things in your code with it.",
            "So you need to be by far the most important thing with C plus passes, so you need to be disciplined.",
            "But if you are disciplined and in particular your colleagues are good at C++, this can makes you incredibly productive."
        ],
        [
            "And just to kill an old myth, people in general think that Fortran is foster the C++.",
            "This is an example.",
            "It's just a simple code that is executing something and then for whatever reason you have a number of choices here at runtime, both in C and Fortran.",
            "If these choices are parameter to your routine, they can't be evaluated at compile time, but so they have to compile all this code and then you're going to have these conditionals in the code.",
            "Works acute it.",
            "In C++ we can turn this into a concept called templates, which means that the compiler will evaluate this at compile time and then you have no conditions whatsoever.",
            "And if the code pieces you're doing here are small, this can be effective 10 faster.",
            "So we we don't have a single routine in the code that has become slower with C++, but we have lots of them very much faster.",
            "The other thing that can happen in any."
        ],
        [
            "Code that by that might be clear in C++ is that you get these dependency nightmares and dependencies just in one piece of code needs another piece of code and there are so many codes including hours before that, every file included every single header file in the project.",
            "And if something works, the only thing you know is that something doesn't work.",
            "It's a bug somewhere in the entire project.",
            "The beautiful thing with clean modularisation."
        ],
        [
            "Is that your very clear dependencies?",
            "If you have, if you if every if these dependences only go one way and you know there is a failure here, the failure can only be there, there, there or below that.",
            "It can't be higher up.",
            "And if you also have tests for these blocks, you know that that block that book in that book is fine.",
            "We know that the failure is here before we even start to look at the code.",
            "And the way to do that is with something called June."
        ],
        [
            "Testing unit testing is most of us use regression tests or something and regression tests just means that your code has the same bugs that it had last year.",
            "Unit testing is the opposite, so you're testing something very low level.",
            "If you have a random number generator, we know what the original author of this random number generator said that this is the reference that I wish abuse for particular random seat, and then we make sure that on every single architecture or random number generator create reproduces exactly that data so that we know that this piece of code is perfect.",
            "And the."
        ],
        [
            "Point is that you should test pretty much everything.",
            "This is really difficult when you first start with it, but the key is to have small models.",
            "If a small module is just a the roll random number generator, you can test that.",
            "But if this does random number generation velocitus and 50 other things, you can test it.",
            "When you first start writing this, you're going to think that it's such an overkill to test everything, but trust me, every time we find a new bug detected by this, we are flabbergasted because we had no idea that such a basic thing could be bad.",
            "We had another bag bug in IBM compilers the other day, so there are things go bad.",
            "It's nobody's fault, but it's just bad things happen if you test everything, you will find out instantly.",
            "So we tell our users the second they built the code, run, make check to.",
            "I will run all the tests for you.",
            "That in turn provides for a pretty sexy functionality."
        ],
        [
            "Normally when it comes to adding codes to large projects and everything, typically we only allow the core developers and people to write.",
            "The only problem is that some of these core developers occasionally make mistakes.",
            "I've contributed a ton of bugs to my code.",
            "It happens when you add also code.",
            "So what we moved over to a physical Garrett."
        ],
        [
            "Which is formal code review, which is something that industry also uses.",
            "So that I can't commit to my own product anymore if I want to commit code to my own product, I pushed the path to a cervical Garrett.",
            "And.",
            "Then other developers have to look at this.",
            "I'll show you a quick demo of that.",
            "So what this server looks like is something like this.",
            "So here you have the different patches committed many of them today and then I can click at the Patch here and then who that is uploaded by and in this and what's happened with it and eventually we're going to vote, but I can't vote without having looked at the code.",
            "So the point here is that every single developer will write something.",
            "We check that code.",
            "We have at least two, so if not three parasites repair eyes that have looked at the code before it enters the code.",
            "This slows things down.",
            "It's take time, but it provides much higher quality code.",
            "Even in these small patches you have no idea how many trivial errors we find.",
            "And that in turns means we can actually allow anybody to propose these changes in garrets, because nothing goes in without at least two more pairs of eyes.",
            "Have looked at them."
        ],
        [
            "I'm going to skip the exact details there in the interest of time, but since this is public you can have a look at this in gromacs too."
        ],
        [
            "The other part here is that.",
            "Even when we have formal code review, bad things still happen.",
            "So how do I make sure that we or I don't make things, and that's a concept called continuous?"
        ],
        [
            "Creation also heavily used in industry.",
            "There is a free tool called Jenkins that does this.",
            "And rather than having a slide about it, I think I will show you that too.",
            "So what happens with this code is that when Mark uploaded this.",
            "The first thing that it does is that you get some message here that this is automatically built.",
            "We check that the documentation is correct, we check for CPP check and there's some other basic things.",
            "But then the whole point is that we gradually I'm not going to go through this in detail, but the one we have a compiled form.",
            "So this pushes out the job to some 20 different nodes, 3040 different configurations.",
            "We build this and if there are any errors we won't allow the debug the path to be submitted until these errors have been fixed.",
            "So I can freeze this check whether there was any problem building my latest code on ARM 64.",
            "If you think that this is going to be complicated for you to set up and everything you can use this in the cloud, it will cost you piaya couple of dollars per month."
        ],
        [
            "So there are bunch of things you can test here and I'm not going to go into details there to save time.",
            "You probably think that it's stupid to Add all this.",
            "The neat thing with this that in particular address sanitizer, memory sanitizer and thread sanitizer.",
            "These are low level code blocks that checks that you're not making memory errors and that do not making errors with two different threads.",
            "Try to read or write the same memory area.",
            "Those are some of the most horrible bugs we have.",
            "And the nice thing because we check everything, we pretty much we don't have memory errors anymore in other releases.",
            "It still happens now and then for old code, but memory those if you have done memory debugging, you probably know that that's the most horrible thing you can imagine, and they can take an infinite amount of time.",
            "We don't have that anymore.",
            "That person is probably enough to get you interested."
        ],
        [
            "Using some of these tools.",
            "We also connect this directly to a."
        ],
        [
            "Called Red Mine where we track all the bugs and everything and we also have longer term discussions about what should be developed.",
            "That is not rocket science, but the beautiful thing is that these tools talk to each other, so the 2nd that we have, the 2nd we have a new commit that addresses bugs, say 959 here there will be an entry in bug 959 showing you that yes and there is now a new bug uploaded that fixed this bug and then it will automatically be closed and everything so that everything is cross reference here with a beautiful way.",
            "If there was about three years ago, I can see exactly which commit fixed that.",
            "Or if there is a very long bug and I don't quite understand why, say, Herman added that I can see, well, this is the discussion why we had to introduce the fix.",
            "So I have a couple of minutes left here and what I'm going to do in the lawsuit needs to talk a little bit about the Community building so all these tools are very powerful.",
            "In particular when there are more Q involved in a project, I would I would strongly argue that you should using these even if you're just developing things inside your lab.",
            "The real power here starts to appear when you're in different time zones.",
            "When you only see each other twice a year or something, or when you we've had some developers here that I didn't see for five years because they were in Australia before he moved to us later.",
            "The point here is that these communities are powerful and they open source communities are some of the most powerful entities in the software industry.",
            "Linux is just one example, but if you look at both me and we have to mirror somewhere to our codes formally.",
            "Don't provide any support or warranty.",
            "If you post things on the mailing list of these codes.",
            "You can occasionally get an answer within 30 seconds and the worst case it might probably take you 20 minutes or something.",
            "There's an insanely quick response rate and you can imagine when I'm here, having fun with you this week, I don't have time to engage in the product, so sending things directly to me that's not going to work.",
            "But suddenly you have lots of people and Fargo that go far beyond the core developers that contributed these products.",
            "So if you want to get involved, the first thing I would do is start to become an active user on these mailing lists long before you start committing code or anything.",
            "People will appreciate that and help it.",
            "But then you will gradually get more involved in these products and that leads to some other things in particular licenses I would."
        ],
        [
            "That we're seeing a rapid growth of open source licensing.",
            "There are some people that are very religious about these.",
            "I'm not what you need to learn that all these licenses are tools.",
            "You can use them for good or for bad, but the most important thing is an academic or in industry.",
            "You need to decide what do you want to achieve with your code.",
            "So I'm not that interested in direct commercialization myself, but on the other hand, these open lies is are great because it can give you hundreds or even thousands of users.",
            "Now by the time you have a large code that's less important, but when you're starting out, getting people to use your code is pretty important.",
            "I just had two students who came up with a new way to GPU accelerate some image processing in Crimea and rather to write their own code.",
            "They decided to contribute this to one of the largest open source code in the world, and I realized last week that were in China and presented this, and there are now hundreds if not thousands of people that want to use their code.",
            "So 24 hours.",
            "This made their careers.",
            "They're going to integrate postdocs because everybody suddenly know who they are.",
            "The point with these licenses is that in particular, the traditional GPL licenses is there basically made to intentionally make it hard to use in industry to make money.",
            "There is nothing wrong with that people.",
            "Many people in the open source feels strongly that the code needs to be stay open at any cost.",
            "There are other licenses that are still open source, but allow the code to either be used or at least be linked into commercial applications.",
            "There's slightly more business friendly.",
            "the European Union likes PSTN L GPL, but not strict GPL.",
            "Read up on these licenses and pick one, but decide not based on feeling but what you want to do with your code.",
            "The other."
        ],
        [
            "That you should be aware of these communities and cultures.",
            "At first I would recommend you all to do it.",
            "There's a great way to give you a scientific career, and it's a great way to give a career early on.",
            "The second part is that learning to code well is like learning to swim.",
            "You can't do it without getting in the water.",
            "You can't learn coding by reading 50 C++ books.",
            "Trust me, I tried that.",
            "The only part when I would say it wasn't really until my first or second year recipes.",
            "These students that I became really serious about coding.",
            "I was not an outstanding coding coder before them.",
            "By the end of my PhD I think I was a decent coder and by now I would say that I'm starting to be pretty good coder.",
            "But the only reason why I'm nowadays are reasonably good C++ code is that I had an outstanding post Doc who is a guru is C++.",
            "And then you simply have to learn and learn from him.",
            "I'm a professor and he's supposed to, but that's fine.",
            "Open software, open source software in general, it's a. I think there's going to be more and more important than and.",
            "Again, this is.",
            "This is nothing to do with political reasons, but the problem with science is that science ultimately builds on the fact that we need to be able to reproduce results right.",
            "And in the old days when the software was 100 lines of code, it was trivial.",
            "Just described that you did an ANOVA, statistical analysis or something.",
            "But in these cases where we start depending on software that are millions of lines of code, if I can't see the software.",
            "There is no chance to analyze what you actually did.",
            "That does the selling.",
            "That care must be free.",
            "There are several commercial softwares that you pay for, but the people who do pay for it can see the source.",
            "I also really like this ultimate miracle AmeriHealth meritocracy.",
            "Do it?",
            "There is only really one currency here and that's writing outstanding code.",
            "You should be aware though, that the internal culture in many of these products, in particular the Linux kernel, but also our product can be pretty blunt.",
            "I wouldn't say politically incorrect, but maybe it draw discussions and you can compare this when you submit a paper for publication is that?",
            "If you submit a paper publication, you get tough review comments back.",
            "You don't get 3 pages of admiration set to where nature is so happy that you decided to submit this paper to nature.",
            "We really love you to have as part of the nature family that doesn't happen.",
            "You will get some very serious scientists that have very little time and they will point out the shortcomings.",
            "This might sound tough, but the whole point is ultimately we would like your code to get in.",
            "But in this current shape, it cannot be in our product because there are these five severe problems with it.",
            "And in the interest of time, I'm not going to spend my time sugarcoating it.",
            "I will tell you exactly what those five bad things are.",
            "So when you meet most of us electronically in this mailing list or comments, we might look so super aggressive.",
            "But we're not the best thing.",
            "Get in touch with these developers at a meeting and by far the best thing is to, in any discussion, assume that you are wrong and they're right.",
            "The worst thing that the developer gets us a user posting to say, yeah, there's a horrible bug in the latest version of your program when it's really the user did something stupid.",
            "The right thing is that I'm very sorry this must be something very trivial, but I read all the documentation and read the manual and I spent two days trying to read the program.",
            "I'm sure this is something very simple, but here's all my output and everything that people would love to help you.",
            "And at the end of the day, you don't get respect.",
            "You're in it.",
            "You have every single right in the world not to use these codes, and if you don't like that, you're going to get every single cent that you paid for them back.",
            "The."
        ],
        [
            "There are two good readings list here.",
            "Let me just suggest there are a bunch of books.",
            "Most of you if you are already a C++ code, you're lucky.",
            "You can start directly on some of these large scale C++ books.",
            "This is a good call design patterns or to pick up the gang of four.",
            "It's the best book on software development I've ever read, but it doesn't really talk about C++.",
            "These are design patterns.",
            "There are no new design patterns in computer science.",
            "There are 20 years old.",
            "All of them.",
            "Don't try to reinvent the wheel.",
            "Learn what other people have done most of you.",
            "They are comparable.",
            "Coming from old code.",
            "And then there are books I love working effectively with legacy code and these books and refactoring because refactoring is really the process of systematically trying to improve and create better.",
            "Interface in existing code don't think that you can start from scratch and do it better.",
            "Work with existing code and try to improve that.",
            "And the final thing that I won't have time to talk to, but maybe we should have a separate talk about this by somebody next year is filled."
        ],
        [
            "Floating Point is one of the most most beautiful, but also one of the most complicated concept you can imagine and software.",
            "If, and I think most of you are working with floating point based scientific software, go and start to read this blog by Bruce Dawson.",
            "There are like 20 posts or so.",
            "You will be amazed about some of the indicate deal kids and there are some of these funny posts that apparently in the Intel math library they under estimated their error bound for design function by 1.3 quintillion.",
            "OK, this is hard, but if you are working on American libraries and setting error bounds, it's very easy to make mistakes in floating point.",
            "With that I just added one more slide.",
            "What do you want to do?",
            "If you want to get started and getting better, the point is follow Igor Stravinsky.",
            "He has."
        ],
        [
            "The same goes lesser artists borrow.",
            "Great artists steal.",
            "We do that too, because the amazing thing with open source is that it's OK to steal.",
            "You should give them credit, but go to.",
            "These are just the web.",
            "Different websites we have for gromacs.",
            "There are lots of other programs out there too if you know that some program did something really nice or just search the web, go there, see if they have a module.",
            "They might have a CMake model you have, and if it's if you have the same licenses, you can use it right away.",
            "So what do you do if they don't have the same license?",
            "If you can't use the tool?",
            "Email and ask, but when I create something I have to set a license on it.",
            "You know that CMake module that detects the floating point format in the computer?",
            "It's not my life if Microsoft would like to use that, go right ahead.",
            "I don't really care.",
            "So if people send me a Mail and ask, you know that GPL model you had, could we use that in the under BSD license in 90% of the time?",
            "I would probably say just sure go ahead no problem, and I would guess that most scientists are going to do that because that's the final take home lesson here.",
            "We all think that our code is so precious we need to prevent people from using it.",
            "We need to prevent industry from ceiling.",
            "The truth is that most of us should be very happy that there are actually some other people that want to use our code because it's.",
            "Again, compared to industry, scientific codes are not necessarily that good when it comes to quality control, but we can all get better.",
            "So with that I can probably take two or three minutes or questions at least.",
            "Thank you very much for your attention.",
            "Yeah, thanks a lot Eric for this really nice tips and how to proceed in this difficult field so other questions worked this morning, so blue here means that it compiled.",
            "OK, nevertheless, are there questions?",
            "Yes please.",
            "Is the exception that my code compiles straight away?",
            "Do you think programmers should read the standard of the program?",
            "Like sometimes the compiler, right?",
            "They're not clear about some standard, so Easter is not clearly mentioned everything, so it seems like some compiler.",
            "It behaves in the different Wi-Fi in some crucial points.",
            "So do you think every programmer should read the standard so that it the code should be the portable over the?",
            "All compiler.",
            "I have to start reading the standards, but there are worse things than that.",
            "Compilers do have bugs.",
            "If you look at the I think it's client know it's one of the standard seed libraries have used the gamma function.",
            "There is a bug in it so we've had to write her own gamma functions and it's worth it that normal distributions that are different C++ libraries but people forgot to set a standard for which algorithm we should use.",
            "So depending on the library use you're going to get a sequence different sequence of normal numbers, so we had to write our own implementation of that.",
            "They don't think that compilers are as good as the vendors make them out to be.",
            "I would say that there are there is one outstanding compiler in the world and this jesusy it's by an order of magnitude.",
            "The best standards compliant compiler.",
            "After Jesus see we have, I see that it gets reasonably close.",
            "Clang comes a bit down and after those there is a gigantic distance, all the others.",
            "I would never recommend anything, but this is the clanrye Sissy.",
            "Or see that is 4 * A bit different.",
            "So large C++ codes I found to be to work quite well for using open MP and MPI.",
            "But in order to extend it to use accelerators like GPU's I haven't seen it to be as easy as C and Fortran.",
            "Do you have any comments on that?",
            "So there are some very good C plus one of the beautiful thing with C++ is do abstract away something so rather than using the standard library containers such as vectors or so, there is a library from it echoed thrust.",
            "So you basically just switch to thrust.",
            "And then you're going to get equivalent versions of all these vectors, but they are accelerated.",
            "There is also boost has a bunch of acceleration and everything, so one of the nice things with this modernization and you don't have to rewrite your code.",
            "Just use another container instead because the interface is identical, you don't have to rewrite anything.",
            "But at the end of the day, if you want to drill deep down and use code and everything, there is not really any fundamental differences with languages here.",
            "By the time you are in the GPU, you then need to.",
            "You're going to want to control exactly where your data is, and C++ is both good and bad.",
            "In that sense, C++ allows you to completely abstract away everything, and then it's not going to work on GPU's.",
            "So then you have to be disciplined and realized the parts of the code that should talk to the GPU there.",
            "Even there we don't use data libraries there that we use plain arrays so that we can control the data exactly.",
            "So the point with C plus don't use every single feature of the language.",
            "So where the questions are, yes.",
            "I would also say if you're a beginner, one nice thing is you can start with Python.",
            "Start with Python, learn Python well.",
            "As you get better you can port some modules to C++.",
            "Yeah, So what are the main features of C + + 11 that are better than in C++?",
            "I don't know what the differences between the two.",
            "So the main reason was a very long time to C + + O.",
            "Three was the last previous standards of the language has developed tremendously.",
            "I would say this was yet amazingly well function.",
            "Standard library.",
            "All things like random number generators are included atomix if you have multiple threads working.",
            "Sharing data is one of the most complicated things to do because you need to write this in assembly for 20 different architectures with C + + 11 it's part of the language.",
            "The compiler does it for you.",
            "If you want to start a thread on Windows or start a thread on Unix completely different thread libraries on C + + 11, it's part of the language.",
            "So I think it's it understands what the modern it's designed for, what a modern computer looks like.",
            "It knows that a modern computer has multiple cores, for instance.",
            "Yes, I have a question about NJIT.",
            "Have you tried Mercurial, which is based on Python And if you think there are any differences between them and so sorry, what library do you say Mercurio?",
            "So HG, Mercurial is similar to Curiel, no, I haven't tried it myself.",
            "I would say that get test conquered the world and open source.",
            "You can pick any you can pick anything you want.",
            "If your entire team is happy using Mercurial, there's nothing wrong with that.",
            "And new has some other version of the control library that like to.",
            "So you were talking about sort of bugs in the standard and things like that, especially for scientific computing is are there scientists that are actually on the C++ standard, and will some of these things be fixed in C 2017 or 17?",
            "So most of these committees work on people getting involved, so when it comes to us, we have committed bug reports to every single major compiler out there.",
            "So the first thing to do is get involved when you are involved.",
            "Suddenly you get here the vendors coming back to you.",
            "Oh, by the way, we have a new beta of our compiler coming out of this architecture.",
            "Would you like to try it?",
            "So normally I would say that the bugs are not necessarily understand.",
            "This was mostly in the compilers, but yes, there are definitely scientists on there, and I in theory you two could be in 10 years.",
            "If you want to engage in it.",
            "But these communities to work very much involuntary engagements.",
            "Just a couple quick questions.",
            "I'm using Valve green at the moment for memory checking.",
            "Would you suggest I switch to the clang suite of testers and #2?",
            "How should I use?",
            "I should perform automated testing on multiple platforms and compilers for a small project.",
            "First, there is nothing wrong with Valgrind apart from the fact that is very slow.",
            "The other problem with is that it's a big external library that we have installed, and the neat thing with Clang.",
            "If these things are built into the compiler, we have the compiler installed and.",
            "Right now I would say it's about there about the same quality.",
            "It's just that I like not having an external library.",
            "The second question was how to do unit testing.",
            "Lots of different platforms.",
            "The important thing is that find one of these small unit test frameworks such as Google Test or something else.",
            "It doesn't matter what you use, but then start to look into your algorithms and decide.",
            "There's a concept called design for Testability, so before you write the code even decide what is my interface, what is my module, what is the allowed input and for the allowed input, what should the output be?",
            "That is your test.",
            "Then you start the code implementation.",
            "If one architecture does not produce that output and there is a bug that architecture.",
            "So the trick is to reverse it.",
            "Don't ask how you can test the code written for one architecture, but make sure that the code for that architecture produces the output that you have specified.",
            "Have you used our Lambda functions for getting?",
            "See what's on the GPU?",
            "Not on the GPU so much, but we're using a lot with Intel TBB, which is the thread library Lambda function with one of the things that we were a bit worried about because the support for them were bad initially, but nowadays are widely supported everywhere.",
            "It's probably something we wanna start using more.",
            "Thanks, thank you.",
            "Enter."
        ]
    ],
    "summarization": {
        "clip_0": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Thanks, then we are looking forward to the presentation of Eric Lindell on State of the Art H PC software engineering.",
                    "label": 1
                },
                {
                    "sent": "What to do?",
                    "label": 0
                },
                {
                    "sent": "What not to do?",
                    "label": 0
                },
                {
                    "sent": "I'm not sure whether it's a state of the art, but I think there's something important we have to slide so I'll get started right away.",
                    "label": 0
                },
                {
                    "sent": "The whole point of software.",
                    "label": 0
                }
            ]
        },
        "clip_1": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Nearing is really to help you write better code.",
                    "label": 0
                },
                {
                    "sent": "The sad or good.",
                    "label": 0
                },
                {
                    "sent": "Without this, the quality of code that we write in science is pretty hopeless compared to what people do in academia.",
                    "label": 0
                },
                {
                    "sent": "Virtually all my code that I wrote as a student, and I would guess the vast majority of your code.",
                    "label": 0
                },
                {
                    "sent": "If you committed that inside Google or Microsoft and we just rejected, it's not acceptable quality.",
                    "label": 0
                },
                {
                    "sent": "You can certainly have they're going to be since I have a bunch of slides that we might be some slides that I just skipped, but the reason for that is that then you have them and you can look at them and they're available online.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                }
            ]
        },
        "clip_2": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So what I want to try to help you in this talk is first to improve the quality of the software you're writing.",
                    "label": 0
                },
                {
                    "sent": "There are some related aspects here that could potentially help you get a successful career in HBC, either as faculty versus enter an industry.",
                    "label": 1
                },
                {
                    "sent": "Part of this is related to how you engage in the community.",
                    "label": 0
                },
                {
                    "sent": "The problem is that when you just developing your own code, you're in charge, but by the time you ten 2050 developers, you have to compromise and you have to sell some joint standards in the projects, and in particular, I think I'm going to try to be fairly concrete and probably even start with showing you a bunch of tools that the first one some of you have already heard about, but I suspect there are some advanced stuff here that you might not be using.",
                    "label": 0
                },
                {
                    "sent": "So most of the things I'm going to talk about is base.",
                    "label": 0
                }
            ]
        },
        "clip_3": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "On the experience of 20 years of developing our software code gromacs, I'm not going to talk about indie at all here.",
                    "label": 1
                },
                {
                    "sent": "That's completely irrelevant here, but this is a large software code by any standards in science is over 3 million lines of code.",
                    "label": 0
                },
                {
                    "sent": "It's by now developing very rapidly.",
                    "label": 0
                },
                {
                    "sent": "There are a bunch of challenges from this.",
                    "label": 0
                },
                {
                    "sent": "There are some challenges with building a community that I'm going to talk a little bit about, and in particular I'm going to talk.",
                    "label": 0
                },
                {
                    "sent": "How do we gradually transition from old horrible code to modern code?",
                    "label": 0
                },
                {
                    "sent": "That is, while not ideal, maybe definitely not state of the art, but code that is better than it used to be.",
                    "label": 0
                },
                {
                    "sent": "Why do you need this?",
                    "label": 0
                },
                {
                    "sent": "Well, the problem is that.",
                    "label": 0
                },
                {
                    "sent": "Once you start getting these large codes every change you do is going to have side effects, and before you know it the changes are going to more side effects than good effects.",
                    "label": 0
                },
                {
                    "sent": "So if you don't do this, you're going to be stuck in a situation where as you trying to add features your code just gets worse and worse and worse and worse.",
                    "label": 0
                },
                {
                    "sent": "And this comes down.",
                    "label": 0
                }
            ]
        },
        "clip_4": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "The fairly fundamental difference between how we write software in academia versus how real professionals write software.",
                    "label": 0
                },
                {
                    "sent": "Most of you are trained in physics, chemistry, or some other scientific discipline.",
                    "label": 1
                },
                {
                    "sent": "We care.",
                    "label": 0
                },
                {
                    "sent": "We could say we care about the problem, and nastier thing could be to say that we care bout getting the publication out quickly.",
                    "label": 0
                },
                {
                    "sent": "If you're a professor or getting a job.",
                    "label": 0
                },
                {
                    "sent": "From this point of view, if you can add a new code that does something fancy, that's a great asset, you can publish it.",
                    "label": 1
                },
                {
                    "sent": "And this typically leads to most of us writing much more code and reading old code.",
                    "label": 0
                },
                {
                    "sent": "Yeah, that was an old paper.",
                    "label": 1
                },
                {
                    "sent": "I'm focusing on getting the current paperwork.",
                    "label": 0
                },
                {
                    "sent": "If you're a software engineer, though, in particular, if you're in industry, you care more about the code than what it actually does.",
                    "label": 0
                },
                {
                    "sent": "The long term maintenance of the code any new feature while the feature is nice to have, there will have to be somebody supporting this code.",
                    "label": 0
                },
                {
                    "sent": "And the question is, who?",
                    "label": 0
                },
                {
                    "sent": "All these projects it feels so great, right?",
                    "label": 0
                },
                {
                    "sent": "I'm happy to donate 100,000 lines of codes to this product.",
                    "label": 0
                },
                {
                    "sent": "Why don't they accept that?",
                    "label": 0
                },
                {
                    "sent": "Well the question is, will you maintain this next year or are they going to maintain it?",
                    "label": 0
                },
                {
                    "sent": "Somebody will have to maintain it.",
                    "label": 0
                },
                {
                    "sent": "At the end of the day, this means to that good programmers they probably read a factor 100 more code than they write, and that means that's why it's so important documentation and getting code that's high quality.",
                    "label": 1
                },
                {
                    "sent": "When you start doing this, you as I originally felt, you can feel that this is such a waste of time.",
                    "label": 0
                },
                {
                    "sent": "You used to be so amazingly productive and now you're going to spend probably 3 times as much time doing designer writing documentation that you spend coding.",
                    "label": 0
                },
                {
                    "sent": "When you just spend coding, you produce a factor of four more code.",
                    "label": 0
                },
                {
                    "sent": "The only problem is that that's a lie, because this is just like take out a mortgage in the House or something you might not afford a house now, but you get a bank loan, but at some point in time you will have to start paying this, and it's exactly the same thing with code.",
                    "label": 0
                },
                {
                    "sent": "If you don't do software engineering, there are three alternatives other U year from now will have to spend Sunday, spend six months just fixing old code, and then you're going to be completely unproductive or somebody else in the team will have to do it.",
                    "label": 0
                },
                {
                    "sent": "Or you go bankrupt in the sense that your code dies.",
                    "label": 0
                },
                {
                    "sent": "Nobody uses us because it's so horribly buggy that it's useless for anybody else.",
                    "label": 0
                },
                {
                    "sent": "And I can promise you that's not good for your career.",
                    "label": 0
                },
                {
                    "sent": "We",
                    "label": 0
                }
            ]
        },
        "clip_5": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "We were roughly in this situation until 5, six years ago.",
                    "label": 0
                },
                {
                    "sent": "We have so many other products used, a simple source code for poster called CBS.",
                    "label": 1
                },
                {
                    "sent": "I'll get back to that.",
                    "label": 0
                },
                {
                    "sent": "Sorry that the colors are washed out here.",
                    "label": 0
                },
                {
                    "sent": "We used a very simple tools to build our code so I get back to what build chains are too.",
                    "label": 0
                },
                {
                    "sent": "We had we tried to keep track of our bugs, so I think we were not horrible by any definition, but when it comes to testing and making sure that with high quality, that basically meant that for every release a bunch of us sat down and tried to test as many things we had time for for two or three months, and then you had a beta release and you had lots of bug reports coming back.",
                    "label": 0
                },
                {
                    "sent": "And then you tried the end to fix as many of them as you could before releasing.",
                    "label": 0
                }
            ]
        },
        "clip_6": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "That is not how you should do it.",
                    "label": 0
                },
                {
                    "sent": "So what I'm going to start by showing you is a couple of modern development tools that I would strongly advise you to use.",
                    "label": 0
                },
                {
                    "sent": "I would even go further than that.",
                    "label": 0
                },
                {
                    "sent": "I would like all of you to commit to start using at least one of these tools that you have not used before.",
                    "label": 0
                },
                {
                    "sent": "If you're a complete novice, just pick the first tool.",
                    "label": 0
                },
                {
                    "sent": "If you're only using three of them, pick the 4th two.",
                    "label": 0
                }
            ]
        },
        "clip_7": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So the reason for using this is that if we compared to the situation when I gave this talk in Toronto a year ago, what's happened in the last year in our code is that there's been 957 commits.",
                    "label": 1
                },
                {
                    "sent": "4100 files change.",
                    "label": 0
                },
                {
                    "sent": "There are almost 400,000 lines of code that had changed.",
                    "label": 0
                },
                {
                    "sent": "If this program crashes on you the first time you do, how do you start debugging it?",
                    "label": 1
                },
                {
                    "sent": "400,000 lines of code have changed.",
                    "label": 0
                },
                {
                    "sent": "It would take you a month to find that bug if you just had you had the version from last year and you have the version from this year.",
                    "label": 0
                },
                {
                    "sent": "And you have all seen this on a much smaller scale, maybe even some of those.",
                    "label": 1
                },
                {
                    "sent": "Some of you that have been sitting in doing this challenge right yesterday night or something.",
                    "label": 0
                },
                {
                    "sent": "You had this working 30 minutes ago and now it's not working and you're not quite sure why you've changed lots of things, but you're not sure what change made it work worse.",
                    "label": 0
                },
                {
                    "sent": "And the first thing you need to do there is.",
                    "label": 0
                }
            ]
        },
        "clip_8": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Is a source code revision control system.",
                    "label": 0
                },
                {
                    "sent": "Along time ago the only tools available.",
                    "label": 0
                }
            ]
        },
        "clip_9": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "It was called CVS or CBM.",
                    "label": 0
                },
                {
                    "sent": "Don't even call 1 called.",
                    "label": 0
                },
                {
                    "sent": "RCS.",
                    "label": 0
                },
                {
                    "sent": "The point is not the name of the tool, but how we are.",
                    "label": 0
                },
                {
                    "sent": "Traditionally.",
                    "label": 0
                },
                {
                    "sent": "You create some sort of central repository and then each developer checks out this report centaurian when I want to push a change back.",
                    "label": 0
                },
                {
                    "sent": "If somebody else has changed this, it won't allow me to push my change back, but still this creates a central cave for your code and it's very easy to see what has changed.",
                    "label": 0
                },
                {
                    "sent": "There's going to be a line describing every single change.",
                    "label": 0
                },
                {
                    "sent": "There is a much more powerful tool that has conquered the word the last 10 years due to Linux and it's called.",
                    "label": 0
                }
            ]
        },
        "clip_10": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Egypt.",
                    "label": 0
                },
                {
                    "sent": "Get us a very complicated tool, but the amazing thing was get is that there is really not any central repository anymore, so get us away if I have a piece of code I just I can pull in a piece of code from Herman or Scott or anybody else they can pull for me.",
                    "label": 0
                },
                {
                    "sent": "We don't have to synchronize all the time, it's just you have some code I want.",
                    "label": 0
                },
                {
                    "sent": "I have some code that I want to push to repository and it's a beautiful way to keeping track of this so called diff sets between all these developers and you're always going to have a strict definition.",
                    "label": 0
                },
                {
                    "sent": "What changed between version one and two.",
                    "label": 0
                },
                {
                    "sent": "And what are the differences between all these developers?",
                    "label": 0
                },
                {
                    "sent": "There are a.",
                    "label": 0
                }
            ]
        },
        "clip_11": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Bunch of features you can use this code.",
                    "label": 0
                },
                {
                    "sent": "I'm not going to go into details or interests of time, but the point here is that you can use these for free.",
                    "label": 0
                },
                {
                    "sent": "You do not have to set these up on your server.",
                    "label": 0
                },
                {
                    "sent": "The only reason to even think of setting up a server yourself.",
                    "label": 0
                },
                {
                    "sent": "This if you have 50 developers or something.",
                    "label": 0
                },
                {
                    "sent": "Go to GitHub or at last him.",
                    "label": 0
                },
                {
                    "sent": "Get up is free for everybody at last, and is free if you're an academic for both of these stores.",
                    "label": 0
                },
                {
                    "sent": "Some limitations, the number of users, but there too if you just upload a Mail showing that you're in academia, they're going to give you a professional account for free.",
                    "label": 0
                },
                {
                    "sent": "Will take 5 minutes to sign up and then you have a professional backed up server and everything.",
                    "label": 0
                }
            ]
        },
        "clip_12": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Git has tons of features that I young won't go into all the details for, but the most important thing is that you can track changes and this has some also ways to bisect, so you basically doing a binary tree difference so those 4000 different patches, or something that would tell me take complete 10 compiles, then I would know exactly what change was it that created a bug, and then I'm down to 100 lines of code.",
                    "label": 0
                },
                {
                    "sent": "In 15 minutes.",
                    "label": 0
                },
                {
                    "sent": "That's pretty good for four 100,000 lines of change code.",
                    "label": 0
                },
                {
                    "sent": "The problem with that is that get this a bit special.",
                    "label": 0
                },
                {
                    "sent": "There are some very long complicated commands that even I don't remember.",
                    "label": 0
                },
                {
                    "sent": "So what everybody does, it's not quite as bad as it is in the picture there, but with git when you want to do, you can do absolutely anything yet, but to do anything you frequently have to go to Google and find a very long command to type and then paste that in.",
                    "label": 0
                },
                {
                    "sent": "It usually works.",
                    "label": 0
                }
            ]
        },
        "clip_13": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "What you should think about though, two things first.",
                    "label": 0
                },
                {
                    "sent": "How many of you are using it today?",
                    "label": 0
                },
                {
                    "sent": "Oh awesome, I love this.",
                    "label": 0
                },
                {
                    "sent": "Those of you don't.",
                    "label": 0
                },
                {
                    "sent": "I guess you're not using it because you think your code is small.",
                    "label": 0
                },
                {
                    "sent": "The point is, start using it when your code is small, because when you just, it's trivial to use for your code this morning when it's large that it gets complicated.",
                    "label": 0
                },
                {
                    "sent": "So start by doing very, very tiny commits.",
                    "label": 0
                },
                {
                    "sent": "That makes it easy to find the bargain, because by the time you have bugs, this by section will find.",
                    "label": 0
                },
                {
                    "sent": "This will isolate the bug to one commit.",
                    "label": 0
                },
                {
                    "sent": "If it's 10 lines per commit, you already found the bug.",
                    "label": 0
                },
                {
                    "sent": "The other thing.",
                    "label": 0
                }
            ]
        },
        "clip_14": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "I want to bring up is whether your code is portable.",
                    "label": 0
                },
                {
                    "sent": "Most of us think that we're writing in a standard language such as Fortran, C or C++.",
                    "label": 0
                },
                {
                    "sent": "The problem is that there is a difference between portable with a lowercase P and then uppercase P. Does your code compile on?",
                    "label": 1
                },
                {
                    "sent": "Ask yourself this windows with Microsoft Visual C compilers.",
                    "label": 0
                },
                {
                    "sent": "Pgi pathscale the blue Jean compilers.",
                    "label": 0
                },
                {
                    "sent": "The clang compilers on blue Jean.",
                    "label": 0
                },
                {
                    "sent": "And the K computer that Fujitsu compilers arm ARM 64.",
                    "label": 1
                },
                {
                    "sent": "PowerPC, that's pretty much.",
                    "label": 0
                },
                {
                    "sent": "Power Seven is pretty much the only big endian platform you have.",
                    "label": 0
                },
                {
                    "sent": "When I was a student, there were half the platforms out there were big endian and the other half were little endian.",
                    "label": 0
                },
                {
                    "sent": "But of course you can introduce a check for this.",
                    "label": 0
                },
                {
                    "sent": "You can check if the architecture is called_PPC and then assume that it's big ended.",
                    "label": 0
                },
                {
                    "sent": "That worked really well until roughly a year ago when IBM released Little Endian Openpower so suddenly PowerPC can be either big endian or little endian.",
                    "label": 0
                },
                {
                    "sent": "That's virtually guaranteed to break your code if you're doing any manipulation of bytes.",
                    "label": 0
                },
                {
                    "sent": "So the problem is that you're going to need to check this.",
                    "label": 0
                },
                {
                    "sent": "You can't assume that PowerPC, for instance, has a particular endianness.",
                    "label": 0
                },
                {
                    "sent": "So the only way to really oleti.",
                    "label": 0
                },
                {
                    "sent": "So you're going to need to when you start building your tools, you would like to have some sort of program that checks this at the beginning.",
                    "label": 0
                },
                {
                    "sent": "And this is usually what we call these so called.",
                    "label": 0
                }
            ]
        },
        "clip_15": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Oil change most users start to by just issuing your compiler commands automatically.",
                    "label": 1
                },
                {
                    "sent": "Then I guess you would start use writing some sort of make files and then you edit makefiles and eventually 20 different makefiles, one for each architecture and the idea with this build chances to completely automate the generation of makefiles.",
                    "label": 1
                },
                {
                    "sent": "So at some point you're running a if you've never installed the Unix tool, you probably run this dot slash configure right?",
                    "label": 0
                },
                {
                    "sent": "And that's a script that tries to detect lots of things.",
                    "label": 0
                },
                {
                    "sent": "Then it generates the make files for you, and then you just issue the make command.",
                    "label": 0
                },
                {
                    "sent": "Those new out the tools are 20 years old and it sadly shows.",
                    "label": 0
                }
            ]
        },
        "clip_16": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So the things that you would like to do in configuration is to ask all these type of questions and check it on the system where you're building.",
                    "label": 0
                },
                {
                    "sent": "And here I have a strong recommend.",
                    "label": 0
                },
                {
                    "sent": "Very strong recommendation for you and this is getting stronger every year they build tool to use today is called.",
                    "label": 0
                }
            ]
        },
        "clip_17": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Teammate Cross platform 8 this works on every single Unix architecture and it works on Windows and it works on Macs and you generate build files if you want to build files for Xcode it will do it for you.",
                    "label": 0
                },
                {
                    "sent": "I will not have time to go into the details there, but the point is that the.",
                    "label": 0
                }
            ]
        },
        "clip_18": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Probably there way more than 100 tests now there probably 200 CMake tests built in for all these different features.",
                    "label": 0
                },
                {
                    "sent": "But then the point is that large projects like ours, we end up writing our own tests, so I had to write some tests to detect some bugs in large file support on Linux.",
                    "label": 0
                },
                {
                    "sent": "And then I actually had a bug in my own test, so I started to search for C, make a large file support about him a couple of months ago.",
                    "label": 0
                },
                {
                    "sent": "And then I realized, well, there was nobody else that had fixed it, but there.",
                    "label": 0
                },
                {
                    "sent": "By that time there were like 25 other projects using the file I had written.",
                    "label": 0
                },
                {
                    "sent": "Which is of course great fun to it's to me as a scientist.",
                    "label": 0
                },
                {
                    "sent": "That's the greatest appreciation I can have that people appreciate what I do and they use it.",
                    "label": 0
                },
                {
                    "sent": "But of course, that those meant that I had introduced that bug in all of their programs.",
                    "label": 0
                },
                {
                    "sent": "The other party would like to do with these things.",
                    "label": 0
                }
            ]
        },
        "clip_19": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "That you can do something called out of source builds.",
                    "label": 0
                },
                {
                    "sent": "So if I have again, Gromacs is a gigantic source code and I can certainly build things in my source code tree.",
                    "label": 0
                },
                {
                    "sent": "Lee only problem is that there is one small change I want to do, and then if I'm not going to build for five different architectures I had to do a make clean and then make again and it takes a couple of minutes.",
                    "label": 0
                },
                {
                    "sent": "So what you can do then again both how to make and see make supports this natively, is that parallel to the source code.",
                    "label": 0
                },
                {
                    "sent": "You have different directories an in these directories you just have the built files.",
                    "label": 0
                },
                {
                    "sent": "The binaries in the libraries.",
                    "label": 0
                },
                {
                    "sent": "So if I now go in and we once more changes in the source code, then I just CD to each of these directors and builds and might take 3 seconds to build this 3 million lines of source code because it only rebuilds the things that have changed.",
                    "label": 1
                },
                {
                    "sent": "And.",
                    "label": 0
                },
                {
                    "sent": "Since they live in different directories, I don't have to erase one to build the other.",
                    "label": 0
                },
                {
                    "sent": "The third part tool is that.",
                    "label": 0
                }
            ]
        },
        "clip_20": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Gonna live with your code for years and in particular remember if you're going to use the reading code Affecter 100 more than you write it.",
                    "label": 1
                },
                {
                    "sent": "This has to be properly documented.",
                    "label": 0
                },
                {
                    "sent": "There are only two types of documentation documentation that stays in.",
                    "label": 0
                }
            ]
        },
        "clip_21": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Source code and documentation that is not up to date.",
                    "label": 0
                },
                {
                    "sent": "The documentation has to be in the source code.",
                    "label": 1
                },
                {
                    "sent": "There is now a universal tool that does this.",
                    "label": 0
                },
                {
                    "sent": "Doxygen that the next ride you write your documentation in your comments for each routine, and then doxygen will extract that.",
                    "label": 0
                },
                {
                    "sent": "I will show you that isn't demo in one minute.",
                    "label": 0
                }
            ]
        },
        "clip_22": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "When it comes to documents to code documentation, the important thing is that we all make this mistake that if we have I = I + 1 and then we make a comment increment I with one you know most programmers don't need the comment to understand that you're incrementing I with one.",
                    "label": 0
                },
                {
                    "sent": "But you have to explain why you need to increment line with one here, so get used to writing comments that explain the difficult parts of the logic, not the easy part.",
                    "label": 1
                },
                {
                    "sent": "The easy part should be self evident from your code.",
                    "label": 0
                },
                {
                    "sent": "I'll show you a demo of this in one minute.",
                    "label": 0
                }
            ]
        },
        "clip_23": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "But there are also a bunch of things that are not necessarily related to direct source files.",
                    "label": 0
                },
                {
                    "sent": "For is.",
                    "label": 0
                },
                {
                    "sent": "How are you going to install the package?",
                    "label": 0
                },
                {
                    "sent": "What are the supported compilers for this package?",
                    "label": 0
                },
                {
                    "sent": "This is some new stuff actually that we didn't have last year, but there is a great tool called Sphinx which is used to build all the Python documentation and incidentally old every single tool I describe is free.",
                    "label": 0
                },
                {
                    "sent": "So we use things to write a very, very simple type of inline documentation that we then extract automatically at build time.",
                    "label": 0
                },
                {
                    "sent": "So all these tools in CMake I just run make documentation and I will show you one or two examples of that.",
                    "label": 0
                },
                {
                    "sent": "So this is an example of a source file.",
                    "label": 0
                },
                {
                    "sent": "You don't need to see the exact details here, but.",
                    "label": 0
                },
                {
                    "sent": "At all the green stuff here is documentation.",
                    "label": 0
                },
                {
                    "sent": "And would you have to get used to after wireless writing at least as much documentation as you write codes, this takes time.",
                    "label": 0
                },
                {
                    "sent": "This takes a lot of time.",
                    "label": 0
                },
                {
                    "sent": "The point is that it saves more time in the end.",
                    "label": 0
                },
                {
                    "sent": "You don't think that is going to save you time, but the point is that this takes the most boring thing you're doing debugging because suddenly when you have bugs, you're going to find them in one minute instead of a week.",
                    "label": 0
                },
                {
                    "sent": "So trust me, every hour you spend on writing, documentation is an hour that probably pays back to factor 5.",
                    "label": 0
                },
                {
                    "sent": "So what you do for a typical routine as such have a brief explanation and then you have an explanation for each parameter here.",
                    "label": 0
                },
                {
                    "sent": "This is well documented oxygen and then in this case it's C++ code, so we explained that it can throw an exception under some circumstances.",
                    "label": 0
                },
                {
                    "sent": "What that then results in is.",
                    "label": 0
                },
                {
                    "sent": "Let's see if we can have the.",
                    "label": 0
                },
                {
                    "sent": "With that, then results in when you just run doxygen is that you get a beautiful definition of all the modules we have.",
                    "label": 0
                },
                {
                    "sent": "We can look at the assembly intrinsics, doesn't matter what the code.",
                    "label": 0
                },
                {
                    "sent": "Also, every single defining the code is explained.",
                    "label": 0
                },
                {
                    "sent": "I can look at a routine here.",
                    "label": 0
                },
                {
                    "sent": "I can double click on that routine and then I will get detailed documentation of all the parameters.",
                    "label": 0
                },
                {
                    "sent": "What are the requirements of memory alignment and everything?",
                    "label": 0
                },
                {
                    "sent": "Now this takes time to write, but when you are sitting in trying to understand somebody else module, this is paradise.",
                    "label": 0
                },
                {
                    "sent": "Because you don't have to understand all the details of the code, it's Esther.",
                    "label": 0
                },
                {
                    "sent": "Unfortunately, I had a bug in the graphics library on my Mac here, but otherwise doxygen will even create You Beautiful images to show how different modules depend on each other and I'll get back to that in a second.",
                    "label": 0
                },
                {
                    "sent": "The other thing you do with this very simple Sphinx documentation is that.",
                    "label": 0
                },
                {
                    "sent": "Let's see.",
                    "label": 0
                },
                {
                    "sent": "So here we get Sphinx.",
                    "label": 0
                },
                {
                    "sent": "All these things are really simple stuff written this.",
                    "label": 0
                },
                {
                    "sent": "This looks like it's a lot of work, but the point is that all the formatting and everything here is done automatically.",
                    "label": 0
                },
                {
                    "sent": "Just this is for Python, so you just all these very.",
                    "label": 0
                },
                {
                    "sent": "This basically right if you have adult it's automatically gonna turn it into lists.",
                    "label": 0
                },
                {
                    "sent": "This saves so much time because for us is also means we don't have to support users, we just tell them go read the documentation.",
                    "label": 0
                },
                {
                    "sent": "And it the voice is huge amount of bugs.",
                    "label": 0
                }
            ]
        },
        "clip_24": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "The next thing is that.",
                    "label": 0
                },
                {
                    "sent": "This is not necessarily a tool, but when it comes to finding and in particular preventing bugs, preventing bugs as much more than finding them, there are a couple of systematic things you can use.",
                    "label": 0
                },
                {
                    "sent": "The most important thing is actually what those of you have taken a programming class, what they teach you in chapter one of the book you know that chapter of the programming book that we all skipped because we don't understand the point of it.",
                    "label": 0
                },
                {
                    "sent": "And that has to do with boring things like.",
                    "label": 0
                }
            ]
        },
        "clip_25": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Modularisation having modules to clear separate tasks.",
                    "label": 0
                },
                {
                    "sent": "Having a well designed interface.",
                    "label": 0
                },
                {
                    "sent": "Your code making sure that you have unit tests in particular.",
                    "label": 0
                },
                {
                    "sent": "You can do this in any language, but I would argue that.",
                    "label": 0
                },
                {
                    "sent": "By far the easiest way to accomplish this is to move to language that supports it, such as C++.",
                    "label": 1
                },
                {
                    "sent": "C++ does not have a great reputation in HPC, but today I would say C++ and in particular C + + 11 is likely the best HPC language in the world.",
                    "label": 0
                },
                {
                    "sent": "Now the price for that is that you will have to give up some old Fortran libraries that you depend on, but I think we've started to see that shift 10 years ago 14 was completely dominant in HPC, it's no longer anymore.",
                    "label": 0
                }
            ]
        },
        "clip_26": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "I'm not gonna go into much into details with language.",
                    "label": 0
                },
                {
                    "sent": "Is the whole point with all these, it's a bunch of funny thing.",
                    "label": 0
                },
                {
                    "sent": "We have a bunch of these sick quotes in gromacs.",
                    "label": 0
                },
                {
                    "sent": "The whole point is that if you write bad code, you can do it in any language.",
                    "label": 1
                },
                {
                    "sent": "You can also write good code in any language, but some modern languages have more features that can support you in writing good code.",
                    "label": 0
                },
                {
                    "sent": "And the main advantage of C++ is that.",
                    "label": 0
                }
            ]
        },
        "clip_27": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Test first, it has a lot of modern language things like threads isn't important.",
                    "label": 0
                },
                {
                    "sent": "Threads is a natural important part of the C++ language.",
                    "label": 1
                },
                {
                    "sent": "You have an extremely powerful library with things like hashes, vectors and everything so that you don't have to recreate them yourself all the time, and that helps you get that helps you avoid bugs.",
                    "label": 0
                },
                {
                    "sent": "What I like with C++ is that it's by my definition.",
                    "label": 0
                },
                {
                    "sent": "It's a very low level language.",
                    "label": 0
                },
                {
                    "sent": "I control exactly what the data does and where it lives.",
                    "label": 0
                },
                {
                    "sent": "The bad thing with C++ it's it's a gigantic language.",
                    "label": 0
                },
                {
                    "sent": "It's a really complex language.",
                    "label": 0
                },
                {
                    "sent": "And that also means that it's really easy to do bad things in your code with it.",
                    "label": 0
                },
                {
                    "sent": "So you need to be by far the most important thing with C plus passes, so you need to be disciplined.",
                    "label": 0
                },
                {
                    "sent": "But if you are disciplined and in particular your colleagues are good at C++, this can makes you incredibly productive.",
                    "label": 0
                }
            ]
        },
        "clip_28": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And just to kill an old myth, people in general think that Fortran is foster the C++.",
                    "label": 0
                },
                {
                    "sent": "This is an example.",
                    "label": 0
                },
                {
                    "sent": "It's just a simple code that is executing something and then for whatever reason you have a number of choices here at runtime, both in C and Fortran.",
                    "label": 0
                },
                {
                    "sent": "If these choices are parameter to your routine, they can't be evaluated at compile time, but so they have to compile all this code and then you're going to have these conditionals in the code.",
                    "label": 0
                },
                {
                    "sent": "Works acute it.",
                    "label": 0
                },
                {
                    "sent": "In C++ we can turn this into a concept called templates, which means that the compiler will evaluate this at compile time and then you have no conditions whatsoever.",
                    "label": 0
                },
                {
                    "sent": "And if the code pieces you're doing here are small, this can be effective 10 faster.",
                    "label": 0
                },
                {
                    "sent": "So we we don't have a single routine in the code that has become slower with C++, but we have lots of them very much faster.",
                    "label": 0
                },
                {
                    "sent": "The other thing that can happen in any.",
                    "label": 0
                }
            ]
        },
        "clip_29": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Code that by that might be clear in C++ is that you get these dependency nightmares and dependencies just in one piece of code needs another piece of code and there are so many codes including hours before that, every file included every single header file in the project.",
                    "label": 0
                },
                {
                    "sent": "And if something works, the only thing you know is that something doesn't work.",
                    "label": 0
                },
                {
                    "sent": "It's a bug somewhere in the entire project.",
                    "label": 0
                },
                {
                    "sent": "The beautiful thing with clean modularisation.",
                    "label": 0
                }
            ]
        },
        "clip_30": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Is that your very clear dependencies?",
                    "label": 0
                },
                {
                    "sent": "If you have, if you if every if these dependences only go one way and you know there is a failure here, the failure can only be there, there, there or below that.",
                    "label": 0
                },
                {
                    "sent": "It can't be higher up.",
                    "label": 0
                },
                {
                    "sent": "And if you also have tests for these blocks, you know that that block that book in that book is fine.",
                    "label": 0
                },
                {
                    "sent": "We know that the failure is here before we even start to look at the code.",
                    "label": 0
                },
                {
                    "sent": "And the way to do that is with something called June.",
                    "label": 0
                }
            ]
        },
        "clip_31": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Testing unit testing is most of us use regression tests or something and regression tests just means that your code has the same bugs that it had last year.",
                    "label": 0
                },
                {
                    "sent": "Unit testing is the opposite, so you're testing something very low level.",
                    "label": 1
                },
                {
                    "sent": "If you have a random number generator, we know what the original author of this random number generator said that this is the reference that I wish abuse for particular random seat, and then we make sure that on every single architecture or random number generator create reproduces exactly that data so that we know that this piece of code is perfect.",
                    "label": 0
                },
                {
                    "sent": "And the.",
                    "label": 0
                }
            ]
        },
        "clip_32": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Point is that you should test pretty much everything.",
                    "label": 1
                },
                {
                    "sent": "This is really difficult when you first start with it, but the key is to have small models.",
                    "label": 0
                },
                {
                    "sent": "If a small module is just a the roll random number generator, you can test that.",
                    "label": 0
                },
                {
                    "sent": "But if this does random number generation velocitus and 50 other things, you can test it.",
                    "label": 0
                },
                {
                    "sent": "When you first start writing this, you're going to think that it's such an overkill to test everything, but trust me, every time we find a new bug detected by this, we are flabbergasted because we had no idea that such a basic thing could be bad.",
                    "label": 0
                },
                {
                    "sent": "We had another bag bug in IBM compilers the other day, so there are things go bad.",
                    "label": 0
                },
                {
                    "sent": "It's nobody's fault, but it's just bad things happen if you test everything, you will find out instantly.",
                    "label": 0
                },
                {
                    "sent": "So we tell our users the second they built the code, run, make check to.",
                    "label": 0
                },
                {
                    "sent": "I will run all the tests for you.",
                    "label": 0
                },
                {
                    "sent": "That in turn provides for a pretty sexy functionality.",
                    "label": 0
                }
            ]
        },
        "clip_33": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Normally when it comes to adding codes to large projects and everything, typically we only allow the core developers and people to write.",
                    "label": 0
                },
                {
                    "sent": "The only problem is that some of these core developers occasionally make mistakes.",
                    "label": 0
                },
                {
                    "sent": "I've contributed a ton of bugs to my code.",
                    "label": 0
                },
                {
                    "sent": "It happens when you add also code.",
                    "label": 0
                },
                {
                    "sent": "So what we moved over to a physical Garrett.",
                    "label": 0
                }
            ]
        },
        "clip_34": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Which is formal code review, which is something that industry also uses.",
                    "label": 1
                },
                {
                    "sent": "So that I can't commit to my own product anymore if I want to commit code to my own product, I pushed the path to a cervical Garrett.",
                    "label": 0
                },
                {
                    "sent": "And.",
                    "label": 0
                },
                {
                    "sent": "Then other developers have to look at this.",
                    "label": 0
                },
                {
                    "sent": "I'll show you a quick demo of that.",
                    "label": 0
                },
                {
                    "sent": "So what this server looks like is something like this.",
                    "label": 0
                },
                {
                    "sent": "So here you have the different patches committed many of them today and then I can click at the Patch here and then who that is uploaded by and in this and what's happened with it and eventually we're going to vote, but I can't vote without having looked at the code.",
                    "label": 0
                },
                {
                    "sent": "So the point here is that every single developer will write something.",
                    "label": 0
                },
                {
                    "sent": "We check that code.",
                    "label": 0
                },
                {
                    "sent": "We have at least two, so if not three parasites repair eyes that have looked at the code before it enters the code.",
                    "label": 0
                },
                {
                    "sent": "This slows things down.",
                    "label": 0
                },
                {
                    "sent": "It's take time, but it provides much higher quality code.",
                    "label": 0
                },
                {
                    "sent": "Even in these small patches you have no idea how many trivial errors we find.",
                    "label": 0
                },
                {
                    "sent": "And that in turns means we can actually allow anybody to propose these changes in garrets, because nothing goes in without at least two more pairs of eyes.",
                    "label": 1
                },
                {
                    "sent": "Have looked at them.",
                    "label": 0
                }
            ]
        },
        "clip_35": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "I'm going to skip the exact details there in the interest of time, but since this is public you can have a look at this in gromacs too.",
                    "label": 0
                }
            ]
        },
        "clip_36": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "The other part here is that.",
                    "label": 0
                },
                {
                    "sent": "Even when we have formal code review, bad things still happen.",
                    "label": 0
                },
                {
                    "sent": "So how do I make sure that we or I don't make things, and that's a concept called continuous?",
                    "label": 1
                }
            ]
        },
        "clip_37": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Creation also heavily used in industry.",
                    "label": 0
                },
                {
                    "sent": "There is a free tool called Jenkins that does this.",
                    "label": 0
                },
                {
                    "sent": "And rather than having a slide about it, I think I will show you that too.",
                    "label": 0
                },
                {
                    "sent": "So what happens with this code is that when Mark uploaded this.",
                    "label": 0
                },
                {
                    "sent": "The first thing that it does is that you get some message here that this is automatically built.",
                    "label": 0
                },
                {
                    "sent": "We check that the documentation is correct, we check for CPP check and there's some other basic things.",
                    "label": 0
                },
                {
                    "sent": "But then the whole point is that we gradually I'm not going to go through this in detail, but the one we have a compiled form.",
                    "label": 0
                },
                {
                    "sent": "So this pushes out the job to some 20 different nodes, 3040 different configurations.",
                    "label": 0
                },
                {
                    "sent": "We build this and if there are any errors we won't allow the debug the path to be submitted until these errors have been fixed.",
                    "label": 0
                },
                {
                    "sent": "So I can freeze this check whether there was any problem building my latest code on ARM 64.",
                    "label": 0
                },
                {
                    "sent": "If you think that this is going to be complicated for you to set up and everything you can use this in the cloud, it will cost you piaya couple of dollars per month.",
                    "label": 0
                }
            ]
        },
        "clip_38": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So there are bunch of things you can test here and I'm not going to go into details there to save time.",
                    "label": 0
                },
                {
                    "sent": "You probably think that it's stupid to Add all this.",
                    "label": 0
                },
                {
                    "sent": "The neat thing with this that in particular address sanitizer, memory sanitizer and thread sanitizer.",
                    "label": 0
                },
                {
                    "sent": "These are low level code blocks that checks that you're not making memory errors and that do not making errors with two different threads.",
                    "label": 0
                },
                {
                    "sent": "Try to read or write the same memory area.",
                    "label": 0
                },
                {
                    "sent": "Those are some of the most horrible bugs we have.",
                    "label": 0
                },
                {
                    "sent": "And the nice thing because we check everything, we pretty much we don't have memory errors anymore in other releases.",
                    "label": 0
                },
                {
                    "sent": "It still happens now and then for old code, but memory those if you have done memory debugging, you probably know that that's the most horrible thing you can imagine, and they can take an infinite amount of time.",
                    "label": 0
                },
                {
                    "sent": "We don't have that anymore.",
                    "label": 0
                },
                {
                    "sent": "That person is probably enough to get you interested.",
                    "label": 0
                }
            ]
        },
        "clip_39": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Using some of these tools.",
                    "label": 0
                },
                {
                    "sent": "We also connect this directly to a.",
                    "label": 0
                }
            ]
        },
        "clip_40": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Called Red Mine where we track all the bugs and everything and we also have longer term discussions about what should be developed.",
                    "label": 0
                },
                {
                    "sent": "That is not rocket science, but the beautiful thing is that these tools talk to each other, so the 2nd that we have, the 2nd we have a new commit that addresses bugs, say 959 here there will be an entry in bug 959 showing you that yes and there is now a new bug uploaded that fixed this bug and then it will automatically be closed and everything so that everything is cross reference here with a beautiful way.",
                    "label": 0
                },
                {
                    "sent": "If there was about three years ago, I can see exactly which commit fixed that.",
                    "label": 0
                },
                {
                    "sent": "Or if there is a very long bug and I don't quite understand why, say, Herman added that I can see, well, this is the discussion why we had to introduce the fix.",
                    "label": 0
                },
                {
                    "sent": "So I have a couple of minutes left here and what I'm going to do in the lawsuit needs to talk a little bit about the Community building so all these tools are very powerful.",
                    "label": 0
                },
                {
                    "sent": "In particular when there are more Q involved in a project, I would I would strongly argue that you should using these even if you're just developing things inside your lab.",
                    "label": 0
                },
                {
                    "sent": "The real power here starts to appear when you're in different time zones.",
                    "label": 0
                },
                {
                    "sent": "When you only see each other twice a year or something, or when you we've had some developers here that I didn't see for five years because they were in Australia before he moved to us later.",
                    "label": 0
                },
                {
                    "sent": "The point here is that these communities are powerful and they open source communities are some of the most powerful entities in the software industry.",
                    "label": 0
                },
                {
                    "sent": "Linux is just one example, but if you look at both me and we have to mirror somewhere to our codes formally.",
                    "label": 0
                },
                {
                    "sent": "Don't provide any support or warranty.",
                    "label": 0
                },
                {
                    "sent": "If you post things on the mailing list of these codes.",
                    "label": 0
                },
                {
                    "sent": "You can occasionally get an answer within 30 seconds and the worst case it might probably take you 20 minutes or something.",
                    "label": 0
                },
                {
                    "sent": "There's an insanely quick response rate and you can imagine when I'm here, having fun with you this week, I don't have time to engage in the product, so sending things directly to me that's not going to work.",
                    "label": 0
                },
                {
                    "sent": "But suddenly you have lots of people and Fargo that go far beyond the core developers that contributed these products.",
                    "label": 0
                },
                {
                    "sent": "So if you want to get involved, the first thing I would do is start to become an active user on these mailing lists long before you start committing code or anything.",
                    "label": 0
                },
                {
                    "sent": "People will appreciate that and help it.",
                    "label": 0
                },
                {
                    "sent": "But then you will gradually get more involved in these products and that leads to some other things in particular licenses I would.",
                    "label": 0
                }
            ]
        },
        "clip_41": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "That we're seeing a rapid growth of open source licensing.",
                    "label": 0
                },
                {
                    "sent": "There are some people that are very religious about these.",
                    "label": 0
                },
                {
                    "sent": "I'm not what you need to learn that all these licenses are tools.",
                    "label": 1
                },
                {
                    "sent": "You can use them for good or for bad, but the most important thing is an academic or in industry.",
                    "label": 0
                },
                {
                    "sent": "You need to decide what do you want to achieve with your code.",
                    "label": 1
                },
                {
                    "sent": "So I'm not that interested in direct commercialization myself, but on the other hand, these open lies is are great because it can give you hundreds or even thousands of users.",
                    "label": 0
                },
                {
                    "sent": "Now by the time you have a large code that's less important, but when you're starting out, getting people to use your code is pretty important.",
                    "label": 0
                },
                {
                    "sent": "I just had two students who came up with a new way to GPU accelerate some image processing in Crimea and rather to write their own code.",
                    "label": 0
                },
                {
                    "sent": "They decided to contribute this to one of the largest open source code in the world, and I realized last week that were in China and presented this, and there are now hundreds if not thousands of people that want to use their code.",
                    "label": 0
                },
                {
                    "sent": "So 24 hours.",
                    "label": 0
                },
                {
                    "sent": "This made their careers.",
                    "label": 0
                },
                {
                    "sent": "They're going to integrate postdocs because everybody suddenly know who they are.",
                    "label": 0
                },
                {
                    "sent": "The point with these licenses is that in particular, the traditional GPL licenses is there basically made to intentionally make it hard to use in industry to make money.",
                    "label": 0
                },
                {
                    "sent": "There is nothing wrong with that people.",
                    "label": 0
                },
                {
                    "sent": "Many people in the open source feels strongly that the code needs to be stay open at any cost.",
                    "label": 0
                },
                {
                    "sent": "There are other licenses that are still open source, but allow the code to either be used or at least be linked into commercial applications.",
                    "label": 0
                },
                {
                    "sent": "There's slightly more business friendly.",
                    "label": 0
                },
                {
                    "sent": "the European Union likes PSTN L GPL, but not strict GPL.",
                    "label": 0
                },
                {
                    "sent": "Read up on these licenses and pick one, but decide not based on feeling but what you want to do with your code.",
                    "label": 0
                },
                {
                    "sent": "The other.",
                    "label": 0
                }
            ]
        },
        "clip_42": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "That you should be aware of these communities and cultures.",
                    "label": 0
                },
                {
                    "sent": "At first I would recommend you all to do it.",
                    "label": 0
                },
                {
                    "sent": "There's a great way to give you a scientific career, and it's a great way to give a career early on.",
                    "label": 1
                },
                {
                    "sent": "The second part is that learning to code well is like learning to swim.",
                    "label": 0
                },
                {
                    "sent": "You can't do it without getting in the water.",
                    "label": 0
                },
                {
                    "sent": "You can't learn coding by reading 50 C++ books.",
                    "label": 0
                },
                {
                    "sent": "Trust me, I tried that.",
                    "label": 0
                },
                {
                    "sent": "The only part when I would say it wasn't really until my first or second year recipes.",
                    "label": 0
                },
                {
                    "sent": "These students that I became really serious about coding.",
                    "label": 0
                },
                {
                    "sent": "I was not an outstanding coding coder before them.",
                    "label": 0
                },
                {
                    "sent": "By the end of my PhD I think I was a decent coder and by now I would say that I'm starting to be pretty good coder.",
                    "label": 0
                },
                {
                    "sent": "But the only reason why I'm nowadays are reasonably good C++ code is that I had an outstanding post Doc who is a guru is C++.",
                    "label": 0
                },
                {
                    "sent": "And then you simply have to learn and learn from him.",
                    "label": 0
                },
                {
                    "sent": "I'm a professor and he's supposed to, but that's fine.",
                    "label": 1
                },
                {
                    "sent": "Open software, open source software in general, it's a. I think there's going to be more and more important than and.",
                    "label": 0
                },
                {
                    "sent": "Again, this is.",
                    "label": 0
                },
                {
                    "sent": "This is nothing to do with political reasons, but the problem with science is that science ultimately builds on the fact that we need to be able to reproduce results right.",
                    "label": 0
                },
                {
                    "sent": "And in the old days when the software was 100 lines of code, it was trivial.",
                    "label": 0
                },
                {
                    "sent": "Just described that you did an ANOVA, statistical analysis or something.",
                    "label": 0
                },
                {
                    "sent": "But in these cases where we start depending on software that are millions of lines of code, if I can't see the software.",
                    "label": 0
                },
                {
                    "sent": "There is no chance to analyze what you actually did.",
                    "label": 0
                },
                {
                    "sent": "That does the selling.",
                    "label": 0
                },
                {
                    "sent": "That care must be free.",
                    "label": 0
                },
                {
                    "sent": "There are several commercial softwares that you pay for, but the people who do pay for it can see the source.",
                    "label": 0
                },
                {
                    "sent": "I also really like this ultimate miracle AmeriHealth meritocracy.",
                    "label": 0
                },
                {
                    "sent": "Do it?",
                    "label": 0
                },
                {
                    "sent": "There is only really one currency here and that's writing outstanding code.",
                    "label": 1
                },
                {
                    "sent": "You should be aware though, that the internal culture in many of these products, in particular the Linux kernel, but also our product can be pretty blunt.",
                    "label": 0
                },
                {
                    "sent": "I wouldn't say politically incorrect, but maybe it draw discussions and you can compare this when you submit a paper for publication is that?",
                    "label": 0
                },
                {
                    "sent": "If you submit a paper publication, you get tough review comments back.",
                    "label": 0
                },
                {
                    "sent": "You don't get 3 pages of admiration set to where nature is so happy that you decided to submit this paper to nature.",
                    "label": 0
                },
                {
                    "sent": "We really love you to have as part of the nature family that doesn't happen.",
                    "label": 0
                },
                {
                    "sent": "You will get some very serious scientists that have very little time and they will point out the shortcomings.",
                    "label": 0
                },
                {
                    "sent": "This might sound tough, but the whole point is ultimately we would like your code to get in.",
                    "label": 0
                },
                {
                    "sent": "But in this current shape, it cannot be in our product because there are these five severe problems with it.",
                    "label": 0
                },
                {
                    "sent": "And in the interest of time, I'm not going to spend my time sugarcoating it.",
                    "label": 0
                },
                {
                    "sent": "I will tell you exactly what those five bad things are.",
                    "label": 0
                },
                {
                    "sent": "So when you meet most of us electronically in this mailing list or comments, we might look so super aggressive.",
                    "label": 0
                },
                {
                    "sent": "But we're not the best thing.",
                    "label": 0
                },
                {
                    "sent": "Get in touch with these developers at a meeting and by far the best thing is to, in any discussion, assume that you are wrong and they're right.",
                    "label": 0
                },
                {
                    "sent": "The worst thing that the developer gets us a user posting to say, yeah, there's a horrible bug in the latest version of your program when it's really the user did something stupid.",
                    "label": 0
                },
                {
                    "sent": "The right thing is that I'm very sorry this must be something very trivial, but I read all the documentation and read the manual and I spent two days trying to read the program.",
                    "label": 0
                },
                {
                    "sent": "I'm sure this is something very simple, but here's all my output and everything that people would love to help you.",
                    "label": 0
                },
                {
                    "sent": "And at the end of the day, you don't get respect.",
                    "label": 0
                },
                {
                    "sent": "You're in it.",
                    "label": 0
                },
                {
                    "sent": "You have every single right in the world not to use these codes, and if you don't like that, you're going to get every single cent that you paid for them back.",
                    "label": 0
                },
                {
                    "sent": "The.",
                    "label": 0
                }
            ]
        },
        "clip_43": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "There are two good readings list here.",
                    "label": 0
                },
                {
                    "sent": "Let me just suggest there are a bunch of books.",
                    "label": 0
                },
                {
                    "sent": "Most of you if you are already a C++ code, you're lucky.",
                    "label": 0
                },
                {
                    "sent": "You can start directly on some of these large scale C++ books.",
                    "label": 0
                },
                {
                    "sent": "This is a good call design patterns or to pick up the gang of four.",
                    "label": 1
                },
                {
                    "sent": "It's the best book on software development I've ever read, but it doesn't really talk about C++.",
                    "label": 0
                },
                {
                    "sent": "These are design patterns.",
                    "label": 0
                },
                {
                    "sent": "There are no new design patterns in computer science.",
                    "label": 0
                },
                {
                    "sent": "There are 20 years old.",
                    "label": 0
                },
                {
                    "sent": "All of them.",
                    "label": 0
                },
                {
                    "sent": "Don't try to reinvent the wheel.",
                    "label": 0
                },
                {
                    "sent": "Learn what other people have done most of you.",
                    "label": 0
                },
                {
                    "sent": "They are comparable.",
                    "label": 0
                },
                {
                    "sent": "Coming from old code.",
                    "label": 0
                },
                {
                    "sent": "And then there are books I love working effectively with legacy code and these books and refactoring because refactoring is really the process of systematically trying to improve and create better.",
                    "label": 1
                },
                {
                    "sent": "Interface in existing code don't think that you can start from scratch and do it better.",
                    "label": 0
                },
                {
                    "sent": "Work with existing code and try to improve that.",
                    "label": 0
                },
                {
                    "sent": "And the final thing that I won't have time to talk to, but maybe we should have a separate talk about this by somebody next year is filled.",
                    "label": 0
                }
            ]
        },
        "clip_44": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Floating Point is one of the most most beautiful, but also one of the most complicated concept you can imagine and software.",
                    "label": 0
                },
                {
                    "sent": "If, and I think most of you are working with floating point based scientific software, go and start to read this blog by Bruce Dawson.",
                    "label": 1
                },
                {
                    "sent": "There are like 20 posts or so.",
                    "label": 0
                },
                {
                    "sent": "You will be amazed about some of the indicate deal kids and there are some of these funny posts that apparently in the Intel math library they under estimated their error bound for design function by 1.3 quintillion.",
                    "label": 0
                },
                {
                    "sent": "OK, this is hard, but if you are working on American libraries and setting error bounds, it's very easy to make mistakes in floating point.",
                    "label": 0
                },
                {
                    "sent": "With that I just added one more slide.",
                    "label": 0
                },
                {
                    "sent": "What do you want to do?",
                    "label": 0
                },
                {
                    "sent": "If you want to get started and getting better, the point is follow Igor Stravinsky.",
                    "label": 0
                },
                {
                    "sent": "He has.",
                    "label": 0
                }
            ]
        },
        "clip_45": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "The same goes lesser artists borrow.",
                    "label": 0
                },
                {
                    "sent": "Great artists steal.",
                    "label": 0
                },
                {
                    "sent": "We do that too, because the amazing thing with open source is that it's OK to steal.",
                    "label": 0
                },
                {
                    "sent": "You should give them credit, but go to.",
                    "label": 0
                },
                {
                    "sent": "These are just the web.",
                    "label": 0
                },
                {
                    "sent": "Different websites we have for gromacs.",
                    "label": 0
                },
                {
                    "sent": "There are lots of other programs out there too if you know that some program did something really nice or just search the web, go there, see if they have a module.",
                    "label": 1
                },
                {
                    "sent": "They might have a CMake model you have, and if it's if you have the same licenses, you can use it right away.",
                    "label": 0
                },
                {
                    "sent": "So what do you do if they don't have the same license?",
                    "label": 0
                },
                {
                    "sent": "If you can't use the tool?",
                    "label": 0
                },
                {
                    "sent": "Email and ask, but when I create something I have to set a license on it.",
                    "label": 0
                },
                {
                    "sent": "You know that CMake module that detects the floating point format in the computer?",
                    "label": 0
                },
                {
                    "sent": "It's not my life if Microsoft would like to use that, go right ahead.",
                    "label": 0
                },
                {
                    "sent": "I don't really care.",
                    "label": 0
                },
                {
                    "sent": "So if people send me a Mail and ask, you know that GPL model you had, could we use that in the under BSD license in 90% of the time?",
                    "label": 0
                },
                {
                    "sent": "I would probably say just sure go ahead no problem, and I would guess that most scientists are going to do that because that's the final take home lesson here.",
                    "label": 0
                },
                {
                    "sent": "We all think that our code is so precious we need to prevent people from using it.",
                    "label": 0
                },
                {
                    "sent": "We need to prevent industry from ceiling.",
                    "label": 0
                },
                {
                    "sent": "The truth is that most of us should be very happy that there are actually some other people that want to use our code because it's.",
                    "label": 0
                },
                {
                    "sent": "Again, compared to industry, scientific codes are not necessarily that good when it comes to quality control, but we can all get better.",
                    "label": 0
                },
                {
                    "sent": "So with that I can probably take two or three minutes or questions at least.",
                    "label": 0
                },
                {
                    "sent": "Thank you very much for your attention.",
                    "label": 0
                },
                {
                    "sent": "Yeah, thanks a lot Eric for this really nice tips and how to proceed in this difficult field so other questions worked this morning, so blue here means that it compiled.",
                    "label": 0
                },
                {
                    "sent": "OK, nevertheless, are there questions?",
                    "label": 0
                },
                {
                    "sent": "Yes please.",
                    "label": 0
                },
                {
                    "sent": "Is the exception that my code compiles straight away?",
                    "label": 0
                },
                {
                    "sent": "Do you think programmers should read the standard of the program?",
                    "label": 0
                },
                {
                    "sent": "Like sometimes the compiler, right?",
                    "label": 0
                },
                {
                    "sent": "They're not clear about some standard, so Easter is not clearly mentioned everything, so it seems like some compiler.",
                    "label": 0
                },
                {
                    "sent": "It behaves in the different Wi-Fi in some crucial points.",
                    "label": 0
                },
                {
                    "sent": "So do you think every programmer should read the standard so that it the code should be the portable over the?",
                    "label": 0
                },
                {
                    "sent": "All compiler.",
                    "label": 0
                },
                {
                    "sent": "I have to start reading the standards, but there are worse things than that.",
                    "label": 0
                },
                {
                    "sent": "Compilers do have bugs.",
                    "label": 0
                },
                {
                    "sent": "If you look at the I think it's client know it's one of the standard seed libraries have used the gamma function.",
                    "label": 0
                },
                {
                    "sent": "There is a bug in it so we've had to write her own gamma functions and it's worth it that normal distributions that are different C++ libraries but people forgot to set a standard for which algorithm we should use.",
                    "label": 0
                },
                {
                    "sent": "So depending on the library use you're going to get a sequence different sequence of normal numbers, so we had to write our own implementation of that.",
                    "label": 0
                },
                {
                    "sent": "They don't think that compilers are as good as the vendors make them out to be.",
                    "label": 0
                },
                {
                    "sent": "I would say that there are there is one outstanding compiler in the world and this jesusy it's by an order of magnitude.",
                    "label": 0
                },
                {
                    "sent": "The best standards compliant compiler.",
                    "label": 0
                },
                {
                    "sent": "After Jesus see we have, I see that it gets reasonably close.",
                    "label": 0
                },
                {
                    "sent": "Clang comes a bit down and after those there is a gigantic distance, all the others.",
                    "label": 0
                },
                {
                    "sent": "I would never recommend anything, but this is the clanrye Sissy.",
                    "label": 0
                },
                {
                    "sent": "Or see that is 4 * A bit different.",
                    "label": 0
                },
                {
                    "sent": "So large C++ codes I found to be to work quite well for using open MP and MPI.",
                    "label": 0
                },
                {
                    "sent": "But in order to extend it to use accelerators like GPU's I haven't seen it to be as easy as C and Fortran.",
                    "label": 0
                },
                {
                    "sent": "Do you have any comments on that?",
                    "label": 0
                },
                {
                    "sent": "So there are some very good C plus one of the beautiful thing with C++ is do abstract away something so rather than using the standard library containers such as vectors or so, there is a library from it echoed thrust.",
                    "label": 0
                },
                {
                    "sent": "So you basically just switch to thrust.",
                    "label": 0
                },
                {
                    "sent": "And then you're going to get equivalent versions of all these vectors, but they are accelerated.",
                    "label": 0
                },
                {
                    "sent": "There is also boost has a bunch of acceleration and everything, so one of the nice things with this modernization and you don't have to rewrite your code.",
                    "label": 0
                },
                {
                    "sent": "Just use another container instead because the interface is identical, you don't have to rewrite anything.",
                    "label": 0
                },
                {
                    "sent": "But at the end of the day, if you want to drill deep down and use code and everything, there is not really any fundamental differences with languages here.",
                    "label": 0
                },
                {
                    "sent": "By the time you are in the GPU, you then need to.",
                    "label": 0
                },
                {
                    "sent": "You're going to want to control exactly where your data is, and C++ is both good and bad.",
                    "label": 0
                },
                {
                    "sent": "In that sense, C++ allows you to completely abstract away everything, and then it's not going to work on GPU's.",
                    "label": 0
                },
                {
                    "sent": "So then you have to be disciplined and realized the parts of the code that should talk to the GPU there.",
                    "label": 0
                },
                {
                    "sent": "Even there we don't use data libraries there that we use plain arrays so that we can control the data exactly.",
                    "label": 0
                },
                {
                    "sent": "So the point with C plus don't use every single feature of the language.",
                    "label": 0
                },
                {
                    "sent": "So where the questions are, yes.",
                    "label": 0
                },
                {
                    "sent": "I would also say if you're a beginner, one nice thing is you can start with Python.",
                    "label": 0
                },
                {
                    "sent": "Start with Python, learn Python well.",
                    "label": 0
                },
                {
                    "sent": "As you get better you can port some modules to C++.",
                    "label": 0
                },
                {
                    "sent": "Yeah, So what are the main features of C + + 11 that are better than in C++?",
                    "label": 0
                },
                {
                    "sent": "I don't know what the differences between the two.",
                    "label": 0
                },
                {
                    "sent": "So the main reason was a very long time to C + + O.",
                    "label": 0
                },
                {
                    "sent": "Three was the last previous standards of the language has developed tremendously.",
                    "label": 0
                },
                {
                    "sent": "I would say this was yet amazingly well function.",
                    "label": 0
                },
                {
                    "sent": "Standard library.",
                    "label": 0
                },
                {
                    "sent": "All things like random number generators are included atomix if you have multiple threads working.",
                    "label": 0
                },
                {
                    "sent": "Sharing data is one of the most complicated things to do because you need to write this in assembly for 20 different architectures with C + + 11 it's part of the language.",
                    "label": 0
                },
                {
                    "sent": "The compiler does it for you.",
                    "label": 0
                },
                {
                    "sent": "If you want to start a thread on Windows or start a thread on Unix completely different thread libraries on C + + 11, it's part of the language.",
                    "label": 0
                },
                {
                    "sent": "So I think it's it understands what the modern it's designed for, what a modern computer looks like.",
                    "label": 0
                },
                {
                    "sent": "It knows that a modern computer has multiple cores, for instance.",
                    "label": 0
                },
                {
                    "sent": "Yes, I have a question about NJIT.",
                    "label": 0
                },
                {
                    "sent": "Have you tried Mercurial, which is based on Python And if you think there are any differences between them and so sorry, what library do you say Mercurio?",
                    "label": 0
                },
                {
                    "sent": "So HG, Mercurial is similar to Curiel, no, I haven't tried it myself.",
                    "label": 0
                },
                {
                    "sent": "I would say that get test conquered the world and open source.",
                    "label": 0
                },
                {
                    "sent": "You can pick any you can pick anything you want.",
                    "label": 0
                },
                {
                    "sent": "If your entire team is happy using Mercurial, there's nothing wrong with that.",
                    "label": 0
                },
                {
                    "sent": "And new has some other version of the control library that like to.",
                    "label": 0
                },
                {
                    "sent": "So you were talking about sort of bugs in the standard and things like that, especially for scientific computing is are there scientists that are actually on the C++ standard, and will some of these things be fixed in C 2017 or 17?",
                    "label": 0
                },
                {
                    "sent": "So most of these committees work on people getting involved, so when it comes to us, we have committed bug reports to every single major compiler out there.",
                    "label": 0
                },
                {
                    "sent": "So the first thing to do is get involved when you are involved.",
                    "label": 0
                },
                {
                    "sent": "Suddenly you get here the vendors coming back to you.",
                    "label": 0
                },
                {
                    "sent": "Oh, by the way, we have a new beta of our compiler coming out of this architecture.",
                    "label": 0
                },
                {
                    "sent": "Would you like to try it?",
                    "label": 0
                },
                {
                    "sent": "So normally I would say that the bugs are not necessarily understand.",
                    "label": 0
                },
                {
                    "sent": "This was mostly in the compilers, but yes, there are definitely scientists on there, and I in theory you two could be in 10 years.",
                    "label": 0
                },
                {
                    "sent": "If you want to engage in it.",
                    "label": 0
                },
                {
                    "sent": "But these communities to work very much involuntary engagements.",
                    "label": 0
                },
                {
                    "sent": "Just a couple quick questions.",
                    "label": 0
                },
                {
                    "sent": "I'm using Valve green at the moment for memory checking.",
                    "label": 0
                },
                {
                    "sent": "Would you suggest I switch to the clang suite of testers and #2?",
                    "label": 0
                },
                {
                    "sent": "How should I use?",
                    "label": 0
                },
                {
                    "sent": "I should perform automated testing on multiple platforms and compilers for a small project.",
                    "label": 0
                },
                {
                    "sent": "First, there is nothing wrong with Valgrind apart from the fact that is very slow.",
                    "label": 0
                },
                {
                    "sent": "The other problem with is that it's a big external library that we have installed, and the neat thing with Clang.",
                    "label": 0
                },
                {
                    "sent": "If these things are built into the compiler, we have the compiler installed and.",
                    "label": 0
                },
                {
                    "sent": "Right now I would say it's about there about the same quality.",
                    "label": 0
                },
                {
                    "sent": "It's just that I like not having an external library.",
                    "label": 0
                },
                {
                    "sent": "The second question was how to do unit testing.",
                    "label": 0
                },
                {
                    "sent": "Lots of different platforms.",
                    "label": 0
                },
                {
                    "sent": "The important thing is that find one of these small unit test frameworks such as Google Test or something else.",
                    "label": 0
                },
                {
                    "sent": "It doesn't matter what you use, but then start to look into your algorithms and decide.",
                    "label": 0
                },
                {
                    "sent": "There's a concept called design for Testability, so before you write the code even decide what is my interface, what is my module, what is the allowed input and for the allowed input, what should the output be?",
                    "label": 0
                },
                {
                    "sent": "That is your test.",
                    "label": 0
                },
                {
                    "sent": "Then you start the code implementation.",
                    "label": 0
                },
                {
                    "sent": "If one architecture does not produce that output and there is a bug that architecture.",
                    "label": 0
                },
                {
                    "sent": "So the trick is to reverse it.",
                    "label": 0
                },
                {
                    "sent": "Don't ask how you can test the code written for one architecture, but make sure that the code for that architecture produces the output that you have specified.",
                    "label": 0
                },
                {
                    "sent": "Have you used our Lambda functions for getting?",
                    "label": 0
                },
                {
                    "sent": "See what's on the GPU?",
                    "label": 0
                },
                {
                    "sent": "Not on the GPU so much, but we're using a lot with Intel TBB, which is the thread library Lambda function with one of the things that we were a bit worried about because the support for them were bad initially, but nowadays are widely supported everywhere.",
                    "label": 0
                },
                {
                    "sent": "It's probably something we wanna start using more.",
                    "label": 0
                },
                {
                    "sent": "Thanks, thank you.",
                    "label": 0
                },
                {
                    "sent": "Enter.",
                    "label": 0
                }
            ]
        }
    }
}