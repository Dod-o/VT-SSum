{
    "id": "ruje2rnjdmkqrgxjxq5e75yobp3m4dlr",
    "title": "Recursion in SPARQL",
    "info": {
        "author": [
            "Juan L. Reutter, Pontificia Universidad Cat\u00f3lica de Chile"
        ],
        "published": "Nov. 10, 2015",
        "recorded": "October 2015",
        "category": [
            "Top->Computer Science->Semantic Web"
        ]
    },
    "url": "http://videolectures.net/iswc2015_reutter_recursion_sparql/",
    "segmentation": [
        [
            "Before starting the story, I thought about giving you a little bit of motivation.",
            "So what this talk is really about, it's about using sparkle to navigate the RDF documents."
        ],
        [
            "So when I talk about navigation, what am I talking really about?",
            "It's about reaching forward.",
            "If you see RDF documents as a graph, you want to reach forward.",
            "Farther away than that, what you can really see from connection, so you will you could ask.",
            "Sure, give me all friends of my friend.",
            "Or you could you could ask if you can contact this person.",
            "So through my friends, but also the friends are my friends.",
            "And then you can.",
            "You can repeat this and just ask for a pass connecting to people so.",
            "Easy Sky connect.",
            "Connect this person through my friends or the friends of my friends or their friends from my friends and my friends etc."
        ],
        [
            "So the kissing and this is really important for this talk is that if you think about competing paths now from a query POV from equity perspective, this is just a special case of pattern iteration.",
            "So what I need to do if I want to compute a path so any?"
        ],
        [
            "To find this very simple pattern, which is just a dribble.",
            "And then they need."
        ],
        [
            "We dated, so I have to link this very simple pattern with another triple that will be linked on tops of the new subject is linked with the old object."
        ],
        [
            "And then repeated.",
            "So I go Oh no, no, no, no no, no, no.",
            "Until I can finally find the path between the two Gray nose in this RDF graph."
        ],
        [
            "But of course I mean this is just a special case.",
            "I could think of every possible pattern that I would like."
        ],
        [
            "So for instance, I could I could ask for two guys that are connected in this graph, but via this triangle any possible pattern that I want then what I need to do to actually compute this query?",
            "Are these two guys connected via history?"
        ],
        [
            "Um?",
            "Is to just iterate over this pattern?",
            "Why I need to understand how to link these patterns together and then I iterate and I finally understand that these guys are connected.",
            "This doesn't need to stop here, you can."
        ],
        [
            "Think about every possible pattern, so any given shape.",
            "If you know how to link it, you can iterate them together and then you finally compute this special path between two guys."
        ],
        [
            "So the biggest thing here is that I mean this is these are important queries.",
            "This is not something that I just made up for this talk.",
            "This is this.",
            "The real applications we're going to see an example and we call them recursive queries.",
            "This is the usual name for the literature."
        ],
        [
            "So, So what about records?",
            "Sparkle, right?",
            "So recursive queries are present in most practical query languages and the idea is always the same.",
            "You sort of get the result you compute this result in a temporal way, and then you start iterating using the same result until you reach a fixed point.",
            "So why not do it in sparkle?",
            "This is the point."
        ],
        [
            "And this is the topic of my talk.",
            "So we we try to include this recursive operation in sparkle.",
            "That's that's what I do.",
            "All three of us are working in Chile, near Saratoga.",
            "And we're also working in this new Center for Semantic Web research, which is a nice project that we got in Chile."
        ],
        [
            "So so come again, why recursive sparkle again?",
            "Why would I want to do this?",
            "This pattern thing is this recordset thingy.",
            "In sparkle what's so special about sparkle?",
            "Well, for starters, we do support some some iteration now in the forms of property pass, so the path thing that I show you, we can actually do it.",
            "Many studies in the literature and this, this has been going on and on.",
            "More or less in parallel with the discussion about property pass, we actually we need recursive queries with more expressive power.",
            "There are several use cases that you can think about, but I think that's a good point.",
            "A bit more complicated, so right now there is a special algorithm to implement property paths and every.",
            "Extension that has been proposed for sparkle.",
            "Every extension that increases our ability to do navigation needs to implement it without hog techniques, so there is no way of reusing anything that that your favorite sparkle query processor has.",
            "You need to develop algorithms from scratch, so there are lots of extensions that have been proposed and actually none solves both problems, But this is what we would really want, so I want more expressive power and I don't want it to come up with an algorithm that is really difficult to.",
            "New program."
        ],
        [
            "So this is our proposal for this paper.",
            "So the idea is to use construct queries and you will be constructing a temporal graph and this temporal graph will also be queried.",
            "So in a sense you start grabbing your answers and this temporal graph grows and grows until you reach a fixed point and then you have all the information that you need, so we did not propose the general language in this paper.",
            "This was proposed independently by these two works."
        ],
        [
            "But before telling you what exactly what did we do, I'm going to talk you through now.",
            "A more informative example of real use case.",
            "So what we have here.",
            "This is a way of modeling the history of a Wikipedia page.",
            "A page.",
            "In this case it's a history of the Wikipedia entry about Edinburgh.",
            "So there are there are there are articles that are revisions of different articles.",
            "We see this work.",
            "No.",
            "Doesn't really matter.",
            "And then if you go down in this graph, there are the particular elites that generated this page and then if you go further down there are the users are responsible for this."
        ],
        [
            "So here's a query that needs that you would want to ask.",
            "This is more or less important, so I want all pairs of articles that are connected, but such as they are done by our.",
            "It's done by the same user, so I want to see all the articles were particular user was responsive so all the history."
        ],
        [
            "So for instance, these two articles are linked together because they are linked to."
        ],
        [
            "I just wanted it by user one."
        ],
        [
            "Then these two articles would be linked together because they are so 79 is a revision of 100 and 42142 is a revision 145."
        ],
        [
            "And both edits were done by user one similarly."
        ],
        [
            "These 72 is also connected because all of them."
        ],
        [
            "Were used by.",
            "By user one.",
            "So this is a query that that we would like to.",
            "To compute and what it is interest.",
            "I mean, this is not a property pass and this is really it's a.",
            "It's an example which is very simple, but it's really difficult to express.",
            "Um?"
        ],
        [
            "So this is the way we express it.",
            "I'm going to talk you through this query, but this is so that you can see it entirely.",
            "So, so what's the point of this thing?"
        ],
        [
            "So you start with your graph and the first thing that you're going to do, you're going to be constructing a base graph, so this is a usual way how you would do this.",
            "So you would try to emulate this query, so you would.",
            "Basically you want to link the articles not by the division property, but now you want to link it by the users.",
            "So you would construct a graph in which two articles are actually linked by the user that made the edit that generated this revision.",
            "So this is your."
        ],
        [
            "Open graph and now you start."
        ],
        [
            "Great thing with this other part of the query so you have a temporal graph.",
            "I'm just going to quality here.",
            "Of course this is and I and you evaluate this second query.",
            "Now the query that is that is highlighted and what you're doing is if there are two articles that are linked by the same user, well, then you're going to be putting an extra link on top of it, so the graph on your right becomes after one iteration of the algorithm becomes the graph down."
        ],
        [
            "There's.",
            "What you have done, you simply took two articles that were linked together and then you put this extra edge."
        ],
        [
            "And this goes on and on and on until at some point you're going to be reaching a fixed point.",
            "You're going to compute all that you wanted to compute."
        ],
        [
            "And finally, you can use your temporal graph to do any possible sparkle.",
            "You want.",
            "In this case what I'm doing I'm just extracting the pairs new version old version, so I'm leaving away the information from the user.",
            "So this is this is the way that we propose to how to compute these queries."
        ],
        [
            "So some comments.",
            "Well, in the paper we have formal syntax and semantics if you want to read.",
            "And this is actually more expressive than any of the proposed extensions to property path, you can actually prove that.",
            "But more importantly to me, this implementation reuses particular technology.",
            "You're constructing temporal graphs.",
            "You're querying graphs, you're doing.",
            "You're not doing anything new.",
            "That that that that wasn't done before."
        ],
        [
            "So what we implemented in particular is a is a common optimization in this type of languages it's called the linear fragment, so this is the basic structure."
        ],
        [
            "You need to define a temporal graph."
        ],
        [
            "Then you have a construct template, something that will tell you how you're going to be constructing new tables."
        ],
        [
            "We have your query so there are two queries when is used to initialize your temporal graph, we call the base query and the other one is the recursive query that uses them paragraph.",
            "So it takes the temporal graphs and produce a new temporal graph that will be an update of the information that you have."
        ],
        [
            "And then the other query gonna be anything that you want.",
            "It just uses the information that you just got bigger silly.",
            "So."
        ],
        [
            "So how do you evaluate this?",
            "Well, first, as I told you, you construct your base graph.",
            "In this case is T and you just evaluate the base query with this.",
            "This graph you ever laid the base query and then you start repeating this idea.",
            "So you are seeing you assign the temporal graph to the result of evaluating the query over the temporal graph, and you do it over and over again until you see that there are no more results, and then your temporal graph is ready.",
            "So you can just evaluate the outer query."
        ],
        [
            "So.",
            "We did some experimental evaluation.",
            "So we want to do it to try real queries in real datasets.",
            "We wanted to compare a little bit with property path so.",
            "One thing I have to say.",
            "So we implemented everything on top of Jenna.",
            "And the data set.",
            "Simple graphs are storing disks, so we're not really cheating if the temporal graph is has lots of gigabytes of size, it doesn't really matter, because we use all all genus architecture to store things in disk and not in memory.",
            "So and we did the rest on everyday laptop on code.",
            "Anne."
        ],
        [
            "And this is what we get.",
            "So we were trying to get Link movie database queries.",
            "So we were thinking about quitting these things.",
            "So first of all give me or let all actors with a finite bacon number find it bacon number.",
            "Well it means that you need to either be with Kevin Bacon in a movie or connected through people that has been with Kevin Bacon in a movie.",
            "I mean we drive other two queries so so the same thing but through the same director and then the same stream but but through directors at work to also actors like say, Clint Eastwood.",
            "So these are the results.",
            "I'm not going to lie to you.",
            "I mean, this is for analytic purposes.",
            "You're not going to be doing in this on web time, but this is obvious.",
            "It takes about 160 seconds for the for the most difficult query.",
            "We did this on Link movie database and on Jogo, but only the piece that.",
            "That is about the movies."
        ],
        [
            "So if you want to compare with property pass using these queries, we're not going to win, but also to extend seconds to do this query within 160 seconds.",
            "So what's the deal here that we are?",
            "This is kind of an unfair comparison because we are comparing to what bit also and system do best.",
            "It's a property pass.",
            "It's a language that is less expressive and we're providing a starting point.",
            "So if we don't provide a starting point, even if we do property pass queries, we actually take half the time than VR system that we drive that are aging and big toe.",
            "So these are property pass where we don't provide.",
            "Our starting point."
        ],
        [
            "Um?",
            "So the other thing that we that we did, we analyzed the number of iterations required and we compare that to actually manually write things particle joints so the dotted lines there is writing joints manually.",
            "Maybe some feasible after the first iteration an and we measure the time that our system was taking after each iteration.",
            "So just so that you know computing the finite bacon number required 8 iterations and on our databases, and well the same thing with with Eastwood directors required 9.",
            "So yeah, you will also not beat this if you try doing joins manually.",
            "That's the message."
        ],
        [
            "So, So what?",
            "With a little over here, we can do much more than property pass this that the message they want to convey.",
            "The algorithms are really easy to understand.",
            "They are very clean.",
            "We have the implementation and you just do it on top of your favorite Sparkle processor and I need this even faster than some property pass.",
            "I mean way faster.",
            "So.",
            "So why not do this?",
            "You know why not?",
            "Why?",
            "Why aren't we doing this in Sparkle?",
            "It's really easy.",
            "It gives you more power than you can even beat property pass, and it gives you a really easy way of actually implementing this.",
            "So."
        ],
        [
            "Well, there are more things in the paper.",
            "There are the former algorithms if you want to implement these formal definitions complexity, but this is the key message.",
            "Adding regression to sparkle is almost effortless, so I really think that we should do it."
        ],
        [
            "And this is, well, this is my last slide all if you're interested in future work.",
            "Trying to use these two to actually start creating blank notes and see if we can do query answering under anthologies.",
            "Tried to support the query entailment within Sparkle engine and we believe that you can actually do that and the other thing of course is well to see what happens.",
            "If you want to query this on on linked data, not gonna wanna RDF document with processor, but really on a web scale."
        ],
        [
            "So that's a little.",
            "So let's think through fun.",
            "And we're open for questions.",
            "In the back there was.",
            "Hi hello nice work one.",
            "And I would like to have a little bit more information about your statement of the extension of the expressiveness of property paths.",
            "You extend property paths because you can have variables within the path, right?",
            "Yeah, so so at the end like I showed at the beginning, so property passes just computing triples either hitting triples, Ann and we can do that, and we can do much more.",
            "It's in the paper.",
            "We have examples that might give you with more detail if you want, because we have.",
            "We proposed recently an extension of a property paths where you have for instance conjunction negation on this kind of stuff.",
            "I would like to maybe we can discuss online about how this compared to this extension.",
            "That yeah and the interesting thing is that basically to evaluate what we do.",
            "We divide this syntactically short query into equity where you throw in a number of variables and you project out the variables and also these queries can be evaluated on existing processes.",
            "OK, we may discuss this, so please don't say I would be really interested to hear about that.",
            "Thank you.",
            "Could you explain what's your timeline for recursive on linked data?",
            "You said that's next work.",
            "So this thing I mean, this is I'm working thinking on this particular endpoint scenario, so really I have a database and I can.",
            "I can have all the freedom that I want to use the database tools.",
            "But there has been lots of discussion today about about quitting link data where you don't really have this disability and.",
            "I I haven't thought about this match, but I think that this could also be a good paradigm.",
            "The same idea of actually computing a temporal graph locali and then iterating over this results.",
            "Plus what you can find on the web.",
            "That's but it's it's just a very preliminary idea.",
            "If you want to talk about it, I would be happy because I think it's it's.",
            "It could be.",
            "It could lead to somewhere.",
            "Did you consider or compare these two freaks to for example?",
            "Adding the base graph with an all RL ontologies because all our express is essentially the rules, right?",
            "So did you compare this or did you consider this?",
            "So.",
            "It depends on the expressive power.",
            "Again, of what you're doing so.",
            "Full owl we cannot do.",
            "It's a bit different, so this is really about pattern based iteration.",
            "An full you start creating.",
            "No, it's not a full hour saying I was saying the LRL fragment of our which expresses.",
            "Rules exactly OK, so this is.",
            "This is what I'm not sure about.",
            "I believe that you can do it, but I have not gotten the time too.",
            "Yeah, so I will really.",
            "In particular, I think that you can actually do it, but I'm I'm not sure yet.",
            "So thank you.",
            "I think this work is a very important.",
            "I wanted to know if you think if you thought about.",
            "Cases of recursion in sparkle, in which you cannot hear if you in which you are outside of the linear fragment case.",
            "So that but there there are.",
            "They are interesting from my point of view of the, so that should be interesting.",
            "So what I know in in, in SQL they implement something which is very similar to what they we implemented here, and it's known that it's it's a.",
            "It's an optimization that takes you very close to anything that you want to do in practice.",
            "If you don't want to do lead the linear fragment, then I mean you can of course do it and we also implemented that but but it is way way slower because you have basically no optimization.",
            "Actually, the field of optimizing nonlinear recursive queries is pretty much nonexistent, so there is very little that you're going to use.",
            "So, but you you could think about this.",
            "Yeah, so this is an even more expressive language.",
            "That will take you probably forever to compute, but but if you need it then you need it.",
            "Just a comment regarding recursion an entailment.",
            "There is some work done on audience URL also linked to produce question and they use common table expressions in SQL two and call recursion which is I think quite similar to this.",
            "Well maybe you can, thanks for the moment I I wasn't aware of that.",
            "Thanks yeah.",
            "It's the same idea.",
            "Kimi, one quick thing you do, you treat negation there in sparkle, so have you have full sparkle in the pattern?",
            "Oh well, not for the linear.",
            "You could define the problem with these things with negations that the semantic is it's not easy to understand.",
            "So So what we implemented has no negation.",
            "It's easy to understand, but this is it's ongoing work.",
            "Actually.",
            "I'm not sure what would be the correct way of doing negation here.",
            "There are several options, right?",
            "OK, thanks to one for the first talk."
        ]
    ],
    "summarization": {
        "clip_0": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Before starting the story, I thought about giving you a little bit of motivation.",
                    "label": 0
                },
                {
                    "sent": "So what this talk is really about, it's about using sparkle to navigate the RDF documents.",
                    "label": 0
                }
            ]
        },
        "clip_1": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So when I talk about navigation, what am I talking really about?",
                    "label": 0
                },
                {
                    "sent": "It's about reaching forward.",
                    "label": 0
                },
                {
                    "sent": "If you see RDF documents as a graph, you want to reach forward.",
                    "label": 0
                },
                {
                    "sent": "Farther away than that, what you can really see from connection, so you will you could ask.",
                    "label": 0
                },
                {
                    "sent": "Sure, give me all friends of my friend.",
                    "label": 1
                },
                {
                    "sent": "Or you could you could ask if you can contact this person.",
                    "label": 0
                },
                {
                    "sent": "So through my friends, but also the friends are my friends.",
                    "label": 0
                },
                {
                    "sent": "And then you can.",
                    "label": 0
                },
                {
                    "sent": "You can repeat this and just ask for a pass connecting to people so.",
                    "label": 0
                },
                {
                    "sent": "Easy Sky connect.",
                    "label": 0
                },
                {
                    "sent": "Connect this person through my friends or the friends of my friends or their friends from my friends and my friends etc.",
                    "label": 0
                }
            ]
        },
        "clip_2": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So the kissing and this is really important for this talk is that if you think about competing paths now from a query POV from equity perspective, this is just a special case of pattern iteration.",
                    "label": 0
                },
                {
                    "sent": "So what I need to do if I want to compute a path so any?",
                    "label": 0
                }
            ]
        },
        "clip_3": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "To find this very simple pattern, which is just a dribble.",
                    "label": 0
                },
                {
                    "sent": "And then they need.",
                    "label": 0
                }
            ]
        },
        "clip_4": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "We dated, so I have to link this very simple pattern with another triple that will be linked on tops of the new subject is linked with the old object.",
                    "label": 0
                }
            ]
        },
        "clip_5": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And then repeated.",
                    "label": 0
                },
                {
                    "sent": "So I go Oh no, no, no, no no, no, no.",
                    "label": 0
                },
                {
                    "sent": "Until I can finally find the path between the two Gray nose in this RDF graph.",
                    "label": 0
                }
            ]
        },
        "clip_6": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "But of course I mean this is just a special case.",
                    "label": 0
                },
                {
                    "sent": "I could think of every possible pattern that I would like.",
                    "label": 0
                }
            ]
        },
        "clip_7": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So for instance, I could I could ask for two guys that are connected in this graph, but via this triangle any possible pattern that I want then what I need to do to actually compute this query?",
                    "label": 0
                },
                {
                    "sent": "Are these two guys connected via history?",
                    "label": 0
                }
            ]
        },
        "clip_8": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "Is to just iterate over this pattern?",
                    "label": 0
                },
                {
                    "sent": "Why I need to understand how to link these patterns together and then I iterate and I finally understand that these guys are connected.",
                    "label": 0
                },
                {
                    "sent": "This doesn't need to stop here, you can.",
                    "label": 0
                }
            ]
        },
        "clip_9": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Think about every possible pattern, so any given shape.",
                    "label": 0
                },
                {
                    "sent": "If you know how to link it, you can iterate them together and then you finally compute this special path between two guys.",
                    "label": 0
                }
            ]
        },
        "clip_10": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So the biggest thing here is that I mean this is these are important queries.",
                    "label": 1
                },
                {
                    "sent": "This is not something that I just made up for this talk.",
                    "label": 0
                },
                {
                    "sent": "This is this.",
                    "label": 0
                },
                {
                    "sent": "The real applications we're going to see an example and we call them recursive queries.",
                    "label": 1
                },
                {
                    "sent": "This is the usual name for the literature.",
                    "label": 0
                }
            ]
        },
        "clip_11": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So, So what about records?",
                    "label": 0
                },
                {
                    "sent": "Sparkle, right?",
                    "label": 0
                },
                {
                    "sent": "So recursive queries are present in most practical query languages and the idea is always the same.",
                    "label": 1
                },
                {
                    "sent": "You sort of get the result you compute this result in a temporal way, and then you start iterating using the same result until you reach a fixed point.",
                    "label": 0
                },
                {
                    "sent": "So why not do it in sparkle?",
                    "label": 0
                },
                {
                    "sent": "This is the point.",
                    "label": 0
                }
            ]
        },
        "clip_12": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And this is the topic of my talk.",
                    "label": 0
                },
                {
                    "sent": "So we we try to include this recursive operation in sparkle.",
                    "label": 0
                },
                {
                    "sent": "That's that's what I do.",
                    "label": 0
                },
                {
                    "sent": "All three of us are working in Chile, near Saratoga.",
                    "label": 0
                },
                {
                    "sent": "And we're also working in this new Center for Semantic Web research, which is a nice project that we got in Chile.",
                    "label": 0
                }
            ]
        },
        "clip_13": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So so come again, why recursive sparkle again?",
                    "label": 0
                },
                {
                    "sent": "Why would I want to do this?",
                    "label": 0
                },
                {
                    "sent": "This pattern thing is this recordset thingy.",
                    "label": 0
                },
                {
                    "sent": "In sparkle what's so special about sparkle?",
                    "label": 0
                },
                {
                    "sent": "Well, for starters, we do support some some iteration now in the forms of property pass, so the path thing that I show you, we can actually do it.",
                    "label": 0
                },
                {
                    "sent": "Many studies in the literature and this, this has been going on and on.",
                    "label": 0
                },
                {
                    "sent": "More or less in parallel with the discussion about property pass, we actually we need recursive queries with more expressive power.",
                    "label": 0
                },
                {
                    "sent": "There are several use cases that you can think about, but I think that's a good point.",
                    "label": 0
                },
                {
                    "sent": "A bit more complicated, so right now there is a special algorithm to implement property paths and every.",
                    "label": 0
                },
                {
                    "sent": "Extension that has been proposed for sparkle.",
                    "label": 0
                },
                {
                    "sent": "Every extension that increases our ability to do navigation needs to implement it without hog techniques, so there is no way of reusing anything that that your favorite sparkle query processor has.",
                    "label": 0
                },
                {
                    "sent": "You need to develop algorithms from scratch, so there are lots of extensions that have been proposed and actually none solves both problems, But this is what we would really want, so I want more expressive power and I don't want it to come up with an algorithm that is really difficult to.",
                    "label": 0
                },
                {
                    "sent": "New program.",
                    "label": 0
                }
            ]
        },
        "clip_14": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So this is our proposal for this paper.",
                    "label": 0
                },
                {
                    "sent": "So the idea is to use construct queries and you will be constructing a temporal graph and this temporal graph will also be queried.",
                    "label": 0
                },
                {
                    "sent": "So in a sense you start grabbing your answers and this temporal graph grows and grows until you reach a fixed point and then you have all the information that you need, so we did not propose the general language in this paper.",
                    "label": 0
                },
                {
                    "sent": "This was proposed independently by these two works.",
                    "label": 0
                }
            ]
        },
        "clip_15": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "But before telling you what exactly what did we do, I'm going to talk you through now.",
                    "label": 0
                },
                {
                    "sent": "A more informative example of real use case.",
                    "label": 0
                },
                {
                    "sent": "So what we have here.",
                    "label": 0
                },
                {
                    "sent": "This is a way of modeling the history of a Wikipedia page.",
                    "label": 0
                },
                {
                    "sent": "A page.",
                    "label": 0
                },
                {
                    "sent": "In this case it's a history of the Wikipedia entry about Edinburgh.",
                    "label": 0
                },
                {
                    "sent": "So there are there are there are articles that are revisions of different articles.",
                    "label": 0
                },
                {
                    "sent": "We see this work.",
                    "label": 0
                },
                {
                    "sent": "No.",
                    "label": 0
                },
                {
                    "sent": "Doesn't really matter.",
                    "label": 0
                },
                {
                    "sent": "And then if you go down in this graph, there are the particular elites that generated this page and then if you go further down there are the users are responsible for this.",
                    "label": 0
                }
            ]
        },
        "clip_16": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So here's a query that needs that you would want to ask.",
                    "label": 1
                },
                {
                    "sent": "This is more or less important, so I want all pairs of articles that are connected, but such as they are done by our.",
                    "label": 1
                },
                {
                    "sent": "It's done by the same user, so I want to see all the articles were particular user was responsive so all the history.",
                    "label": 1
                }
            ]
        },
        "clip_17": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So for instance, these two articles are linked together because they are linked to.",
                    "label": 0
                }
            ]
        },
        "clip_18": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "I just wanted it by user one.",
                    "label": 0
                }
            ]
        },
        "clip_19": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Then these two articles would be linked together because they are so 79 is a revision of 100 and 42142 is a revision 145.",
                    "label": 0
                }
            ]
        },
        "clip_20": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And both edits were done by user one similarly.",
                    "label": 0
                }
            ]
        },
        "clip_21": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "These 72 is also connected because all of them.",
                    "label": 0
                }
            ]
        },
        "clip_22": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Were used by.",
                    "label": 0
                },
                {
                    "sent": "By user one.",
                    "label": 0
                },
                {
                    "sent": "So this is a query that that we would like to.",
                    "label": 0
                },
                {
                    "sent": "To compute and what it is interest.",
                    "label": 0
                },
                {
                    "sent": "I mean, this is not a property pass and this is really it's a.",
                    "label": 0
                },
                {
                    "sent": "It's an example which is very simple, but it's really difficult to express.",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 0
                }
            ]
        },
        "clip_23": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So this is the way we express it.",
                    "label": 0
                },
                {
                    "sent": "I'm going to talk you through this query, but this is so that you can see it entirely.",
                    "label": 0
                },
                {
                    "sent": "So, so what's the point of this thing?",
                    "label": 0
                }
            ]
        },
        "clip_24": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So you start with your graph and the first thing that you're going to do, you're going to be constructing a base graph, so this is a usual way how you would do this.",
                    "label": 0
                },
                {
                    "sent": "So you would try to emulate this query, so you would.",
                    "label": 0
                },
                {
                    "sent": "Basically you want to link the articles not by the division property, but now you want to link it by the users.",
                    "label": 0
                },
                {
                    "sent": "So you would construct a graph in which two articles are actually linked by the user that made the edit that generated this revision.",
                    "label": 0
                },
                {
                    "sent": "So this is your.",
                    "label": 0
                }
            ]
        },
        "clip_25": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Open graph and now you start.",
                    "label": 0
                }
            ]
        },
        "clip_26": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Great thing with this other part of the query so you have a temporal graph.",
                    "label": 0
                },
                {
                    "sent": "I'm just going to quality here.",
                    "label": 0
                },
                {
                    "sent": "Of course this is and I and you evaluate this second query.",
                    "label": 0
                },
                {
                    "sent": "Now the query that is that is highlighted and what you're doing is if there are two articles that are linked by the same user, well, then you're going to be putting an extra link on top of it, so the graph on your right becomes after one iteration of the algorithm becomes the graph down.",
                    "label": 0
                }
            ]
        },
        "clip_27": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "There's.",
                    "label": 0
                },
                {
                    "sent": "What you have done, you simply took two articles that were linked together and then you put this extra edge.",
                    "label": 0
                }
            ]
        },
        "clip_28": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And this goes on and on and on until at some point you're going to be reaching a fixed point.",
                    "label": 0
                },
                {
                    "sent": "You're going to compute all that you wanted to compute.",
                    "label": 0
                }
            ]
        },
        "clip_29": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And finally, you can use your temporal graph to do any possible sparkle.",
                    "label": 0
                },
                {
                    "sent": "You want.",
                    "label": 0
                },
                {
                    "sent": "In this case what I'm doing I'm just extracting the pairs new version old version, so I'm leaving away the information from the user.",
                    "label": 0
                },
                {
                    "sent": "So this is this is the way that we propose to how to compute these queries.",
                    "label": 0
                }
            ]
        },
        "clip_30": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So some comments.",
                    "label": 0
                },
                {
                    "sent": "Well, in the paper we have formal syntax and semantics if you want to read.",
                    "label": 0
                },
                {
                    "sent": "And this is actually more expressive than any of the proposed extensions to property path, you can actually prove that.",
                    "label": 0
                },
                {
                    "sent": "But more importantly to me, this implementation reuses particular technology.",
                    "label": 0
                },
                {
                    "sent": "You're constructing temporal graphs.",
                    "label": 0
                },
                {
                    "sent": "You're querying graphs, you're doing.",
                    "label": 0
                },
                {
                    "sent": "You're not doing anything new.",
                    "label": 0
                },
                {
                    "sent": "That that that that wasn't done before.",
                    "label": 0
                }
            ]
        },
        "clip_31": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So what we implemented in particular is a is a common optimization in this type of languages it's called the linear fragment, so this is the basic structure.",
                    "label": 0
                }
            ]
        },
        "clip_32": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "You need to define a temporal graph.",
                    "label": 0
                }
            ]
        },
        "clip_33": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Then you have a construct template, something that will tell you how you're going to be constructing new tables.",
                    "label": 0
                }
            ]
        },
        "clip_34": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "We have your query so there are two queries when is used to initialize your temporal graph, we call the base query and the other one is the recursive query that uses them paragraph.",
                    "label": 0
                },
                {
                    "sent": "So it takes the temporal graphs and produce a new temporal graph that will be an update of the information that you have.",
                    "label": 0
                }
            ]
        },
        "clip_35": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And then the other query gonna be anything that you want.",
                    "label": 0
                },
                {
                    "sent": "It just uses the information that you just got bigger silly.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                }
            ]
        },
        "clip_36": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So how do you evaluate this?",
                    "label": 0
                },
                {
                    "sent": "Well, first, as I told you, you construct your base graph.",
                    "label": 0
                },
                {
                    "sent": "In this case is T and you just evaluate the base query with this.",
                    "label": 0
                },
                {
                    "sent": "This graph you ever laid the base query and then you start repeating this idea.",
                    "label": 0
                },
                {
                    "sent": "So you are seeing you assign the temporal graph to the result of evaluating the query over the temporal graph, and you do it over and over again until you see that there are no more results, and then your temporal graph is ready.",
                    "label": 0
                },
                {
                    "sent": "So you can just evaluate the outer query.",
                    "label": 0
                }
            ]
        },
        "clip_37": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "We did some experimental evaluation.",
                    "label": 0
                },
                {
                    "sent": "So we want to do it to try real queries in real datasets.",
                    "label": 0
                },
                {
                    "sent": "We wanted to compare a little bit with property path so.",
                    "label": 0
                },
                {
                    "sent": "One thing I have to say.",
                    "label": 0
                },
                {
                    "sent": "So we implemented everything on top of Jenna.",
                    "label": 0
                },
                {
                    "sent": "And the data set.",
                    "label": 0
                },
                {
                    "sent": "Simple graphs are storing disks, so we're not really cheating if the temporal graph is has lots of gigabytes of size, it doesn't really matter, because we use all all genus architecture to store things in disk and not in memory.",
                    "label": 0
                },
                {
                    "sent": "So and we did the rest on everyday laptop on code.",
                    "label": 0
                },
                {
                    "sent": "Anne.",
                    "label": 0
                }
            ]
        },
        "clip_38": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And this is what we get.",
                    "label": 0
                },
                {
                    "sent": "So we were trying to get Link movie database queries.",
                    "label": 0
                },
                {
                    "sent": "So we were thinking about quitting these things.",
                    "label": 0
                },
                {
                    "sent": "So first of all give me or let all actors with a finite bacon number find it bacon number.",
                    "label": 0
                },
                {
                    "sent": "Well it means that you need to either be with Kevin Bacon in a movie or connected through people that has been with Kevin Bacon in a movie.",
                    "label": 0
                },
                {
                    "sent": "I mean we drive other two queries so so the same thing but through the same director and then the same stream but but through directors at work to also actors like say, Clint Eastwood.",
                    "label": 0
                },
                {
                    "sent": "So these are the results.",
                    "label": 0
                },
                {
                    "sent": "I'm not going to lie to you.",
                    "label": 0
                },
                {
                    "sent": "I mean, this is for analytic purposes.",
                    "label": 0
                },
                {
                    "sent": "You're not going to be doing in this on web time, but this is obvious.",
                    "label": 0
                },
                {
                    "sent": "It takes about 160 seconds for the for the most difficult query.",
                    "label": 0
                },
                {
                    "sent": "We did this on Link movie database and on Jogo, but only the piece that.",
                    "label": 0
                },
                {
                    "sent": "That is about the movies.",
                    "label": 0
                }
            ]
        },
        "clip_39": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So if you want to compare with property pass using these queries, we're not going to win, but also to extend seconds to do this query within 160 seconds.",
                    "label": 0
                },
                {
                    "sent": "So what's the deal here that we are?",
                    "label": 0
                },
                {
                    "sent": "This is kind of an unfair comparison because we are comparing to what bit also and system do best.",
                    "label": 0
                },
                {
                    "sent": "It's a property pass.",
                    "label": 0
                },
                {
                    "sent": "It's a language that is less expressive and we're providing a starting point.",
                    "label": 0
                },
                {
                    "sent": "So if we don't provide a starting point, even if we do property pass queries, we actually take half the time than VR system that we drive that are aging and big toe.",
                    "label": 0
                },
                {
                    "sent": "So these are property pass where we don't provide.",
                    "label": 0
                },
                {
                    "sent": "Our starting point.",
                    "label": 0
                }
            ]
        },
        "clip_40": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "So the other thing that we that we did, we analyzed the number of iterations required and we compare that to actually manually write things particle joints so the dotted lines there is writing joints manually.",
                    "label": 0
                },
                {
                    "sent": "Maybe some feasible after the first iteration an and we measure the time that our system was taking after each iteration.",
                    "label": 0
                },
                {
                    "sent": "So just so that you know computing the finite bacon number required 8 iterations and on our databases, and well the same thing with with Eastwood directors required 9.",
                    "label": 0
                },
                {
                    "sent": "So yeah, you will also not beat this if you try doing joins manually.",
                    "label": 0
                },
                {
                    "sent": "That's the message.",
                    "label": 0
                }
            ]
        },
        "clip_41": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So, So what?",
                    "label": 0
                },
                {
                    "sent": "With a little over here, we can do much more than property pass this that the message they want to convey.",
                    "label": 0
                },
                {
                    "sent": "The algorithms are really easy to understand.",
                    "label": 0
                },
                {
                    "sent": "They are very clean.",
                    "label": 0
                },
                {
                    "sent": "We have the implementation and you just do it on top of your favorite Sparkle processor and I need this even faster than some property pass.",
                    "label": 0
                },
                {
                    "sent": "I mean way faster.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "So why not do this?",
                    "label": 0
                },
                {
                    "sent": "You know why not?",
                    "label": 0
                },
                {
                    "sent": "Why?",
                    "label": 0
                },
                {
                    "sent": "Why aren't we doing this in Sparkle?",
                    "label": 0
                },
                {
                    "sent": "It's really easy.",
                    "label": 0
                },
                {
                    "sent": "It gives you more power than you can even beat property pass, and it gives you a really easy way of actually implementing this.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                }
            ]
        },
        "clip_42": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Well, there are more things in the paper.",
                    "label": 0
                },
                {
                    "sent": "There are the former algorithms if you want to implement these formal definitions complexity, but this is the key message.",
                    "label": 0
                },
                {
                    "sent": "Adding regression to sparkle is almost effortless, so I really think that we should do it.",
                    "label": 0
                }
            ]
        },
        "clip_43": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And this is, well, this is my last slide all if you're interested in future work.",
                    "label": 0
                },
                {
                    "sent": "Trying to use these two to actually start creating blank notes and see if we can do query answering under anthologies.",
                    "label": 0
                },
                {
                    "sent": "Tried to support the query entailment within Sparkle engine and we believe that you can actually do that and the other thing of course is well to see what happens.",
                    "label": 0
                },
                {
                    "sent": "If you want to query this on on linked data, not gonna wanna RDF document with processor, but really on a web scale.",
                    "label": 0
                }
            ]
        },
        "clip_44": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So that's a little.",
                    "label": 0
                },
                {
                    "sent": "So let's think through fun.",
                    "label": 0
                },
                {
                    "sent": "And we're open for questions.",
                    "label": 0
                },
                {
                    "sent": "In the back there was.",
                    "label": 0
                },
                {
                    "sent": "Hi hello nice work one.",
                    "label": 0
                },
                {
                    "sent": "And I would like to have a little bit more information about your statement of the extension of the expressiveness of property paths.",
                    "label": 0
                },
                {
                    "sent": "You extend property paths because you can have variables within the path, right?",
                    "label": 0
                },
                {
                    "sent": "Yeah, so so at the end like I showed at the beginning, so property passes just computing triples either hitting triples, Ann and we can do that, and we can do much more.",
                    "label": 0
                },
                {
                    "sent": "It's in the paper.",
                    "label": 0
                },
                {
                    "sent": "We have examples that might give you with more detail if you want, because we have.",
                    "label": 0
                },
                {
                    "sent": "We proposed recently an extension of a property paths where you have for instance conjunction negation on this kind of stuff.",
                    "label": 0
                },
                {
                    "sent": "I would like to maybe we can discuss online about how this compared to this extension.",
                    "label": 0
                },
                {
                    "sent": "That yeah and the interesting thing is that basically to evaluate what we do.",
                    "label": 0
                },
                {
                    "sent": "We divide this syntactically short query into equity where you throw in a number of variables and you project out the variables and also these queries can be evaluated on existing processes.",
                    "label": 0
                },
                {
                    "sent": "OK, we may discuss this, so please don't say I would be really interested to hear about that.",
                    "label": 0
                },
                {
                    "sent": "Thank you.",
                    "label": 0
                },
                {
                    "sent": "Could you explain what's your timeline for recursive on linked data?",
                    "label": 0
                },
                {
                    "sent": "You said that's next work.",
                    "label": 0
                },
                {
                    "sent": "So this thing I mean, this is I'm working thinking on this particular endpoint scenario, so really I have a database and I can.",
                    "label": 0
                },
                {
                    "sent": "I can have all the freedom that I want to use the database tools.",
                    "label": 0
                },
                {
                    "sent": "But there has been lots of discussion today about about quitting link data where you don't really have this disability and.",
                    "label": 0
                },
                {
                    "sent": "I I haven't thought about this match, but I think that this could also be a good paradigm.",
                    "label": 0
                },
                {
                    "sent": "The same idea of actually computing a temporal graph locali and then iterating over this results.",
                    "label": 0
                },
                {
                    "sent": "Plus what you can find on the web.",
                    "label": 0
                },
                {
                    "sent": "That's but it's it's just a very preliminary idea.",
                    "label": 0
                },
                {
                    "sent": "If you want to talk about it, I would be happy because I think it's it's.",
                    "label": 0
                },
                {
                    "sent": "It could be.",
                    "label": 0
                },
                {
                    "sent": "It could lead to somewhere.",
                    "label": 0
                },
                {
                    "sent": "Did you consider or compare these two freaks to for example?",
                    "label": 0
                },
                {
                    "sent": "Adding the base graph with an all RL ontologies because all our express is essentially the rules, right?",
                    "label": 0
                },
                {
                    "sent": "So did you compare this or did you consider this?",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "It depends on the expressive power.",
                    "label": 0
                },
                {
                    "sent": "Again, of what you're doing so.",
                    "label": 0
                },
                {
                    "sent": "Full owl we cannot do.",
                    "label": 0
                },
                {
                    "sent": "It's a bit different, so this is really about pattern based iteration.",
                    "label": 0
                },
                {
                    "sent": "An full you start creating.",
                    "label": 0
                },
                {
                    "sent": "No, it's not a full hour saying I was saying the LRL fragment of our which expresses.",
                    "label": 0
                },
                {
                    "sent": "Rules exactly OK, so this is.",
                    "label": 0
                },
                {
                    "sent": "This is what I'm not sure about.",
                    "label": 0
                },
                {
                    "sent": "I believe that you can do it, but I have not gotten the time too.",
                    "label": 0
                },
                {
                    "sent": "Yeah, so I will really.",
                    "label": 0
                },
                {
                    "sent": "In particular, I think that you can actually do it, but I'm I'm not sure yet.",
                    "label": 0
                },
                {
                    "sent": "So thank you.",
                    "label": 0
                },
                {
                    "sent": "I think this work is a very important.",
                    "label": 0
                },
                {
                    "sent": "I wanted to know if you think if you thought about.",
                    "label": 0
                },
                {
                    "sent": "Cases of recursion in sparkle, in which you cannot hear if you in which you are outside of the linear fragment case.",
                    "label": 0
                },
                {
                    "sent": "So that but there there are.",
                    "label": 0
                },
                {
                    "sent": "They are interesting from my point of view of the, so that should be interesting.",
                    "label": 0
                },
                {
                    "sent": "So what I know in in, in SQL they implement something which is very similar to what they we implemented here, and it's known that it's it's a.",
                    "label": 0
                },
                {
                    "sent": "It's an optimization that takes you very close to anything that you want to do in practice.",
                    "label": 0
                },
                {
                    "sent": "If you don't want to do lead the linear fragment, then I mean you can of course do it and we also implemented that but but it is way way slower because you have basically no optimization.",
                    "label": 0
                },
                {
                    "sent": "Actually, the field of optimizing nonlinear recursive queries is pretty much nonexistent, so there is very little that you're going to use.",
                    "label": 0
                },
                {
                    "sent": "So, but you you could think about this.",
                    "label": 0
                },
                {
                    "sent": "Yeah, so this is an even more expressive language.",
                    "label": 0
                },
                {
                    "sent": "That will take you probably forever to compute, but but if you need it then you need it.",
                    "label": 0
                },
                {
                    "sent": "Just a comment regarding recursion an entailment.",
                    "label": 0
                },
                {
                    "sent": "There is some work done on audience URL also linked to produce question and they use common table expressions in SQL two and call recursion which is I think quite similar to this.",
                    "label": 0
                },
                {
                    "sent": "Well maybe you can, thanks for the moment I I wasn't aware of that.",
                    "label": 0
                },
                {
                    "sent": "Thanks yeah.",
                    "label": 0
                },
                {
                    "sent": "It's the same idea.",
                    "label": 0
                },
                {
                    "sent": "Kimi, one quick thing you do, you treat negation there in sparkle, so have you have full sparkle in the pattern?",
                    "label": 0
                },
                {
                    "sent": "Oh well, not for the linear.",
                    "label": 0
                },
                {
                    "sent": "You could define the problem with these things with negations that the semantic is it's not easy to understand.",
                    "label": 0
                },
                {
                    "sent": "So So what we implemented has no negation.",
                    "label": 0
                },
                {
                    "sent": "It's easy to understand, but this is it's ongoing work.",
                    "label": 0
                },
                {
                    "sent": "Actually.",
                    "label": 0
                },
                {
                    "sent": "I'm not sure what would be the correct way of doing negation here.",
                    "label": 0
                },
                {
                    "sent": "There are several options, right?",
                    "label": 0
                },
                {
                    "sent": "OK, thanks to one for the first talk.",
                    "label": 0
                }
            ]
        }
    }
}