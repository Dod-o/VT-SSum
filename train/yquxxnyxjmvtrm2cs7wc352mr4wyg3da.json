{
    "id": "yquxxnyxjmvtrm2cs7wc352mr4wyg3da",
    "title": "dipLODocus[RDF]: Short and Long-Tail RDF Analytics for Massive Webs of Data",
    "info": {
        "author": [
            "Marcin Wylot, University of Fribourg"
        ],
        "published": "Nov. 25, 2011",
        "recorded": "October 2011",
        "category": [
            "Top->Computer Science->Semantic Web->RDF - Resource Description Framework"
        ]
    },
    "url": "http://videolectures.net/iswc2011_wylot_data/",
    "segmentation": [
        [
            "They want to tell you about diploid accuse, which besides being pretty cute, Dinosaur is the new RDF processing system based on hybrid storage.",
            "This work was done by Philip Drama, who marries Vishnevsky Xpo and me marching Villot.",
            "And we work in exercise scaling for up University of free book Switzerland."
        ],
        [
            "We can observe a sharp increase in semantic and ELODIE data.",
            "We can also see that increasingly we need to answer complex queries.",
            "Analytic queries like returning profits or supervised the most students.",
            "And what's more, we need to have results for those queries online.",
            "We don't want to wait whole life whole night to know who supervised the most students last year at International Semantic Web Conference.",
            "Two industrial speaker complaints for the lack of an efficient gullible solution for RDF data.",
            "As our research confirmed and existing solutions suffer from scalability issues.",
            "They have difficulties with complex analytic queries.",
            "We believe that our solution may solve most of those difficulties.",
            "Diploid accused achieves much better results for business intelligence queries and for complex transactional queries."
        ],
        [
            "And you know, after we decided to investigate this problem, I asked Philip our professor.",
            "But Phil, how we gonna make this system faster?",
            "Because you know, a lot of people try to do it.",
            "And you know, without success and Philip said to me, merchant, listen there, Trish essential tricks to speed to speed up data processing.",
            "And he said colocation, colocation, and, surprisingly, colocation."
        ],
        [
            "And that's what we have done.",
            "We collocated data together and different data structures.",
            "And since we colocate data together in different ways, we can reduce disk and memory sticks, which are the main bottlenecks in databases, especially this 6th.",
            "You know we have everything here to each other, so if we retrieve one object, we in an instance we have everything considered considering to this object in main memory."
        ],
        [
            "And the romantic part of this talk, I will tell you briefly about architecture.",
            "Then about our main idea and then the most interesting part, data structures and basic operations like inserts and queries.",
            "And at the very end evaluation and our future plans."
        ],
        [
            "Jumping to the system architecture first, we have few models in in our system.",
            "First is query processor.",
            "When it receives a query from the client, it parses it, optimize and creates a query plan, and that's pretty easy.",
            "And then we have our hash table.",
            "At our hashtable, use the lexicographic tree and assign a unique key to each.",
            "You arrive, and then and this hashtable points to further data structures like molecules which are managed by cluster manager, and they stores RDF subgraphs and we have templates managed by template manager."
        ],
        [
            "In the public use, we implemented the new hybrid model for storing data.",
            "We consider data from 2 perspective horizontal and vertical.",
            "Horizontal perspective is a graph perspective for which we store RDF molecules and the other one vertical is an elliptic perspective and share with store compact list of index literal values."
        ],
        [
            "In the product use, we'll stream Maine and data structures first one is our molecules which organize data into subgraphs of different profoundness, and the next one is list of literals to index literals by templates.",
            "And last but not least, is hashtable to index.",
            "You arrive by molecules they belong to.",
            "In all of them, we collect data based on our declarative templates.",
            "It's our way to structure eyes and."
        ],
        [
            "Later.",
            "And you know this employment of declarative templates for RDF data is one of our key innovation, thanks to which we can efficiently collocate large collection of related values.",
            "Templates played role of RDF schema in in diploid accuse we do not rely on RDF schema to define templates because men of classes and constraints and their own method in data set.",
            "Templates define the shape of molecule.",
            "It contains information what kind of data is in the molecule.",
            "For example, here we have students who follows some courses as a first name.",
            "Last name might be might live in some city, etc.",
            "Having those templates and thanks to thanks to it, we can, after work creating molecule for each instance of root note like like a student on this example."
        ],
        [
            "When you triple enters to our template manager and it is associated with template.",
            "To find the right template, we take into consideration type of, subject, predicate and type of object as on this example on the on the left you can see student 32 which is subject and type of it is student.",
            "We we can see a first name, predicate and Joe.",
            "It's a literal value and on the right it fits exactly to the idea #5.",
            "After being provided by template manager and the triple goes to the Cluster manager which inserts it to one or more molecules."
        ],
        [
            "Our molecule is a horizontal structure which stores information about certain object instance in the database.",
            "We can compare it a little bit to row in a relational database system.",
            "So on this picture we have student 28 and or inform informations around it we use molecules and in two ways to logically group sets of related to arrive so that we precompute joints.",
            "And to physically colocate data on disk so that we reduce IO operations."
        ],
        [
            "Our next data structure is its list of literals.",
            "It's a vertical list of values corresponding to one template.",
            "Little bit like a column in a in a relational database system.",
            "We use them mainly for analytic and aggregate queries.",
            "So on our example image we have a list of values for template defining students name.",
            "We have list of sorted names and each entry indicates.",
            "Corresponding molecule this list of literals allows us to process long lists of literals very, very efficiently."
        ],
        [
            "And our third data structure is hashtable.",
            "The central index of our system we use a lexicographic tree to parse your eye and to assign them a unique key.",
            "So as you can see on the left and we have two names marching and Mario Switch has come on part Mar and displays.",
            "Strings are splitted and tulips are created and to each of them unique key ID is assigned.",
            "And then our our hashtable assigned for each of those entries for each of those leaves assign.",
            "List of ordered list.",
            "List of ordered molecules in which we can find a certain entry.",
            "In context of certain templates, so to show an example on the right we have, we have student one.",
            "We have list of templates corresponding to this instance, and for each template we have a list of molecules where student one appears in context of template.",
            "For example template template one.",
            "This may sounds like a quite peculiar way of indexing, but this allows us to execute many queries very efficiently simply by reading or intersecting those lists from hashtable."
        ],
        [
            "And now I would like to give you some of you.",
            "How come on operations are profiting diplodactylus?",
            "Let me start with the inserts which have updates are relatively complex in our system.",
            "And that's why we decided to execute them in bulk.",
            "And in this way they may be executed fairly, fairly efficiently.",
            "Our bulk insert algorithm ISM N pass algorithm, where N is the deepest level of molecule in the first path pass we identify root nodes and their templates and create all molecules.",
            "The following passes are used to join triples to root node."
        ],
        [
            "Now jumping to the queries, let me give you as an example, three kind of queries, triple patterns, molecule queries and aggregate analytic queries.",
            "Of course, we support all kinds of queries.",
            "And triple patterns queries are quite simple for diploid accuse.",
            "Usually it resolve them by looking for you, Ryan hashtable and retreating corresponding molecule numbers.",
            "And finally, if it's necessary reading values from molecule to give you some example, let's let's try query.",
            "Get all students following cursor or picture on the left so that we have to seek for coursehero in our hash table, and then we need to find the template corresponding to the subject type, student and predicate.",
            "Take take scores and then we have list of students who follow this course.",
            "If we want to make the square a little bit more fancy, we can add across one as the next constraint.",
            "So that to to get all students following cursor and course one we need to do exactly the same operation As for coursehero we need to do it for course one and at the very end we have two lists of sorted values.",
            "The only thing we have to do is to intersect those two lists, and since those are sorted, this intersection is pretty pretty fast."
        ],
        [
            "Next kind of queries.",
            "This molecule queries queries retreating many values around the given instance.",
            "Those kind of query also extremely easy for the product use.",
            "In most cases we just have to find the corresponding molecule in hash table.",
            "In this molecule we can find all needed values.",
            "If the scope of the query is bigger than the scope of molecule defined in diploid accuse, we can very easily join molecules based on root nodes.",
            "So on our example image we have student, one who takes course course 3 for example, and that's the end of our molecule in diplacusis.",
            "So we can read next molecule for Kostry and join those two molecules based on node corestream."
        ],
        [
            "Yep, and jumping to last kind of queries.",
            "Aggregate analytic queries.",
            "Those kind of queries can also be extremely efficiently solved by our system.",
            "In most cases it's enough to intersect molecules in hashtable and then getting values from from remaining molecules.",
            "Large queries on a literal values such as returning all names of graduate students or returning students above 21 can be extremely efficiently solved by taking advantage of our list of literals where we have a compact and sorted list of values for a given template, simply by getting all molecules containing given template.",
            "On our on our example, we went to get all students above 21, so we need to find the corresponding list of literals for student aid and then we need to jump to the right place above 21 and simply read all molecules pointed bye Bye Bye doll sentry."
        ],
        [
            "And to evaluate our performance, our approach, we use probably the most popular benchmark for semantic web.",
            "Lehigh University benchmark.",
            "It provides an ontology describing universities, data generator and 14 queries.",
            "We use two datasets, one generated for 10 universities and the second one generated for 100 universities.",
            "We compared the runtime execution time for lab queries and four three analytic queries inspired by RDF analytic benchmark.",
            "We recently proposed Bologna bench.",
            "And the three additional queries are get Professor who supervised the most.",
            "Students get me big molecule containing everything around student zero within a scope two and get all names for all graduate students about to last query side told already a little bit what kind of queries they are."
        ],
        [
            "The results you can see are given as a runtime ratios with diploid accused taken as a basis for ratio one.",
            "It means, for example, bar indicating indicating 752 means that diploid accused is 752 times faster than than this system.",
            "Generally speaking, the product uses very fast.",
            "It's overall a 30 times faster than the fastest system on Lube queries and 350 times faster than the fastest system on analytic queries.",
            "And what's more, it scale its case gracefully from 10 to 100 universities.",
            "If you want to go deeply in this results, I would invite you to visit our website or our paper here.",
            "I had just an extract from from the result."
        ],
        [
            "OK, our future plans.",
            "We want to release Diplo Dequeues as an open source as soon as possible.",
            "So we went to war, went to clean a little bit our code and extend it.",
            "Our next scientific steps will be paralyzing of operations to take advantage of multicore architecture and large clusters of machines, and we also want to work on automated design database design problem in order to automatically suggest sets of optimal root nodes."
        ],
        [
            "And to conclude.",
            "Diploid accuse, based on a new hybrid storage model and RDF templates to execute various kinds of queries very efficiently in diploid accuse we colocate data in three compact data structures molecules where we store RDF subgraphs.",
            "List of literals where we have a compact sorted list of values and hash table indexed by templates.",
            "Each of them is optimized.",
            "Four different kind of operations.",
            "Of course, the product has some weak points because of its compact ordered data structures and data redundancy.",
            "Diploid accuse is relatively slow in inserts and updates.",
            "But it is a tradeoff we made to speed up query processing and it works.",
            "The product uses 30 times faster on living queries and 350 times faster on analytic queries than the best system on each of those kind of queries."
        ],
        [
            "And thank you very much for your attention.",
            "If you have questions, do not hesitate.",
            "I would like to know you haven't see a lot about, you know update.",
            "I mean about loading time.",
            "I would like to know if you can give us an idea about loading time and if you can also talk about the impact of the multiplicity of patterns in your data on your loading time, because LBM in particular has a fixed number of pattern, so as you increase the number of University, you're not actually increasing the number of parrots, so.",
            "In terms of your molecule, so I do not increase what I can get it.",
            "Sorry if I increase number of universities I do not increase.",
            "Yes, you're not when you increase the number of universities, you're not actually increasing the number of patterns right?",
            "Because so Wizard Edition rated is just by adding more instances of different patterns, but the number of parents is kind of fixed right?",
            "A yeah, it's kind of fixed.",
            "You know we create the this our templates at the very beginning.",
            "This number is not huge.",
            "It's like for this kind of data set, it's like 40 something like that.",
            "I don't remember exactly.",
            "Yeah, it's it's.",
            "It's not huge.",
            "It will be very interesting to see how the system scale when you have more templates without your parents.",
            "I know what you mean.",
            "You know in this case if you have kind of varying in homogeneous data set, we can use wildcards.",
            "So for example, we can have a student who likes something and do something.",
            "It's something like undefined.",
            "So we can use star as a as a wild card.",
            "And you know, in this way we have this template with short and we don't have to use.",
            "Subject predicate object.",
            "You can use subject, predicate and start as an object.",
            "Wild card as an object.",
            "So by doing that you can reduce the number of templates.",
            "Yeah, and be less precise, yeah.",
            "Um, it's over the Sparkle Berlin Berlin's pocket benchmark for the business intelligence use case.",
            "It's quite recent, so that's why I'm asking you again too.",
            "We now this benchmark who simply didn't have time to benchmark.",
            "The product is against every benchmark on market, but we want to do it maybe for our next paper.",
            "Will try to present results for more.",
            "Not for Lehigh University benchmark, but also for.",
            "Other one, there are plenty of them as you know.",
            "My question is also in line with the previous questions because the loop and data set is highly structured, it would really be interesting to see like with datasets how it works with datasets which have lower structure, so I'm just aware of the paper apples and oranges which was from this you SIGMOD conference where they said OK, not every benchmark is the same because you have high structure and low structure in the data and so it's the question of what use case.",
            "Are you aiming for high structured data or low structured data?",
            "So this is good for high structured data, but I would be really interested to see it Father datasets.",
            "Yeah, you know, as I as I let it all for if data is not not as structured as as in this benchmark, we can use wildcards simply.",
            "We will try to present some something on different benchmarks so that you know we will see how it how it will behave.",
            "Different kind of mesh network.",
            "I would believe that it will be pretty fast.",
            "I would actually suggest that you try a DP and DP pedia because it has a lot.",
            "Yeah, I know it's I told you simply time problem.",
            "We always have deadlines and you know we will try definitely to try different benchmarks.",
            "OK, we have time for a last question.",
            "Right here.",
            "I would like to know about the optimizer, what kind of statistics or information do you use to generate your execution plans?",
            "Actually, we don't implemented this optimizer yet.",
            "It's now it's hard coded.",
            "We will work on this optimizer as soon as possible, definitely before releasing the product is another person.",
            "Thank you.",
            "OK, let's thank our speaker again.",
            "Thank you very much."
        ]
    ],
    "summarization": {
        "clip_0": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "They want to tell you about diploid accuse, which besides being pretty cute, Dinosaur is the new RDF processing system based on hybrid storage.",
                    "label": 0
                },
                {
                    "sent": "This work was done by Philip Drama, who marries Vishnevsky Xpo and me marching Villot.",
                    "label": 0
                },
                {
                    "sent": "And we work in exercise scaling for up University of free book Switzerland.",
                    "label": 0
                }
            ]
        },
        "clip_1": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "We can observe a sharp increase in semantic and ELODIE data.",
                    "label": 0
                },
                {
                    "sent": "We can also see that increasingly we need to answer complex queries.",
                    "label": 0
                },
                {
                    "sent": "Analytic queries like returning profits or supervised the most students.",
                    "label": 1
                },
                {
                    "sent": "And what's more, we need to have results for those queries online.",
                    "label": 0
                },
                {
                    "sent": "We don't want to wait whole life whole night to know who supervised the most students last year at International Semantic Web Conference.",
                    "label": 1
                },
                {
                    "sent": "Two industrial speaker complaints for the lack of an efficient gullible solution for RDF data.",
                    "label": 0
                },
                {
                    "sent": "As our research confirmed and existing solutions suffer from scalability issues.",
                    "label": 0
                },
                {
                    "sent": "They have difficulties with complex analytic queries.",
                    "label": 0
                },
                {
                    "sent": "We believe that our solution may solve most of those difficulties.",
                    "label": 0
                },
                {
                    "sent": "Diploid accused achieves much better results for business intelligence queries and for complex transactional queries.",
                    "label": 0
                }
            ]
        },
        "clip_2": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And you know, after we decided to investigate this problem, I asked Philip our professor.",
                    "label": 0
                },
                {
                    "sent": "But Phil, how we gonna make this system faster?",
                    "label": 0
                },
                {
                    "sent": "Because you know, a lot of people try to do it.",
                    "label": 0
                },
                {
                    "sent": "And you know, without success and Philip said to me, merchant, listen there, Trish essential tricks to speed to speed up data processing.",
                    "label": 0
                },
                {
                    "sent": "And he said colocation, colocation, and, surprisingly, colocation.",
                    "label": 0
                }
            ]
        },
        "clip_3": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "And that's what we have done.",
                    "label": 0
                },
                {
                    "sent": "We collocated data together and different data structures.",
                    "label": 0
                },
                {
                    "sent": "And since we colocate data together in different ways, we can reduce disk and memory sticks, which are the main bottlenecks in databases, especially this 6th.",
                    "label": 1
                },
                {
                    "sent": "You know we have everything here to each other, so if we retrieve one object, we in an instance we have everything considered considering to this object in main memory.",
                    "label": 0
                }
            ]
        },
        "clip_4": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "And the romantic part of this talk, I will tell you briefly about architecture.",
                    "label": 0
                },
                {
                    "sent": "Then about our main idea and then the most interesting part, data structures and basic operations like inserts and queries.",
                    "label": 1
                },
                {
                    "sent": "And at the very end evaluation and our future plans.",
                    "label": 0
                }
            ]
        },
        "clip_5": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Jumping to the system architecture first, we have few models in in our system.",
                    "label": 0
                },
                {
                    "sent": "First is query processor.",
                    "label": 0
                },
                {
                    "sent": "When it receives a query from the client, it parses it, optimize and creates a query plan, and that's pretty easy.",
                    "label": 0
                },
                {
                    "sent": "And then we have our hash table.",
                    "label": 0
                },
                {
                    "sent": "At our hashtable, use the lexicographic tree and assign a unique key to each.",
                    "label": 0
                },
                {
                    "sent": "You arrive, and then and this hashtable points to further data structures like molecules which are managed by cluster manager, and they stores RDF subgraphs and we have templates managed by template manager.",
                    "label": 0
                }
            ]
        },
        "clip_6": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "In the public use, we implemented the new hybrid model for storing data.",
                    "label": 0
                },
                {
                    "sent": "We consider data from 2 perspective horizontal and vertical.",
                    "label": 0
                },
                {
                    "sent": "Horizontal perspective is a graph perspective for which we store RDF molecules and the other one vertical is an elliptic perspective and share with store compact list of index literal values.",
                    "label": 0
                }
            ]
        },
        "clip_7": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "In the product use, we'll stream Maine and data structures first one is our molecules which organize data into subgraphs of different profoundness, and the next one is list of literals to index literals by templates.",
                    "label": 0
                },
                {
                    "sent": "And last but not least, is hashtable to index.",
                    "label": 0
                },
                {
                    "sent": "You arrive by molecules they belong to.",
                    "label": 0
                },
                {
                    "sent": "In all of them, we collect data based on our declarative templates.",
                    "label": 0
                },
                {
                    "sent": "It's our way to structure eyes and.",
                    "label": 0
                }
            ]
        },
        "clip_8": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Later.",
                    "label": 0
                },
                {
                    "sent": "And you know this employment of declarative templates for RDF data is one of our key innovation, thanks to which we can efficiently collocate large collection of related values.",
                    "label": 0
                },
                {
                    "sent": "Templates played role of RDF schema in in diploid accuse we do not rely on RDF schema to define templates because men of classes and constraints and their own method in data set.",
                    "label": 0
                },
                {
                    "sent": "Templates define the shape of molecule.",
                    "label": 0
                },
                {
                    "sent": "It contains information what kind of data is in the molecule.",
                    "label": 0
                },
                {
                    "sent": "For example, here we have students who follows some courses as a first name.",
                    "label": 0
                },
                {
                    "sent": "Last name might be might live in some city, etc.",
                    "label": 0
                },
                {
                    "sent": "Having those templates and thanks to thanks to it, we can, after work creating molecule for each instance of root note like like a student on this example.",
                    "label": 0
                }
            ]
        },
        "clip_9": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "When you triple enters to our template manager and it is associated with template.",
                    "label": 0
                },
                {
                    "sent": "To find the right template, we take into consideration type of, subject, predicate and type of object as on this example on the on the left you can see student 32 which is subject and type of it is student.",
                    "label": 0
                },
                {
                    "sent": "We we can see a first name, predicate and Joe.",
                    "label": 0
                },
                {
                    "sent": "It's a literal value and on the right it fits exactly to the idea #5.",
                    "label": 0
                },
                {
                    "sent": "After being provided by template manager and the triple goes to the Cluster manager which inserts it to one or more molecules.",
                    "label": 0
                }
            ]
        },
        "clip_10": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Our molecule is a horizontal structure which stores information about certain object instance in the database.",
                    "label": 0
                },
                {
                    "sent": "We can compare it a little bit to row in a relational database system.",
                    "label": 0
                },
                {
                    "sent": "So on this picture we have student 28 and or inform informations around it we use molecules and in two ways to logically group sets of related to arrive so that we precompute joints.",
                    "label": 0
                },
                {
                    "sent": "And to physically colocate data on disk so that we reduce IO operations.",
                    "label": 0
                }
            ]
        },
        "clip_11": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Our next data structure is its list of literals.",
                    "label": 1
                },
                {
                    "sent": "It's a vertical list of values corresponding to one template.",
                    "label": 0
                },
                {
                    "sent": "Little bit like a column in a in a relational database system.",
                    "label": 0
                },
                {
                    "sent": "We use them mainly for analytic and aggregate queries.",
                    "label": 0
                },
                {
                    "sent": "So on our example image we have a list of values for template defining students name.",
                    "label": 1
                },
                {
                    "sent": "We have list of sorted names and each entry indicates.",
                    "label": 0
                },
                {
                    "sent": "Corresponding molecule this list of literals allows us to process long lists of literals very, very efficiently.",
                    "label": 0
                }
            ]
        },
        "clip_12": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "And our third data structure is hashtable.",
                    "label": 0
                },
                {
                    "sent": "The central index of our system we use a lexicographic tree to parse your eye and to assign them a unique key.",
                    "label": 1
                },
                {
                    "sent": "So as you can see on the left and we have two names marching and Mario Switch has come on part Mar and displays.",
                    "label": 0
                },
                {
                    "sent": "Strings are splitted and tulips are created and to each of them unique key ID is assigned.",
                    "label": 0
                },
                {
                    "sent": "And then our our hashtable assigned for each of those entries for each of those leaves assign.",
                    "label": 0
                },
                {
                    "sent": "List of ordered list.",
                    "label": 0
                },
                {
                    "sent": "List of ordered molecules in which we can find a certain entry.",
                    "label": 0
                },
                {
                    "sent": "In context of certain templates, so to show an example on the right we have, we have student one.",
                    "label": 0
                },
                {
                    "sent": "We have list of templates corresponding to this instance, and for each template we have a list of molecules where student one appears in context of template.",
                    "label": 0
                },
                {
                    "sent": "For example template template one.",
                    "label": 0
                },
                {
                    "sent": "This may sounds like a quite peculiar way of indexing, but this allows us to execute many queries very efficiently simply by reading or intersecting those lists from hashtable.",
                    "label": 0
                }
            ]
        },
        "clip_13": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And now I would like to give you some of you.",
                    "label": 0
                },
                {
                    "sent": "How come on operations are profiting diplodactylus?",
                    "label": 0
                },
                {
                    "sent": "Let me start with the inserts which have updates are relatively complex in our system.",
                    "label": 0
                },
                {
                    "sent": "And that's why we decided to execute them in bulk.",
                    "label": 0
                },
                {
                    "sent": "And in this way they may be executed fairly, fairly efficiently.",
                    "label": 0
                },
                {
                    "sent": "Our bulk insert algorithm ISM N pass algorithm, where N is the deepest level of molecule in the first path pass we identify root nodes and their templates and create all molecules.",
                    "label": 0
                },
                {
                    "sent": "The following passes are used to join triples to root node.",
                    "label": 0
                }
            ]
        },
        "clip_14": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Now jumping to the queries, let me give you as an example, three kind of queries, triple patterns, molecule queries and aggregate analytic queries.",
                    "label": 1
                },
                {
                    "sent": "Of course, we support all kinds of queries.",
                    "label": 0
                },
                {
                    "sent": "And triple patterns queries are quite simple for diploid accuse.",
                    "label": 0
                },
                {
                    "sent": "Usually it resolve them by looking for you, Ryan hashtable and retreating corresponding molecule numbers.",
                    "label": 0
                },
                {
                    "sent": "And finally, if it's necessary reading values from molecule to give you some example, let's let's try query.",
                    "label": 0
                },
                {
                    "sent": "Get all students following cursor or picture on the left so that we have to seek for coursehero in our hash table, and then we need to find the template corresponding to the subject type, student and predicate.",
                    "label": 0
                },
                {
                    "sent": "Take take scores and then we have list of students who follow this course.",
                    "label": 0
                },
                {
                    "sent": "If we want to make the square a little bit more fancy, we can add across one as the next constraint.",
                    "label": 0
                },
                {
                    "sent": "So that to to get all students following cursor and course one we need to do exactly the same operation As for coursehero we need to do it for course one and at the very end we have two lists of sorted values.",
                    "label": 0
                },
                {
                    "sent": "The only thing we have to do is to intersect those two lists, and since those are sorted, this intersection is pretty pretty fast.",
                    "label": 0
                }
            ]
        },
        "clip_15": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Next kind of queries.",
                    "label": 0
                },
                {
                    "sent": "This molecule queries queries retreating many values around the given instance.",
                    "label": 1
                },
                {
                    "sent": "Those kind of query also extremely easy for the product use.",
                    "label": 0
                },
                {
                    "sent": "In most cases we just have to find the corresponding molecule in hash table.",
                    "label": 0
                },
                {
                    "sent": "In this molecule we can find all needed values.",
                    "label": 0
                },
                {
                    "sent": "If the scope of the query is bigger than the scope of molecule defined in diploid accuse, we can very easily join molecules based on root nodes.",
                    "label": 0
                },
                {
                    "sent": "So on our example image we have student, one who takes course course 3 for example, and that's the end of our molecule in diplacusis.",
                    "label": 0
                },
                {
                    "sent": "So we can read next molecule for Kostry and join those two molecules based on node corestream.",
                    "label": 0
                }
            ]
        },
        "clip_16": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Yep, and jumping to last kind of queries.",
                    "label": 0
                },
                {
                    "sent": "Aggregate analytic queries.",
                    "label": 0
                },
                {
                    "sent": "Those kind of queries can also be extremely efficiently solved by our system.",
                    "label": 0
                },
                {
                    "sent": "In most cases it's enough to intersect molecules in hashtable and then getting values from from remaining molecules.",
                    "label": 0
                },
                {
                    "sent": "Large queries on a literal values such as returning all names of graduate students or returning students above 21 can be extremely efficiently solved by taking advantage of our list of literals where we have a compact and sorted list of values for a given template, simply by getting all molecules containing given template.",
                    "label": 0
                },
                {
                    "sent": "On our on our example, we went to get all students above 21, so we need to find the corresponding list of literals for student aid and then we need to jump to the right place above 21 and simply read all molecules pointed bye Bye Bye doll sentry.",
                    "label": 0
                }
            ]
        },
        "clip_17": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "And to evaluate our performance, our approach, we use probably the most popular benchmark for semantic web.",
                    "label": 0
                },
                {
                    "sent": "Lehigh University benchmark.",
                    "label": 0
                },
                {
                    "sent": "It provides an ontology describing universities, data generator and 14 queries.",
                    "label": 0
                },
                {
                    "sent": "We use two datasets, one generated for 10 universities and the second one generated for 100 universities.",
                    "label": 1
                },
                {
                    "sent": "We compared the runtime execution time for lab queries and four three analytic queries inspired by RDF analytic benchmark.",
                    "label": 1
                },
                {
                    "sent": "We recently proposed Bologna bench.",
                    "label": 0
                },
                {
                    "sent": "And the three additional queries are get Professor who supervised the most.",
                    "label": 1
                },
                {
                    "sent": "Students get me big molecule containing everything around student zero within a scope two and get all names for all graduate students about to last query side told already a little bit what kind of queries they are.",
                    "label": 0
                }
            ]
        },
        "clip_18": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "The results you can see are given as a runtime ratios with diploid accused taken as a basis for ratio one.",
                    "label": 0
                },
                {
                    "sent": "It means, for example, bar indicating indicating 752 means that diploid accused is 752 times faster than than this system.",
                    "label": 0
                },
                {
                    "sent": "Generally speaking, the product uses very fast.",
                    "label": 0
                },
                {
                    "sent": "It's overall a 30 times faster than the fastest system on Lube queries and 350 times faster than the fastest system on analytic queries.",
                    "label": 0
                },
                {
                    "sent": "And what's more, it scale its case gracefully from 10 to 100 universities.",
                    "label": 0
                },
                {
                    "sent": "If you want to go deeply in this results, I would invite you to visit our website or our paper here.",
                    "label": 0
                },
                {
                    "sent": "I had just an extract from from the result.",
                    "label": 0
                }
            ]
        },
        "clip_19": {
            "is_summarization_sample": false,
            "summarization_data": []
        },
        "clip_20": {
            "is_summarization_sample": false,
            "summarization_data": []
        },
        "clip_21": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "OK, our future plans.",
                    "label": 0
                },
                {
                    "sent": "We want to release Diplo Dequeues as an open source as soon as possible.",
                    "label": 0
                },
                {
                    "sent": "So we went to war, went to clean a little bit our code and extend it.",
                    "label": 0
                },
                {
                    "sent": "Our next scientific steps will be paralyzing of operations to take advantage of multicore architecture and large clusters of machines, and we also want to work on automated design database design problem in order to automatically suggest sets of optimal root nodes.",
                    "label": 0
                }
            ]
        },
        "clip_22": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And to conclude.",
                    "label": 0
                },
                {
                    "sent": "Diploid accuse, based on a new hybrid storage model and RDF templates to execute various kinds of queries very efficiently in diploid accuse we colocate data in three compact data structures molecules where we store RDF subgraphs.",
                    "label": 0
                },
                {
                    "sent": "List of literals where we have a compact sorted list of values and hash table indexed by templates.",
                    "label": 0
                },
                {
                    "sent": "Each of them is optimized.",
                    "label": 0
                },
                {
                    "sent": "Four different kind of operations.",
                    "label": 0
                },
                {
                    "sent": "Of course, the product has some weak points because of its compact ordered data structures and data redundancy.",
                    "label": 0
                },
                {
                    "sent": "Diploid accuse is relatively slow in inserts and updates.",
                    "label": 0
                },
                {
                    "sent": "But it is a tradeoff we made to speed up query processing and it works.",
                    "label": 0
                },
                {
                    "sent": "The product uses 30 times faster on living queries and 350 times faster on analytic queries than the best system on each of those kind of queries.",
                    "label": 0
                }
            ]
        },
        "clip_23": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And thank you very much for your attention.",
                    "label": 0
                },
                {
                    "sent": "If you have questions, do not hesitate.",
                    "label": 0
                },
                {
                    "sent": "I would like to know you haven't see a lot about, you know update.",
                    "label": 0
                },
                {
                    "sent": "I mean about loading time.",
                    "label": 0
                },
                {
                    "sent": "I would like to know if you can give us an idea about loading time and if you can also talk about the impact of the multiplicity of patterns in your data on your loading time, because LBM in particular has a fixed number of pattern, so as you increase the number of University, you're not actually increasing the number of parrots, so.",
                    "label": 0
                },
                {
                    "sent": "In terms of your molecule, so I do not increase what I can get it.",
                    "label": 0
                },
                {
                    "sent": "Sorry if I increase number of universities I do not increase.",
                    "label": 0
                },
                {
                    "sent": "Yes, you're not when you increase the number of universities, you're not actually increasing the number of patterns right?",
                    "label": 0
                },
                {
                    "sent": "Because so Wizard Edition rated is just by adding more instances of different patterns, but the number of parents is kind of fixed right?",
                    "label": 0
                },
                {
                    "sent": "A yeah, it's kind of fixed.",
                    "label": 0
                },
                {
                    "sent": "You know we create the this our templates at the very beginning.",
                    "label": 0
                },
                {
                    "sent": "This number is not huge.",
                    "label": 0
                },
                {
                    "sent": "It's like for this kind of data set, it's like 40 something like that.",
                    "label": 0
                },
                {
                    "sent": "I don't remember exactly.",
                    "label": 0
                },
                {
                    "sent": "Yeah, it's it's.",
                    "label": 0
                },
                {
                    "sent": "It's not huge.",
                    "label": 0
                },
                {
                    "sent": "It will be very interesting to see how the system scale when you have more templates without your parents.",
                    "label": 0
                },
                {
                    "sent": "I know what you mean.",
                    "label": 0
                },
                {
                    "sent": "You know in this case if you have kind of varying in homogeneous data set, we can use wildcards.",
                    "label": 0
                },
                {
                    "sent": "So for example, we can have a student who likes something and do something.",
                    "label": 0
                },
                {
                    "sent": "It's something like undefined.",
                    "label": 0
                },
                {
                    "sent": "So we can use star as a as a wild card.",
                    "label": 0
                },
                {
                    "sent": "And you know, in this way we have this template with short and we don't have to use.",
                    "label": 0
                },
                {
                    "sent": "Subject predicate object.",
                    "label": 0
                },
                {
                    "sent": "You can use subject, predicate and start as an object.",
                    "label": 0
                },
                {
                    "sent": "Wild card as an object.",
                    "label": 0
                },
                {
                    "sent": "So by doing that you can reduce the number of templates.",
                    "label": 0
                },
                {
                    "sent": "Yeah, and be less precise, yeah.",
                    "label": 0
                },
                {
                    "sent": "Um, it's over the Sparkle Berlin Berlin's pocket benchmark for the business intelligence use case.",
                    "label": 0
                },
                {
                    "sent": "It's quite recent, so that's why I'm asking you again too.",
                    "label": 0
                },
                {
                    "sent": "We now this benchmark who simply didn't have time to benchmark.",
                    "label": 0
                },
                {
                    "sent": "The product is against every benchmark on market, but we want to do it maybe for our next paper.",
                    "label": 0
                },
                {
                    "sent": "Will try to present results for more.",
                    "label": 0
                },
                {
                    "sent": "Not for Lehigh University benchmark, but also for.",
                    "label": 0
                },
                {
                    "sent": "Other one, there are plenty of them as you know.",
                    "label": 0
                },
                {
                    "sent": "My question is also in line with the previous questions because the loop and data set is highly structured, it would really be interesting to see like with datasets how it works with datasets which have lower structure, so I'm just aware of the paper apples and oranges which was from this you SIGMOD conference where they said OK, not every benchmark is the same because you have high structure and low structure in the data and so it's the question of what use case.",
                    "label": 0
                },
                {
                    "sent": "Are you aiming for high structured data or low structured data?",
                    "label": 0
                },
                {
                    "sent": "So this is good for high structured data, but I would be really interested to see it Father datasets.",
                    "label": 0
                },
                {
                    "sent": "Yeah, you know, as I as I let it all for if data is not not as structured as as in this benchmark, we can use wildcards simply.",
                    "label": 0
                },
                {
                    "sent": "We will try to present some something on different benchmarks so that you know we will see how it how it will behave.",
                    "label": 0
                },
                {
                    "sent": "Different kind of mesh network.",
                    "label": 0
                },
                {
                    "sent": "I would believe that it will be pretty fast.",
                    "label": 0
                },
                {
                    "sent": "I would actually suggest that you try a DP and DP pedia because it has a lot.",
                    "label": 0
                },
                {
                    "sent": "Yeah, I know it's I told you simply time problem.",
                    "label": 0
                },
                {
                    "sent": "We always have deadlines and you know we will try definitely to try different benchmarks.",
                    "label": 0
                },
                {
                    "sent": "OK, we have time for a last question.",
                    "label": 0
                },
                {
                    "sent": "Right here.",
                    "label": 0
                },
                {
                    "sent": "I would like to know about the optimizer, what kind of statistics or information do you use to generate your execution plans?",
                    "label": 0
                },
                {
                    "sent": "Actually, we don't implemented this optimizer yet.",
                    "label": 0
                },
                {
                    "sent": "It's now it's hard coded.",
                    "label": 0
                },
                {
                    "sent": "We will work on this optimizer as soon as possible, definitely before releasing the product is another person.",
                    "label": 0
                },
                {
                    "sent": "Thank you.",
                    "label": 0
                },
                {
                    "sent": "OK, let's thank our speaker again.",
                    "label": 0
                },
                {
                    "sent": "Thank you very much.",
                    "label": 0
                }
            ]
        }
    }
}