{
    "id": "ilstek5wkbhuqpvapbwstfmcbovd2mgr",
    "title": "Model Checking and the Curse of Dimensionality",
    "info": {
        "author": [
            "Edmund M. Clarke, Carnegie Mellon University"
        ],
        "published": "July 10, 2012",
        "recorded": "June 2012",
        "category": [
            "Top->Computer Science->Data Modeling"
        ]
    },
    "url": "http://videolectures.net/turing100_clarke_model_checking/",
    "segmentation": [
        [
            "Model checking is an automatic verification technique.",
            "It's been used successfully for hardware verification, an communication protocol verification.",
            "It's beginning to be used a little bit for software verification as well.",
            "The main disadvantage of model checking is the curse of dimensionality.",
            "An exponential blowup in the number of states that have to be considered to determine the truth of a AA of some property.",
            "In the in the.",
            "In the logic.",
            "Now what would be better than to start with a slide with a with a quote of?",
            "Somehow this is not working.",
            "Well, maybe the area."
        ],
        [
            "I thought I would start with a quote by Turing.",
            "Turing was apparently the first 2.",
            "To realize that verification would be an important problem someday, he wrote in 1949 when I was four years old that.",
            "How can one check a routine in the sense of making sure that it is right?",
            "The programmer should make a number of definite assertions which can be checked individually and from which the correctness of the whole program easily follows.",
            "And that's really the what all of the verification techniques that have been proposed are based on."
        ],
        [
            "Now model checking is an automatic verification technique.",
            "It was originally proposed for finite state concurrent systems, various types of communicating protocols.",
            "It was developed independently by myself and Alan Emerson when we were at Harvard and by Kellen Sifakas at the University of Grenoble.",
            "In the in the 1960s, nineteen 80s.",
            "The the assertions are expressed as formulas in propositional temporal logic.",
            "Temporal logic is a notation for reasoning about the ordering of events in time without introducing time explicitly.",
            "It was originally proposed by philosophers for reasoning about the use of tents in natural languages.",
            "It was proposed for reasoning about concurrent systems by M. European rally in 1977.",
            "The verification procedure that we use differs from most other verification techniques in that it is algorithmically rather than deductive in nature.",
            "You don't try to construct a proof of correctness."
        ],
        [
            "Now, the term curse of dimensionality comes from Richard Bellman, and it's interesting to hear what he had to say about the the curse of dimensionality in view of all that we have have said, and the foregoing sections, the many obstacles that we appear to her, surmounted the that casts Pall over our victory celebration.",
            "It is the curse of dimensionality.",
            "A malediction that has plagued the scientist from earliest days.",
            "I like that quote, and I also like very much the computers in the background.",
            "That was the size of that computers were when I got interested in programming and an I feel nostalgic for those days.",
            "Now this this looks sort of like an intelligent typewriter."
        ],
        [
            "Now the curse of dimensionality what?",
            "What is it and why does it arise in model checking?",
            "2 bit counter has four states, an N bit counter has two to the end states.",
            "The the.",
            "Explosion in the number of states can also come from process composition.",
            "If you compose 23 state processes then you get a a a state transition graph with 9.",
            "States in general, if you have M processes, each with N states, the number of states in the parallel composition will be end to the empty power."
        ],
        [
            "Now the curse of dimensionality, the means that the number of states in the system grows exponentially with the dimensionality of the system.",
            "The number of in this case for this particular example, the number of variables orbits are processes that and it makes it much harder to reason about the system, but Fortunately.",
            "Over the past 30 years that we have been working on this problem thanks to clever algorithms, sophisticated data structures and good engineering, we have been able to avoid this problem.",
            "In worst case though, you can show by by theoretical arguments that it is unavoidable."
        ],
        [
            "Now there are two types of temporal logic, linear temporal logic in which the the which which determines paths, an infinite traces formulas are composed of atomic propositions, Boolean operations, and temporal operators.",
            "A proposition A will be true of a trace if a labels.",
            "The first state on the trace."
        ],
        [
            "XA will be true of the trace if a is true at the next state of the Trace, FA will be."
        ],
        [
            "True of the trace, if A holes sometime in the future on the Trace GA will be true."
        ],
        [
            "So on the trace, if a whole globally along the trace, Anne Anne told me why."
        ],
        [
            "Be true of the trace if A holes until a state is reached where where B holds."
        ],
        [
            "It's also possible to think of of.",
            "Branching time logics.",
            "If we if we have a state transition graph, we can and we specify one state as an initial state, say the dark blue state at the top.",
            "Then we can unwind the state transition graph into an infinite computation tree as I've shown at the bottom, we don't actually do this on mining.",
            "Indeed, it would be impossible, but we use computation trees too.",
            "Give the semantics for our logical formulas now."
        ],
        [
            "The probably the most widely used branching time logic these days is CTL or computation tree logic.",
            "Each formula is composed of two parts, a path quantifier or each operator is composed of two parts, a path quantifier that quantifies over the paths that start at the at the root and and a. Temporal operator that describes the behavior along the path.",
            "So EFG will be true if there exists a path that's the E and at some point in the future on that path there is a state where G holes.",
            "Now."
        ],
        [
            "IAFG will be true if along every path that's the A at some point in the future on that path.",
            "G holes an.",
            "In this case we would say that G is inevitable or that G will necessarily become true."
        ],
        [
            "IAG Little G will be true at the root of the computation tree.",
            "If along every path it's globally the case that G will become true.",
            "IG will be true.",
            "We say that G is an invariant with a G holes at every reachable state.",
            "I eat."
        ],
        [
            "The little G will be true if there exists a a path and G holds globally along that path.",
            "We say that it's possible that G is an invariant, and."
        ],
        [
            "The logic CTL consists of before operators that I just described, plus universal and existential versions of the next time operator, and universal and existential versions of the until operator.",
            "The logic CTL star is a more expressive logic that allows Richard Nestings of the path quantifiers and temporal operators.",
            "Now."
        ],
        [
            "The model checking problem is very easy to state.",
            "It's very simple problem to state, but then be a state transition graph and that FB, the specification or assertion in temporal logic.",
            "We want to find all of those states S of M where the formula is true.",
            "Hopefully the initial states of the system will be among those states now.",
            "This was a hot problem back in the mid 80s and we.",
            "And algorithms were proposed.",
            "Efficient algorithms were proposed for all of the logics that I have mentioned.",
            "The algorithms were in fact I think all of them were polynomial.",
            "Indeed, probably even linear in the size of the state space, not necessarily in the size of the formula, but in terms of the state space, however.",
            "In spite of the the efficient behavior in the size of the state space, the algorithms were often of limited usefulness because of the state explosion problem, the state space.",
            "This the state transition graph could be so large that it wouldn't fit in the memory of the the largest computer."
        ],
        [
            "So before I go any further, let me give a a simple example to illustrate how you might use a model checker if you had one available.",
            "This is a trivial example and you wouldn't need a model checker for this example, although I have seen.",
            "State transition graphs with not many more states that were that.",
            "Where it was difficult to determine if they satisfied certain properties or or not.",
            "Game.",
            "Let's suppose that you've invented a new microwave often, and that the microwave oven has four state variables.",
            "Start close, heat an error, and initially they are all false.",
            "The~ means.",
            "Not so you can.",
            "You can close the door then you can press the start button and then the oven will begin to heat up.",
            "Now one thing that you would like to make certain of is."
        ],
        [
            "That no one is going to get hurt using the microwave oven, so you'd like to make sure that the oven doesn't heat up until the door is closed.",
            "You'd like to embed that behavior in the in the oven controller, and you can formulate this a little bit more concisely as not heat up holes until door closed, and that Maps perfectly into the until operator.",
            "It's it's just not heat up holes until door closed.",
            "Now you would check this property on the the.",
            "The controller of the microwave oven ANAN the and if it held, if it was, if it was true, that would be great.",
            "If it was, if it didn't told you would get a counterexample and the counterexample would would would would take you directly to the source of the error.",
            "R."
        ],
        [
            "Now normally an if we're checking hardware, then we start with a description of what we want to verify an A hardware description language, Verilog, VHDL, SMD, an industrial.",
            "In formal specification expressed in some natural language, we would compile the hardware description language into a transition system and we would manually convert the informal specification.",
            "We would manually convert the informal specification into a temporal logic formula, and then we would determine by algorithmic.",
            "That means whether the the temporal logic formula was true or not now."
        ],
        [
            "I mentioned counterexamples, model checking basically looks for counterexamples it.",
            "It tries to reason by by seeing if it can find a a counterexample to the thing that you ask it to verify.",
            "An.",
            "Let's assume that we want to check a specification of this little state machine and the state machine has one state labeled with an evil stop sign.",
            "And and the specification in this case is a safety property that the bad State label with the stop sign is unreachable.",
            "Well, in this case, it's trivially easy to see that the that that is the case you can't reach it from the state from the initial state because they're only transitions out of the state that's labeled with the with the stop sign."
        ],
        [
            "But suppose we move the stop sign to this date.",
            "Then is the specification still true?",
            "Well, in this case the model checker would reply no an it would give us a counterexample."
        ],
        [
            "That would be a path that shows how we can get from the initial state to the state labeled with the stop sign and it would help, and hopefully that path would would would not be very long now."
        ],
        [
            "We were able to use model checking on a number of of.",
            "Fairly complex hardware designs very early on an did establish, I believe that that model checking could be useful in hardware verification.",
            "For example, in the early 90s we used model checking to verify the futurebus plus cache coherence protocol.",
            "We've doesn't make any difference if you know what cache coherence protocol is or not, that's unimportant, but we.",
            "We found a number of previously undetected errors in the design and this was the first time that formal verification tool had been used to find errors in an IEEE standard.",
            "And it was even more remarkable because the development of the protocol had begun in 1988, but our previous attempts to validate it were were just based on simulation alone.",
            "I think it is the case that now.",
            "Particularly in cache coherence protocol design, model checkers are routinely used.",
            "Now."
        ],
        [
            "There are I'm going to talk about four big breakthroughs in model checking.",
            "There are a couple of of, probably by then.",
            "The next time I give this talk, I'll have to add a couple of more.",
            "Breakthroughs to this list?",
            "There's been some very interesting work in.",
            "Our new ideas are recently.",
            "The the in the first model checker, the one that I built back in the early 80s.",
            "The model checker used a linked list structure to represent state transition graphs.",
            "We used basically the ideas out of Professor Canus, chapter two of volume one to represent state transition graphs.",
            "An my student, Ken McMillan, this guy.",
            "Suggested when he arrived at CMU in 1990, but that was actually a terrible idea.",
            "He said that that meant that we needed a bit of memory for each.",
            "For each.",
            "The state that we wanted to represent.",
            "He suggested that we represent instead state transition graphs by ordered binary decision diagrams and when we tried out his his technique, we were able to handle much, much larger examples than we had handled before with a little work, we were able to.",
            "I don't see this is not well.",
            "We were able to handle machines with 10 to the 20th power States and with a little bit more work we could we were."
        ],
        [
            "Able to bump that number up to 10 to the 100 power States and these were interesting examples too.",
            "They weren't just made up examples and a little bit more."
        ],
        [
            "We were able to go up to 10 to the 20th power States and at that time we we stopped really paying that much attention to the tunnel.",
            "Number of states that we total number of reachable states that we could handle.",
            "Although I still think probably something like the log of the number of reachable states would be a good measure of complexity, better than just giving the number of.",
            "Save variables.",
            "Also, we're not the only ones who have obtained this type of result.",
            "The PRISM model checker, for example, developed at Oxford, often is able to check state space is of a similar size.",
            "Now a project that I didn't have anything to do with, but which I think is very important is the partial order reduction in asynchronous systems.",
            "When you have processes that are independent of each other or actions that are independent of each other, then whether you do action A before action B or B before a, it doesn't make any difference, will get to the same state either way the the the.",
            "You'll end up at the same.",
            "Configuration and consequently you you only need to consider one of those interleavings.",
            "And this is this I guess was originally proposed by Auntie Val.",
            "Marie Ann is responsible for much of the power of Gerard Holtsman's spin."
        ],
        [
            "Model Checker Now another technique that has turned out to be very useful is something that we call bounded model checker bounded model checking.",
            "In 1996 I began to see.",
            "Elements that, as SAT solvers, could be made that were a lot more powerful than I thought, possible coming from theoretical background, I thought set was the ultimate.",
            "What was it was it was an extremely hard problem to solve, and it was foolish to try to build fast SAT solvers, but.",
            "Bounded model checking makes use of fast SAT solvers supposed that you want to determine whether property fails in case steps or not.",
            "An, let's assume that.",
            "There is that we have.",
            "Boolean predicates I for the initial to identify the initial states T for the transition relation and P for the property that we want to check.",
            "Then we write a formula in which we assert we ask whether there exists a path V nought which satisfies I was a transition from V nought to V1V1 to V2.",
            "And so on, and the property P is false at one of those states.",
            "Now, if this formula is satisfiable, the can reach a state in which the formula in which the property doesn't hold in less than K steps and and you can handle very large.",
            "Systems don't work.",
            "We tried this exact this on an example with 10,000 latches and 10,000 inputs and bounded model checking generated a Boolean formula in conjunctive normal form.",
            "That's the hard Canonical form for set an.",
            "It had 4 million variables and 12 million clauses.",
            "And the the shortest bug of length 37 was found in just 69 seconds.",
            "Now I still haven't told you what happens if the formula is unsatisfiable.",
            "If it's satisfiable, we have a counterexample an we can we know that we can reach a state that in less in case steps where the property fails if the formula is unsatisfiable, we.",
            "We just we know that the only thing we know is that you can't reach such a state in case steps, but it might be the case that you could reach a state in K plus one steps, and there's been a lot of work in extending bounded model checking to handle.",
            "To make it complete so that you can determine when you when you have to start, unwind, stop unwinding the the transition relation an and conclude that the property is actually true."
        ],
        [
            "Now the the last big breakthrough that I want to consider.",
            "Is.",
            "The localization reduction, an counterexample guided abstraction refinement in 1994 Bob Kurshan published a book on Automata based verification, and he had in the book a technique called the Localization reduction an I couldn't understand this particular reduction.",
            "It was was very.",
            "Awkwardly written, I thought Anan, so I gave it to my student Yuan Lu.",
            "Haha this person too.",
            "Work on an he spent a long time looking at it and he finally figured out what it meant or what it was and it was.",
            "It turned out to be something actually fairly simple and we generalized it an showed how it could be made to work for software and I'll tell you about more detail about that in just a second, I asked Kurshan at one point why he wrote this this section.",
            "In such a an obscure manner, when it was probably the most important idea in his book, and he said that he wrote it in this manner because he didn't want to give the competition too much help.",
            "So."
        ],
        [
            "So, so in order to explain.",
            "The count this method to you counterexample guided abstraction refinement.",
            "I have to say a little bit about abstraction and the kind of abstraction that we use is called existential abstraction, although sometimes I think existential is alittle bit confusing here.",
            "Suppose that we have a an original model M. At the bottom and we want to construct an abstract model M sub Alpha.",
            "I'm not sure the cursor.",
            "Yes, the cursor is moving.",
            "We want to construct an abstract model and we have an abstraction mapping that Maps the set of states of the original model into.",
            "State of the abstract model.",
            "Then what we do is we group together states that are similar in the in the.",
            "Original model anan.",
            "We map them by means of the abstraction mapping to states in the abstract model an and then we have to determine what the transition relation should be in the abstract.",
            "Model an there will be a transition from from red to green in the abstract model because there exists.",
            "This is where the existential abstractions comes from because there exists a transition from some red state to some green state.",
            "And there will be a transition from red to blue because there exists a transition from some red state to some blue state and there will be a transition from green from blue to green because there's a transition from some blue state to some green state.",
            "Now notice the last one, because that will come up that will be important in just a second.",
            "To be consistent, we have to put a self loop on the blue node because there's a transition from some blue node to another blue node now."
        ],
        [
            "We are able to prove the following.",
            "Preservation theorem if a property holds for the abstract model, then it holds for the concrete model.",
            "So true on the concrete model.",
            "True on the abstract model means true on the on the concrete model.",
            "And the result requires some hypothesis.",
            "The most technical of which is that the properties have to be universal.",
            "They can't involve any existential path quantifiers, and it's not a deep theorem.",
            "It's relatively simple to prove.",
            "But one thing that's a little bit surprising is that the converse doesn't hold an that turns out to be important.",
            "In Counterexample guided abstraction refinement.",
            "So let's see why the the converse doesn't whole.",
            "Suppose we take a three state traffic light example."
        ],
        [
            "Anne Anne we we.",
            "One property that it satisfies is that globally it's inevitable that we'll get.",
            "We'll get back to State Red.",
            "So no matter what state we get to, it's inevitable that will get to read.",
            "And that's certainly true of the concrete model.",
            "This is our original or concrete model in this case.",
            "Now let's abstract this model.",
            "Let's group.",
            "Well, we'll leave red by itself an will group, green and yellow together.",
            "Anan will map.",
            "Well, map read to read an will map Green an yellow to go because nobody ever stuffs on the yellow light and then there will be a transition from red to go because there's a transition from red to green.",
            "And they'll be a transition from go to red because there's a transition from yellow to red.",
            "And finally they'll be is self loop on go because there's a transition from green to yellow.",
            "And that means that in our.",
            "In our abstractions we will have a trace gogogo forever Ann, and consequently this formula, which asserts that we will always get to read, is not satisfied.",
            "So we have a property that that's true of the concrete machine, but is not true of our abstractions and.",
            "The important thing to notice is that this is an artifact of the way that we do the abstraction, and it it doesn't really mean that there's a defect of any type with the original machine."
        ],
        [
            "Now the what we would like is an automatic abstraction technique.",
            "We'd like to start with the with an initial abstraction for a concrete system, and maybe will get us various counterexample when we check it, and we would like them to refine that model, and we might still get us various count, for example, But we'd like to hope.",
            "That if we continue this long enough, then either we'd find a a true counterexample, or we see that the the we would see that the specification was was valid now.",
            "Well, the the next theorem shows that it turns out that if the state space is is finite, if you're working with finite models as you would normally be in hardware, you can make sure that this process of refinement terminates, but not in the case of infinite State models.",
            "So."
        ],
        [
            "This leads to.",
            "What we call counterexample, abstractions, refinement, the seegar loop.",
            "We start with a a circuit or program.",
            "We construct an abstract model.",
            "We then verify this abstract model using an off the shelf model checker, maybe one that's not so powerful, and if the specification checks, we haven't found any bug in the abstraction.",
            "We know that there's no bug.",
            "In the original program, if we get a counterexample though, we have to.",
            "We have to be careful to know whether it's a real counterexample, Aura, Spurius counterexample.",
            "So we have to do what we call simulation of the counterexample on the original model.",
            "Now it's not really simulation, it's really more like bounded model checking because the models can contain.",
            "Whoops, I went wrong way.",
            "Because the the models can have inputs in.",
            "If we do find a real bug, of course we can.",
            "We can stop.",
            "We've found a real bug when we do the simulation, but if we, if we find that the bug was a spyrius counterexample, a false counterexample, then we use the information in the spyrius counterexample to.",
            "To refine the abstraction and go around this loop, now I've seen examples of programs in which you really go around the seegar loop 100 times or armor and you eventually reach a decision.",
            "Now."
        ],
        [
            "Those are the four techniques that I'm going to discuss today and maybe the next time I give this talk, I'll add one or two more techniques.",
            "One question that I'm asked a lot is, is it possible to model Check software?",
            "And I regard this as a as really a grand challenge.",
            "In 2005, Bill Gates was quoted in Wired News as saying that the the technology was under development at the two at Microsoft and he called it the Holy Grail of computer science.",
            "Now I'm to be quite honest, I'm not sure whether he was referring to model checking or or to program verification in general.",
            "Um?"
        ],
        [
            "Now.",
            "The what.",
            "What makes software model checking different?",
            "Why is it harder than ordinary?",
            "So oh everify in other types of models, hardware, well, large unbounded base types in slotz strings, user defined types, classes, pointers, aliasing, plus unbounded numbers of pointer allocated cells.",
            "Procedure calls recursion calls through pointers.",
            "Dynamic method look up, overloading concurrency plus an unbounded numbers of threads."
        ],
        [
            "Templates generics include files, interrupts, exceptions, callbacks, use of secondary storage.",
            "I could go on forever files, databases, absent source code for library system calls, mobile code, esoteric features like continuations and self modifying code and finally last but not least size Microsoft Word is well over a million lines.",
            "Of Of of code."
        ],
        [
            "Moreover, it's not even clear what it means to combine model to model Check Heart software well.",
            "How would you go about even getting started?",
            "Well, most of the approaches that have been somewhat successful have tried to combine static analysis with model checking.",
            "You used synthetic analysis techniques to extract a A. Finite model from the software and then you use a model checker to check properties of the of the of a model Now."
        ],
        [
            "Um?",
            "V perhaps the most successful project was not due to my group, but actually a group at Microsoft.",
            "Microsoft argues that all the errors that you get are not all of 'em, but many of them are due to.",
            "A third party device drivers so they built.",
            "They were very clever.",
            "They built instead of trying to build a a model checker that could check any property they they decided to build a model checker just for device drivers to make sure that the device drivers satisfied the requirements of Windows and this tool.",
            "The static device verifier.",
            "Is now circulated with the tools for building third party device drivers for Windows, and I I've heard that it's considered a success and the people who did this were Tomball, an Sriram Rajamani now.",
            "There's another problem that interests me even more than this, so let me step back just a second.",
            "I think the reason that they were successful and maybe this will answer some of Michael's reservations about verification yesterday is that they didn't try to handle all possible types of failures.",
            "They just wanted to go after one that they found particularly troublesome, and then they devoted their.",
            "Entire attention to that particular type of error.",
            "Now."
        ],
        [
            "Now there's another problem that interests me even more.",
            "I would like to debug this circuit an I don't know how much detail you can see from the audience, but it is the P53MDM2.",
            "As cell repair regulatory network."
        ],
        [
            "If you there, it's discussed quite a lot in in systems biology.",
            "The P50I mean quote from one of the descriptions of of this regulatory network.",
            "The P 53 pathway has been shown to mediate cellular stress responses.",
            "53 can initiate DNA repair cell cycle arrest, senescence and importantly, a pop ptosis.",
            "A pop ptosis is programmed cell death.",
            "So what's supposed to happen is that if a harmful mutation occurs in the cell.",
            "I think the cell will.",
            "Well, try to repair it using this.",
            "P 53 pathway an.",
            "If it fails, then the cell will commit suicide and that will prevent it from becoming cancerous.",
            "Now P53 has been called the Guardian of the genome for its role in preventing mutations and in 1993 actually along time ago it was voted a molecule of the year by Science magazine.",
            "Hi so I think I'm going to stop at this point an and take questions.",
            "I think I may have just about exhausted my my time, but there's much more to be done.",
            "I can.",
            "I'm always thinking of new projects at the in San Francisco.",
            "I described a new way of verifying.",
            "Hybrid systems that seems to avoid much of the complexity in standard techniques for verifying hybrid systems.",
            "Hybrid systems are mixed continuous discrete systems.",
            "They occur in all sorts of cyber physical applications.",
            "Questions.",
            "My question relates to the bounded model checking.",
            "You mentioned that when you do bounded model checking, you model up to some number of steps and that number has to be bounded and work is being done to work on unbelievable bit louder.",
            "Yeah well that's the microphone.",
            "You said that in bounded model checking when one models up to some bounded number of steps and work is being done to change that to make that into an unbounded check.",
            "And my question is is this.",
            "We know that the number of steps that the system can take is.",
            "Linear with the number of states that it has and that is suffering very much for the from the curse of dimensionality that you mentioned earlier.",
            "We also know from busy Beaver studies that Turing machines even very very small ones exhibit extremely long running times if they halt and very quickly reach open problems, and even undecidable problem in this case, let me let me say that I I'm not sure that I understand where you're going in your question.",
            "But let me say what determines how much you have to unwind the.",
            "Are the the state space I an upper bound?",
            "Is the diameter of the state space A graph theoretic property?",
            "Now the trouble is that if you have the state transition graph expressed essay binary decision diagram or in terms of Boolean formulas, the diameter is very hard to compute.",
            "It's not an easy thing to compute.",
            "It's just so we, we, we we, we don't, we can't.",
            "We can't do that.",
            "It's not just very hard to compute, it's it's potentially huge.",
            "It can be very large.",
            "Yes, it can be larger than you would want to to computer.",
            "So.",
            "So my question is to expand.",
            "So my question is, what hope do you do you see, in that direction of making has been a great deal of work on that problem there is, and there are new techniques all the time, one.",
            "Very useful technique is K induction.",
            "Their various ways of using interpolation, an idea of macmillans.",
            "For that purpose there are many different ways of.",
            "Handling the this this of making bounded model checking complete.",
            "So if you I can give you some places to look if you want, thank you.",
            "Just wondering about the initial conditions you can envisage.",
            "Let's see I can't see you lights up here or just wondering about the initial conditions.",
            "You can state transition diagrams, wherefore as some regions of the state space, or inaccessible for some initial conditions, I'm just wondering do you have to rerun your model?",
            "Checking for many many initial conditions?",
            "Do you have to try many sets of of of initial conditions?",
            "That's not been my experience, although I could.",
            "I could conceive of having to do that.",
            "You could.",
            "You could also probably.",
            "Work backwards an an come up with a with a predicate that would be true of any initial condition and then check to see if a specific initial condition satisfied that predicate or or not.",
            "So I don't think that that's a major problem.",
            "There's a question from from the Nets, so I'll relay it and it's along the lines of specializing model checking an the question is about whether you see a future in doing model checking for data type invariants and database integrity constraints.",
            "These areas, well, I know I know very little about databases and so.",
            "I I I I I really would would prefer to avoid that.",
            "To avoid trying to answer that that question.",
            "Mache, I thought you'd heard this talk enough and asked all your questions.",
            "I always have new questions, so K Moore's law mean that you have faster and faster machines on which one moves low mean yes, you have faster and faster's machines on which to run.",
            "Model checking algorithms at the same time it means that you have to verify larger and larger systems who wins.",
            "Well, let's see.",
            "I I, I suspect that there's there's not going to be a definite answer to that question.",
            "And probably probably one can always conceive of a system more complex than one can verify at a given time, but I don't think that I can give a good answer to that question either.",
            "High I like to, I like to ask about non automatic program verification.",
            "I'd like to ask about non automatic program verification on automatic verification.",
            "What does that mean?",
            "So theorem proving can you can you?",
            "Solve some of the more complex problems in our well, OK, that's that's that's a good point.",
            "I'm.",
            "I'm still not sure I know what you mean by non automatic verification.",
            "I wrote my thesis on Hoare Logic and I then I thought you would just do it by hand.",
            "You would would have no mechanical assistance.",
            "I think that that maybe that I would say that that's infeasible now the way that.",
            "A dijkstra.",
            "Typically I proposed proving small programs correct, but I I am I am very much impressed by some of the proof assistants.",
            "For example, I learned the cock proof assistant this past year myself.",
            "I have a severe cold by the way.",
            "Anne was very much impressed by its power and what I would like to do.",
            "Cock does not really have very powerful decision procedures built into it.",
            "I guess Z3.",
            "If you could marry Z3 and cock you would you would have something that would be truly powerful and add a model checker component as well.",
            "So I think that there is the potential to put all of these things together and really have a powerful tool for verifying systems an it's not necessary that it be completely automatic.",
            "There might be steps that that user would want to.",
            "Make as as determine whether should be made as well.",
            "Yeah, hello here.",
            "I'm Alejandro Mendez from Technical University of Denmark.",
            "So you mentioned about so formal checking.",
            "Some of the problems about data types a user defined data structures, continuations, so most of them are actually, we know syntactic sugar, and they don't really provide more power to the software.",
            "So yes, syntactic sugar.",
            "But I think that some of them really would complicate things, for example.",
            "I if you allow self modifying code then.",
            "Or or if you look at.",
            "Dynamically typed languages.",
            "Python is a is a dynamically typed language if I'm not mistaken, and that sort of thing would would make it very probably very difficult to model check Python programs.",
            "But do you think it's so that the problem is intrinsically from from the mulching community or more related to programming languages?",
            "And how to how to map from a single?",
            "What language are doing machine to this complex Python C and well, I'm I'm I actually have a project to see if it will be possible to do that to look at these dynamically, it seems like that's a very popular trend these days.",
            "Python, Ruby, JavaScript are all dynamically typed and I have a student who's working on on that.",
            "As a project, but I also want to bring up this problem of verifying biological systems.",
            "I see that as the as the frontier an at the at the meeting in San Francisco, the ACM meeting in San Francisco, several speakers made points in there talk about how important biology would be in the in future generations.",
            "Thanks.",
            "But that but that point about verifying biological systems?",
            "How?",
            "How did you see a role for model checking and doing that?",
            "What was the question about your last slide?",
            "This question about biological systems?",
            "Yes.",
            "What is the role for mobile check?",
            "And I how would you fix the human cell?",
            "I don't know is that well?",
            "No, no we weren't trying to fix individual cells, that's.",
            "Nor did not notice until when it detects a bug in the in the design of a circuit.",
            "Try to go and an and Patch chips like.",
            "Maybe they do in certain cases, but the.",
            "One of the things that we have done is we.",
            "We start looking at probabilistic and statistical model checking.",
            "So in some cases it's you have to.",
            "As such, these models of reaction pathways are inherently stochastic in nature, and an probabilistic model checking and statistical model checking both are useful.",
            "Anan we have begun to do some research on on on on on that, so I think it will be possible to reason about such systems.",
            "OK, so we're have a will have a short announcement before the break, so thank you very much, oranges."
        ]
    ],
    "summarization": {
        "clip_0": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Model checking is an automatic verification technique.",
                    "label": 0
                },
                {
                    "sent": "It's been used successfully for hardware verification, an communication protocol verification.",
                    "label": 0
                },
                {
                    "sent": "It's beginning to be used a little bit for software verification as well.",
                    "label": 0
                },
                {
                    "sent": "The main disadvantage of model checking is the curse of dimensionality.",
                    "label": 1
                },
                {
                    "sent": "An exponential blowup in the number of states that have to be considered to determine the truth of a AA of some property.",
                    "label": 0
                },
                {
                    "sent": "In the in the.",
                    "label": 0
                },
                {
                    "sent": "In the logic.",
                    "label": 0
                },
                {
                    "sent": "Now what would be better than to start with a slide with a with a quote of?",
                    "label": 0
                },
                {
                    "sent": "Somehow this is not working.",
                    "label": 0
                },
                {
                    "sent": "Well, maybe the area.",
                    "label": 0
                }
            ]
        },
        "clip_1": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "I thought I would start with a quote by Turing.",
                    "label": 0
                },
                {
                    "sent": "Turing was apparently the first 2.",
                    "label": 0
                },
                {
                    "sent": "To realize that verification would be an important problem someday, he wrote in 1949 when I was four years old that.",
                    "label": 0
                },
                {
                    "sent": "How can one check a routine in the sense of making sure that it is right?",
                    "label": 1
                },
                {
                    "sent": "The programmer should make a number of definite assertions which can be checked individually and from which the correctness of the whole program easily follows.",
                    "label": 1
                },
                {
                    "sent": "And that's really the what all of the verification techniques that have been proposed are based on.",
                    "label": 0
                }
            ]
        },
        "clip_2": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Now model checking is an automatic verification technique.",
                    "label": 1
                },
                {
                    "sent": "It was originally proposed for finite state concurrent systems, various types of communicating protocols.",
                    "label": 0
                },
                {
                    "sent": "It was developed independently by myself and Alan Emerson when we were at Harvard and by Kellen Sifakas at the University of Grenoble.",
                    "label": 0
                },
                {
                    "sent": "In the in the 1960s, nineteen 80s.",
                    "label": 1
                },
                {
                    "sent": "The the assertions are expressed as formulas in propositional temporal logic.",
                    "label": 0
                },
                {
                    "sent": "Temporal logic is a notation for reasoning about the ordering of events in time without introducing time explicitly.",
                    "label": 1
                },
                {
                    "sent": "It was originally proposed by philosophers for reasoning about the use of tents in natural languages.",
                    "label": 0
                },
                {
                    "sent": "It was proposed for reasoning about concurrent systems by M. European rally in 1977.",
                    "label": 0
                },
                {
                    "sent": "The verification procedure that we use differs from most other verification techniques in that it is algorithmically rather than deductive in nature.",
                    "label": 0
                },
                {
                    "sent": "You don't try to construct a proof of correctness.",
                    "label": 0
                }
            ]
        },
        "clip_3": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Now, the term curse of dimensionality comes from Richard Bellman, and it's interesting to hear what he had to say about the the curse of dimensionality in view of all that we have have said, and the foregoing sections, the many obstacles that we appear to her, surmounted the that casts Pall over our victory celebration.",
                    "label": 1
                },
                {
                    "sent": "It is the curse of dimensionality.",
                    "label": 1
                },
                {
                    "sent": "A malediction that has plagued the scientist from earliest days.",
                    "label": 0
                },
                {
                    "sent": "I like that quote, and I also like very much the computers in the background.",
                    "label": 0
                },
                {
                    "sent": "That was the size of that computers were when I got interested in programming and an I feel nostalgic for those days.",
                    "label": 0
                },
                {
                    "sent": "Now this this looks sort of like an intelligent typewriter.",
                    "label": 0
                }
            ]
        },
        "clip_4": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Now the curse of dimensionality what?",
                    "label": 1
                },
                {
                    "sent": "What is it and why does it arise in model checking?",
                    "label": 0
                },
                {
                    "sent": "2 bit counter has four states, an N bit counter has two to the end states.",
                    "label": 0
                },
                {
                    "sent": "The the.",
                    "label": 0
                },
                {
                    "sent": "Explosion in the number of states can also come from process composition.",
                    "label": 0
                },
                {
                    "sent": "If you compose 23 state processes then you get a a a state transition graph with 9.",
                    "label": 0
                },
                {
                    "sent": "States in general, if you have M processes, each with N states, the number of states in the parallel composition will be end to the empty power.",
                    "label": 0
                }
            ]
        },
        "clip_5": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Now the curse of dimensionality, the means that the number of states in the system grows exponentially with the dimensionality of the system.",
                    "label": 1
                },
                {
                    "sent": "The number of in this case for this particular example, the number of variables orbits are processes that and it makes it much harder to reason about the system, but Fortunately.",
                    "label": 1
                },
                {
                    "sent": "Over the past 30 years that we have been working on this problem thanks to clever algorithms, sophisticated data structures and good engineering, we have been able to avoid this problem.",
                    "label": 0
                },
                {
                    "sent": "In worst case though, you can show by by theoretical arguments that it is unavoidable.",
                    "label": 0
                }
            ]
        },
        "clip_6": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Now there are two types of temporal logic, linear temporal logic in which the the which which determines paths, an infinite traces formulas are composed of atomic propositions, Boolean operations, and temporal operators.",
                    "label": 1
                },
                {
                    "sent": "A proposition A will be true of a trace if a labels.",
                    "label": 0
                },
                {
                    "sent": "The first state on the trace.",
                    "label": 0
                }
            ]
        },
        "clip_7": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "XA will be true of the trace if a is true at the next state of the Trace, FA will be.",
                    "label": 0
                }
            ]
        },
        "clip_8": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "True of the trace, if A holes sometime in the future on the Trace GA will be true.",
                    "label": 0
                }
            ]
        },
        "clip_9": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So on the trace, if a whole globally along the trace, Anne Anne told me why.",
                    "label": 0
                }
            ]
        },
        "clip_10": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Be true of the trace if A holes until a state is reached where where B holds.",
                    "label": 0
                }
            ]
        },
        "clip_11": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "It's also possible to think of of.",
                    "label": 0
                },
                {
                    "sent": "Branching time logics.",
                    "label": 0
                },
                {
                    "sent": "If we if we have a state transition graph, we can and we specify one state as an initial state, say the dark blue state at the top.",
                    "label": 0
                },
                {
                    "sent": "Then we can unwind the state transition graph into an infinite computation tree as I've shown at the bottom, we don't actually do this on mining.",
                    "label": 0
                },
                {
                    "sent": "Indeed, it would be impossible, but we use computation trees too.",
                    "label": 0
                },
                {
                    "sent": "Give the semantics for our logical formulas now.",
                    "label": 0
                }
            ]
        },
        "clip_12": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "The probably the most widely used branching time logic these days is CTL or computation tree logic.",
                    "label": 1
                },
                {
                    "sent": "Each formula is composed of two parts, a path quantifier or each operator is composed of two parts, a path quantifier that quantifies over the paths that start at the at the root and and a. Temporal operator that describes the behavior along the path.",
                    "label": 0
                },
                {
                    "sent": "So EFG will be true if there exists a path that's the E and at some point in the future on that path there is a state where G holes.",
                    "label": 0
                },
                {
                    "sent": "Now.",
                    "label": 0
                }
            ]
        },
        "clip_13": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "IAFG will be true if along every path that's the A at some point in the future on that path.",
                    "label": 0
                },
                {
                    "sent": "G holes an.",
                    "label": 0
                },
                {
                    "sent": "In this case we would say that G is inevitable or that G will necessarily become true.",
                    "label": 1
                }
            ]
        },
        "clip_14": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "IAG Little G will be true at the root of the computation tree.",
                    "label": 0
                },
                {
                    "sent": "If along every path it's globally the case that G will become true.",
                    "label": 0
                },
                {
                    "sent": "IG will be true.",
                    "label": 0
                },
                {
                    "sent": "We say that G is an invariant with a G holes at every reachable state.",
                    "label": 1
                },
                {
                    "sent": "I eat.",
                    "label": 0
                }
            ]
        },
        "clip_15": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "The little G will be true if there exists a a path and G holds globally along that path.",
                    "label": 0
                },
                {
                    "sent": "We say that it's possible that G is an invariant, and.",
                    "label": 0
                }
            ]
        },
        "clip_16": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "The logic CTL consists of before operators that I just described, plus universal and existential versions of the next time operator, and universal and existential versions of the until operator.",
                    "label": 0
                },
                {
                    "sent": "The logic CTL star is a more expressive logic that allows Richard Nestings of the path quantifiers and temporal operators.",
                    "label": 1
                },
                {
                    "sent": "Now.",
                    "label": 0
                }
            ]
        },
        "clip_17": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "The model checking problem is very easy to state.",
                    "label": 0
                },
                {
                    "sent": "It's very simple problem to state, but then be a state transition graph and that FB, the specification or assertion in temporal logic.",
                    "label": 0
                },
                {
                    "sent": "We want to find all of those states S of M where the formula is true.",
                    "label": 1
                },
                {
                    "sent": "Hopefully the initial states of the system will be among those states now.",
                    "label": 0
                },
                {
                    "sent": "This was a hot problem back in the mid 80s and we.",
                    "label": 0
                },
                {
                    "sent": "And algorithms were proposed.",
                    "label": 0
                },
                {
                    "sent": "Efficient algorithms were proposed for all of the logics that I have mentioned.",
                    "label": 0
                },
                {
                    "sent": "The algorithms were in fact I think all of them were polynomial.",
                    "label": 0
                },
                {
                    "sent": "Indeed, probably even linear in the size of the state space, not necessarily in the size of the formula, but in terms of the state space, however.",
                    "label": 0
                },
                {
                    "sent": "In spite of the the efficient behavior in the size of the state space, the algorithms were often of limited usefulness because of the state explosion problem, the state space.",
                    "label": 0
                },
                {
                    "sent": "This the state transition graph could be so large that it wouldn't fit in the memory of the the largest computer.",
                    "label": 0
                }
            ]
        },
        "clip_18": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So before I go any further, let me give a a simple example to illustrate how you might use a model checker if you had one available.",
                    "label": 0
                },
                {
                    "sent": "This is a trivial example and you wouldn't need a model checker for this example, although I have seen.",
                    "label": 0
                },
                {
                    "sent": "State transition graphs with not many more states that were that.",
                    "label": 0
                },
                {
                    "sent": "Where it was difficult to determine if they satisfied certain properties or or not.",
                    "label": 0
                },
                {
                    "sent": "Game.",
                    "label": 0
                },
                {
                    "sent": "Let's suppose that you've invented a new microwave often, and that the microwave oven has four state variables.",
                    "label": 0
                },
                {
                    "sent": "Start close, heat an error, and initially they are all false.",
                    "label": 1
                },
                {
                    "sent": "The~ means.",
                    "label": 0
                },
                {
                    "sent": "Not so you can.",
                    "label": 0
                },
                {
                    "sent": "You can close the door then you can press the start button and then the oven will begin to heat up.",
                    "label": 0
                },
                {
                    "sent": "Now one thing that you would like to make certain of is.",
                    "label": 0
                }
            ]
        },
        "clip_19": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "That no one is going to get hurt using the microwave oven, so you'd like to make sure that the oven doesn't heat up until the door is closed.",
                    "label": 1
                },
                {
                    "sent": "You'd like to embed that behavior in the in the oven controller, and you can formulate this a little bit more concisely as not heat up holes until door closed, and that Maps perfectly into the until operator.",
                    "label": 0
                },
                {
                    "sent": "It's it's just not heat up holes until door closed.",
                    "label": 0
                },
                {
                    "sent": "Now you would check this property on the the.",
                    "label": 0
                },
                {
                    "sent": "The controller of the microwave oven ANAN the and if it held, if it was, if it was true, that would be great.",
                    "label": 0
                },
                {
                    "sent": "If it was, if it didn't told you would get a counterexample and the counterexample would would would would take you directly to the source of the error.",
                    "label": 0
                },
                {
                    "sent": "R.",
                    "label": 0
                }
            ]
        },
        "clip_20": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Now normally an if we're checking hardware, then we start with a description of what we want to verify an A hardware description language, Verilog, VHDL, SMD, an industrial.",
                    "label": 0
                },
                {
                    "sent": "In formal specification expressed in some natural language, we would compile the hardware description language into a transition system and we would manually convert the informal specification.",
                    "label": 0
                },
                {
                    "sent": "We would manually convert the informal specification into a temporal logic formula, and then we would determine by algorithmic.",
                    "label": 1
                },
                {
                    "sent": "That means whether the the temporal logic formula was true or not now.",
                    "label": 0
                }
            ]
        },
        "clip_21": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "I mentioned counterexamples, model checking basically looks for counterexamples it.",
                    "label": 0
                },
                {
                    "sent": "It tries to reason by by seeing if it can find a a counterexample to the thing that you ask it to verify.",
                    "label": 0
                },
                {
                    "sent": "An.",
                    "label": 0
                },
                {
                    "sent": "Let's assume that we want to check a specification of this little state machine and the state machine has one state labeled with an evil stop sign.",
                    "label": 0
                },
                {
                    "sent": "And and the specification in this case is a safety property that the bad State label with the stop sign is unreachable.",
                    "label": 1
                },
                {
                    "sent": "Well, in this case, it's trivially easy to see that the that that is the case you can't reach it from the state from the initial state because they're only transitions out of the state that's labeled with the with the stop sign.",
                    "label": 0
                }
            ]
        },
        "clip_22": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "But suppose we move the stop sign to this date.",
                    "label": 0
                },
                {
                    "sent": "Then is the specification still true?",
                    "label": 0
                },
                {
                    "sent": "Well, in this case the model checker would reply no an it would give us a counterexample.",
                    "label": 0
                }
            ]
        },
        "clip_23": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "That would be a path that shows how we can get from the initial state to the state labeled with the stop sign and it would help, and hopefully that path would would would not be very long now.",
                    "label": 0
                }
            ]
        },
        "clip_24": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "We were able to use model checking on a number of of.",
                    "label": 0
                },
                {
                    "sent": "Fairly complex hardware designs very early on an did establish, I believe that that model checking could be useful in hardware verification.",
                    "label": 0
                },
                {
                    "sent": "For example, in the early 90s we used model checking to verify the futurebus plus cache coherence protocol.",
                    "label": 1
                },
                {
                    "sent": "We've doesn't make any difference if you know what cache coherence protocol is or not, that's unimportant, but we.",
                    "label": 1
                },
                {
                    "sent": "We found a number of previously undetected errors in the design and this was the first time that formal verification tool had been used to find errors in an IEEE standard.",
                    "label": 1
                },
                {
                    "sent": "And it was even more remarkable because the development of the protocol had begun in 1988, but our previous attempts to validate it were were just based on simulation alone.",
                    "label": 0
                },
                {
                    "sent": "I think it is the case that now.",
                    "label": 0
                },
                {
                    "sent": "Particularly in cache coherence protocol design, model checkers are routinely used.",
                    "label": 0
                },
                {
                    "sent": "Now.",
                    "label": 0
                }
            ]
        },
        "clip_25": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "There are I'm going to talk about four big breakthroughs in model checking.",
                    "label": 1
                },
                {
                    "sent": "There are a couple of of, probably by then.",
                    "label": 0
                },
                {
                    "sent": "The next time I give this talk, I'll have to add a couple of more.",
                    "label": 0
                },
                {
                    "sent": "Breakthroughs to this list?",
                    "label": 0
                },
                {
                    "sent": "There's been some very interesting work in.",
                    "label": 0
                },
                {
                    "sent": "Our new ideas are recently.",
                    "label": 0
                },
                {
                    "sent": "The the in the first model checker, the one that I built back in the early 80s.",
                    "label": 0
                },
                {
                    "sent": "The model checker used a linked list structure to represent state transition graphs.",
                    "label": 0
                },
                {
                    "sent": "We used basically the ideas out of Professor Canus, chapter two of volume one to represent state transition graphs.",
                    "label": 0
                },
                {
                    "sent": "An my student, Ken McMillan, this guy.",
                    "label": 0
                },
                {
                    "sent": "Suggested when he arrived at CMU in 1990, but that was actually a terrible idea.",
                    "label": 0
                },
                {
                    "sent": "He said that that meant that we needed a bit of memory for each.",
                    "label": 0
                },
                {
                    "sent": "For each.",
                    "label": 0
                },
                {
                    "sent": "The state that we wanted to represent.",
                    "label": 0
                },
                {
                    "sent": "He suggested that we represent instead state transition graphs by ordered binary decision diagrams and when we tried out his his technique, we were able to handle much, much larger examples than we had handled before with a little work, we were able to.",
                    "label": 0
                },
                {
                    "sent": "I don't see this is not well.",
                    "label": 0
                },
                {
                    "sent": "We were able to handle machines with 10 to the 20th power States and with a little bit more work we could we were.",
                    "label": 0
                }
            ]
        },
        "clip_26": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Able to bump that number up to 10 to the 100 power States and these were interesting examples too.",
                    "label": 0
                },
                {
                    "sent": "They weren't just made up examples and a little bit more.",
                    "label": 0
                }
            ]
        },
        "clip_27": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "We were able to go up to 10 to the 20th power States and at that time we we stopped really paying that much attention to the tunnel.",
                    "label": 0
                },
                {
                    "sent": "Number of states that we total number of reachable states that we could handle.",
                    "label": 0
                },
                {
                    "sent": "Although I still think probably something like the log of the number of reachable states would be a good measure of complexity, better than just giving the number of.",
                    "label": 0
                },
                {
                    "sent": "Save variables.",
                    "label": 0
                },
                {
                    "sent": "Also, we're not the only ones who have obtained this type of result.",
                    "label": 0
                },
                {
                    "sent": "The PRISM model checker, for example, developed at Oxford, often is able to check state space is of a similar size.",
                    "label": 0
                },
                {
                    "sent": "Now a project that I didn't have anything to do with, but which I think is very important is the partial order reduction in asynchronous systems.",
                    "label": 1
                },
                {
                    "sent": "When you have processes that are independent of each other or actions that are independent of each other, then whether you do action A before action B or B before a, it doesn't make any difference, will get to the same state either way the the the.",
                    "label": 0
                },
                {
                    "sent": "You'll end up at the same.",
                    "label": 0
                },
                {
                    "sent": "Configuration and consequently you you only need to consider one of those interleavings.",
                    "label": 0
                },
                {
                    "sent": "And this is this I guess was originally proposed by Auntie Val.",
                    "label": 0
                },
                {
                    "sent": "Marie Ann is responsible for much of the power of Gerard Holtsman's spin.",
                    "label": 0
                }
            ]
        },
        "clip_28": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Model Checker Now another technique that has turned out to be very useful is something that we call bounded model checker bounded model checking.",
                    "label": 0
                },
                {
                    "sent": "In 1996 I began to see.",
                    "label": 0
                },
                {
                    "sent": "Elements that, as SAT solvers, could be made that were a lot more powerful than I thought, possible coming from theoretical background, I thought set was the ultimate.",
                    "label": 0
                },
                {
                    "sent": "What was it was it was an extremely hard problem to solve, and it was foolish to try to build fast SAT solvers, but.",
                    "label": 0
                },
                {
                    "sent": "Bounded model checking makes use of fast SAT solvers supposed that you want to determine whether property fails in case steps or not.",
                    "label": 1
                },
                {
                    "sent": "An, let's assume that.",
                    "label": 0
                },
                {
                    "sent": "There is that we have.",
                    "label": 0
                },
                {
                    "sent": "Boolean predicates I for the initial to identify the initial states T for the transition relation and P for the property that we want to check.",
                    "label": 0
                },
                {
                    "sent": "Then we write a formula in which we assert we ask whether there exists a path V nought which satisfies I was a transition from V nought to V1V1 to V2.",
                    "label": 0
                },
                {
                    "sent": "And so on, and the property P is false at one of those states.",
                    "label": 0
                },
                {
                    "sent": "Now, if this formula is satisfiable, the can reach a state in which the formula in which the property doesn't hold in less than K steps and and you can handle very large.",
                    "label": 0
                },
                {
                    "sent": "Systems don't work.",
                    "label": 0
                },
                {
                    "sent": "We tried this exact this on an example with 10,000 latches and 10,000 inputs and bounded model checking generated a Boolean formula in conjunctive normal form.",
                    "label": 0
                },
                {
                    "sent": "That's the hard Canonical form for set an.",
                    "label": 0
                },
                {
                    "sent": "It had 4 million variables and 12 million clauses.",
                    "label": 0
                },
                {
                    "sent": "And the the shortest bug of length 37 was found in just 69 seconds.",
                    "label": 1
                },
                {
                    "sent": "Now I still haven't told you what happens if the formula is unsatisfiable.",
                    "label": 0
                },
                {
                    "sent": "If it's satisfiable, we have a counterexample an we can we know that we can reach a state that in less in case steps where the property fails if the formula is unsatisfiable, we.",
                    "label": 0
                },
                {
                    "sent": "We just we know that the only thing we know is that you can't reach such a state in case steps, but it might be the case that you could reach a state in K plus one steps, and there's been a lot of work in extending bounded model checking to handle.",
                    "label": 0
                },
                {
                    "sent": "To make it complete so that you can determine when you when you have to start, unwind, stop unwinding the the transition relation an and conclude that the property is actually true.",
                    "label": 0
                }
            ]
        },
        "clip_29": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Now the the last big breakthrough that I want to consider.",
                    "label": 0
                },
                {
                    "sent": "Is.",
                    "label": 0
                },
                {
                    "sent": "The localization reduction, an counterexample guided abstraction refinement in 1994 Bob Kurshan published a book on Automata based verification, and he had in the book a technique called the Localization reduction an I couldn't understand this particular reduction.",
                    "label": 1
                },
                {
                    "sent": "It was was very.",
                    "label": 0
                },
                {
                    "sent": "Awkwardly written, I thought Anan, so I gave it to my student Yuan Lu.",
                    "label": 0
                },
                {
                    "sent": "Haha this person too.",
                    "label": 0
                },
                {
                    "sent": "Work on an he spent a long time looking at it and he finally figured out what it meant or what it was and it was.",
                    "label": 0
                },
                {
                    "sent": "It turned out to be something actually fairly simple and we generalized it an showed how it could be made to work for software and I'll tell you about more detail about that in just a second, I asked Kurshan at one point why he wrote this this section.",
                    "label": 0
                },
                {
                    "sent": "In such a an obscure manner, when it was probably the most important idea in his book, and he said that he wrote it in this manner because he didn't want to give the competition too much help.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                }
            ]
        },
        "clip_30": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So, so in order to explain.",
                    "label": 0
                },
                {
                    "sent": "The count this method to you counterexample guided abstraction refinement.",
                    "label": 0
                },
                {
                    "sent": "I have to say a little bit about abstraction and the kind of abstraction that we use is called existential abstraction, although sometimes I think existential is alittle bit confusing here.",
                    "label": 1
                },
                {
                    "sent": "Suppose that we have a an original model M. At the bottom and we want to construct an abstract model M sub Alpha.",
                    "label": 0
                },
                {
                    "sent": "I'm not sure the cursor.",
                    "label": 0
                },
                {
                    "sent": "Yes, the cursor is moving.",
                    "label": 0
                },
                {
                    "sent": "We want to construct an abstract model and we have an abstraction mapping that Maps the set of states of the original model into.",
                    "label": 1
                },
                {
                    "sent": "State of the abstract model.",
                    "label": 0
                },
                {
                    "sent": "Then what we do is we group together states that are similar in the in the.",
                    "label": 0
                },
                {
                    "sent": "Original model anan.",
                    "label": 0
                },
                {
                    "sent": "We map them by means of the abstraction mapping to states in the abstract model an and then we have to determine what the transition relation should be in the abstract.",
                    "label": 0
                },
                {
                    "sent": "Model an there will be a transition from from red to green in the abstract model because there exists.",
                    "label": 0
                },
                {
                    "sent": "This is where the existential abstractions comes from because there exists a transition from some red state to some green state.",
                    "label": 0
                },
                {
                    "sent": "And there will be a transition from red to blue because there exists a transition from some red state to some blue state and there will be a transition from green from blue to green because there's a transition from some blue state to some green state.",
                    "label": 0
                },
                {
                    "sent": "Now notice the last one, because that will come up that will be important in just a second.",
                    "label": 0
                },
                {
                    "sent": "To be consistent, we have to put a self loop on the blue node because there's a transition from some blue node to another blue node now.",
                    "label": 0
                }
            ]
        },
        "clip_31": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "We are able to prove the following.",
                    "label": 0
                },
                {
                    "sent": "Preservation theorem if a property holds for the abstract model, then it holds for the concrete model.",
                    "label": 1
                },
                {
                    "sent": "So true on the concrete model.",
                    "label": 0
                },
                {
                    "sent": "True on the abstract model means true on the on the concrete model.",
                    "label": 0
                },
                {
                    "sent": "And the result requires some hypothesis.",
                    "label": 0
                },
                {
                    "sent": "The most technical of which is that the properties have to be universal.",
                    "label": 0
                },
                {
                    "sent": "They can't involve any existential path quantifiers, and it's not a deep theorem.",
                    "label": 0
                },
                {
                    "sent": "It's relatively simple to prove.",
                    "label": 0
                },
                {
                    "sent": "But one thing that's a little bit surprising is that the converse doesn't hold an that turns out to be important.",
                    "label": 0
                },
                {
                    "sent": "In Counterexample guided abstraction refinement.",
                    "label": 0
                },
                {
                    "sent": "So let's see why the the converse doesn't whole.",
                    "label": 0
                },
                {
                    "sent": "Suppose we take a three state traffic light example.",
                    "label": 0
                }
            ]
        },
        "clip_32": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Anne Anne we we.",
                    "label": 0
                },
                {
                    "sent": "One property that it satisfies is that globally it's inevitable that we'll get.",
                    "label": 0
                },
                {
                    "sent": "We'll get back to State Red.",
                    "label": 1
                },
                {
                    "sent": "So no matter what state we get to, it's inevitable that will get to read.",
                    "label": 0
                },
                {
                    "sent": "And that's certainly true of the concrete model.",
                    "label": 0
                },
                {
                    "sent": "This is our original or concrete model in this case.",
                    "label": 0
                },
                {
                    "sent": "Now let's abstract this model.",
                    "label": 0
                },
                {
                    "sent": "Let's group.",
                    "label": 0
                },
                {
                    "sent": "Well, we'll leave red by itself an will group, green and yellow together.",
                    "label": 0
                },
                {
                    "sent": "Anan will map.",
                    "label": 0
                },
                {
                    "sent": "Well, map read to read an will map Green an yellow to go because nobody ever stuffs on the yellow light and then there will be a transition from red to go because there's a transition from red to green.",
                    "label": 0
                },
                {
                    "sent": "And they'll be a transition from go to red because there's a transition from yellow to red.",
                    "label": 0
                },
                {
                    "sent": "And finally they'll be is self loop on go because there's a transition from green to yellow.",
                    "label": 0
                },
                {
                    "sent": "And that means that in our.",
                    "label": 0
                },
                {
                    "sent": "In our abstractions we will have a trace gogogo forever Ann, and consequently this formula, which asserts that we will always get to read, is not satisfied.",
                    "label": 0
                },
                {
                    "sent": "So we have a property that that's true of the concrete machine, but is not true of our abstractions and.",
                    "label": 0
                },
                {
                    "sent": "The important thing to notice is that this is an artifact of the way that we do the abstraction, and it it doesn't really mean that there's a defect of any type with the original machine.",
                    "label": 1
                }
            ]
        },
        "clip_33": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Now the what we would like is an automatic abstraction technique.",
                    "label": 1
                },
                {
                    "sent": "We'd like to start with the with an initial abstraction for a concrete system, and maybe will get us various counterexample when we check it, and we would like them to refine that model, and we might still get us various count, for example, But we'd like to hope.",
                    "label": 0
                },
                {
                    "sent": "That if we continue this long enough, then either we'd find a a true counterexample, or we see that the the we would see that the specification was was valid now.",
                    "label": 0
                },
                {
                    "sent": "Well, the the next theorem shows that it turns out that if the state space is is finite, if you're working with finite models as you would normally be in hardware, you can make sure that this process of refinement terminates, but not in the case of infinite State models.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                }
            ]
        },
        "clip_34": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "This leads to.",
                    "label": 0
                },
                {
                    "sent": "What we call counterexample, abstractions, refinement, the seegar loop.",
                    "label": 0
                },
                {
                    "sent": "We start with a a circuit or program.",
                    "label": 1
                },
                {
                    "sent": "We construct an abstract model.",
                    "label": 0
                },
                {
                    "sent": "We then verify this abstract model using an off the shelf model checker, maybe one that's not so powerful, and if the specification checks, we haven't found any bug in the abstraction.",
                    "label": 0
                },
                {
                    "sent": "We know that there's no bug.",
                    "label": 0
                },
                {
                    "sent": "In the original program, if we get a counterexample though, we have to.",
                    "label": 0
                },
                {
                    "sent": "We have to be careful to know whether it's a real counterexample, Aura, Spurius counterexample.",
                    "label": 0
                },
                {
                    "sent": "So we have to do what we call simulation of the counterexample on the original model.",
                    "label": 0
                },
                {
                    "sent": "Now it's not really simulation, it's really more like bounded model checking because the models can contain.",
                    "label": 0
                },
                {
                    "sent": "Whoops, I went wrong way.",
                    "label": 0
                },
                {
                    "sent": "Because the the models can have inputs in.",
                    "label": 0
                },
                {
                    "sent": "If we do find a real bug, of course we can.",
                    "label": 0
                },
                {
                    "sent": "We can stop.",
                    "label": 0
                },
                {
                    "sent": "We've found a real bug when we do the simulation, but if we, if we find that the bug was a spyrius counterexample, a false counterexample, then we use the information in the spyrius counterexample to.",
                    "label": 0
                },
                {
                    "sent": "To refine the abstraction and go around this loop, now I've seen examples of programs in which you really go around the seegar loop 100 times or armor and you eventually reach a decision.",
                    "label": 0
                },
                {
                    "sent": "Now.",
                    "label": 0
                }
            ]
        },
        "clip_35": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Those are the four techniques that I'm going to discuss today and maybe the next time I give this talk, I'll add one or two more techniques.",
                    "label": 0
                },
                {
                    "sent": "One question that I'm asked a lot is, is it possible to model Check software?",
                    "label": 0
                },
                {
                    "sent": "And I regard this as a as really a grand challenge.",
                    "label": 0
                },
                {
                    "sent": "In 2005, Bill Gates was quoted in Wired News as saying that the the technology was under development at the two at Microsoft and he called it the Holy Grail of computer science.",
                    "label": 1
                },
                {
                    "sent": "Now I'm to be quite honest, I'm not sure whether he was referring to model checking or or to program verification in general.",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 0
                }
            ]
        },
        "clip_36": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Now.",
                    "label": 0
                },
                {
                    "sent": "The what.",
                    "label": 0
                },
                {
                    "sent": "What makes software model checking different?",
                    "label": 1
                },
                {
                    "sent": "Why is it harder than ordinary?",
                    "label": 0
                },
                {
                    "sent": "So oh everify in other types of models, hardware, well, large unbounded base types in slotz strings, user defined types, classes, pointers, aliasing, plus unbounded numbers of pointer allocated cells.",
                    "label": 0
                },
                {
                    "sent": "Procedure calls recursion calls through pointers.",
                    "label": 0
                },
                {
                    "sent": "Dynamic method look up, overloading concurrency plus an unbounded numbers of threads.",
                    "label": 0
                }
            ]
        },
        "clip_37": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Templates generics include files, interrupts, exceptions, callbacks, use of secondary storage.",
                    "label": 1
                },
                {
                    "sent": "I could go on forever files, databases, absent source code for library system calls, mobile code, esoteric features like continuations and self modifying code and finally last but not least size Microsoft Word is well over a million lines.",
                    "label": 1
                },
                {
                    "sent": "Of Of of code.",
                    "label": 0
                }
            ]
        },
        "clip_38": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Moreover, it's not even clear what it means to combine model to model Check Heart software well.",
                    "label": 1
                },
                {
                    "sent": "How would you go about even getting started?",
                    "label": 0
                },
                {
                    "sent": "Well, most of the approaches that have been somewhat successful have tried to combine static analysis with model checking.",
                    "label": 1
                },
                {
                    "sent": "You used synthetic analysis techniques to extract a A. Finite model from the software and then you use a model checker to check properties of the of the of a model Now.",
                    "label": 1
                }
            ]
        },
        "clip_39": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "V perhaps the most successful project was not due to my group, but actually a group at Microsoft.",
                    "label": 0
                },
                {
                    "sent": "Microsoft argues that all the errors that you get are not all of 'em, but many of them are due to.",
                    "label": 0
                },
                {
                    "sent": "A third party device drivers so they built.",
                    "label": 0
                },
                {
                    "sent": "They were very clever.",
                    "label": 0
                },
                {
                    "sent": "They built instead of trying to build a a model checker that could check any property they they decided to build a model checker just for device drivers to make sure that the device drivers satisfied the requirements of Windows and this tool.",
                    "label": 0
                },
                {
                    "sent": "The static device verifier.",
                    "label": 0
                },
                {
                    "sent": "Is now circulated with the tools for building third party device drivers for Windows, and I I've heard that it's considered a success and the people who did this were Tomball, an Sriram Rajamani now.",
                    "label": 0
                },
                {
                    "sent": "There's another problem that interests me even more than this, so let me step back just a second.",
                    "label": 0
                },
                {
                    "sent": "I think the reason that they were successful and maybe this will answer some of Michael's reservations about verification yesterday is that they didn't try to handle all possible types of failures.",
                    "label": 0
                },
                {
                    "sent": "They just wanted to go after one that they found particularly troublesome, and then they devoted their.",
                    "label": 0
                },
                {
                    "sent": "Entire attention to that particular type of error.",
                    "label": 0
                },
                {
                    "sent": "Now.",
                    "label": 0
                }
            ]
        },
        "clip_40": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Now there's another problem that interests me even more.",
                    "label": 0
                },
                {
                    "sent": "I would like to debug this circuit an I don't know how much detail you can see from the audience, but it is the P53MDM2.",
                    "label": 1
                },
                {
                    "sent": "As cell repair regulatory network.",
                    "label": 0
                }
            ]
        },
        "clip_41": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "If you there, it's discussed quite a lot in in systems biology.",
                    "label": 0
                },
                {
                    "sent": "The P50I mean quote from one of the descriptions of of this regulatory network.",
                    "label": 0
                },
                {
                    "sent": "The P 53 pathway has been shown to mediate cellular stress responses.",
                    "label": 1
                },
                {
                    "sent": "53 can initiate DNA repair cell cycle arrest, senescence and importantly, a pop ptosis.",
                    "label": 0
                },
                {
                    "sent": "A pop ptosis is programmed cell death.",
                    "label": 0
                },
                {
                    "sent": "So what's supposed to happen is that if a harmful mutation occurs in the cell.",
                    "label": 0
                },
                {
                    "sent": "I think the cell will.",
                    "label": 0
                },
                {
                    "sent": "Well, try to repair it using this.",
                    "label": 0
                },
                {
                    "sent": "P 53 pathway an.",
                    "label": 0
                },
                {
                    "sent": "If it fails, then the cell will commit suicide and that will prevent it from becoming cancerous.",
                    "label": 0
                },
                {
                    "sent": "Now P53 has been called the Guardian of the genome for its role in preventing mutations and in 1993 actually along time ago it was voted a molecule of the year by Science magazine.",
                    "label": 1
                },
                {
                    "sent": "Hi so I think I'm going to stop at this point an and take questions.",
                    "label": 0
                },
                {
                    "sent": "I think I may have just about exhausted my my time, but there's much more to be done.",
                    "label": 0
                },
                {
                    "sent": "I can.",
                    "label": 0
                },
                {
                    "sent": "I'm always thinking of new projects at the in San Francisco.",
                    "label": 0
                },
                {
                    "sent": "I described a new way of verifying.",
                    "label": 0
                },
                {
                    "sent": "Hybrid systems that seems to avoid much of the complexity in standard techniques for verifying hybrid systems.",
                    "label": 0
                },
                {
                    "sent": "Hybrid systems are mixed continuous discrete systems.",
                    "label": 0
                },
                {
                    "sent": "They occur in all sorts of cyber physical applications.",
                    "label": 0
                },
                {
                    "sent": "Questions.",
                    "label": 0
                },
                {
                    "sent": "My question relates to the bounded model checking.",
                    "label": 0
                },
                {
                    "sent": "You mentioned that when you do bounded model checking, you model up to some number of steps and that number has to be bounded and work is being done to work on unbelievable bit louder.",
                    "label": 0
                },
                {
                    "sent": "Yeah well that's the microphone.",
                    "label": 0
                },
                {
                    "sent": "You said that in bounded model checking when one models up to some bounded number of steps and work is being done to change that to make that into an unbounded check.",
                    "label": 0
                },
                {
                    "sent": "And my question is is this.",
                    "label": 0
                },
                {
                    "sent": "We know that the number of steps that the system can take is.",
                    "label": 0
                },
                {
                    "sent": "Linear with the number of states that it has and that is suffering very much for the from the curse of dimensionality that you mentioned earlier.",
                    "label": 0
                },
                {
                    "sent": "We also know from busy Beaver studies that Turing machines even very very small ones exhibit extremely long running times if they halt and very quickly reach open problems, and even undecidable problem in this case, let me let me say that I I'm not sure that I understand where you're going in your question.",
                    "label": 0
                },
                {
                    "sent": "But let me say what determines how much you have to unwind the.",
                    "label": 0
                },
                {
                    "sent": "Are the the state space I an upper bound?",
                    "label": 0
                },
                {
                    "sent": "Is the diameter of the state space A graph theoretic property?",
                    "label": 0
                },
                {
                    "sent": "Now the trouble is that if you have the state transition graph expressed essay binary decision diagram or in terms of Boolean formulas, the diameter is very hard to compute.",
                    "label": 0
                },
                {
                    "sent": "It's not an easy thing to compute.",
                    "label": 0
                },
                {
                    "sent": "It's just so we, we, we we, we don't, we can't.",
                    "label": 0
                },
                {
                    "sent": "We can't do that.",
                    "label": 0
                },
                {
                    "sent": "It's not just very hard to compute, it's it's potentially huge.",
                    "label": 0
                },
                {
                    "sent": "It can be very large.",
                    "label": 0
                },
                {
                    "sent": "Yes, it can be larger than you would want to to computer.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "So my question is to expand.",
                    "label": 0
                },
                {
                    "sent": "So my question is, what hope do you do you see, in that direction of making has been a great deal of work on that problem there is, and there are new techniques all the time, one.",
                    "label": 0
                },
                {
                    "sent": "Very useful technique is K induction.",
                    "label": 0
                },
                {
                    "sent": "Their various ways of using interpolation, an idea of macmillans.",
                    "label": 0
                },
                {
                    "sent": "For that purpose there are many different ways of.",
                    "label": 0
                },
                {
                    "sent": "Handling the this this of making bounded model checking complete.",
                    "label": 0
                },
                {
                    "sent": "So if you I can give you some places to look if you want, thank you.",
                    "label": 0
                },
                {
                    "sent": "Just wondering about the initial conditions you can envisage.",
                    "label": 0
                },
                {
                    "sent": "Let's see I can't see you lights up here or just wondering about the initial conditions.",
                    "label": 0
                },
                {
                    "sent": "You can state transition diagrams, wherefore as some regions of the state space, or inaccessible for some initial conditions, I'm just wondering do you have to rerun your model?",
                    "label": 0
                },
                {
                    "sent": "Checking for many many initial conditions?",
                    "label": 0
                },
                {
                    "sent": "Do you have to try many sets of of of initial conditions?",
                    "label": 0
                },
                {
                    "sent": "That's not been my experience, although I could.",
                    "label": 0
                },
                {
                    "sent": "I could conceive of having to do that.",
                    "label": 0
                },
                {
                    "sent": "You could.",
                    "label": 0
                },
                {
                    "sent": "You could also probably.",
                    "label": 0
                },
                {
                    "sent": "Work backwards an an come up with a with a predicate that would be true of any initial condition and then check to see if a specific initial condition satisfied that predicate or or not.",
                    "label": 0
                },
                {
                    "sent": "So I don't think that that's a major problem.",
                    "label": 0
                },
                {
                    "sent": "There's a question from from the Nets, so I'll relay it and it's along the lines of specializing model checking an the question is about whether you see a future in doing model checking for data type invariants and database integrity constraints.",
                    "label": 0
                },
                {
                    "sent": "These areas, well, I know I know very little about databases and so.",
                    "label": 0
                },
                {
                    "sent": "I I I I I really would would prefer to avoid that.",
                    "label": 0
                },
                {
                    "sent": "To avoid trying to answer that that question.",
                    "label": 0
                },
                {
                    "sent": "Mache, I thought you'd heard this talk enough and asked all your questions.",
                    "label": 0
                },
                {
                    "sent": "I always have new questions, so K Moore's law mean that you have faster and faster machines on which one moves low mean yes, you have faster and faster's machines on which to run.",
                    "label": 0
                },
                {
                    "sent": "Model checking algorithms at the same time it means that you have to verify larger and larger systems who wins.",
                    "label": 0
                },
                {
                    "sent": "Well, let's see.",
                    "label": 0
                },
                {
                    "sent": "I I, I suspect that there's there's not going to be a definite answer to that question.",
                    "label": 0
                },
                {
                    "sent": "And probably probably one can always conceive of a system more complex than one can verify at a given time, but I don't think that I can give a good answer to that question either.",
                    "label": 0
                },
                {
                    "sent": "High I like to, I like to ask about non automatic program verification.",
                    "label": 0
                },
                {
                    "sent": "I'd like to ask about non automatic program verification on automatic verification.",
                    "label": 0
                },
                {
                    "sent": "What does that mean?",
                    "label": 0
                },
                {
                    "sent": "So theorem proving can you can you?",
                    "label": 0
                },
                {
                    "sent": "Solve some of the more complex problems in our well, OK, that's that's that's a good point.",
                    "label": 0
                },
                {
                    "sent": "I'm.",
                    "label": 0
                },
                {
                    "sent": "I'm still not sure I know what you mean by non automatic verification.",
                    "label": 0
                },
                {
                    "sent": "I wrote my thesis on Hoare Logic and I then I thought you would just do it by hand.",
                    "label": 0
                },
                {
                    "sent": "You would would have no mechanical assistance.",
                    "label": 0
                },
                {
                    "sent": "I think that that maybe that I would say that that's infeasible now the way that.",
                    "label": 0
                },
                {
                    "sent": "A dijkstra.",
                    "label": 0
                },
                {
                    "sent": "Typically I proposed proving small programs correct, but I I am I am very much impressed by some of the proof assistants.",
                    "label": 0
                },
                {
                    "sent": "For example, I learned the cock proof assistant this past year myself.",
                    "label": 0
                },
                {
                    "sent": "I have a severe cold by the way.",
                    "label": 0
                },
                {
                    "sent": "Anne was very much impressed by its power and what I would like to do.",
                    "label": 0
                },
                {
                    "sent": "Cock does not really have very powerful decision procedures built into it.",
                    "label": 0
                },
                {
                    "sent": "I guess Z3.",
                    "label": 0
                },
                {
                    "sent": "If you could marry Z3 and cock you would you would have something that would be truly powerful and add a model checker component as well.",
                    "label": 0
                },
                {
                    "sent": "So I think that there is the potential to put all of these things together and really have a powerful tool for verifying systems an it's not necessary that it be completely automatic.",
                    "label": 0
                },
                {
                    "sent": "There might be steps that that user would want to.",
                    "label": 0
                },
                {
                    "sent": "Make as as determine whether should be made as well.",
                    "label": 0
                },
                {
                    "sent": "Yeah, hello here.",
                    "label": 0
                },
                {
                    "sent": "I'm Alejandro Mendez from Technical University of Denmark.",
                    "label": 0
                },
                {
                    "sent": "So you mentioned about so formal checking.",
                    "label": 0
                },
                {
                    "sent": "Some of the problems about data types a user defined data structures, continuations, so most of them are actually, we know syntactic sugar, and they don't really provide more power to the software.",
                    "label": 0
                },
                {
                    "sent": "So yes, syntactic sugar.",
                    "label": 0
                },
                {
                    "sent": "But I think that some of them really would complicate things, for example.",
                    "label": 0
                },
                {
                    "sent": "I if you allow self modifying code then.",
                    "label": 0
                },
                {
                    "sent": "Or or if you look at.",
                    "label": 0
                },
                {
                    "sent": "Dynamically typed languages.",
                    "label": 0
                },
                {
                    "sent": "Python is a is a dynamically typed language if I'm not mistaken, and that sort of thing would would make it very probably very difficult to model check Python programs.",
                    "label": 0
                },
                {
                    "sent": "But do you think it's so that the problem is intrinsically from from the mulching community or more related to programming languages?",
                    "label": 0
                },
                {
                    "sent": "And how to how to map from a single?",
                    "label": 0
                },
                {
                    "sent": "What language are doing machine to this complex Python C and well, I'm I'm I actually have a project to see if it will be possible to do that to look at these dynamically, it seems like that's a very popular trend these days.",
                    "label": 0
                },
                {
                    "sent": "Python, Ruby, JavaScript are all dynamically typed and I have a student who's working on on that.",
                    "label": 0
                },
                {
                    "sent": "As a project, but I also want to bring up this problem of verifying biological systems.",
                    "label": 0
                },
                {
                    "sent": "I see that as the as the frontier an at the at the meeting in San Francisco, the ACM meeting in San Francisco, several speakers made points in there talk about how important biology would be in the in future generations.",
                    "label": 0
                },
                {
                    "sent": "Thanks.",
                    "label": 0
                },
                {
                    "sent": "But that but that point about verifying biological systems?",
                    "label": 0
                },
                {
                    "sent": "How?",
                    "label": 0
                },
                {
                    "sent": "How did you see a role for model checking and doing that?",
                    "label": 0
                },
                {
                    "sent": "What was the question about your last slide?",
                    "label": 0
                },
                {
                    "sent": "This question about biological systems?",
                    "label": 0
                },
                {
                    "sent": "Yes.",
                    "label": 0
                },
                {
                    "sent": "What is the role for mobile check?",
                    "label": 0
                },
                {
                    "sent": "And I how would you fix the human cell?",
                    "label": 0
                },
                {
                    "sent": "I don't know is that well?",
                    "label": 0
                },
                {
                    "sent": "No, no we weren't trying to fix individual cells, that's.",
                    "label": 0
                },
                {
                    "sent": "Nor did not notice until when it detects a bug in the in the design of a circuit.",
                    "label": 0
                },
                {
                    "sent": "Try to go and an and Patch chips like.",
                    "label": 0
                },
                {
                    "sent": "Maybe they do in certain cases, but the.",
                    "label": 0
                },
                {
                    "sent": "One of the things that we have done is we.",
                    "label": 0
                },
                {
                    "sent": "We start looking at probabilistic and statistical model checking.",
                    "label": 0
                },
                {
                    "sent": "So in some cases it's you have to.",
                    "label": 0
                },
                {
                    "sent": "As such, these models of reaction pathways are inherently stochastic in nature, and an probabilistic model checking and statistical model checking both are useful.",
                    "label": 0
                },
                {
                    "sent": "Anan we have begun to do some research on on on on on that, so I think it will be possible to reason about such systems.",
                    "label": 0
                },
                {
                    "sent": "OK, so we're have a will have a short announcement before the break, so thank you very much, oranges.",
                    "label": 0
                }
            ]
        }
    }
}