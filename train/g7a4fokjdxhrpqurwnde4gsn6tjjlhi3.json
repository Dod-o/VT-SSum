{
    "id": "g7a4fokjdxhrpqurwnde4gsn6tjjlhi3",
    "title": "Diagnosing Memory Leaks using Graph Mining on Heap Dumps",
    "info": {
        "author": [
            "Evan Kyle Maxwell, Department of Computer Science, Virginia Polytechnic Institute and State University"
        ],
        "published": "Oct. 1, 2010",
        "recorded": "July 2010",
        "category": [
            "Top->Computer Science->Databases",
            "Top->Computer Science->Data Mining"
        ]
    },
    "url": "http://videolectures.net/kdd2010_maxwell_dmlu/",
    "segmentation": [
        [
            "Special.",
            "Hello hi everyone, I'm Evan Maxwell.",
            "I'll be presenting my paper diagnosing memory leaks, using graph mining on heap dumps and this work was done in collaboration with my advisors at Virginia Tech Doctor.",
            "Got more back Doctor in Rama Krishnan."
        ],
        [
            "So I'm sure we've all encountered a memory leak before.",
            "Memory leak is a program bug that occurs when memory is allocated to the heat, but that memory fails to be unallocated, and so the effects of memory leaks are.",
            "It could cause application slowdowns, or if the memory leak exhausts all memory on the heap, application will crash and in which case we might see this error message from Java telling us that we're out of memory so memory leaks are particularly difficult to detect and practice for a few reasons.",
            "One, the actual source of the memory leak may be far removed from the.",
            "Failure that we're observing and in order to identify that leak source, you can't just look at the local structure of the program.",
            "You have to look at the entire memory, and so we look at the heap reachability graph to get an idea of what the memory state looks like when a memory leak occurs.",
            "And in real world applications, heap size can be very large so that he reachability graph will be."
        ],
        [
            "Very large.",
            "So there's existing memory leak detection tools out here.",
            "We've highlighted 2 popular ones, Eclipse Memory Analyzer tool, an IBM's leak, but most memory leak detection tools can be categorized in two types of analysis.",
            "Eclipse Memory Analyzer tool is a static analysis method, meaning that we analyze the heap state offline.",
            "So once the program dies, we take a snapshot of the heap and monitor and analyze that, whereas IBM's leak bot is a dynamic analysis method that runs alongside your program.",
            "And as observing the state of memory as the program is running, so our method is a static analysis method and we use this because it doesn't suffer from runtime and space overhead like dynamic analysis does.",
            "So these methods along as many others, usually use object size as an indicator for a memory leak, so they're looking for objects that are either consuming lots of memory on the heap, or objects that are keeping lots of memory alive, which is what eclipse Memory analyzer tool does."
        ],
        [
            "So I'll show an example here so we have a Java application that we created.",
            "And it's heap reachability graph on the right so the heap reachability graph nodes represent objects on your heap and edges between nodes are.",
            "I guess references in the source code.",
            "So in this case we have a scenario that is somewhat common in software engineering, where you have data structures nested within each other, and in this case we have two hash Maps, so the outer hashmap contains these legitimate objects and we say there are legitimate in the sense that garbage collector should not be freeing this memory.",
            "This memory should be running.",
            "Or should be kept alive throughout the runtime of the program, but within these legitimate objects is a nested data structure that is leaking these objects, and so we're denoting the leaking objects, which are groups of objects.",
            "As these green circles without label, which corresponds to this leak class in the source code, so.",
            "The reason that these are hard to identify with previous methods is because by looking simply at object size, you might not recognize that these green circles are.",
            "They might not be large by themselves, but it's the frequency of them that's causing the memory leak.",
            "And further, with Eclipse Memory Analyzer tool that which tries to recognize what object is retaining the most amount of memory, they would indicate the hidden leak object at the top of this graph, and that's not the source of the memory leak.",
            "The memory leak is within the nested data structures.",
            "So our approach is to not use object size to ignore object size and we want to be able to identify what the leaks are themselves.",
            "So we use graph mining to try and identify these green circles and then characterize them."
        ],
        [
            "So the first step of our method is we compute what's called the Dominator tree will define it more formally in the paper, but to give you the sort of general idea we have an example graph on the left, which could be our heap reachability graph, which is not necessarily a tree, and we reduced that to a tree where the nodes that is the same in the dominator tree but the edges indicate a sort of object ownership relationship.",
            "So that tells you what objects are keeping other objects alive on the heap and from.",
            "The heaps that we've analyzed we've seen about a 44 to 61% edge reduction in this Dominator tree computation, so it's a significant preprocessing Step 4."
        ],
        [
            "Graph mining, so here I'll sort of generalize summarize our approach.",
            "So, as we mentioned, we claim that leaks will manifest themselves as frequent subgraphs on your heap reachability graph, so we aren't looking at size, and further, we look at the Dominator tree because it can give you a general idea of how objects are keeping other objects alive, and because we do this dominator tree computation, we explain why in the paper.",
            "But basically we can claim that frequent subgraphs in the heap reachability graph, which would indicate.",
            "The memory leak or potential memory leak will also be frequent in the Dominator tree, so it's sufficient to mine the reduced dominator tree.",
            "And finally, we want to know if the frequent subgraphs that we're reporting if they are indeed a memory leak or if they're simply groups of objects that would be frequent on all heap dumps and would not be likely to be a memory leak.",
            "So what we do is we want to know what's the location of all of these instances of this frequent sub graph in the heap, so we look at their paths to roots.",
            "Can I lick?"
        ],
        [
            "And what that is?",
            "So once we've computed the Dominator tree of the heap reachability graph, we want to mine it for those frequent subgraphs that could indicate the objects being leaked in memory.",
            "So if we have an example graph here.",
            "We're going to use graph grammar mining on this, so graph grammars have two important characteristics that we utilized, one that they can have recursive constructs and two that they have variable labels.",
            "So in this example graph we have, G is maybe a heap reachability graphs, Dominator tree and S is are frequent graph grammar production rules what it's called.",
            "So the variable label is denoted by this B or C, which tells us that the pattern can match edges of A to B or A to C and."
        ],
        [
            "If we look at the graph there six instances of this and further we note that there is a recursive construct which is denoted by this Gray box encompassing node A, which tells us that those six instances when you look at the graph, they can be connected to each other and the importance of this is that we take these six instances and we can then generalize them to three instances.",
            "So when we can."
        ],
        [
            "Press on this graph.",
            "We have three instances instead of 6, so that's why we used."
        ],
        [
            "Graph grammars.",
            "So now we've explained how we identify the green circles here, so that objects that are being or groups of objects that are being leaked in the memory.",
            "So now we want to know, are these indeed potential memory leaks?",
            "Or are they just frequent objects?",
            "So what we do is we trace the path to the roots in the dominator tree from each instance and then we then want to summarize those paths to see if they are all Co located in a similar way.",
            "And so this provides more context to the developer to say, at least to be able to classify for themselves.",
            "If it's a memory."
        ],
        [
            "Or not.",
            "So from our motivating example, what this looks like is we have an example of the group of instances being leaked on the bottom right and a summarization of all the paths to the roots listed above it."
        ],
        [
            "So when we apply this to a real Java program, what do we get?",
            "So this is a program that we had that we knew there was a memory leak, but we didn't know what it was.",
            "I priore.",
            "So in this case the heap reachability graph had about 1.7 million objects in about 4 million references between those objects, and what we can tell by looking at the frequent graph grammar that we report is.",
            "There's this notice, the Gray box denoting a recursive construct on these two nodes in upper left.",
            "That are connected by this edge labeled next AST node.",
            "And in addition with the root path summarization, what we can get from this is that it tells us the underlying structure of what's causing memory to be leaked.",
            "Here is these objects form a long chain and form a sort of a singly linked list structure.",
            "And so with other methods that use object size, you wouldn't be able to identify particularly that these the source of this memory leak was in fact the linked list grew infinitely until all memory was.",
            "Consumed by this leak and so.",
            "By using graph grammars, we can tell that this is indeed a linked list where each node has all of these objects emanating from it, and we can summarize how they are located and their routed at this local Java various."
        ],
        [
            "So to summarize, our contributions in this work for graph mining, we introduced the concept of the Dominator tree as a method for graph reduction, so we've done this particularly on heap reachability graphs and the Dominator tree concept has been used in memory leak detection before, but we claim that in certain applications for graph mining, as long as your input graph has certain characteristics, this dominator tree can help reduce your input graph and the benefits of that are one.",
            "Of course, the size reduction, but also it's easier to mine.",
            "From trees than it is from general graphs.",
            "And also for memory leak detection, this was the first graph mining method used as a static analysis, memory leak detection tool and we use graph grammars to give insight into what data structures are being used to provide the developer more context.",
            "And finally the combination of sub graph frequency and the pass summarization can help identify whether in fact it's a memory leak that things are occurring in one place or if these are frequent subgraphs that we're reporting that might just be in all heap dumps.",
            "So."
        ],
        [
            "Q.",
            "Time for questions.",
            "Make way.",
            "I have a question, so if I'm a developer would I be able to download this and run this on my program so that I can get an answer?",
            "Well, I guess we we haven't released this yet.",
            "It's it's conceptually there, but.",
            "Question nothing, so why would I be able to do that?",
            "I don't have a good answer to that question right now that depend.",
            "Yeah, then the next question would be what help do you need to make that happen?",
            "Well, we expect that this this wouldn't be a method on its own to this isn't necessarily better than all the other tools for identifying memory leaks, but it helps identify different classes of memory leaks.",
            "So our method is similar in preprocessing, I guess to Eclipse Memory Analyzer tool.",
            "So it might be some sort of extension that could be added onto existing packages like that.",
            "Thank you.",
            "Thank you so much."
        ]
    ],
    "summarization": {
        "clip_0": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Special.",
                    "label": 0
                },
                {
                    "sent": "Hello hi everyone, I'm Evan Maxwell.",
                    "label": 0
                },
                {
                    "sent": "I'll be presenting my paper diagnosing memory leaks, using graph mining on heap dumps and this work was done in collaboration with my advisors at Virginia Tech Doctor.",
                    "label": 1
                },
                {
                    "sent": "Got more back Doctor in Rama Krishnan.",
                    "label": 0
                }
            ]
        },
        "clip_1": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So I'm sure we've all encountered a memory leak before.",
                    "label": 0
                },
                {
                    "sent": "Memory leak is a program bug that occurs when memory is allocated to the heat, but that memory fails to be unallocated, and so the effects of memory leaks are.",
                    "label": 0
                },
                {
                    "sent": "It could cause application slowdowns, or if the memory leak exhausts all memory on the heap, application will crash and in which case we might see this error message from Java telling us that we're out of memory so memory leaks are particularly difficult to detect and practice for a few reasons.",
                    "label": 0
                },
                {
                    "sent": "One, the actual source of the memory leak may be far removed from the.",
                    "label": 0
                },
                {
                    "sent": "Failure that we're observing and in order to identify that leak source, you can't just look at the local structure of the program.",
                    "label": 1
                },
                {
                    "sent": "You have to look at the entire memory, and so we look at the heap reachability graph to get an idea of what the memory state looks like when a memory leak occurs.",
                    "label": 1
                },
                {
                    "sent": "And in real world applications, heap size can be very large so that he reachability graph will be.",
                    "label": 0
                }
            ]
        },
        "clip_2": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Very large.",
                    "label": 0
                },
                {
                    "sent": "So there's existing memory leak detection tools out here.",
                    "label": 0
                },
                {
                    "sent": "We've highlighted 2 popular ones, Eclipse Memory Analyzer tool, an IBM's leak, but most memory leak detection tools can be categorized in two types of analysis.",
                    "label": 0
                },
                {
                    "sent": "Eclipse Memory Analyzer tool is a static analysis method, meaning that we analyze the heap state offline.",
                    "label": 0
                },
                {
                    "sent": "So once the program dies, we take a snapshot of the heap and monitor and analyze that, whereas IBM's leak bot is a dynamic analysis method that runs alongside your program.",
                    "label": 0
                },
                {
                    "sent": "And as observing the state of memory as the program is running, so our method is a static analysis method and we use this because it doesn't suffer from runtime and space overhead like dynamic analysis does.",
                    "label": 0
                },
                {
                    "sent": "So these methods along as many others, usually use object size as an indicator for a memory leak, so they're looking for objects that are either consuming lots of memory on the heap, or objects that are keeping lots of memory alive, which is what eclipse Memory analyzer tool does.",
                    "label": 0
                }
            ]
        },
        "clip_3": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So I'll show an example here so we have a Java application that we created.",
                    "label": 0
                },
                {
                    "sent": "And it's heap reachability graph on the right so the heap reachability graph nodes represent objects on your heap and edges between nodes are.",
                    "label": 1
                },
                {
                    "sent": "I guess references in the source code.",
                    "label": 0
                },
                {
                    "sent": "So in this case we have a scenario that is somewhat common in software engineering, where you have data structures nested within each other, and in this case we have two hash Maps, so the outer hashmap contains these legitimate objects and we say there are legitimate in the sense that garbage collector should not be freeing this memory.",
                    "label": 1
                },
                {
                    "sent": "This memory should be running.",
                    "label": 0
                },
                {
                    "sent": "Or should be kept alive throughout the runtime of the program, but within these legitimate objects is a nested data structure that is leaking these objects, and so we're denoting the leaking objects, which are groups of objects.",
                    "label": 0
                },
                {
                    "sent": "As these green circles without label, which corresponds to this leak class in the source code, so.",
                    "label": 0
                },
                {
                    "sent": "The reason that these are hard to identify with previous methods is because by looking simply at object size, you might not recognize that these green circles are.",
                    "label": 0
                },
                {
                    "sent": "They might not be large by themselves, but it's the frequency of them that's causing the memory leak.",
                    "label": 1
                },
                {
                    "sent": "And further, with Eclipse Memory Analyzer tool that which tries to recognize what object is retaining the most amount of memory, they would indicate the hidden leak object at the top of this graph, and that's not the source of the memory leak.",
                    "label": 0
                },
                {
                    "sent": "The memory leak is within the nested data structures.",
                    "label": 0
                },
                {
                    "sent": "So our approach is to not use object size to ignore object size and we want to be able to identify what the leaks are themselves.",
                    "label": 0
                },
                {
                    "sent": "So we use graph mining to try and identify these green circles and then characterize them.",
                    "label": 0
                }
            ]
        },
        "clip_4": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So the first step of our method is we compute what's called the Dominator tree will define it more formally in the paper, but to give you the sort of general idea we have an example graph on the left, which could be our heap reachability graph, which is not necessarily a tree, and we reduced that to a tree where the nodes that is the same in the dominator tree but the edges indicate a sort of object ownership relationship.",
                    "label": 1
                },
                {
                    "sent": "So that tells you what objects are keeping other objects alive on the heap and from.",
                    "label": 1
                },
                {
                    "sent": "The heaps that we've analyzed we've seen about a 44 to 61% edge reduction in this Dominator tree computation, so it's a significant preprocessing Step 4.",
                    "label": 0
                }
            ]
        },
        "clip_5": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Graph mining, so here I'll sort of generalize summarize our approach.",
                    "label": 0
                },
                {
                    "sent": "So, as we mentioned, we claim that leaks will manifest themselves as frequent subgraphs on your heap reachability graph, so we aren't looking at size, and further, we look at the Dominator tree because it can give you a general idea of how objects are keeping other objects alive, and because we do this dominator tree computation, we explain why in the paper.",
                    "label": 0
                },
                {
                    "sent": "But basically we can claim that frequent subgraphs in the heap reachability graph, which would indicate.",
                    "label": 0
                },
                {
                    "sent": "The memory leak or potential memory leak will also be frequent in the Dominator tree, so it's sufficient to mine the reduced dominator tree.",
                    "label": 1
                },
                {
                    "sent": "And finally, we want to know if the frequent subgraphs that we're reporting if they are indeed a memory leak or if they're simply groups of objects that would be frequent on all heap dumps and would not be likely to be a memory leak.",
                    "label": 0
                },
                {
                    "sent": "So what we do is we want to know what's the location of all of these instances of this frequent sub graph in the heap, so we look at their paths to roots.",
                    "label": 0
                },
                {
                    "sent": "Can I lick?",
                    "label": 0
                }
            ]
        },
        "clip_6": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "And what that is?",
                    "label": 0
                },
                {
                    "sent": "So once we've computed the Dominator tree of the heap reachability graph, we want to mine it for those frequent subgraphs that could indicate the objects being leaked in memory.",
                    "label": 0
                },
                {
                    "sent": "So if we have an example graph here.",
                    "label": 0
                },
                {
                    "sent": "We're going to use graph grammar mining on this, so graph grammars have two important characteristics that we utilized, one that they can have recursive constructs and two that they have variable labels.",
                    "label": 1
                },
                {
                    "sent": "So in this example graph we have, G is maybe a heap reachability graphs, Dominator tree and S is are frequent graph grammar production rules what it's called.",
                    "label": 0
                },
                {
                    "sent": "So the variable label is denoted by this B or C, which tells us that the pattern can match edges of A to B or A to C and.",
                    "label": 0
                }
            ]
        },
        "clip_7": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "If we look at the graph there six instances of this and further we note that there is a recursive construct which is denoted by this Gray box encompassing node A, which tells us that those six instances when you look at the graph, they can be connected to each other and the importance of this is that we take these six instances and we can then generalize them to three instances.",
                    "label": 0
                },
                {
                    "sent": "So when we can.",
                    "label": 0
                }
            ]
        },
        "clip_8": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Press on this graph.",
                    "label": 0
                },
                {
                    "sent": "We have three instances instead of 6, so that's why we used.",
                    "label": 0
                }
            ]
        },
        "clip_9": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Graph grammars.",
                    "label": 0
                },
                {
                    "sent": "So now we've explained how we identify the green circles here, so that objects that are being or groups of objects that are being leaked in the memory.",
                    "label": 0
                },
                {
                    "sent": "So now we want to know, are these indeed potential memory leaks?",
                    "label": 0
                },
                {
                    "sent": "Or are they just frequent objects?",
                    "label": 0
                },
                {
                    "sent": "So what we do is we trace the path to the roots in the dominator tree from each instance and then we then want to summarize those paths to see if they are all Co located in a similar way.",
                    "label": 0
                },
                {
                    "sent": "And so this provides more context to the developer to say, at least to be able to classify for themselves.",
                    "label": 0
                },
                {
                    "sent": "If it's a memory.",
                    "label": 0
                }
            ]
        },
        "clip_10": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Or not.",
                    "label": 0
                },
                {
                    "sent": "So from our motivating example, what this looks like is we have an example of the group of instances being leaked on the bottom right and a summarization of all the paths to the roots listed above it.",
                    "label": 0
                }
            ]
        },
        "clip_11": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So when we apply this to a real Java program, what do we get?",
                    "label": 0
                },
                {
                    "sent": "So this is a program that we had that we knew there was a memory leak, but we didn't know what it was.",
                    "label": 0
                },
                {
                    "sent": "I priore.",
                    "label": 0
                },
                {
                    "sent": "So in this case the heap reachability graph had about 1.7 million objects in about 4 million references between those objects, and what we can tell by looking at the frequent graph grammar that we report is.",
                    "label": 1
                },
                {
                    "sent": "There's this notice, the Gray box denoting a recursive construct on these two nodes in upper left.",
                    "label": 0
                },
                {
                    "sent": "That are connected by this edge labeled next AST node.",
                    "label": 0
                },
                {
                    "sent": "And in addition with the root path summarization, what we can get from this is that it tells us the underlying structure of what's causing memory to be leaked.",
                    "label": 0
                },
                {
                    "sent": "Here is these objects form a long chain and form a sort of a singly linked list structure.",
                    "label": 0
                },
                {
                    "sent": "And so with other methods that use object size, you wouldn't be able to identify particularly that these the source of this memory leak was in fact the linked list grew infinitely until all memory was.",
                    "label": 0
                },
                {
                    "sent": "Consumed by this leak and so.",
                    "label": 0
                },
                {
                    "sent": "By using graph grammars, we can tell that this is indeed a linked list where each node has all of these objects emanating from it, and we can summarize how they are located and their routed at this local Java various.",
                    "label": 0
                }
            ]
        },
        "clip_12": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So to summarize, our contributions in this work for graph mining, we introduced the concept of the Dominator tree as a method for graph reduction, so we've done this particularly on heap reachability graphs and the Dominator tree concept has been used in memory leak detection before, but we claim that in certain applications for graph mining, as long as your input graph has certain characteristics, this dominator tree can help reduce your input graph and the benefits of that are one.",
                    "label": 0
                },
                {
                    "sent": "Of course, the size reduction, but also it's easier to mine.",
                    "label": 0
                },
                {
                    "sent": "From trees than it is from general graphs.",
                    "label": 0
                },
                {
                    "sent": "And also for memory leak detection, this was the first graph mining method used as a static analysis, memory leak detection tool and we use graph grammars to give insight into what data structures are being used to provide the developer more context.",
                    "label": 1
                },
                {
                    "sent": "And finally the combination of sub graph frequency and the pass summarization can help identify whether in fact it's a memory leak that things are occurring in one place or if these are frequent subgraphs that we're reporting that might just be in all heap dumps.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                }
            ]
        },
        "clip_13": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Q.",
                    "label": 0
                },
                {
                    "sent": "Time for questions.",
                    "label": 0
                },
                {
                    "sent": "Make way.",
                    "label": 0
                },
                {
                    "sent": "I have a question, so if I'm a developer would I be able to download this and run this on my program so that I can get an answer?",
                    "label": 0
                },
                {
                    "sent": "Well, I guess we we haven't released this yet.",
                    "label": 0
                },
                {
                    "sent": "It's it's conceptually there, but.",
                    "label": 0
                },
                {
                    "sent": "Question nothing, so why would I be able to do that?",
                    "label": 0
                },
                {
                    "sent": "I don't have a good answer to that question right now that depend.",
                    "label": 0
                },
                {
                    "sent": "Yeah, then the next question would be what help do you need to make that happen?",
                    "label": 0
                },
                {
                    "sent": "Well, we expect that this this wouldn't be a method on its own to this isn't necessarily better than all the other tools for identifying memory leaks, but it helps identify different classes of memory leaks.",
                    "label": 0
                },
                {
                    "sent": "So our method is similar in preprocessing, I guess to Eclipse Memory Analyzer tool.",
                    "label": 0
                },
                {
                    "sent": "So it might be some sort of extension that could be added onto existing packages like that.",
                    "label": 0
                },
                {
                    "sent": "Thank you.",
                    "label": 0
                },
                {
                    "sent": "Thank you so much.",
                    "label": 0
                }
            ]
        }
    }
}