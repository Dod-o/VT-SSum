{
    "id": "6p32ukpezp6jodxjpbi7is2awydr2vtf",
    "title": "Supporting Arbitrary Custom Datatypes in RDF and SPARQL",
    "info": {
        "author": [
            "Maxime Lefran\u00e7ois, MINES Saint-\u00c9tienne"
        ],
        "published": "July 28, 2016",
        "recorded": "June 2016",
        "category": [
            "Top->Computer Science->Big Data",
            "Top->Computer Science->Semantic Web"
        ]
    },
    "url": "http://videolectures.net/eswc2016_lefrancois_custom_datatypes/",
    "segmentation": [
        [
            "Run I will present the work that we equality equally contributed to with on Twins email man which is who is just here.",
            "And.",
            "It has been developed in the context of a European projects, ITA European project that is called CS for Smart Energy Aware systems and whose aim is to develop a global ecosystem of distributed services that all target energy efficiency so.",
            "We apply knowledge representation to community of of people whose specialty domain is energy.",
            "So work here is aimed at easing.",
            "Yeah, the description of.",
            "Do that are that they need to represent and we propose to support arbitrary custom data types in audio and sparkle."
        ],
        [
            "So all the if is built on eyes, blank nodes and literals, and we may argue that actually I eyes offer a ways of traversing linked data towards the discovery of little values and literals are actually the carriers of the data, so we'll try to dive a little bit more in Olive Ann and see what we can.",
            "What?",
            "People do it's little else, and we can actually do now.",
            "So all of you know, I'm sure that the literal is made of a Unicode string and any UI.",
            "Honey, I well, that's nearly true, except for the RDF long stream long string that has also a language tag.",
            "OK, but we will mostly focus on other kinds of letters."
        ],
        [
            "So I dragged you too.",
            "Use our intuitions at first, so let's focus on the following examples.",
            "Hello, other excess excess G string, so this looks well formed, right?",
            "One done the 20 three other XSD decimal is alright.",
            "And hello, as our XSD decimal is not well formed.",
            "So.",
            "To our intuition, that's OK, but is this always the case for RDF processors or sparkle engines?",
            "Well, this depends on the semantics they use at the moment.",
            "Department that olive.",
            "And what about dark turquoise with data type?",
            "CSS3 color for instance?",
            "So this is a custom data type.",
            "We are not used to see those kinds of data types.",
            "But you all understand that it should represent a color here and which is defined in this CSS3 specifications for instance.",
            "So now, knowing if a data type is well formed on it is not the only thing we want to do with literals inaudi.",
            "If we need to know if that's the type is well formed, OK, but we may also need to check if the value of two literals is actually the same.",
            "So, for instance, wonder two at the 4, three is as a double should have the same value as 12,000.",
            "As a double alright.",
            "And then Doctor Quiz, I will see us at three color little.",
            "Well, trust me or not, it should have the same value as as this other little here.",
            "Which might be also with a different data type actually.",
            "Last thing that we want to do, and it's not with audience that we want to do that, but it's with Sparkle and Sparkle engines is to check maybe whether to order with a query to order the results according to the values of data types of literals that may have also that different data types for.",
            "So for instance, here we invented a data type length.",
            "OK, and on the left we have 1 centimeter on the right, 5 millimeters and we would like to order the results according to the values of of this length.",
            "So this is the things that after this presentation you will know how to do."
        ],
        [
            "You will have at least one possibility to do it.",
            "2nd.",
            "Motivation for introducing custom data types is the conciseness of the representation.",
            "So this is on the top the.",
            "Classical way of representing.",
            "Physical quantities with the QDT ontology.",
            "It sees that circuit.",
            "This blank node has a size something.",
            "And the value of this quantity sum quantity on the value of this quantity is something a quantity value that has numeric value.",
            "Something a little here a double, and then we specify the unit.",
            "So we're full.",
            "Triples to represent just the size of this thing here.",
            "Instead, what we would like is to just specify a data type that is called, for instance millimeter and just enter.",
            "Underwear here and say OK these are millimeters.",
            "Consider this second example here, and this one is really of interest for the community we are developing ontologies for because they want to represent complex values.",
            "For instance, active power and reactive power.",
            "They want to represent the power of all the harmonics of an electrical signal childi 50th harmonic for instance, and we don't want to use plenty of triples for these because we don't want to do very fine grained queries.",
            "On the different values of the harmonics, for instance.",
            "So here on the top we we use audio lists and we have 13 triples or something you can check.",
            "And instead.",
            "If we don't want to manipulate it, each value in dependently in the metrics then we could just represent them as one little and this would save space alot.",
            "Sin in our audio.",
            "Storage man Clippers so I guess.",
            "So now back."
        ],
        [
            "Do the basics a little in audio 1.1 will focus on your audience, one that one.",
            "Has a unique string.",
            "And I I I I, I I actually, and this I I should identify the data type.",
            "So this is how we will we will.",
            "Right, did the data type?",
            "And then this this data type is characterized by first a lexical space which contains all the strings that are valid that are well formed for this data type.",
            "So for instance, here we know that 1234 the string 1234 is valid for double whereas the string hello is not.",
            "Then we have that further.",
            "Yeah, that's strange concept, which is the value space and can be actually anything for the type and we can't really grab it.",
            "It's something from the from the real world or on things.",
            "So for double, for instance, it's the set of rules.",
            "Let's see that.",
            "And then we have a lexical to value mapping which associates which Maps any of the strings in the lexical space.",
            "Choose something in the value space.",
            "So for instance here 1234 the string.",
            "Has value something on on the real axis?",
            "And then we know from the specification of the excess the data types that 12.34 E 2 has the same value.",
            "So."
        ],
        [
            "How about data type recognitions by processors?",
            "Actually so processors recognize a fixed set of data types according to Audience 1, one different entailment regimes, so they must at least support recognize or DF long string.",
            "An XSD string plus.",
            "Any number of the type they wish.",
            "And this set of data types is mostly XSD data types.",
            "And this is implementation specific.",
            "It can vary from the different processors.",
            "And what about when you want?",
            "When you encounter a new data type, so there's not many custom data types out in the wild, and this is surprising, because when you know that you have more than you know you have thousands of vocabularies and ontologies and nearly none of them specify new data types.",
            "OK, some processors offer implement implementation specific ways and extension points to to to define new data types As for instance classes in Gina or in Sesame.",
            "And sometimes new data types are defined on the web.",
            "For instance here we are talking about the type that is defined by the by the OGC Geo Sparkle Working Group and it's called Duplicate a little for well known text based geographical shapes or something and it is specified.",
            "And the good thing is that it is specified at this UI, so using the link data principles.",
            "That line string, for instance, will define a line on the planet OK, and at a point will.",
            "Precise position on the planet.",
            "And the third line is quite.",
            "Shows that that data types may become complex if we don't want to use the classical CS 84 Geo coordinate system, then we can specify 1 first in the string on the left, and this should be the UI of another joke all in the system.",
            "OK.",
            "So here we could say yeah, but at this yeah this new job coordinate system could be actually a data type that is kind of compatible with WKT literal."
        ],
        [
            "And this is.",
            "Precisely what we would like to do here.",
            "So we would like when you, when you encounter a new data type and that you don't know it as a audio processor to recognize it on the fly.",
            "So here we need some kind of agreement between the one that publishes the data type and its definition and the RDF and Sparkle processors.",
            "And these need to be octogonal.",
            "So one possible option is to have a centralized data type registration service where everyone could publish specifications for the types.",
            "But it is not very very very.",
            "Goods and very conforming to the to the link that are principles.",
            "So as we have as a data type is specified by you.",
            "I actually what we would like is that OK just use HTTP ur eyes to identify data types 1st and then when someone looks up at that you are.",
            "I provide him with the definition of the data type.",
            "That's a good first step."
        ],
        [
            "But we really need to provide the definition of the data type.",
            "No, we don't need to.",
            "We don't need to define the value space and maybe we could not define the value space.",
            "What we need is functions or something that the client can use to check for the well formedness of a string to check for the equality of of two literals.",
            "With this data type and maybe to compare two literals with this data type.",
            "Antutu, all them with a sparkle query or something.",
            "So we I'm listing here.",
            "I will list here.",
            "You'll see a four options to two.",
            "As a first step in for Step 2 to understand.",
            "The definition of the data type.",
            "1st.",
            "At the UI of the data type, we could have links to modules processor specific modules.",
            "For instance, you get a link to Azure that you can use with Gina, for instance, and under the one that you can use with Caesar me, it cetera, ET cetera.",
            "This could be possible.",
            "Is it good?",
            "I don't really like this solution because if an you audio processor appears then then it couldn't recognize any of the existing data types out on the wild.",
            "Second solution that the functions should check for well formedness equality and comparison would be accessible, accessible through a web service.",
            "For instance, the UI of the data type would be a web service would be the end point of a web service, and then it would have different operations.",
            "Good pros and cons of this approach.",
            "It could be very interesting.",
            "Maybe problem is that that's imagine if we had a web service for excess G, for instance.",
            "Then it would be used.",
            "Many many many times per second.",
            "So it would require high availability and and.",
            "Still, it's an option.",
            "Then we could also retrieve a script that contains functions definitions of functions to check for, well, formedness equality and comparisons.",
            "And finally.",
            "And that's future work, as we will see, we could also retrieve declarative vocabulary based description of the data type that.",
            "That says, OK, I'm a bit like double, for instance, but.",
            "Same same, but different.",
            "No."
        ],
        [
            "So we'll focus on the 3rd way function defined in a script and in a nutshell, this is the what we suggest so.",
            "At the UI of use HTTP UI.",
            "Then when you go out that HTTP UI you can retrieve.",
            "Yeah, you can use content negotiation and and say that you want to retrieve a JavaScript document.",
            "You retrieve the JavaScript document.",
            "And then this code implements API's that enables you to process the data type uniformly.",
            "And for instance, compare what's with kW, for instance.",
            "OK, So what are these API's that the executive executable code needs to implement?",
            "So we defined on on the on the W threeid.org/links websites and API for data types.",
            "Yeah, first.",
            "First, I didn't mention it actually, but.",
            "As you have a fragment in HTTP UI's.",
            "At one location on the web you can have the definition of many litters.",
            "So you first need an indirection between D document TDD code that you will get and the specification of one of these literals that are specified at this location on the web.",
            "So first the executable code needs to have a function called get data type and you pass it this ring that represent the UI of the data type and you would get an object which implements this interface.",
            "In the office custom data type.",
            "A few functions, only a few functions need to be implemented to to interact with.",
            "You have to grab the data type, so maybe get you high is well formed and you provided with a string argument parameter is equal.",
            "Get normal form and compare which would maybe return minus.",
            "One is the first one is less than the second one.",
            "OK, so this is specified.",
            "And now for."
        ],
        [
            "The types with overlapping values base.",
            "There are some more things that we want to do.",
            "For instance, compare data type compare little with this data type with a little with an order to type.",
            "So it means that this if this data type is able to.",
            "To tell you if.",
            "A little with this data type is equal to a little with another data type it means.",
            "That this data type recognizes the other one.",
            "You can also get normal form.",
            "Yeah, get the recognized data types and compared to a data type with another story.",
            "Compare a little with and with another little that has another data type import literal form another data type to this data type or export a little in this data type to another data type.",
            "So this does not look.",
            "So hard to code.",
            "Boo."
        ],
        [
            "The dumbest be also into an Inter conformance constraints.",
            "Constraints of course is equal should indeed be an equality relation.",
            "It's set up.",
            "These are all defined on the website and in the paper."
        ],
        [
            "So we published one simple custom data type that implements this specification.",
            "It models length and it enables all all of the different literals.",
            "Here on this slide are actually valid for this data type.",
            "And then we also implemented at the core of Jenna, the support for on the on the fly recognition of data types.",
            "So this also means that you can retrieve the the new version of Jenna here.",
            "And use the length data type.",
            "Or you can publish other custom data types and use this specific general to to recognize them on the fly.",
            "So it's it's already working, at least for the types that have none overlapping value spaces.",
            "And then things get interesting for future work if the value spaces are overlapping.",
            "So to check.",
            "How?",
            "Slower it gets when you want you to to fetch the JavaScript on and interpreted etc etc with custom data types we let an expert."
        ],
        [
            "I meant with with data set from DB pedia, 2014 English specific mapping based properties that contains more than 800,000 triples with 21 custom data types for units of measures.",
            "We extracted the 223 million 1000 ones that that describe length and they use those four data types here, millimeter centimeter, meter and kilometer.",
            "And below you have an example of a triple in that in that data set.",
            "So you have the submarine base cap, Trieste that has length and some.",
            "Amount of millimeters.",
            "Interestingly, when you go at that you I then you get 104 year."
        ],
        [
            "The so now from this data sets we made up three other data sets of two data sets, one with our new data Type 2 model length.",
            "Right, so that's pretty straightforward here.",
            "And then another data sets that uses the traditional QGT way of modeling quantities and units with units of measures.",
            "So first experiments loading time."
        ],
        [
            "Well, it's not very.",
            "Surprising, but actually we are very close to the loading time of two GT.",
            "But this is our implementation.",
            "I mean, we could do something more optimized, but we're very close to crudity that still has a four times the number of papers done than ours.",
            "There is a penalty of 470 milliseconds for loading the data type, but once it's loaded then then it's loaded forever and.",
            "And its implementation specific.",
            "Oh yeah, I forgot to tell you, but different lines are actually the same data set but with 50% of the trippers or 25% of the triples, etc."
        ],
        [
            "And then we tried to to make queries on that, so please return the 100 triples that concern the biggest lengths that are lower than 5 meters.",
            "Although the results according to the descending order of the length and this is a kind of query Unit 2 rights, when you want to do that with with with the DB pedia set, data sets right so you need for a start to know what before hand, what are the data types in the DB pedia data sets.",
            "So millimeter centimeter, meter kilometer you need also to know how you can compare literals with these data types.",
            "And for every request that for every query that would deal with those kind of data types, you would have the same blocks."
        ],
        [
            "Four QD tied some somehow similar, but you have more triples in the in the triple pattern."
        ],
        [
            "And we really like our way of writing the query because it's it's straightforward.",
            "We just we.",
            "We can just say, OK, I want my length to be less than 5 meter.",
            "With that I plant.",
            "Then"
        ],
        [
            "Really time.",
            "Overall, we have better performances than the DD 40 then for the other data sets.",
            "Well, faster than DB pedia.",
            "But this may be explained because DB Pedia actually hides for queries.",
            "And Cutie might look.",
            "Faster for the, for the 100%.",
            "For the data type that contains 100% of the triples, but actually it has an anchor I I and it knows where to start the search from.",
            "So.",
            "We can discuss on that later also."
        ],
        [
            "So then we told ourselves, OK, what if we also had in our query unanchor somewhere due to speed up the results.",
            "So what if we unk all the predicates to that you are right here, we want the Heights of persons.",
            "And then we see that the time the query time is drastic and drastically reduced, at least for our data sets, and not that much for security."
        ],
        [
            "So pros and cons of using that as a custom literals pros?",
            "Is of course you can define arbitrarily complex data types, use less triples, have much nicer queries.",
            "OK drawbacks.",
            "Can include security issues because of course you download code and execut codes on that that you didn't write.",
            "And maybe we can also say that using a full fledged programming language isn't overkill for some simple data types.",
            "But still we have one way of representing arbitrarily complex data types, and this is a big win to me.",
            "And we also need some some precautions because we can have actually limited expressivity in the data type.",
            "Imagine that the lexical space is the set of valid total documents.",
            "Yes, we can do that, and imagine that the lexical to value space Maps are all the aircraft to the set of equivalent old you full ontologies.",
            "Everybody knows that all too full isn't decidable.",
            "Well then, audio or audio if it's recognizing this data type would be on decidable.",
            "Right?"
        ],
        [
            "So as a conclusion, using recognizable custom data types would increase or Intel probability on the web of data and is the publication of some domain specific data sets.",
            "We have a first proposal to support arbitrarily complex datasets or data types on the fly.",
            "We published a data type for rent and implemented the underfloor recognition of custom data types on top of a pagina.",
            "The specification and experimentations are available on the web."
        ],
        [
            "And future work includes publishing a library of custom data types that could be interesting.",
            "Implementing on top of other processors.",
            "Thinking about strategies to compare to make comparisons between data types for overlapping value spaces, and exploring other ways.",
            "Maybe simple, simpler ways.",
            "Maybe ways that do not require scripts.",
            "To retrieve the definition of data types so for instance, functions accessible through a web web service.",
            "We discussed that before.",
            "Or also, and this is really exciting to us.",
            "Declarative vocabulary based description of data types.",
            "For instance.",
            "OK, this new data type is a sequence of of doubles, for instance that are supplied by by, by; Or something."
        ],
        [
            "So thank you.",
            "Great."
        ]
    ],
    "summarization": {
        "clip_0": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Run I will present the work that we equality equally contributed to with on Twins email man which is who is just here.",
                    "label": 0
                },
                {
                    "sent": "And.",
                    "label": 0
                },
                {
                    "sent": "It has been developed in the context of a European projects, ITA European project that is called CS for Smart Energy Aware systems and whose aim is to develop a global ecosystem of distributed services that all target energy efficiency so.",
                    "label": 0
                },
                {
                    "sent": "We apply knowledge representation to community of of people whose specialty domain is energy.",
                    "label": 0
                },
                {
                    "sent": "So work here is aimed at easing.",
                    "label": 0
                },
                {
                    "sent": "Yeah, the description of.",
                    "label": 0
                },
                {
                    "sent": "Do that are that they need to represent and we propose to support arbitrary custom data types in audio and sparkle.",
                    "label": 0
                }
            ]
        },
        "clip_1": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So all the if is built on eyes, blank nodes and literals, and we may argue that actually I eyes offer a ways of traversing linked data towards the discovery of little values and literals are actually the carriers of the data, so we'll try to dive a little bit more in Olive Ann and see what we can.",
                    "label": 1
                },
                {
                    "sent": "What?",
                    "label": 0
                },
                {
                    "sent": "People do it's little else, and we can actually do now.",
                    "label": 0
                },
                {
                    "sent": "So all of you know, I'm sure that the literal is made of a Unicode string and any UI.",
                    "label": 0
                },
                {
                    "sent": "Honey, I well, that's nearly true, except for the RDF long stream long string that has also a language tag.",
                    "label": 0
                },
                {
                    "sent": "OK, but we will mostly focus on other kinds of letters.",
                    "label": 0
                }
            ]
        },
        "clip_2": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So I dragged you too.",
                    "label": 0
                },
                {
                    "sent": "Use our intuitions at first, so let's focus on the following examples.",
                    "label": 0
                },
                {
                    "sent": "Hello, other excess excess G string, so this looks well formed, right?",
                    "label": 0
                },
                {
                    "sent": "One done the 20 three other XSD decimal is alright.",
                    "label": 0
                },
                {
                    "sent": "And hello, as our XSD decimal is not well formed.",
                    "label": 1
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "To our intuition, that's OK, but is this always the case for RDF processors or sparkle engines?",
                    "label": 0
                },
                {
                    "sent": "Well, this depends on the semantics they use at the moment.",
                    "label": 0
                },
                {
                    "sent": "Department that olive.",
                    "label": 0
                },
                {
                    "sent": "And what about dark turquoise with data type?",
                    "label": 0
                },
                {
                    "sent": "CSS3 color for instance?",
                    "label": 0
                },
                {
                    "sent": "So this is a custom data type.",
                    "label": 0
                },
                {
                    "sent": "We are not used to see those kinds of data types.",
                    "label": 0
                },
                {
                    "sent": "But you all understand that it should represent a color here and which is defined in this CSS3 specifications for instance.",
                    "label": 0
                },
                {
                    "sent": "So now, knowing if a data type is well formed on it is not the only thing we want to do with literals inaudi.",
                    "label": 0
                },
                {
                    "sent": "If we need to know if that's the type is well formed, OK, but we may also need to check if the value of two literals is actually the same.",
                    "label": 0
                },
                {
                    "sent": "So, for instance, wonder two at the 4, three is as a double should have the same value as 12,000.",
                    "label": 0
                },
                {
                    "sent": "As a double alright.",
                    "label": 0
                },
                {
                    "sent": "And then Doctor Quiz, I will see us at three color little.",
                    "label": 1
                },
                {
                    "sent": "Well, trust me or not, it should have the same value as as this other little here.",
                    "label": 0
                },
                {
                    "sent": "Which might be also with a different data type actually.",
                    "label": 0
                },
                {
                    "sent": "Last thing that we want to do, and it's not with audience that we want to do that, but it's with Sparkle and Sparkle engines is to check maybe whether to order with a query to order the results according to the values of data types of literals that may have also that different data types for.",
                    "label": 0
                },
                {
                    "sent": "So for instance, here we invented a data type length.",
                    "label": 0
                },
                {
                    "sent": "OK, and on the left we have 1 centimeter on the right, 5 millimeters and we would like to order the results according to the values of of this length.",
                    "label": 0
                },
                {
                    "sent": "So this is the things that after this presentation you will know how to do.",
                    "label": 0
                }
            ]
        },
        "clip_3": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "You will have at least one possibility to do it.",
                    "label": 0
                },
                {
                    "sent": "2nd.",
                    "label": 0
                },
                {
                    "sent": "Motivation for introducing custom data types is the conciseness of the representation.",
                    "label": 0
                },
                {
                    "sent": "So this is on the top the.",
                    "label": 0
                },
                {
                    "sent": "Classical way of representing.",
                    "label": 0
                },
                {
                    "sent": "Physical quantities with the QDT ontology.",
                    "label": 0
                },
                {
                    "sent": "It sees that circuit.",
                    "label": 0
                },
                {
                    "sent": "This blank node has a size something.",
                    "label": 0
                },
                {
                    "sent": "And the value of this quantity sum quantity on the value of this quantity is something a quantity value that has numeric value.",
                    "label": 0
                },
                {
                    "sent": "Something a little here a double, and then we specify the unit.",
                    "label": 0
                },
                {
                    "sent": "So we're full.",
                    "label": 0
                },
                {
                    "sent": "Triples to represent just the size of this thing here.",
                    "label": 0
                },
                {
                    "sent": "Instead, what we would like is to just specify a data type that is called, for instance millimeter and just enter.",
                    "label": 0
                },
                {
                    "sent": "Underwear here and say OK these are millimeters.",
                    "label": 0
                },
                {
                    "sent": "Consider this second example here, and this one is really of interest for the community we are developing ontologies for because they want to represent complex values.",
                    "label": 0
                },
                {
                    "sent": "For instance, active power and reactive power.",
                    "label": 0
                },
                {
                    "sent": "They want to represent the power of all the harmonics of an electrical signal childi 50th harmonic for instance, and we don't want to use plenty of triples for these because we don't want to do very fine grained queries.",
                    "label": 0
                },
                {
                    "sent": "On the different values of the harmonics, for instance.",
                    "label": 0
                },
                {
                    "sent": "So here on the top we we use audio lists and we have 13 triples or something you can check.",
                    "label": 0
                },
                {
                    "sent": "And instead.",
                    "label": 0
                },
                {
                    "sent": "If we don't want to manipulate it, each value in dependently in the metrics then we could just represent them as one little and this would save space alot.",
                    "label": 0
                },
                {
                    "sent": "Sin in our audio.",
                    "label": 0
                },
                {
                    "sent": "Storage man Clippers so I guess.",
                    "label": 0
                },
                {
                    "sent": "So now back.",
                    "label": 0
                }
            ]
        },
        "clip_4": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Do the basics a little in audio 1.1 will focus on your audience, one that one.",
                    "label": 0
                },
                {
                    "sent": "Has a unique string.",
                    "label": 0
                },
                {
                    "sent": "And I I I I, I I actually, and this I I should identify the data type.",
                    "label": 0
                },
                {
                    "sent": "So this is how we will we will.",
                    "label": 0
                },
                {
                    "sent": "Right, did the data type?",
                    "label": 0
                },
                {
                    "sent": "And then this this data type is characterized by first a lexical space which contains all the strings that are valid that are well formed for this data type.",
                    "label": 0
                },
                {
                    "sent": "So for instance, here we know that 1234 the string 1234 is valid for double whereas the string hello is not.",
                    "label": 0
                },
                {
                    "sent": "Then we have that further.",
                    "label": 0
                },
                {
                    "sent": "Yeah, that's strange concept, which is the value space and can be actually anything for the type and we can't really grab it.",
                    "label": 0
                },
                {
                    "sent": "It's something from the from the real world or on things.",
                    "label": 0
                },
                {
                    "sent": "So for double, for instance, it's the set of rules.",
                    "label": 0
                },
                {
                    "sent": "Let's see that.",
                    "label": 0
                },
                {
                    "sent": "And then we have a lexical to value mapping which associates which Maps any of the strings in the lexical space.",
                    "label": 0
                },
                {
                    "sent": "Choose something in the value space.",
                    "label": 0
                },
                {
                    "sent": "So for instance here 1234 the string.",
                    "label": 0
                },
                {
                    "sent": "Has value something on on the real axis?",
                    "label": 0
                },
                {
                    "sent": "And then we know from the specification of the excess the data types that 12.34 E 2 has the same value.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                }
            ]
        },
        "clip_5": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "How about data type recognitions by processors?",
                    "label": 0
                },
                {
                    "sent": "Actually so processors recognize a fixed set of data types according to Audience 1, one different entailment regimes, so they must at least support recognize or DF long string.",
                    "label": 0
                },
                {
                    "sent": "An XSD string plus.",
                    "label": 0
                },
                {
                    "sent": "Any number of the type they wish.",
                    "label": 0
                },
                {
                    "sent": "And this set of data types is mostly XSD data types.",
                    "label": 1
                },
                {
                    "sent": "And this is implementation specific.",
                    "label": 0
                },
                {
                    "sent": "It can vary from the different processors.",
                    "label": 0
                },
                {
                    "sent": "And what about when you want?",
                    "label": 0
                },
                {
                    "sent": "When you encounter a new data type, so there's not many custom data types out in the wild, and this is surprising, because when you know that you have more than you know you have thousands of vocabularies and ontologies and nearly none of them specify new data types.",
                    "label": 0
                },
                {
                    "sent": "OK, some processors offer implement implementation specific ways and extension points to to to define new data types As for instance classes in Gina or in Sesame.",
                    "label": 1
                },
                {
                    "sent": "And sometimes new data types are defined on the web.",
                    "label": 0
                },
                {
                    "sent": "For instance here we are talking about the type that is defined by the by the OGC Geo Sparkle Working Group and it's called Duplicate a little for well known text based geographical shapes or something and it is specified.",
                    "label": 0
                },
                {
                    "sent": "And the good thing is that it is specified at this UI, so using the link data principles.",
                    "label": 0
                },
                {
                    "sent": "That line string, for instance, will define a line on the planet OK, and at a point will.",
                    "label": 0
                },
                {
                    "sent": "Precise position on the planet.",
                    "label": 0
                },
                {
                    "sent": "And the third line is quite.",
                    "label": 0
                },
                {
                    "sent": "Shows that that data types may become complex if we don't want to use the classical CS 84 Geo coordinate system, then we can specify 1 first in the string on the left, and this should be the UI of another joke all in the system.",
                    "label": 0
                },
                {
                    "sent": "OK.",
                    "label": 0
                },
                {
                    "sent": "So here we could say yeah, but at this yeah this new job coordinate system could be actually a data type that is kind of compatible with WKT literal.",
                    "label": 0
                }
            ]
        },
        "clip_6": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "And this is.",
                    "label": 0
                },
                {
                    "sent": "Precisely what we would like to do here.",
                    "label": 0
                },
                {
                    "sent": "So we would like when you, when you encounter a new data type and that you don't know it as a audio processor to recognize it on the fly.",
                    "label": 0
                },
                {
                    "sent": "So here we need some kind of agreement between the one that publishes the data type and its definition and the RDF and Sparkle processors.",
                    "label": 1
                },
                {
                    "sent": "And these need to be octogonal.",
                    "label": 0
                },
                {
                    "sent": "So one possible option is to have a centralized data type registration service where everyone could publish specifications for the types.",
                    "label": 0
                },
                {
                    "sent": "But it is not very very very.",
                    "label": 0
                },
                {
                    "sent": "Goods and very conforming to the to the link that are principles.",
                    "label": 0
                },
                {
                    "sent": "So as we have as a data type is specified by you.",
                    "label": 1
                },
                {
                    "sent": "I actually what we would like is that OK just use HTTP ur eyes to identify data types 1st and then when someone looks up at that you are.",
                    "label": 1
                },
                {
                    "sent": "I provide him with the definition of the data type.",
                    "label": 0
                },
                {
                    "sent": "That's a good first step.",
                    "label": 0
                }
            ]
        },
        "clip_7": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "But we really need to provide the definition of the data type.",
                    "label": 0
                },
                {
                    "sent": "No, we don't need to.",
                    "label": 0
                },
                {
                    "sent": "We don't need to define the value space and maybe we could not define the value space.",
                    "label": 1
                },
                {
                    "sent": "What we need is functions or something that the client can use to check for the well formedness of a string to check for the equality of of two literals.",
                    "label": 0
                },
                {
                    "sent": "With this data type and maybe to compare two literals with this data type.",
                    "label": 0
                },
                {
                    "sent": "Antutu, all them with a sparkle query or something.",
                    "label": 0
                },
                {
                    "sent": "So we I'm listing here.",
                    "label": 0
                },
                {
                    "sent": "I will list here.",
                    "label": 0
                },
                {
                    "sent": "You'll see a four options to two.",
                    "label": 0
                },
                {
                    "sent": "As a first step in for Step 2 to understand.",
                    "label": 1
                },
                {
                    "sent": "The definition of the data type.",
                    "label": 0
                },
                {
                    "sent": "1st.",
                    "label": 0
                },
                {
                    "sent": "At the UI of the data type, we could have links to modules processor specific modules.",
                    "label": 0
                },
                {
                    "sent": "For instance, you get a link to Azure that you can use with Gina, for instance, and under the one that you can use with Caesar me, it cetera, ET cetera.",
                    "label": 0
                },
                {
                    "sent": "This could be possible.",
                    "label": 0
                },
                {
                    "sent": "Is it good?",
                    "label": 0
                },
                {
                    "sent": "I don't really like this solution because if an you audio processor appears then then it couldn't recognize any of the existing data types out on the wild.",
                    "label": 1
                },
                {
                    "sent": "Second solution that the functions should check for well formedness equality and comparison would be accessible, accessible through a web service.",
                    "label": 0
                },
                {
                    "sent": "For instance, the UI of the data type would be a web service would be the end point of a web service, and then it would have different operations.",
                    "label": 0
                },
                {
                    "sent": "Good pros and cons of this approach.",
                    "label": 0
                },
                {
                    "sent": "It could be very interesting.",
                    "label": 0
                },
                {
                    "sent": "Maybe problem is that that's imagine if we had a web service for excess G, for instance.",
                    "label": 0
                },
                {
                    "sent": "Then it would be used.",
                    "label": 0
                },
                {
                    "sent": "Many many many times per second.",
                    "label": 0
                },
                {
                    "sent": "So it would require high availability and and.",
                    "label": 0
                },
                {
                    "sent": "Still, it's an option.",
                    "label": 0
                },
                {
                    "sent": "Then we could also retrieve a script that contains functions definitions of functions to check for, well, formedness equality and comparisons.",
                    "label": 0
                },
                {
                    "sent": "And finally.",
                    "label": 0
                },
                {
                    "sent": "And that's future work, as we will see, we could also retrieve declarative vocabulary based description of the data type that.",
                    "label": 0
                },
                {
                    "sent": "That says, OK, I'm a bit like double, for instance, but.",
                    "label": 0
                },
                {
                    "sent": "Same same, but different.",
                    "label": 0
                },
                {
                    "sent": "No.",
                    "label": 0
                }
            ]
        },
        "clip_8": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So we'll focus on the 3rd way function defined in a script and in a nutshell, this is the what we suggest so.",
                    "label": 0
                },
                {
                    "sent": "At the UI of use HTTP UI.",
                    "label": 0
                },
                {
                    "sent": "Then when you go out that HTTP UI you can retrieve.",
                    "label": 0
                },
                {
                    "sent": "Yeah, you can use content negotiation and and say that you want to retrieve a JavaScript document.",
                    "label": 0
                },
                {
                    "sent": "You retrieve the JavaScript document.",
                    "label": 0
                },
                {
                    "sent": "And then this code implements API's that enables you to process the data type uniformly.",
                    "label": 1
                },
                {
                    "sent": "And for instance, compare what's with kW, for instance.",
                    "label": 0
                },
                {
                    "sent": "OK, So what are these API's that the executive executable code needs to implement?",
                    "label": 0
                },
                {
                    "sent": "So we defined on on the on the W threeid.org/links websites and API for data types.",
                    "label": 0
                },
                {
                    "sent": "Yeah, first.",
                    "label": 0
                },
                {
                    "sent": "First, I didn't mention it actually, but.",
                    "label": 0
                },
                {
                    "sent": "As you have a fragment in HTTP UI's.",
                    "label": 0
                },
                {
                    "sent": "At one location on the web you can have the definition of many litters.",
                    "label": 0
                },
                {
                    "sent": "So you first need an indirection between D document TDD code that you will get and the specification of one of these literals that are specified at this location on the web.",
                    "label": 0
                },
                {
                    "sent": "So first the executable code needs to have a function called get data type and you pass it this ring that represent the UI of the data type and you would get an object which implements this interface.",
                    "label": 0
                },
                {
                    "sent": "In the office custom data type.",
                    "label": 0
                },
                {
                    "sent": "A few functions, only a few functions need to be implemented to to interact with.",
                    "label": 0
                },
                {
                    "sent": "You have to grab the data type, so maybe get you high is well formed and you provided with a string argument parameter is equal.",
                    "label": 0
                },
                {
                    "sent": "Get normal form and compare which would maybe return minus.",
                    "label": 0
                },
                {
                    "sent": "One is the first one is less than the second one.",
                    "label": 0
                },
                {
                    "sent": "OK, so this is specified.",
                    "label": 0
                },
                {
                    "sent": "And now for.",
                    "label": 0
                }
            ]
        },
        "clip_9": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "The types with overlapping values base.",
                    "label": 0
                },
                {
                    "sent": "There are some more things that we want to do.",
                    "label": 0
                },
                {
                    "sent": "For instance, compare data type compare little with this data type with a little with an order to type.",
                    "label": 0
                },
                {
                    "sent": "So it means that this if this data type is able to.",
                    "label": 0
                },
                {
                    "sent": "To tell you if.",
                    "label": 0
                },
                {
                    "sent": "A little with this data type is equal to a little with another data type it means.",
                    "label": 0
                },
                {
                    "sent": "That this data type recognizes the other one.",
                    "label": 0
                },
                {
                    "sent": "You can also get normal form.",
                    "label": 0
                },
                {
                    "sent": "Yeah, get the recognized data types and compared to a data type with another story.",
                    "label": 0
                },
                {
                    "sent": "Compare a little with and with another little that has another data type import literal form another data type to this data type or export a little in this data type to another data type.",
                    "label": 0
                },
                {
                    "sent": "So this does not look.",
                    "label": 0
                },
                {
                    "sent": "So hard to code.",
                    "label": 0
                },
                {
                    "sent": "Boo.",
                    "label": 0
                }
            ]
        },
        "clip_10": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "The dumbest be also into an Inter conformance constraints.",
                    "label": 1
                },
                {
                    "sent": "Constraints of course is equal should indeed be an equality relation.",
                    "label": 0
                },
                {
                    "sent": "It's set up.",
                    "label": 0
                },
                {
                    "sent": "These are all defined on the website and in the paper.",
                    "label": 0
                }
            ]
        },
        "clip_11": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So we published one simple custom data type that implements this specification.",
                    "label": 0
                },
                {
                    "sent": "It models length and it enables all all of the different literals.",
                    "label": 0
                },
                {
                    "sent": "Here on this slide are actually valid for this data type.",
                    "label": 0
                },
                {
                    "sent": "And then we also implemented at the core of Jenna, the support for on the on the fly recognition of data types.",
                    "label": 0
                },
                {
                    "sent": "So this also means that you can retrieve the the new version of Jenna here.",
                    "label": 0
                },
                {
                    "sent": "And use the length data type.",
                    "label": 0
                },
                {
                    "sent": "Or you can publish other custom data types and use this specific general to to recognize them on the fly.",
                    "label": 0
                },
                {
                    "sent": "So it's it's already working, at least for the types that have none overlapping value spaces.",
                    "label": 0
                },
                {
                    "sent": "And then things get interesting for future work if the value spaces are overlapping.",
                    "label": 0
                },
                {
                    "sent": "So to check.",
                    "label": 0
                },
                {
                    "sent": "How?",
                    "label": 0
                },
                {
                    "sent": "Slower it gets when you want you to to fetch the JavaScript on and interpreted etc etc with custom data types we let an expert.",
                    "label": 0
                }
            ]
        },
        "clip_12": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "I meant with with data set from DB pedia, 2014 English specific mapping based properties that contains more than 800,000 triples with 21 custom data types for units of measures.",
                    "label": 1
                },
                {
                    "sent": "We extracted the 223 million 1000 ones that that describe length and they use those four data types here, millimeter centimeter, meter and kilometer.",
                    "label": 0
                },
                {
                    "sent": "And below you have an example of a triple in that in that data set.",
                    "label": 0
                },
                {
                    "sent": "So you have the submarine base cap, Trieste that has length and some.",
                    "label": 0
                },
                {
                    "sent": "Amount of millimeters.",
                    "label": 0
                },
                {
                    "sent": "Interestingly, when you go at that you I then you get 104 year.",
                    "label": 0
                }
            ]
        },
        "clip_13": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "The so now from this data sets we made up three other data sets of two data sets, one with our new data Type 2 model length.",
                    "label": 0
                },
                {
                    "sent": "Right, so that's pretty straightforward here.",
                    "label": 0
                },
                {
                    "sent": "And then another data sets that uses the traditional QGT way of modeling quantities and units with units of measures.",
                    "label": 0
                },
                {
                    "sent": "So first experiments loading time.",
                    "label": 0
                }
            ]
        },
        "clip_14": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Well, it's not very.",
                    "label": 0
                },
                {
                    "sent": "Surprising, but actually we are very close to the loading time of two GT.",
                    "label": 1
                },
                {
                    "sent": "But this is our implementation.",
                    "label": 0
                },
                {
                    "sent": "I mean, we could do something more optimized, but we're very close to crudity that still has a four times the number of papers done than ours.",
                    "label": 0
                },
                {
                    "sent": "There is a penalty of 470 milliseconds for loading the data type, but once it's loaded then then it's loaded forever and.",
                    "label": 1
                },
                {
                    "sent": "And its implementation specific.",
                    "label": 0
                },
                {
                    "sent": "Oh yeah, I forgot to tell you, but different lines are actually the same data set but with 50% of the trippers or 25% of the triples, etc.",
                    "label": 0
                }
            ]
        },
        "clip_15": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "And then we tried to to make queries on that, so please return the 100 triples that concern the biggest lengths that are lower than 5 meters.",
                    "label": 1
                },
                {
                    "sent": "Although the results according to the descending order of the length and this is a kind of query Unit 2 rights, when you want to do that with with with the DB pedia set, data sets right so you need for a start to know what before hand, what are the data types in the DB pedia data sets.",
                    "label": 0
                },
                {
                    "sent": "So millimeter centimeter, meter kilometer you need also to know how you can compare literals with these data types.",
                    "label": 0
                },
                {
                    "sent": "And for every request that for every query that would deal with those kind of data types, you would have the same blocks.",
                    "label": 0
                }
            ]
        },
        "clip_16": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Four QD tied some somehow similar, but you have more triples in the in the triple pattern.",
                    "label": 0
                }
            ]
        },
        "clip_17": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And we really like our way of writing the query because it's it's straightforward.",
                    "label": 0
                },
                {
                    "sent": "We just we.",
                    "label": 0
                },
                {
                    "sent": "We can just say, OK, I want my length to be less than 5 meter.",
                    "label": 0
                },
                {
                    "sent": "With that I plant.",
                    "label": 0
                },
                {
                    "sent": "Then",
                    "label": 0
                }
            ]
        },
        "clip_18": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Really time.",
                    "label": 0
                },
                {
                    "sent": "Overall, we have better performances than the DD 40 then for the other data sets.",
                    "label": 0
                },
                {
                    "sent": "Well, faster than DB pedia.",
                    "label": 0
                },
                {
                    "sent": "But this may be explained because DB Pedia actually hides for queries.",
                    "label": 0
                },
                {
                    "sent": "And Cutie might look.",
                    "label": 0
                },
                {
                    "sent": "Faster for the, for the 100%.",
                    "label": 0
                },
                {
                    "sent": "For the data type that contains 100% of the triples, but actually it has an anchor I I and it knows where to start the search from.",
                    "label": 1
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "We can discuss on that later also.",
                    "label": 0
                }
            ]
        },
        "clip_19": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So then we told ourselves, OK, what if we also had in our query unanchor somewhere due to speed up the results.",
                    "label": 0
                },
                {
                    "sent": "So what if we unk all the predicates to that you are right here, we want the Heights of persons.",
                    "label": 1
                },
                {
                    "sent": "And then we see that the time the query time is drastic and drastically reduced, at least for our data sets, and not that much for security.",
                    "label": 0
                }
            ]
        },
        "clip_20": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So pros and cons of using that as a custom literals pros?",
                    "label": 0
                },
                {
                    "sent": "Is of course you can define arbitrarily complex data types, use less triples, have much nicer queries.",
                    "label": 0
                },
                {
                    "sent": "OK drawbacks.",
                    "label": 0
                },
                {
                    "sent": "Can include security issues because of course you download code and execut codes on that that you didn't write.",
                    "label": 0
                },
                {
                    "sent": "And maybe we can also say that using a full fledged programming language isn't overkill for some simple data types.",
                    "label": 0
                },
                {
                    "sent": "But still we have one way of representing arbitrarily complex data types, and this is a big win to me.",
                    "label": 0
                },
                {
                    "sent": "And we also need some some precautions because we can have actually limited expressivity in the data type.",
                    "label": 1
                },
                {
                    "sent": "Imagine that the lexical space is the set of valid total documents.",
                    "label": 1
                },
                {
                    "sent": "Yes, we can do that, and imagine that the lexical to value space Maps are all the aircraft to the set of equivalent old you full ontologies.",
                    "label": 0
                },
                {
                    "sent": "Everybody knows that all too full isn't decidable.",
                    "label": 0
                },
                {
                    "sent": "Well then, audio or audio if it's recognizing this data type would be on decidable.",
                    "label": 0
                },
                {
                    "sent": "Right?",
                    "label": 0
                }
            ]
        },
        "clip_21": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So as a conclusion, using recognizable custom data types would increase or Intel probability on the web of data and is the publication of some domain specific data sets.",
                    "label": 1
                },
                {
                    "sent": "We have a first proposal to support arbitrarily complex datasets or data types on the fly.",
                    "label": 1
                },
                {
                    "sent": "We published a data type for rent and implemented the underfloor recognition of custom data types on top of a pagina.",
                    "label": 0
                },
                {
                    "sent": "The specification and experimentations are available on the web.",
                    "label": 0
                }
            ]
        },
        "clip_22": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "And future work includes publishing a library of custom data types that could be interesting.",
                    "label": 1
                },
                {
                    "sent": "Implementing on top of other processors.",
                    "label": 0
                },
                {
                    "sent": "Thinking about strategies to compare to make comparisons between data types for overlapping value spaces, and exploring other ways.",
                    "label": 0
                },
                {
                    "sent": "Maybe simple, simpler ways.",
                    "label": 0
                },
                {
                    "sent": "Maybe ways that do not require scripts.",
                    "label": 0
                },
                {
                    "sent": "To retrieve the definition of data types so for instance, functions accessible through a web web service.",
                    "label": 1
                },
                {
                    "sent": "We discussed that before.",
                    "label": 0
                },
                {
                    "sent": "Or also, and this is really exciting to us.",
                    "label": 0
                },
                {
                    "sent": "Declarative vocabulary based description of data types.",
                    "label": 0
                },
                {
                    "sent": "For instance.",
                    "label": 0
                },
                {
                    "sent": "OK, this new data type is a sequence of of doubles, for instance that are supplied by by, by; Or something.",
                    "label": 0
                }
            ]
        },
        "clip_23": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So thank you.",
                    "label": 0
                },
                {
                    "sent": "Great.",
                    "label": 0
                }
            ]
        }
    }
}