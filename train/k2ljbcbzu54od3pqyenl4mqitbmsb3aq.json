{
    "id": "k2ljbcbzu54od3pqyenl4mqitbmsb3aq",
    "title": "A Generic RDF Transformation Software and its Application to an Online Translation Service for Common Languages of Linked Data",
    "info": {
        "author": [
            "Olivier Corby, INRIA Sophia Antipolis"
        ],
        "published": "Nov. 10, 2015",
        "recorded": "October 2015",
        "category": [
            "Top->Computer Science->Semantic Web"
        ]
    },
    "url": "http://videolectures.net/iswc2015_corby_generic_rdf/",
    "segmentation": [
        [
            "So.",
            "Hello everybody.",
            "So I present to work which has been done with Catherine Pharmacy Care under Fabian condom.",
            "So we are from INRIA University of Nice option to police and see NRS yourself of France.",
            "Consumer, my two quarter fellow and friends are in the room, so if what I say is not clear, then you you can talk into them afterwards."
        ],
        [
            "So this talk will be in two parts.",
            "In the first part I will present.",
            "In the first part I will present an RDF transformation language which is cooler.",
            "STT Enfora Sparkle template transformation language.",
            "And in the second part I will present the RDF transformation software that implements this language and offer or some services."
        ],
        [
            "So, so we have been working on LDF transformation language which is still lacking after almost 15 years of work on semantic weather.",
            "And so you you may all know about the excessability, which is a transformation language for XML.",
            "So we did something similar in the Spirit, which is called STL.",
            "But it is not on top of SLT.",
            "The the idea is that it is on top of sparkle.",
            "So it takes as input an earlier of graph and it produces output text former, which can be a structure structure, text or unstructured text.",
            "It is based on sparkle and it is made of a declarative transformation rules."
        ],
        [
            "So there are several there a lot in fact of STL motivating use case, so the first one which is a inhabitant, is the transformation of RDF data into RDF syntaxes, such as Doctor RDF, XML, and Jason LD.",
            "So this has already been done using other software, but nevertheless it is motivating use case.",
            "The second use case is about the presentation of earlier data.",
            "Yesterday in a workshop we had a nice talk about designing user centered interface for the web of data, and so STL is a candidate.",
            "For example, we may want to generate HTML from an RDF graph.",
            "We may generate or lactic from earlier.",
            "For example, when we have an all ontology, we may want to generate the electric former of description logical formula.",
            "We may want to generate a natural language sentences, for example, in your question answering system.",
            "We may also want to generator graphic former such as Graffam Ella.",
            "Answer The seldom the same scenario is even more interesting.",
            "We can see that early F easy is used to represent abstract syntax trees of other languages.",
            "For example the all all RDF in fact is an abstract syntax tree of description logic statements.",
            "Not, it's not very, is not a very readable, so we prefer the functional syntax.",
            "Another example is a spinner or those you know spinner is a representation as an RDF graph of an abstract syntax tree of sparkle.",
            "We may want to generate the concrete syntax.",
            "And in in the general case, we forecast that in the future earliest will be more and more used to represent statements from other languages as abstract, syntax tree, and so we will need more and more to generate concrete syntax.",
            "For example, we may want to represent a mathematical expression in RDF that would annotate document for example."
        ],
        [
            "So on the on this line where we can see.",
            "And all expression returning RDF which is not very readable and with the some strange things such as a blank node of type A restriction.",
            "So we within Description logic this does not exist and on the right part we see that the RDF graph in fact is an abstract syntax tree of first statement and so we want to have a transformation to generate the functional syntax of all from the.",
            "So RDF graph."
        ],
        [
            "So.",
            "For this propose, we propose a transformation language which is cooler STL."
        ],
        [
            "And it is built on top of a off sparkle.",
            "There have been several tentative in related work to design A transformation language based on XLT, but it's it's not completely powerful and an we so we had the idea to rely on sparkle so the sparkle language.",
            "As for query form and select and construct, ask and describe which operates on a graph pattern.",
            "And."
        ],
        [
            "We we propose an additional query form which is called template where query form.",
            "So there's a template closer.",
            "As a text pattern which is made of variable expression and text, underwear part is a star sparkle wrap out so it is similar to the construct.",
            "Wear clothes, but instead of constructing triples it constrictor text."
        ],
        [
            "And so, for example, here we have a first example where we generate a syntax in natural language from from any other graph.",
            "So we say Auryxia is a person, Catherine is a person.",
            "This is a unstructured text that is generated by your template."
        ],
        [
            "In the template close we may have a strict order form a XML or HTML.",
            "For example.",
            "Here we generate and hypertext links to the UI of resource.",
            "OK, so here we have two hypertext links to.",
            "There there resume."
        ],
        [
            "And if in the in the template close we may write a statement in Turtle syntax, and so we here we do a transformation of RDF into turtle syntax.",
            "For example, here we add an RDF stable property in addition to the 4th name property.",
            "So the this generic template close in, able to regenerate text for murder for graph.",
            "And this is the first idea of the of this work."
        ],
        [
            "The second idea is to define our transformation as a set of templates.",
            "And so for for one specific feature, propose for example for the older to translate all into functional syntax, we can define a template for each statement.",
            "For example here the equivalent class we have a first template.",
            "For a subclass, we have a second template at City Hall for Restriction or somebody from we have another templates and we can define around A50 or templates for each statement of all and this this design or transformation to generate the functional syntax of all from all areas.",
            "So this is the second idea."
        ],
        [
            "And then the third idea is that within within a template.",
            "Here, for example, in the template close we have a variable in an variable C."
        ],
        [
            "But in fact, what we want as result in the template is not really in it is the transformation the result of the transformation of in.",
            "So we add an extension function or sparkle extension function which is called apply templates.",
            "So in the spirit of Accessibility we choose the same name as XLT and apply templates recursively call the transformation engine on the current transformation that is on the current set of templates.",
            "OK, and so we."
        ],
        [
            "Use these free ideas or templates were closing sparkle, but transformation as a set of templates and next apply templates extension function.",
            "We have a transformation language for RDF that is based on sparkle so it is amazing."
        ],
        [
            "Only a simple but since 10 years that sparkle exist, nobody at the idea.",
            "So this is a contribution.",
            "So we then, after after reasons three ideas, we did a lot of work for usability, so we had we had a set of function for the language to be usable.",
            "So we have we can select the transformation.",
            "Visa apply templates with their their name are templates or we can call a template using your name and we have some usability function.",
            "For example we have a pretty fine or turtle function to generate, so the turtle syntax."
        ],
        [
            "And also we for usability we can we can tune the transformer in engine with the starter Without Star template because in a graph there is no start node in XML there is a top level node but in the graph there is no start node.",
            "So we need to start template.",
            "Then we have a default template.",
            "If whenever all template failure and we have a profile where we can tune the default processing of variable."
        ],
        [
            "So and so we have now after having design of the language an implemented transformer engineer, we did a crash test by developing several 10s of transformation according to the use case.",
            "And so we have a Olympians all and spin transformation.",
            "We have doctor Jason Alexander.",
            "We have a we have we.",
            "We can generate sparkle result from the sparkle query.",
            "We have a link that under the Gator on top of the page are we have Sparkle tutorial."
        ],
        [
            "So now so I will skip this because."
        ],
        [
            "Same latency."
        ],
        [
            "So in the second part I present the transformation software so it's available in the correct Semantic Web factory as open source software.",
            "There is a sparkle engine.",
            "There is a STL transformer engine.",
            "There is a standalone abandonment to develop transformation.",
            "There is a special endpoint an an STL server that these are under web.",
            "It is embedded within an HTTP server and we have also a demo server."
        ],
        [
            "So the development environment consists of a simple interface where we can type templates and execute transformation and obtains the result directly.",
            "So we can have an Azure cycle of development where we see directly the result of a transformation that we are developing on the current graph and the result is displayed in the window."
        ],
        [
            "So we have setup.",
            "We have set up a server which process or transformation and generate HTML in result and so we can build our link data and we get to the web server or entertain alligator.",
            "And so this help in this server we can ask to execute a sparkle query construct where sparkle query that returns a small graph that is extracted either from a local active data set or from a remote, have a data set, for example DB pedia.",
            "So we can we can query DB pedia and then we can apply a specific transformation that will generate user centric display of the sub graph.",
            "Offer DB pedia and so we can build link data Navigator on top of any sparkling point.",
            "Yes."
        ],
        [
            "And so we so we design A demo web server with some transformation.",
            "So we."
        ],
        [
            "Did we did a transformation for DB pedia?",
            "And as in in my team we manage Rosa French DB Pedia.",
            "So the transformation is in French on top of front DB pedia and so we can navigate on a historical or per person.",
            "For example, in a hypertext way.",
            "We click on the links we go into the predecessor or successor or so on top of DB pedia."
        ],
        [
            "When we have a place, we locate it on a map or so using your transform."
        ],
        [
            "Mission and we also implemented a set of services for the transformation of RDF into, for example, all functional syntax.",
            "Ethics email Jason Dr TR Sparkle to spin spin to spark and so you can user can play with it.",
            "You can upload a graph and processor transformation."
        ],
        [
            "So we have implemented a sparkle tutorial using transformation and a set of predefined query.",
            "So there are about 50 exercise on 50 different queries and it was used in a MC on semantic Web result 4000 users.",
            "So it has been quite tested and."
        ],
        [
            "And now so there's a real reason why I developed this.",
            "Technology was 22 programmer Sudoku solver.",
            "So using one template we need only one template.",
            "The wear clothes solve the sudoku as a constraint problem and the template part displays a Sudoku panel.",
            "So we can edit all all these text area and then we generate the result is in this presentation.",
            "So this give an idea of the power of.",
            "Or of templates on top of sparking."
        ],
        [
            "And so this finishes my talk.",
            "So as you can as a conclusion, so our contribution is a transformation language for RDF, which is called STL.",
            "It can be seen as a.",
            "It's A kind of Accessibility, but for RDF, and on top of sparkle.",
            "And so the the STL engine is available as a program and also as a as a web server, a set of library are available online.",
            "You can, you can read them in order to learn the language.",
            "And in the future, so we plan to write other transformation such as the old tool attach or mathematical expression tool attach.",
            "We are working also on RDF temporal expression that we would like to pretty print and we plan also to work on constraint checking.",
            "So we plan to implement the RDF data Shape language on top of STL."
        ],
        [
            "And this is the end of my talk.",
            "This is the address of the demo web server.",
            "Thank you for your attention, thanks.",
            "Thank you, this is amazing work.",
            "Do you plan to have that language standardized by W3C or some other instance?",
            "So it is in our planning season, so one year to have a WCC member submission, so I hope we will do it this autumn.",
            "So and then maybe if there is a further sparkle working group it could be used as an input.",
            "So one slide went past a little fast, but it provoked this question in my mind is of whether if or why not, you would support well formed XML in the text portion of the template.",
            "Rather than, you know, sort of printf of HTML.",
            "Yes, we we so I did not present or the whole language because I would need a one hour.",
            "But we we we have introduced exactly this well formed XML.",
            "So we have a syntactic.",
            "We have a syntactic notation to to embed a well formed XML.",
            "So instead of writing the tags are strings, it can be.",
            "Excellent, yes we did it.",
            "So I just have one small question.",
            "You mention the RDF shape working Group, and indeed if you compare with XLT which have well formed XML and top node, you don't have that in RDF, but we've RDF shape.",
            "You can imagine having graph above following some syntactic constraints.",
            "So will this help for the template language?",
            "Because I can imagine that in some occasion.",
            "You count pretty always apply.",
            "Well, the same template can have different output, different depending on the on the audio graph or is not the case.",
            "Well, my idea is for each, for each data shape, constraints to have to have one template that takes as input.",
            "This this constraint and nodes of the graph that should verify this constraint and then and then test with the Web Part that the node verifies this constraint and then return as result true or false whether constraint is sold and at the end you know if the graph.",
            "Going from their constraints.",
            "OK.",
            "So when you do this recursions and it's already F as such is unordered.",
            "Doesn't matter if you if you enter the recursion in different orderings that you get different result.",
            "Or is it always deterministic?",
            "Or if you want to determine if you can use the order by, you need the order by clause in there, where is the nice thing is that the where clause is standard baskets marker.",
            "So you have other bike go by etc and and also one thing that I did not mention is that within the transformation you can also use the service close.",
            "So with the transformation you can query DB pedia to get additional information so.",
            "OK, thanks a lot to review."
        ]
    ],
    "summarization": {
        "clip_0": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "Hello everybody.",
                    "label": 0
                },
                {
                    "sent": "So I present to work which has been done with Catherine Pharmacy Care under Fabian condom.",
                    "label": 0
                },
                {
                    "sent": "So we are from INRIA University of Nice option to police and see NRS yourself of France.",
                    "label": 0
                },
                {
                    "sent": "Consumer, my two quarter fellow and friends are in the room, so if what I say is not clear, then you you can talk into them afterwards.",
                    "label": 0
                }
            ]
        },
        "clip_1": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So this talk will be in two parts.",
                    "label": 0
                },
                {
                    "sent": "In the first part I will present.",
                    "label": 0
                },
                {
                    "sent": "In the first part I will present an RDF transformation language which is cooler.",
                    "label": 1
                },
                {
                    "sent": "STT Enfora Sparkle template transformation language.",
                    "label": 1
                },
                {
                    "sent": "And in the second part I will present the RDF transformation software that implements this language and offer or some services.",
                    "label": 0
                }
            ]
        },
        "clip_2": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So, so we have been working on LDF transformation language which is still lacking after almost 15 years of work on semantic weather.",
                    "label": 0
                },
                {
                    "sent": "And so you you may all know about the excessability, which is a transformation language for XML.",
                    "label": 1
                },
                {
                    "sent": "So we did something similar in the Spirit, which is called STL.",
                    "label": 0
                },
                {
                    "sent": "But it is not on top of SLT.",
                    "label": 0
                },
                {
                    "sent": "The the idea is that it is on top of sparkle.",
                    "label": 0
                },
                {
                    "sent": "So it takes as input an earlier of graph and it produces output text former, which can be a structure structure, text or unstructured text.",
                    "label": 1
                },
                {
                    "sent": "It is based on sparkle and it is made of a declarative transformation rules.",
                    "label": 0
                }
            ]
        },
        "clip_3": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So there are several there a lot in fact of STL motivating use case, so the first one which is a inhabitant, is the transformation of RDF data into RDF syntaxes, such as Doctor RDF, XML, and Jason LD.",
                    "label": 1
                },
                {
                    "sent": "So this has already been done using other software, but nevertheless it is motivating use case.",
                    "label": 0
                },
                {
                    "sent": "The second use case is about the presentation of earlier data.",
                    "label": 0
                },
                {
                    "sent": "Yesterday in a workshop we had a nice talk about designing user centered interface for the web of data, and so STL is a candidate.",
                    "label": 0
                },
                {
                    "sent": "For example, we may want to generate HTML from an RDF graph.",
                    "label": 0
                },
                {
                    "sent": "We may generate or lactic from earlier.",
                    "label": 0
                },
                {
                    "sent": "For example, when we have an all ontology, we may want to generate the electric former of description logical formula.",
                    "label": 0
                },
                {
                    "sent": "We may want to generate a natural language sentences, for example, in your question answering system.",
                    "label": 0
                },
                {
                    "sent": "We may also want to generator graphic former such as Graffam Ella.",
                    "label": 0
                },
                {
                    "sent": "Answer The seldom the same scenario is even more interesting.",
                    "label": 0
                },
                {
                    "sent": "We can see that early F easy is used to represent abstract syntax trees of other languages.",
                    "label": 0
                },
                {
                    "sent": "For example the all all RDF in fact is an abstract syntax tree of description logic statements.",
                    "label": 0
                },
                {
                    "sent": "Not, it's not very, is not a very readable, so we prefer the functional syntax.",
                    "label": 0
                },
                {
                    "sent": "Another example is a spinner or those you know spinner is a representation as an RDF graph of an abstract syntax tree of sparkle.",
                    "label": 0
                },
                {
                    "sent": "We may want to generate the concrete syntax.",
                    "label": 0
                },
                {
                    "sent": "And in in the general case, we forecast that in the future earliest will be more and more used to represent statements from other languages as abstract, syntax tree, and so we will need more and more to generate concrete syntax.",
                    "label": 0
                },
                {
                    "sent": "For example, we may want to represent a mathematical expression in RDF that would annotate document for example.",
                    "label": 0
                }
            ]
        },
        "clip_4": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So on the on this line where we can see.",
                    "label": 0
                },
                {
                    "sent": "And all expression returning RDF which is not very readable and with the some strange things such as a blank node of type A restriction.",
                    "label": 0
                },
                {
                    "sent": "So we within Description logic this does not exist and on the right part we see that the RDF graph in fact is an abstract syntax tree of first statement and so we want to have a transformation to generate the functional syntax of all from the.",
                    "label": 0
                },
                {
                    "sent": "So RDF graph.",
                    "label": 0
                }
            ]
        },
        "clip_5": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "For this propose, we propose a transformation language which is cooler STL.",
                    "label": 0
                }
            ]
        },
        "clip_6": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And it is built on top of a off sparkle.",
                    "label": 0
                },
                {
                    "sent": "There have been several tentative in related work to design A transformation language based on XLT, but it's it's not completely powerful and an we so we had the idea to rely on sparkle so the sparkle language.",
                    "label": 0
                },
                {
                    "sent": "As for query form and select and construct, ask and describe which operates on a graph pattern.",
                    "label": 0
                },
                {
                    "sent": "And.",
                    "label": 0
                }
            ]
        },
        "clip_7": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "We we propose an additional query form which is called template where query form.",
                    "label": 1
                },
                {
                    "sent": "So there's a template closer.",
                    "label": 0
                },
                {
                    "sent": "As a text pattern which is made of variable expression and text, underwear part is a star sparkle wrap out so it is similar to the construct.",
                    "label": 0
                },
                {
                    "sent": "Wear clothes, but instead of constructing triples it constrictor text.",
                    "label": 0
                }
            ]
        },
        "clip_8": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "And so, for example, here we have a first example where we generate a syntax in natural language from from any other graph.",
                    "label": 0
                },
                {
                    "sent": "So we say Auryxia is a person, Catherine is a person.",
                    "label": 1
                },
                {
                    "sent": "This is a unstructured text that is generated by your template.",
                    "label": 0
                }
            ]
        },
        "clip_9": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "In the template close we may have a strict order form a XML or HTML.",
                    "label": 0
                },
                {
                    "sent": "For example.",
                    "label": 0
                },
                {
                    "sent": "Here we generate and hypertext links to the UI of resource.",
                    "label": 0
                },
                {
                    "sent": "OK, so here we have two hypertext links to.",
                    "label": 0
                },
                {
                    "sent": "There there resume.",
                    "label": 0
                }
            ]
        },
        "clip_10": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And if in the in the template close we may write a statement in Turtle syntax, and so we here we do a transformation of RDF into turtle syntax.",
                    "label": 0
                },
                {
                    "sent": "For example, here we add an RDF stable property in addition to the 4th name property.",
                    "label": 0
                },
                {
                    "sent": "So the this generic template close in, able to regenerate text for murder for graph.",
                    "label": 0
                },
                {
                    "sent": "And this is the first idea of the of this work.",
                    "label": 0
                }
            ]
        },
        "clip_11": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "The second idea is to define our transformation as a set of templates.",
                    "label": 1
                },
                {
                    "sent": "And so for for one specific feature, propose for example for the older to translate all into functional syntax, we can define a template for each statement.",
                    "label": 0
                },
                {
                    "sent": "For example here the equivalent class we have a first template.",
                    "label": 0
                },
                {
                    "sent": "For a subclass, we have a second template at City Hall for Restriction or somebody from we have another templates and we can define around A50 or templates for each statement of all and this this design or transformation to generate the functional syntax of all from all areas.",
                    "label": 0
                },
                {
                    "sent": "So this is the second idea.",
                    "label": 0
                }
            ]
        },
        "clip_12": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And then the third idea is that within within a template.",
                    "label": 0
                },
                {
                    "sent": "Here, for example, in the template close we have a variable in an variable C.",
                    "label": 0
                }
            ]
        },
        "clip_13": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "But in fact, what we want as result in the template is not really in it is the transformation the result of the transformation of in.",
                    "label": 0
                },
                {
                    "sent": "So we add an extension function or sparkle extension function which is called apply templates.",
                    "label": 0
                },
                {
                    "sent": "So in the spirit of Accessibility we choose the same name as XLT and apply templates recursively call the transformation engine on the current transformation that is on the current set of templates.",
                    "label": 0
                },
                {
                    "sent": "OK, and so we.",
                    "label": 0
                }
            ]
        },
        "clip_14": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Use these free ideas or templates were closing sparkle, but transformation as a set of templates and next apply templates extension function.",
                    "label": 0
                },
                {
                    "sent": "We have a transformation language for RDF that is based on sparkle so it is amazing.",
                    "label": 0
                }
            ]
        },
        "clip_15": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Only a simple but since 10 years that sparkle exist, nobody at the idea.",
                    "label": 0
                },
                {
                    "sent": "So this is a contribution.",
                    "label": 0
                },
                {
                    "sent": "So we then, after after reasons three ideas, we did a lot of work for usability, so we had we had a set of function for the language to be usable.",
                    "label": 0
                },
                {
                    "sent": "So we have we can select the transformation.",
                    "label": 0
                },
                {
                    "sent": "Visa apply templates with their their name are templates or we can call a template using your name and we have some usability function.",
                    "label": 0
                },
                {
                    "sent": "For example we have a pretty fine or turtle function to generate, so the turtle syntax.",
                    "label": 0
                }
            ]
        },
        "clip_16": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And also we for usability we can we can tune the transformer in engine with the starter Without Star template because in a graph there is no start node in XML there is a top level node but in the graph there is no start node.",
                    "label": 0
                },
                {
                    "sent": "So we need to start template.",
                    "label": 0
                },
                {
                    "sent": "Then we have a default template.",
                    "label": 0
                },
                {
                    "sent": "If whenever all template failure and we have a profile where we can tune the default processing of variable.",
                    "label": 0
                }
            ]
        },
        "clip_17": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So and so we have now after having design of the language an implemented transformer engineer, we did a crash test by developing several 10s of transformation according to the use case.",
                    "label": 0
                },
                {
                    "sent": "And so we have a Olympians all and spin transformation.",
                    "label": 0
                },
                {
                    "sent": "We have doctor Jason Alexander.",
                    "label": 0
                },
                {
                    "sent": "We have a we have we.",
                    "label": 0
                },
                {
                    "sent": "We can generate sparkle result from the sparkle query.",
                    "label": 0
                },
                {
                    "sent": "We have a link that under the Gator on top of the page are we have Sparkle tutorial.",
                    "label": 0
                }
            ]
        },
        "clip_18": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So now so I will skip this because.",
                    "label": 0
                }
            ]
        },
        "clip_19": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Same latency.",
                    "label": 0
                }
            ]
        },
        "clip_20": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So in the second part I present the transformation software so it's available in the correct Semantic Web factory as open source software.",
                    "label": 1
                },
                {
                    "sent": "There is a sparkle engine.",
                    "label": 0
                },
                {
                    "sent": "There is a STL transformer engine.",
                    "label": 0
                },
                {
                    "sent": "There is a standalone abandonment to develop transformation.",
                    "label": 0
                },
                {
                    "sent": "There is a special endpoint an an STL server that these are under web.",
                    "label": 0
                },
                {
                    "sent": "It is embedded within an HTTP server and we have also a demo server.",
                    "label": 0
                }
            ]
        },
        "clip_21": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So the development environment consists of a simple interface where we can type templates and execute transformation and obtains the result directly.",
                    "label": 0
                },
                {
                    "sent": "So we can have an Azure cycle of development where we see directly the result of a transformation that we are developing on the current graph and the result is displayed in the window.",
                    "label": 0
                }
            ]
        },
        "clip_22": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So we have setup.",
                    "label": 0
                },
                {
                    "sent": "We have set up a server which process or transformation and generate HTML in result and so we can build our link data and we get to the web server or entertain alligator.",
                    "label": 0
                },
                {
                    "sent": "And so this help in this server we can ask to execute a sparkle query construct where sparkle query that returns a small graph that is extracted either from a local active data set or from a remote, have a data set, for example DB pedia.",
                    "label": 0
                },
                {
                    "sent": "So we can we can query DB pedia and then we can apply a specific transformation that will generate user centric display of the sub graph.",
                    "label": 0
                },
                {
                    "sent": "Offer DB pedia and so we can build link data Navigator on top of any sparkling point.",
                    "label": 0
                },
                {
                    "sent": "Yes.",
                    "label": 0
                }
            ]
        },
        "clip_23": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And so we so we design A demo web server with some transformation.",
                    "label": 0
                },
                {
                    "sent": "So we.",
                    "label": 0
                }
            ]
        },
        "clip_24": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Did we did a transformation for DB pedia?",
                    "label": 0
                },
                {
                    "sent": "And as in in my team we manage Rosa French DB Pedia.",
                    "label": 0
                },
                {
                    "sent": "So the transformation is in French on top of front DB pedia and so we can navigate on a historical or per person.",
                    "label": 0
                },
                {
                    "sent": "For example, in a hypertext way.",
                    "label": 0
                },
                {
                    "sent": "We click on the links we go into the predecessor or successor or so on top of DB pedia.",
                    "label": 0
                }
            ]
        },
        "clip_25": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "When we have a place, we locate it on a map or so using your transform.",
                    "label": 0
                }
            ]
        },
        "clip_26": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Mission and we also implemented a set of services for the transformation of RDF into, for example, all functional syntax.",
                    "label": 0
                },
                {
                    "sent": "Ethics email Jason Dr TR Sparkle to spin spin to spark and so you can user can play with it.",
                    "label": 0
                },
                {
                    "sent": "You can upload a graph and processor transformation.",
                    "label": 0
                }
            ]
        },
        "clip_27": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So we have implemented a sparkle tutorial using transformation and a set of predefined query.",
                    "label": 0
                },
                {
                    "sent": "So there are about 50 exercise on 50 different queries and it was used in a MC on semantic Web result 4000 users.",
                    "label": 0
                },
                {
                    "sent": "So it has been quite tested and.",
                    "label": 0
                }
            ]
        },
        "clip_28": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And now so there's a real reason why I developed this.",
                    "label": 0
                },
                {
                    "sent": "Technology was 22 programmer Sudoku solver.",
                    "label": 0
                },
                {
                    "sent": "So using one template we need only one template.",
                    "label": 0
                },
                {
                    "sent": "The wear clothes solve the sudoku as a constraint problem and the template part displays a Sudoku panel.",
                    "label": 0
                },
                {
                    "sent": "So we can edit all all these text area and then we generate the result is in this presentation.",
                    "label": 0
                },
                {
                    "sent": "So this give an idea of the power of.",
                    "label": 0
                },
                {
                    "sent": "Or of templates on top of sparking.",
                    "label": 0
                }
            ]
        },
        "clip_29": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "And so this finishes my talk.",
                    "label": 0
                },
                {
                    "sent": "So as you can as a conclusion, so our contribution is a transformation language for RDF, which is called STL.",
                    "label": 1
                },
                {
                    "sent": "It can be seen as a.",
                    "label": 0
                },
                {
                    "sent": "It's A kind of Accessibility, but for RDF, and on top of sparkle.",
                    "label": 0
                },
                {
                    "sent": "And so the the STL engine is available as a program and also as a as a web server, a set of library are available online.",
                    "label": 0
                },
                {
                    "sent": "You can, you can read them in order to learn the language.",
                    "label": 0
                },
                {
                    "sent": "And in the future, so we plan to write other transformation such as the old tool attach or mathematical expression tool attach.",
                    "label": 0
                },
                {
                    "sent": "We are working also on RDF temporal expression that we would like to pretty print and we plan also to work on constraint checking.",
                    "label": 0
                },
                {
                    "sent": "So we plan to implement the RDF data Shape language on top of STL.",
                    "label": 0
                }
            ]
        },
        "clip_30": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And this is the end of my talk.",
                    "label": 0
                },
                {
                    "sent": "This is the address of the demo web server.",
                    "label": 0
                },
                {
                    "sent": "Thank you for your attention, thanks.",
                    "label": 0
                },
                {
                    "sent": "Thank you, this is amazing work.",
                    "label": 0
                },
                {
                    "sent": "Do you plan to have that language standardized by W3C or some other instance?",
                    "label": 0
                },
                {
                    "sent": "So it is in our planning season, so one year to have a WCC member submission, so I hope we will do it this autumn.",
                    "label": 0
                },
                {
                    "sent": "So and then maybe if there is a further sparkle working group it could be used as an input.",
                    "label": 0
                },
                {
                    "sent": "So one slide went past a little fast, but it provoked this question in my mind is of whether if or why not, you would support well formed XML in the text portion of the template.",
                    "label": 0
                },
                {
                    "sent": "Rather than, you know, sort of printf of HTML.",
                    "label": 0
                },
                {
                    "sent": "Yes, we we so I did not present or the whole language because I would need a one hour.",
                    "label": 0
                },
                {
                    "sent": "But we we we have introduced exactly this well formed XML.",
                    "label": 0
                },
                {
                    "sent": "So we have a syntactic.",
                    "label": 0
                },
                {
                    "sent": "We have a syntactic notation to to embed a well formed XML.",
                    "label": 0
                },
                {
                    "sent": "So instead of writing the tags are strings, it can be.",
                    "label": 0
                },
                {
                    "sent": "Excellent, yes we did it.",
                    "label": 0
                },
                {
                    "sent": "So I just have one small question.",
                    "label": 0
                },
                {
                    "sent": "You mention the RDF shape working Group, and indeed if you compare with XLT which have well formed XML and top node, you don't have that in RDF, but we've RDF shape.",
                    "label": 0
                },
                {
                    "sent": "You can imagine having graph above following some syntactic constraints.",
                    "label": 0
                },
                {
                    "sent": "So will this help for the template language?",
                    "label": 0
                },
                {
                    "sent": "Because I can imagine that in some occasion.",
                    "label": 0
                },
                {
                    "sent": "You count pretty always apply.",
                    "label": 0
                },
                {
                    "sent": "Well, the same template can have different output, different depending on the on the audio graph or is not the case.",
                    "label": 0
                },
                {
                    "sent": "Well, my idea is for each, for each data shape, constraints to have to have one template that takes as input.",
                    "label": 0
                },
                {
                    "sent": "This this constraint and nodes of the graph that should verify this constraint and then and then test with the Web Part that the node verifies this constraint and then return as result true or false whether constraint is sold and at the end you know if the graph.",
                    "label": 0
                },
                {
                    "sent": "Going from their constraints.",
                    "label": 0
                },
                {
                    "sent": "OK.",
                    "label": 0
                },
                {
                    "sent": "So when you do this recursions and it's already F as such is unordered.",
                    "label": 0
                },
                {
                    "sent": "Doesn't matter if you if you enter the recursion in different orderings that you get different result.",
                    "label": 0
                },
                {
                    "sent": "Or is it always deterministic?",
                    "label": 0
                },
                {
                    "sent": "Or if you want to determine if you can use the order by, you need the order by clause in there, where is the nice thing is that the where clause is standard baskets marker.",
                    "label": 0
                },
                {
                    "sent": "So you have other bike go by etc and and also one thing that I did not mention is that within the transformation you can also use the service close.",
                    "label": 0
                },
                {
                    "sent": "So with the transformation you can query DB pedia to get additional information so.",
                    "label": 0
                },
                {
                    "sent": "OK, thanks a lot to review.",
                    "label": 0
                }
            ]
        }
    }
}