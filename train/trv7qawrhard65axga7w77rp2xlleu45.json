{
    "id": "trv7qawrhard65axga7w77rp2xlleu45",
    "title": "Integrating Object-Oriented and Ontological Representations: A Case Study in Java and OWL",
    "info": {
        "author": [
            "Bijan Parsia, School of Computer Science, University of Manchester"
        ],
        "published": "Nov. 24, 2008",
        "recorded": "October 2008",
        "category": [
            "Top->Computer Science->Semantic Web->OWL - Web Ontology Language"
        ]
    },
    "url": "http://videolectures.net/iswc08_parsia_iooor/",
    "segmentation": [
        [
            "So this is joint work with Colin Toleston, James Cunningham and Alan Rector.",
            "And it came out of mostly what these guys were doing in trying to support.",
            "Is this too loud?",
            "I could talk very softly, perhaps for a little while.",
            "On the Cliff project, which was to an attempt to deal with health care records and to improve the retrieval and analysis of patient health care records and in the process of that, they came up with a neat architecture.",
            "OK, so in this we're going to talk about."
        ],
        [
            "Software models in general.",
            "We'll have a definition and some existing approaches that are out there and then we'll dive into detail about this new kind of software model that we call hybrid models.",
            "The software model here is critically a domain model, so we're not really talking about the structure of the program per say, but the attempt to represent some aspect of the real world in particular.",
            "In this case, patients their health, various health events, and so forth, and one of the key things to keep in mind.",
            "All this is that.",
            "Modeling formalisms like al or not, the only way that we capture knowledge or represent knowledge, particularly domain knowledge, object oriented programming languages came out of an attempt to provide a way of modeling the real world simulation, in particular for small talk, and so one of the things that we were working on.",
            "And this is how to seamlessly allow people who are more comfortable modeling the world in Java and other people are more comfortable modeling the world in Al.",
            "How these these two ways of modeling aspects of the world could be brought together in a useful way."
        ],
        [
            "So we just think about the problem in general.",
            "We want to be able to build programs that are sensitive to large amounts of fairly complex domain knowledge.",
            "In particular, here, we're talking about procedures were talking about diseases, patients relations between patients, and things like religion.",
            "Even more what they eat.",
            "And this stuff typically changes.",
            "We keep finding out new information.",
            "The records themselves can change our general domain knowledge can change.",
            "We can discover a new form of cancer, for example, or we could new procedures or treatments are coming out all the time.",
            "And this knowledge is generated or maintained by a variety of people.",
            "So obviously the people producing the knowledge in the world.",
            "But there's also the people who are encoding it for some purpose.",
            "These could be all different sorts of people.",
            "It would be really nice for talking about the procedures to have a Doctor Who's familiar with the procedures doing that.",
            "Who can understand the literature.",
            "But on the other hand, some other aspects of what we might have represented by an insurance agent or by a programmer.",
            "So we want to build these programs, and we want to build them in such a way that the domain model is maintainable.",
            "Particularly, all these people coming into it, and particularly in healthcare, accuracy of the model, is critical.",
            "There surely lots of other domains where this is true, but I mean this is OK.",
            "It's not nuclear power plants, but it's close right?",
            "On the scale of really important to keep right, you can kill someone we want the domain model to be salient to the people who are working with it.",
            "That is, we want it to be the case that if you're given the domain model and have to do something with it, either update the knowledge or updated program that uses it.",
            "Uses that knowledge that you understand it, that you know what parts are relevant to your task, and you know how to modify it.",
            "So think about if a Java programmer is handed a big old pile of al about cancer.",
            "That's not going to be particularly something that they can work with.",
            "On the other hand, if you take your average doctor or biologists, and you give them a big old pile of Java classes, they're pretty much screwed as well.",
            "So we really would like these things to be salient to the appropriate appropriate audience, and we like the programs themselves to be maintainable.",
            "These are the various somewhat intention goals."
        ],
        [
            "We that we have.",
            "So let's talk."
        ],
        [
            "About software models, so I said these are ways of modeling the domain and the key aspect of the reason we call them software models is that they are iaccessible two programs.",
            "In particular, we're focusing on the sort that's iaccessible from an object oriented programming language, and in particular, while this applies to lots of other kinds of object oriented programming languages, we're going to focus on Java.",
            "An minimally what we have in such a model is an ability to represent class or concept hierarchies, so kinds and super kinds and sub kinds.",
            "Sets of fields so they have the instances of a kind can have attributes, essentially an constraints associated with these fields, so something like an extended ER diagram and the most general sense is what we're talking about here.",
            "And notice that this encompasses both Allen Java.",
            "They both have classes and class hierarchies.",
            "They both have sets of fields or properties, and they both have constraints associated with them, but boy.",
            "Hard to get more different than Java and Al, right?",
            "It's not like you're going to get a lot of transfer if you're a really good Al modeler to programming Java or vice versa.",
            "And what are we going to use these for?",
            "Well, we use them for both domain aware applications.",
            "Where were the kinds of programs that were writing a really sent specifically sensitive to the details of the domain?",
            "So perhaps.",
            "Some operating system retrieval thing.",
            "I don't know what they do over in medicine and I have nothing to do with that.",
            "But so here we really want a common format for data storage and just for for representing the domain and then domain neutral applications there the domain knowledge is that you're not sensitive domain knowledge, but you have some sort of relatively generic tool that can work with different sorts of domain knowledge.",
            "So in this case a browser.",
            "You know can be relatively.",
            "We can have two kinds of browsers you cannot.",
            "Browsers for non specialist doctors that just want to be able to get through the record and specific browsers for specific specialists that want to focus on particular kinds of information."
        ],
        [
            "So we just think in the most general sense of a very simple software model, not assuming any particular details of the representation.",
            "Here we could have a simple class hierarchy about cancer.",
            "Details aren't to import."
        ],
        [
            "And then we have relations between instances of different classes.",
            "So cancer can have a stage or a sub stage.",
            "Breast cancer can have different kinds of stages than other cancers and other cancer might not even have a sub."
        ],
        [
            "Stage phase and of course you might want to relate to sort of concrete data.",
            "Things like integers and strings and so forth.",
            "So this is the most abstract thing that we can have."
        ],
        [
            "For a software model so when we have one of these software models, the question is how does it get used in the most?",
            "Again, in a fairly abstract way, the model mediates between various kinds of programs and various ways of storing the information that you have.",
            "The sort of all the data that you have.",
            "So in this case we're talking about having an RDF store, but this could be a relational database or an XML database or anything really some sort of legacy horror show.",
            "And the model provides a view of this data.",
            "It Shields the other programs from the details of the particular store that you had.",
            "This is familiar from relational databases.",
            "What are relational database?",
            "Does it Shields you from the physical layer by providing an information view.",
            "This is even abstracts it further and then the model domain neutral applications like a record browser query, formulator use the model in a generic way, that is without changing any of those programs we can swap the model out.",
            "Of course we can avoid changing any of these programs.",
            "While swapping out this bit and of course the domain aware programs are tide to the model, but we want to sort of keep that as specific as possible.",
            "We want to make these easy to write and they impossible to write without some knowledge of the domain, so that coupling is OK.",
            "But we like the other couplings to be as free and as easy as possible.",
            "Feel free to ask questions at any point along the way and I didn't do any of these diagrams.",
            "Colin is insanely into diagrams and so I have a more graphical presentation than I'm used to having so.",
            "The question is what do those things look like?",
            "You know what are the different options for filling in the yellow box essentially?",
            "About some particular."
        ],
        [
            "Well, one thing we could do is have a direct model.",
            "What we mean by direct model is something that's where all the modeling details are just in Java.",
            "So remember talking Java here, the object oriented and we're coming from the programmer perspective by and large.",
            "So here will have.",
            "So all these light blue classes will always be Java classes, so cancer we have a Class A Java class name cancer and it will have a series of instance variables that are related to other Java classes like timepoint, breast stage, two or whatever.",
            "And the key here is that the Java is itself the model.",
            "There is nothing else that we're using to model.",
            "We might have a conceptual understanding, but the model is all in Java we can contrast."
        ],
        [
            "This.",
            "With an indirect model where the Java class here isn't some domain object, it's just a generic class that says I'm an instance of some model and it has a field instant type."
        ],
        [
            "Which when we fill in with some particular name from the domain, in this case cancer, we get a series of fields that we know are associated with that cancer.",
            "Perhaps we pull him out of the Aldata Beyal store.",
            "These could be properties.",
            "There it could be from a UML model for anything.",
            "And and this view that we have right here, it looks like the direct.",
            "I mean, it looks very similar to the have the same fields, have the same names, but this is an abstraction, right?",
            "'cause what's really going on?"
        ],
        [
            "Is that all of the Java classes are generic, so we don't actually have?",
            "Oops, sorry."
        ],
        [
            "We don't actually have a class called Locus or stage, and we don't actually have anything fields called stage or substage what we have.",
            "Is we have the model instance?",
            "No, actually.",
            "No, I can't lean out far enough to point directly.",
            "We have.",
            "We have the model instance up there and it has a an instance variable.",
            "Dynamic fields, which is just an array and that array is a collection of model field objects and the model field objects each have a name and maybe a series of constraints.",
            "And we can instantiate the name of the first field to time point.",
            "So this is nice because on the Java side it's purely generic, and so if you remain neutral software again so you don't have to know anything about any little."
        ],
        [
            "Answer I do something interesting so we step back and look at a full software model represented in this view.",
            "We can see that the classes are all named demand by domain concepts, so this is a view of both the software program that you have the actual Java that you have and your conceptual model.",
            "They're just one in the same, which is very convenient.",
            "The indirect model of."
        ],
        [
            "Course is much nastier from a Java point of view.",
            "You have all these intermediate for every.",
            "For every field you actually have an object that represents the field.",
            "And of course you can always say."
        ],
        [
            "Back and pretend that you see the conceptual model again by by trying mentally collapsing the two things, but there not there directly.",
            "You have the programmer has to do that work to keep the idea of the conceptual model aligned with what they are."
        ],
        [
            "Actually working within the Java.",
            "So the takeaway from this little taxonomy, the slogans are is that the direct models the Java API is the model an in the indirect.",
            "The case you have a modeling of how to get at the model, right?",
            "So the Java is giving you some stuff for how to get at any arbitrary model, but it doesn't do any of the modeling itself.",
            "And the nice thing about direct models is the conceptual view in the programming view or identical, so there's no gap between them.",
            "There's no work to be done to get between them, and the other case views diverge.",
            "Now, both of these are actually realized quite commonly in software, but direct models include such tools as you can find if you Google for Alto Java, you'll find plenty of tools that will take an AL ontology and generate a Brazilian classes, and you can immediately see some of the disadvantage of that.",
            "Sure, you have a nice direct modeling there, but it's all now in Java.",
            "If you change it, you have to regenerate all these classes, which is not particularly end up with thousands or potentially hundreds of thousands of Java classes that.",
            "Really aren't helping the programmer in any way and indirect models you can think of things like the lapi is providing some sort of indirect model or Jenna because they give you objects that represent Allen Teologi's and these have some advantages, but you lose some of that directness.",
            "A Java programmer has to think not of the model, but they think of the API that leads to the model.",
            "So even with."
        ],
        [
            "Indirect models we can have two sorts.",
            "What we call static and dynamic and the static indirect model.",
            "Once you instantiate did the model, you get a set of fields and those fields just say fixed forever and this is not actually an uncommon wave of going at it.",
            "So here, even though we don't have any information about the locus of the cancer, we have stage and substage.",
            "Not all cancers have stages and substages, but we since we have to have the possibility of having a substage, we just pop that in."
        ],
        [
            "In a dynamic model we only put in into into the indirect model the the what we know.",
            "So we say cancer.",
            "We know cancers have to have locus is in stage, but since not all cancers have substages, we don't say anything about that yet."
        ],
        [
            "As we instantiate the rest of the information, we say breast not only we get.",
            "We get new constraints on this on the stages, we can only the stages that are salient to breast cancer and this is all coming from the ontology, right?",
            "So as we put stuff into the Java we get some more information about about."
        ],
        [
            "The instance that we're representing, and as we set the stage, we get that there is a potential sub stage for this stage.",
            "Not all stages of breast cancer have substages, so now we have this with the constraints that are salient in this particular situation.",
            "So why would we ever have a static model?",
            "Well, I mean, if you don't want to have direct access to the if you don't want to have live access to the ontology for whatever reason, you might want to just sort of compile all of the constraints and all the possible things up front.",
            "But in general a dynamic model just feels a little more natural, and it also really works for certain kinds of applications, because for example, if you're filling out a form, if you're a clinician and you're trying to fill in the chart, that electronic chart, I mean, this is exactly the kind of behavior you want, you know.",
            "You don't want to see every possible permutation of every possible field.",
            "What you want is as you fill in information, you get new fields that are relevant to the particular thing.",
            "If you said oops, it wasn't breast cancer, it was you know, to cancer.",
            "You want to change that to.",
            "You want all this to go away automatically?"
        ],
        [
            "So again, within the subset of models that we have that are in direct models, static ones are fixed, regardless of how you instantiate it.",
            "So if you need to change from breast cancer to to cancel, you have to re instantiate the model, make a new model specifically about to cancer, and the dynamic one the model evolves as the state of your instantiation goes, and in this case it's both the shape of the model.",
            "So how many fields you have?",
            "What kinds of fields you have and the constraints in the models?",
            "What are legal values for those for those fields?"
        ],
        [
            "And of course, in our case we're talking about ontology backed, indirect indirect dynamic, ontology backed indirect models.",
            "So here we're going to have some AL ontology, and we have some mediation that goes on here.",
            "So because we don't always know, I mean we can't know from the L model on any particular class.",
            "For example what the legal fields are right?",
            "Because almost if you don't say anything about a property, it can apply to any class potentially.",
            "So we have to have some.",
            "Add some extra information about which which fields matter for our particular application, and this is what's generally called sanctioning, at least by by Alan Rector at all."
        ],
        [
            "So here what you do, you either have some heuristics, right?",
            "You know that if you have a certain name pattern on your property, that's going to be relevant, or sometimes you have annotations on the properties where somebody says hey, this property is one that you want for user input and not necessarily one you want just for modeling.",
            "Actually one of the heuristics that drives me nuts is that they put a min, 0P or whatever the property is there.",
            "I explained to Alan Alan in the audience.",
            "No good.",
            "OK, so explain to Alan over and over again that min 0 something doesn't mean anything and you can't rely on the Oh no it gets inherited.",
            "Yes, it gets inherited 'cause it appears everywhere.",
            "So anyway there are better heuristics in this, But this is what they do.",
            "They have some way of indicating what information is for input."
        ],
        [
            "So here again, we've essentially instantiate it to cancer.",
            "That means we've pushed the framework pushes an instance over into the outside of cancer."
        ],
        [
            "We add that it's breasts and."
        ],
        [
            "The we add that information here in the and it gets recognized as breast cancer.",
            "And since it's recognized as stage two breast cancer in this case, since we said Stage 2."
        ],
        [
            "We get from the model down here.",
            "The fact that stage two breast cancer has a certain set of stuff substages, so we're getting back and forth between the two.",
            "The two models.",
            "And this is, again, is something hard to do with either static models or direct models, because we might not know.",
            "You know, there's thousands of these things.",
            "We couldn't compile all of the different possibilities in there.",
            "This happens on demand with reasoning, so you can enter basically arbitrary combinations of features and get correct answers from your model.",
            "So this allows for a lot of flexibility."
        ],
        [
            "So if we just kind of summer up, summarize up, he also likes charts.",
            "As you can see, but this is a pretty good chart.",
            "There's a lot of different features that."
        ],
        [
            "Apply to one or the other in particular for dynamic model shaping, reshaping an updating.",
            "You get this with ontology back.",
            "Dynamic models, at least for ontology information.",
            "What they're typically Porat is responding to software request, so if you have a procedural kind of thing where you want to say that when this field updates do something else, it's harder to do in an indirect model then it would be to just add a method to your direct model.",
            "So for both of these that I think that is true that where one has the advantage the other one.",
            "Doesn't and actually in Java it's pretty hard to reshape a class which you can do it.",
            "But you're suffering really hard and dynamic object oriented programming languages like small talk, which I much prefer because I'm that way.",
            "It's easier but."
        ],
        [
            "Not in Java, the main neutral API.",
            "Well again for ontology back.",
            "This is obvious because you're using an indirect model, so it's inherently domain neutral.",
            "For direct ones you can do it again if you do some reflection and you have some code conventions and stuff like that, but you're in pain, right?",
            "I mean it's not good."
        ],
        [
            "For domain specific API, the direct model just wins and ontology back just loses."
        ],
        [
            "For this kind of, depending on how you set the field processing thing, ontology backed ones actually know what he means by that.",
            "Oh the."
        ],
        [
            "Is more whatever.",
            "For knowledge engineering by domain experts.",
            "At least in healthcare and life Sciences, alwyn's heart.",
            "They tend to be familiar with some kind of ontology language, but not so much with programming language."
        ],
        [
            "But for knowledge in Capsulation for shielding programmers from the knowledge the direct one obviously is particularly, but they end up with every possible bit.",
            "How am I doing for time?",
            "3 minutes I'm."
        ],
        [
            "Scared."
        ],
        [
            "Just went much faster when I was practicing it.",
            "Oh well.",
            "So in hybrid models, what we want to do is try to turn all the nodes into.",
            "Yes is at least qualified.",
            "Guesses.",
            "We want to take the best of both worlds.",
            "We want the Java programmers to be able to work in Java on the part that's relevant to them and we want domain engineers experts who work on the alpart and not have to think about the Java part.",
            "And really 3 minutes.",
            "Oh my God."
        ],
        [
            "OK.",
            "Sorry.",
            "OK.",
            "So remember with direct models, we have everything in Java."
        ],
        [
            "Process and fields and indirect models we have.",
            "Everything not in all the domain class is not in."
        ],
        [
            "Class in Java classes and fields.",
            "When we have a hybrid model, we have some of these.",
            "Being indirect, we have our core models being subclasses of the model instance, but being specific to the domain and we have some other classes which are specific to domain, so we really have both going on at once, and this is all mediated by the framework so that from the programmer POV you can't see the difference.",
            "But we in the modeling process.",
            "So how do you usually do this kind of modeling?",
            "You know somebody comes to you and says, oh, I need something that represents patient records and the programmer sits down and writes a couple classes like problem glimpse or whatever.",
            "Oh yeah, half of record.",
            "That's a snapshot in time.",
            "I write this class alright, a few more classes.",
            "I write a few dummy very specific classes and that's exactly what you do in hybrid modeling, and then when you're ready for the real big slew of domain knowledge, you just pop in the ontology and it fills in all these other fields so the programmer can work on a program using Java and all the things that are familiar with and have a running thing running program that is relevant and then plug in the vast."
        ],
        [
            "Amount of data that they have to deal with.",
            "So in general we have a core structure in these hybrid models that is represented in Java typically happens very early.",
            "It's shallow, deep, tightly interconnected, and it has these kind of generic class names.",
            "High up class names."
        ],
        [
            "And then you populate the edges of the model with detailed knowledge just from the ontologies.",
            "So this is where you get deep hierarchies with hundreds or thousands of classes and so."
        ],
        [
            "The interaction is mediated by the main software classes, again under programmer control, and you can get both ontological inferences via the indirect parts of it, but since you have a kind of directness to it, you can also write specific methods that coordinate or do computation or alter the model in other ways.",
            "You do have to do in addition to the sanctioning you had to have to do a bit of mapping to make this all workout, but it's relatively constrained so I'm like out of time on time so I'll just skip through the specific demo.",
            "You can see this in the paper, just to give you a sense.",
            "Of the model.",
            "You end up with a very so here you can see the MoD."
        ],
        [
            "It's very complicated.",
            "You have both span and snap, so instance and histories in Java and then these are applied to different domain models.",
            "We can have program patient histories of tumor progression, patient histories of pneumonia progression, whatever the domain model is the programmer simple, this abstract.",
            "This temporal abstraction that allows them to represent this notion of a sequence of events, which is actually pretty hard to do in Al.",
            "And this sequence of events, for example, you can do things like time slicing, say.",
            "Hey go from here to here and tell me what's in there.",
            "And.",
            "Interpolate new."
        ],
        [
            "Ontology classes for the new endpoints.",
            "This didn't exist anywhere.",
            "It was generated by the program.",
            "As you can see, this gets to be a pretty complex kind of model, but it isolates the different kinds of complexity for the to the people who are best scopes best suited to cope with that, and hides the others from them."
        ],
        [
            "Just let me get to this slide so we look at this chart again.",
            "That's some good stuff, some bad, some good, some bad stuff.",
            "Only good stuff.",
            "Over here you have everything you need to be a little bit careful.",
            "We have some qualifications.",
            "So for example domain specific API.",
            "That's true, it's here, but only for the core structures, right?",
            "The periphery, remember is all indirect.",
            "Similarly for for knowledge engineering we have that by domain experts, but only for the domain knowledge, right?",
            "They never work on the problem glimpses and stuff.",
            "They only work on cancer and other things, and similarly for knowledge in capsulation's.",
            "It only hides from the program, but this is right.",
            "You know the direct model was for Java and people who want Java.",
            "We give that to them.",
            "The indirect model were for model as you wanted to use our and we give that from them.",
            "So these are qualified.",
            "Yes, yes is, so they're not fully assess like these guys are, but they're the right.",
            "Yes, is these guesses.",
            "Here are actually problems because the benefit comes at the price of sacrificing one of the members of the team and their comfort zone.",
            "So."
        ],
        [
            "So that's all in the paper 2.",
            "So this has been used in a very large project with using a very complex ontology in a fairly as you saw, a fairly complex model in the Java.",
            "It works very smoothly if you."
        ],
        [
            "If you look at the there are a lot of reusable parts in this, so the core model bubble just allows you to set up hybrid models in general and the Chronicle 1 builds in a bunch of temporal information, and that's independent of these cancer records.",
            "This this one here you could build up, or it's independent of patients.",
            "You could build a history viewer or something like that for timelines, and so this provides a very nice way for programmers to provide value, add to the modeling side of things in a very structured way.",
            "Thanks."
        ],
        [
            "Sorry, I went over.",
            "Thanks, you did a great job and there's the first question.",
            "I bring it to you.",
            "Thanks for having chosen my question.",
            "I'm Alexander apart from when you visited school, I think your address to very relevant problem.",
            "I disagree.",
            "However, a little bit with the conclusion that the hybrid approach is the best solution.",
            "In particular, your feature table legs from my point of view about an important feature which you also mentioned in your paper, is a good thing that is static type checking.",
            "You refer to Java is, which is correct as statically type checked programming language and you say static type checking is a good thing.",
            "However, if you present only a selected number of concepts to the programmer, there is static type checking only for this limited set of concepts.",
            "While there is no type checking for concepts that are lower in the hierarchy.",
            "Um?",
            "But um, well, this is in fact why I have implemented an extension of the C sharp programming language.",
            "It's called semantic C sharp, which combines the direct model approach.",
            "That is, you have only one one proxy class for all concepts in the ontology.",
            "That is, you don't have a blown up Java or C sharp class hierarchy.",
            "But in my semantics sharp, you can natively use all concepts of mythology, not only a limited set.",
            "Um?",
            "This.",
            "Well, this is only like that's his half of the time every mark.",
            "I think static type checking is particularly important for concepts that are lower in the hierarchy.",
            "For example, disjoint concepts are usually declared lower in the hierarchy and for example, in my approach we have static type checking for disjoint concepts.",
            "While in your approach, well, if you have only a limited number of concepts you may like.",
            "Make the programmer feel there is static type checking, while in fact there is none.",
            "Well, OK, I think you're overstating the case on on the static type checking checking front I mean obviously for the core part you do have static type checking.",
            "Also an by the sanctioning model you can.",
            "Bring in Co constraints on fields, various kinds.",
            "So for example you saw when you had breast cancer had only had breast cancer stages allowed there.",
            "Those are constraints.",
            "Those are like type checking constraints.",
            "I mean if you were to try to fill in something wrong, that would be an error.",
            "Now it would be a runtime error, but.",
            "America.",
            "This is dynamic, checking yes, so.",
            "What where?",
            "Where are you checking how you check are slightly different issues here.",
            "I'm not 100%.",
            "I would really have to see the details.",
            "I'd be very surprised if you could really check all that.",
            "I mean, it's where you put it, I'm not, yeah.",
            "Yeah, we should chat later.",
            "I mean, I agree it's important or at least interesting, but I'm unconvinced that a lot of these modeling cases that it's the cynic, one on of how you go forward.",
            "I guess that's really it.",
            "OK, maybe you can follow up afterwards.",
            "A quick question.",
            "Sure.",
            "So I didn't quite catch something you said.",
            "I think you said at the end that you use this method.",
            "This hybrid method to build a system that manages real patient data.",
            "No, manage patient history data.",
            "Patient history data sorry correct, this is this.",
            "This is actually working system.",
            "Yes you can download it actually.",
            "I mean it's used in a hospital.",
            "Or is it?",
            "Is it a demonstration system?",
            "I'm not involved with that project, I'm just doing the methodology side so.",
            "So my my question really is what is in building that system in sort of meet meeting the real requirements of hospital data and the like?",
            "What were the issues that came up?",
            "Email: as I said, I only the software engineering side of it.",
            "I'm not the model in the project, sorry.",
            "I wish I could tell you more, but I just don't know.",
            "I think the main goal was to bring in the ontology representation of all the ontology."
        ]
    ],
    "summarization": {
        "clip_0": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So this is joint work with Colin Toleston, James Cunningham and Alan Rector.",
                    "label": 1
                },
                {
                    "sent": "And it came out of mostly what these guys were doing in trying to support.",
                    "label": 0
                },
                {
                    "sent": "Is this too loud?",
                    "label": 0
                },
                {
                    "sent": "I could talk very softly, perhaps for a little while.",
                    "label": 0
                },
                {
                    "sent": "On the Cliff project, which was to an attempt to deal with health care records and to improve the retrieval and analysis of patient health care records and in the process of that, they came up with a neat architecture.",
                    "label": 0
                },
                {
                    "sent": "OK, so in this we're going to talk about.",
                    "label": 0
                }
            ]
        },
        "clip_1": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Software models in general.",
                    "label": 0
                },
                {
                    "sent": "We'll have a definition and some existing approaches that are out there and then we'll dive into detail about this new kind of software model that we call hybrid models.",
                    "label": 1
                },
                {
                    "sent": "The software model here is critically a domain model, so we're not really talking about the structure of the program per say, but the attempt to represent some aspect of the real world in particular.",
                    "label": 0
                },
                {
                    "sent": "In this case, patients their health, various health events, and so forth, and one of the key things to keep in mind.",
                    "label": 0
                },
                {
                    "sent": "All this is that.",
                    "label": 0
                },
                {
                    "sent": "Modeling formalisms like al or not, the only way that we capture knowledge or represent knowledge, particularly domain knowledge, object oriented programming languages came out of an attempt to provide a way of modeling the real world simulation, in particular for small talk, and so one of the things that we were working on.",
                    "label": 0
                },
                {
                    "sent": "And this is how to seamlessly allow people who are more comfortable modeling the world in Java and other people are more comfortable modeling the world in Al.",
                    "label": 0
                },
                {
                    "sent": "How these these two ways of modeling aspects of the world could be brought together in a useful way.",
                    "label": 0
                }
            ]
        },
        "clip_2": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So we just think about the problem in general.",
                    "label": 0
                },
                {
                    "sent": "We want to be able to build programs that are sensitive to large amounts of fairly complex domain knowledge.",
                    "label": 1
                },
                {
                    "sent": "In particular, here, we're talking about procedures were talking about diseases, patients relations between patients, and things like religion.",
                    "label": 0
                },
                {
                    "sent": "Even more what they eat.",
                    "label": 0
                },
                {
                    "sent": "And this stuff typically changes.",
                    "label": 0
                },
                {
                    "sent": "We keep finding out new information.",
                    "label": 0
                },
                {
                    "sent": "The records themselves can change our general domain knowledge can change.",
                    "label": 0
                },
                {
                    "sent": "We can discover a new form of cancer, for example, or we could new procedures or treatments are coming out all the time.",
                    "label": 1
                },
                {
                    "sent": "And this knowledge is generated or maintained by a variety of people.",
                    "label": 0
                },
                {
                    "sent": "So obviously the people producing the knowledge in the world.",
                    "label": 0
                },
                {
                    "sent": "But there's also the people who are encoding it for some purpose.",
                    "label": 0
                },
                {
                    "sent": "These could be all different sorts of people.",
                    "label": 0
                },
                {
                    "sent": "It would be really nice for talking about the procedures to have a Doctor Who's familiar with the procedures doing that.",
                    "label": 0
                },
                {
                    "sent": "Who can understand the literature.",
                    "label": 1
                },
                {
                    "sent": "But on the other hand, some other aspects of what we might have represented by an insurance agent or by a programmer.",
                    "label": 0
                },
                {
                    "sent": "So we want to build these programs, and we want to build them in such a way that the domain model is maintainable.",
                    "label": 0
                },
                {
                    "sent": "Particularly, all these people coming into it, and particularly in healthcare, accuracy of the model, is critical.",
                    "label": 0
                },
                {
                    "sent": "There surely lots of other domains where this is true, but I mean this is OK.",
                    "label": 0
                },
                {
                    "sent": "It's not nuclear power plants, but it's close right?",
                    "label": 0
                },
                {
                    "sent": "On the scale of really important to keep right, you can kill someone we want the domain model to be salient to the people who are working with it.",
                    "label": 0
                },
                {
                    "sent": "That is, we want it to be the case that if you're given the domain model and have to do something with it, either update the knowledge or updated program that uses it.",
                    "label": 0
                },
                {
                    "sent": "Uses that knowledge that you understand it, that you know what parts are relevant to your task, and you know how to modify it.",
                    "label": 0
                },
                {
                    "sent": "So think about if a Java programmer is handed a big old pile of al about cancer.",
                    "label": 0
                },
                {
                    "sent": "That's not going to be particularly something that they can work with.",
                    "label": 0
                },
                {
                    "sent": "On the other hand, if you take your average doctor or biologists, and you give them a big old pile of Java classes, they're pretty much screwed as well.",
                    "label": 0
                },
                {
                    "sent": "So we really would like these things to be salient to the appropriate appropriate audience, and we like the programs themselves to be maintainable.",
                    "label": 0
                },
                {
                    "sent": "These are the various somewhat intention goals.",
                    "label": 0
                }
            ]
        },
        "clip_3": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "We that we have.",
                    "label": 0
                },
                {
                    "sent": "So let's talk.",
                    "label": 0
                }
            ]
        },
        "clip_4": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "About software models, so I said these are ways of modeling the domain and the key aspect of the reason we call them software models is that they are iaccessible two programs.",
                    "label": 0
                },
                {
                    "sent": "In particular, we're focusing on the sort that's iaccessible from an object oriented programming language, and in particular, while this applies to lots of other kinds of object oriented programming languages, we're going to focus on Java.",
                    "label": 0
                },
                {
                    "sent": "An minimally what we have in such a model is an ability to represent class or concept hierarchies, so kinds and super kinds and sub kinds.",
                    "label": 0
                },
                {
                    "sent": "Sets of fields so they have the instances of a kind can have attributes, essentially an constraints associated with these fields, so something like an extended ER diagram and the most general sense is what we're talking about here.",
                    "label": 0
                },
                {
                    "sent": "And notice that this encompasses both Allen Java.",
                    "label": 0
                },
                {
                    "sent": "They both have classes and class hierarchies.",
                    "label": 0
                },
                {
                    "sent": "They both have sets of fields or properties, and they both have constraints associated with them, but boy.",
                    "label": 1
                },
                {
                    "sent": "Hard to get more different than Java and Al, right?",
                    "label": 0
                },
                {
                    "sent": "It's not like you're going to get a lot of transfer if you're a really good Al modeler to programming Java or vice versa.",
                    "label": 1
                },
                {
                    "sent": "And what are we going to use these for?",
                    "label": 0
                },
                {
                    "sent": "Well, we use them for both domain aware applications.",
                    "label": 0
                },
                {
                    "sent": "Where were the kinds of programs that were writing a really sent specifically sensitive to the details of the domain?",
                    "label": 0
                },
                {
                    "sent": "So perhaps.",
                    "label": 0
                },
                {
                    "sent": "Some operating system retrieval thing.",
                    "label": 0
                },
                {
                    "sent": "I don't know what they do over in medicine and I have nothing to do with that.",
                    "label": 1
                },
                {
                    "sent": "But so here we really want a common format for data storage and just for for representing the domain and then domain neutral applications there the domain knowledge is that you're not sensitive domain knowledge, but you have some sort of relatively generic tool that can work with different sorts of domain knowledge.",
                    "label": 0
                },
                {
                    "sent": "So in this case a browser.",
                    "label": 0
                },
                {
                    "sent": "You know can be relatively.",
                    "label": 0
                },
                {
                    "sent": "We can have two kinds of browsers you cannot.",
                    "label": 0
                },
                {
                    "sent": "Browsers for non specialist doctors that just want to be able to get through the record and specific browsers for specific specialists that want to focus on particular kinds of information.",
                    "label": 0
                }
            ]
        },
        "clip_5": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So we just think in the most general sense of a very simple software model, not assuming any particular details of the representation.",
                    "label": 1
                },
                {
                    "sent": "Here we could have a simple class hierarchy about cancer.",
                    "label": 0
                },
                {
                    "sent": "Details aren't to import.",
                    "label": 0
                }
            ]
        },
        "clip_6": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And then we have relations between instances of different classes.",
                    "label": 0
                },
                {
                    "sent": "So cancer can have a stage or a sub stage.",
                    "label": 0
                },
                {
                    "sent": "Breast cancer can have different kinds of stages than other cancers and other cancer might not even have a sub.",
                    "label": 0
                }
            ]
        },
        "clip_7": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Stage phase and of course you might want to relate to sort of concrete data.",
                    "label": 0
                },
                {
                    "sent": "Things like integers and strings and so forth.",
                    "label": 0
                },
                {
                    "sent": "So this is the most abstract thing that we can have.",
                    "label": 0
                }
            ]
        },
        "clip_8": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "For a software model so when we have one of these software models, the question is how does it get used in the most?",
                    "label": 0
                },
                {
                    "sent": "Again, in a fairly abstract way, the model mediates between various kinds of programs and various ways of storing the information that you have.",
                    "label": 0
                },
                {
                    "sent": "The sort of all the data that you have.",
                    "label": 0
                },
                {
                    "sent": "So in this case we're talking about having an RDF store, but this could be a relational database or an XML database or anything really some sort of legacy horror show.",
                    "label": 0
                },
                {
                    "sent": "And the model provides a view of this data.",
                    "label": 0
                },
                {
                    "sent": "It Shields the other programs from the details of the particular store that you had.",
                    "label": 0
                },
                {
                    "sent": "This is familiar from relational databases.",
                    "label": 0
                },
                {
                    "sent": "What are relational database?",
                    "label": 0
                },
                {
                    "sent": "Does it Shields you from the physical layer by providing an information view.",
                    "label": 0
                },
                {
                    "sent": "This is even abstracts it further and then the model domain neutral applications like a record browser query, formulator use the model in a generic way, that is without changing any of those programs we can swap the model out.",
                    "label": 1
                },
                {
                    "sent": "Of course we can avoid changing any of these programs.",
                    "label": 0
                },
                {
                    "sent": "While swapping out this bit and of course the domain aware programs are tide to the model, but we want to sort of keep that as specific as possible.",
                    "label": 0
                },
                {
                    "sent": "We want to make these easy to write and they impossible to write without some knowledge of the domain, so that coupling is OK.",
                    "label": 0
                },
                {
                    "sent": "But we like the other couplings to be as free and as easy as possible.",
                    "label": 0
                },
                {
                    "sent": "Feel free to ask questions at any point along the way and I didn't do any of these diagrams.",
                    "label": 0
                },
                {
                    "sent": "Colin is insanely into diagrams and so I have a more graphical presentation than I'm used to having so.",
                    "label": 0
                },
                {
                    "sent": "The question is what do those things look like?",
                    "label": 0
                },
                {
                    "sent": "You know what are the different options for filling in the yellow box essentially?",
                    "label": 0
                },
                {
                    "sent": "About some particular.",
                    "label": 0
                }
            ]
        },
        "clip_9": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Well, one thing we could do is have a direct model.",
                    "label": 0
                },
                {
                    "sent": "What we mean by direct model is something that's where all the modeling details are just in Java.",
                    "label": 0
                },
                {
                    "sent": "So remember talking Java here, the object oriented and we're coming from the programmer perspective by and large.",
                    "label": 0
                },
                {
                    "sent": "So here will have.",
                    "label": 0
                },
                {
                    "sent": "So all these light blue classes will always be Java classes, so cancer we have a Class A Java class name cancer and it will have a series of instance variables that are related to other Java classes like timepoint, breast stage, two or whatever.",
                    "label": 0
                },
                {
                    "sent": "And the key here is that the Java is itself the model.",
                    "label": 0
                },
                {
                    "sent": "There is nothing else that we're using to model.",
                    "label": 0
                },
                {
                    "sent": "We might have a conceptual understanding, but the model is all in Java we can contrast.",
                    "label": 0
                }
            ]
        },
        "clip_10": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "This.",
                    "label": 0
                },
                {
                    "sent": "With an indirect model where the Java class here isn't some domain object, it's just a generic class that says I'm an instance of some model and it has a field instant type.",
                    "label": 0
                }
            ]
        },
        "clip_11": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Which when we fill in with some particular name from the domain, in this case cancer, we get a series of fields that we know are associated with that cancer.",
                    "label": 0
                },
                {
                    "sent": "Perhaps we pull him out of the Aldata Beyal store.",
                    "label": 0
                },
                {
                    "sent": "These could be properties.",
                    "label": 0
                },
                {
                    "sent": "There it could be from a UML model for anything.",
                    "label": 0
                },
                {
                    "sent": "And and this view that we have right here, it looks like the direct.",
                    "label": 0
                },
                {
                    "sent": "I mean, it looks very similar to the have the same fields, have the same names, but this is an abstraction, right?",
                    "label": 0
                },
                {
                    "sent": "'cause what's really going on?",
                    "label": 0
                }
            ]
        },
        "clip_12": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Is that all of the Java classes are generic, so we don't actually have?",
                    "label": 0
                },
                {
                    "sent": "Oops, sorry.",
                    "label": 0
                }
            ]
        },
        "clip_13": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "We don't actually have a class called Locus or stage, and we don't actually have anything fields called stage or substage what we have.",
                    "label": 0
                },
                {
                    "sent": "Is we have the model instance?",
                    "label": 0
                },
                {
                    "sent": "No, actually.",
                    "label": 0
                },
                {
                    "sent": "No, I can't lean out far enough to point directly.",
                    "label": 0
                },
                {
                    "sent": "We have.",
                    "label": 0
                },
                {
                    "sent": "We have the model instance up there and it has a an instance variable.",
                    "label": 0
                },
                {
                    "sent": "Dynamic fields, which is just an array and that array is a collection of model field objects and the model field objects each have a name and maybe a series of constraints.",
                    "label": 0
                },
                {
                    "sent": "And we can instantiate the name of the first field to time point.",
                    "label": 0
                },
                {
                    "sent": "So this is nice because on the Java side it's purely generic, and so if you remain neutral software again so you don't have to know anything about any little.",
                    "label": 0
                }
            ]
        },
        "clip_14": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Answer I do something interesting so we step back and look at a full software model represented in this view.",
                    "label": 0
                },
                {
                    "sent": "We can see that the classes are all named demand by domain concepts, so this is a view of both the software program that you have the actual Java that you have and your conceptual model.",
                    "label": 0
                },
                {
                    "sent": "They're just one in the same, which is very convenient.",
                    "label": 0
                },
                {
                    "sent": "The indirect model of.",
                    "label": 0
                }
            ]
        },
        "clip_15": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Course is much nastier from a Java point of view.",
                    "label": 0
                },
                {
                    "sent": "You have all these intermediate for every.",
                    "label": 0
                },
                {
                    "sent": "For every field you actually have an object that represents the field.",
                    "label": 0
                },
                {
                    "sent": "And of course you can always say.",
                    "label": 0
                }
            ]
        },
        "clip_16": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Back and pretend that you see the conceptual model again by by trying mentally collapsing the two things, but there not there directly.",
                    "label": 0
                },
                {
                    "sent": "You have the programmer has to do that work to keep the idea of the conceptual model aligned with what they are.",
                    "label": 0
                }
            ]
        },
        "clip_17": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Actually working within the Java.",
                    "label": 0
                },
                {
                    "sent": "So the takeaway from this little taxonomy, the slogans are is that the direct models the Java API is the model an in the indirect.",
                    "label": 1
                },
                {
                    "sent": "The case you have a modeling of how to get at the model, right?",
                    "label": 0
                },
                {
                    "sent": "So the Java is giving you some stuff for how to get at any arbitrary model, but it doesn't do any of the modeling itself.",
                    "label": 0
                },
                {
                    "sent": "And the nice thing about direct models is the conceptual view in the programming view or identical, so there's no gap between them.",
                    "label": 0
                },
                {
                    "sent": "There's no work to be done to get between them, and the other case views diverge.",
                    "label": 0
                },
                {
                    "sent": "Now, both of these are actually realized quite commonly in software, but direct models include such tools as you can find if you Google for Alto Java, you'll find plenty of tools that will take an AL ontology and generate a Brazilian classes, and you can immediately see some of the disadvantage of that.",
                    "label": 0
                },
                {
                    "sent": "Sure, you have a nice direct modeling there, but it's all now in Java.",
                    "label": 0
                },
                {
                    "sent": "If you change it, you have to regenerate all these classes, which is not particularly end up with thousands or potentially hundreds of thousands of Java classes that.",
                    "label": 0
                },
                {
                    "sent": "Really aren't helping the programmer in any way and indirect models you can think of things like the lapi is providing some sort of indirect model or Jenna because they give you objects that represent Allen Teologi's and these have some advantages, but you lose some of that directness.",
                    "label": 0
                },
                {
                    "sent": "A Java programmer has to think not of the model, but they think of the API that leads to the model.",
                    "label": 0
                },
                {
                    "sent": "So even with.",
                    "label": 0
                }
            ]
        },
        "clip_18": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Indirect models we can have two sorts.",
                    "label": 0
                },
                {
                    "sent": "What we call static and dynamic and the static indirect model.",
                    "label": 0
                },
                {
                    "sent": "Once you instantiate did the model, you get a set of fields and those fields just say fixed forever and this is not actually an uncommon wave of going at it.",
                    "label": 0
                },
                {
                    "sent": "So here, even though we don't have any information about the locus of the cancer, we have stage and substage.",
                    "label": 0
                },
                {
                    "sent": "Not all cancers have stages and substages, but we since we have to have the possibility of having a substage, we just pop that in.",
                    "label": 0
                }
            ]
        },
        "clip_19": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "In a dynamic model we only put in into into the indirect model the the what we know.",
                    "label": 0
                },
                {
                    "sent": "So we say cancer.",
                    "label": 0
                },
                {
                    "sent": "We know cancers have to have locus is in stage, but since not all cancers have substages, we don't say anything about that yet.",
                    "label": 0
                }
            ]
        },
        "clip_20": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "As we instantiate the rest of the information, we say breast not only we get.",
                    "label": 0
                },
                {
                    "sent": "We get new constraints on this on the stages, we can only the stages that are salient to breast cancer and this is all coming from the ontology, right?",
                    "label": 0
                },
                {
                    "sent": "So as we put stuff into the Java we get some more information about about.",
                    "label": 0
                }
            ]
        },
        "clip_21": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "The instance that we're representing, and as we set the stage, we get that there is a potential sub stage for this stage.",
                    "label": 0
                },
                {
                    "sent": "Not all stages of breast cancer have substages, so now we have this with the constraints that are salient in this particular situation.",
                    "label": 0
                },
                {
                    "sent": "So why would we ever have a static model?",
                    "label": 0
                },
                {
                    "sent": "Well, I mean, if you don't want to have direct access to the if you don't want to have live access to the ontology for whatever reason, you might want to just sort of compile all of the constraints and all the possible things up front.",
                    "label": 0
                },
                {
                    "sent": "But in general a dynamic model just feels a little more natural, and it also really works for certain kinds of applications, because for example, if you're filling out a form, if you're a clinician and you're trying to fill in the chart, that electronic chart, I mean, this is exactly the kind of behavior you want, you know.",
                    "label": 0
                },
                {
                    "sent": "You don't want to see every possible permutation of every possible field.",
                    "label": 0
                },
                {
                    "sent": "What you want is as you fill in information, you get new fields that are relevant to the particular thing.",
                    "label": 0
                },
                {
                    "sent": "If you said oops, it wasn't breast cancer, it was you know, to cancer.",
                    "label": 0
                },
                {
                    "sent": "You want to change that to.",
                    "label": 0
                },
                {
                    "sent": "You want all this to go away automatically?",
                    "label": 0
                }
            ]
        },
        "clip_22": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So again, within the subset of models that we have that are in direct models, static ones are fixed, regardless of how you instantiate it.",
                    "label": 0
                },
                {
                    "sent": "So if you need to change from breast cancer to to cancel, you have to re instantiate the model, make a new model specifically about to cancer, and the dynamic one the model evolves as the state of your instantiation goes, and in this case it's both the shape of the model.",
                    "label": 0
                },
                {
                    "sent": "So how many fields you have?",
                    "label": 0
                },
                {
                    "sent": "What kinds of fields you have and the constraints in the models?",
                    "label": 0
                },
                {
                    "sent": "What are legal values for those for those fields?",
                    "label": 0
                }
            ]
        },
        "clip_23": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And of course, in our case we're talking about ontology backed, indirect indirect dynamic, ontology backed indirect models.",
                    "label": 0
                },
                {
                    "sent": "So here we're going to have some AL ontology, and we have some mediation that goes on here.",
                    "label": 0
                },
                {
                    "sent": "So because we don't always know, I mean we can't know from the L model on any particular class.",
                    "label": 0
                },
                {
                    "sent": "For example what the legal fields are right?",
                    "label": 0
                },
                {
                    "sent": "Because almost if you don't say anything about a property, it can apply to any class potentially.",
                    "label": 0
                },
                {
                    "sent": "So we have to have some.",
                    "label": 0
                },
                {
                    "sent": "Add some extra information about which which fields matter for our particular application, and this is what's generally called sanctioning, at least by by Alan Rector at all.",
                    "label": 0
                }
            ]
        },
        "clip_24": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So here what you do, you either have some heuristics, right?",
                    "label": 0
                },
                {
                    "sent": "You know that if you have a certain name pattern on your property, that's going to be relevant, or sometimes you have annotations on the properties where somebody says hey, this property is one that you want for user input and not necessarily one you want just for modeling.",
                    "label": 0
                },
                {
                    "sent": "Actually one of the heuristics that drives me nuts is that they put a min, 0P or whatever the property is there.",
                    "label": 0
                },
                {
                    "sent": "I explained to Alan Alan in the audience.",
                    "label": 0
                },
                {
                    "sent": "No good.",
                    "label": 0
                },
                {
                    "sent": "OK, so explain to Alan over and over again that min 0 something doesn't mean anything and you can't rely on the Oh no it gets inherited.",
                    "label": 0
                },
                {
                    "sent": "Yes, it gets inherited 'cause it appears everywhere.",
                    "label": 0
                },
                {
                    "sent": "So anyway there are better heuristics in this, But this is what they do.",
                    "label": 0
                },
                {
                    "sent": "They have some way of indicating what information is for input.",
                    "label": 0
                }
            ]
        },
        "clip_25": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So here again, we've essentially instantiate it to cancer.",
                    "label": 0
                },
                {
                    "sent": "That means we've pushed the framework pushes an instance over into the outside of cancer.",
                    "label": 0
                }
            ]
        },
        "clip_26": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "We add that it's breasts and.",
                    "label": 0
                }
            ]
        },
        "clip_27": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "The we add that information here in the and it gets recognized as breast cancer.",
                    "label": 0
                },
                {
                    "sent": "And since it's recognized as stage two breast cancer in this case, since we said Stage 2.",
                    "label": 0
                }
            ]
        },
        "clip_28": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "We get from the model down here.",
                    "label": 0
                },
                {
                    "sent": "The fact that stage two breast cancer has a certain set of stuff substages, so we're getting back and forth between the two.",
                    "label": 0
                },
                {
                    "sent": "The two models.",
                    "label": 0
                },
                {
                    "sent": "And this is, again, is something hard to do with either static models or direct models, because we might not know.",
                    "label": 0
                },
                {
                    "sent": "You know, there's thousands of these things.",
                    "label": 0
                },
                {
                    "sent": "We couldn't compile all of the different possibilities in there.",
                    "label": 0
                },
                {
                    "sent": "This happens on demand with reasoning, so you can enter basically arbitrary combinations of features and get correct answers from your model.",
                    "label": 0
                },
                {
                    "sent": "So this allows for a lot of flexibility.",
                    "label": 0
                }
            ]
        },
        "clip_29": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So if we just kind of summer up, summarize up, he also likes charts.",
                    "label": 0
                },
                {
                    "sent": "As you can see, but this is a pretty good chart.",
                    "label": 0
                },
                {
                    "sent": "There's a lot of different features that.",
                    "label": 0
                }
            ]
        },
        "clip_30": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Apply to one or the other in particular for dynamic model shaping, reshaping an updating.",
                    "label": 0
                },
                {
                    "sent": "You get this with ontology back.",
                    "label": 0
                },
                {
                    "sent": "Dynamic models, at least for ontology information.",
                    "label": 0
                },
                {
                    "sent": "What they're typically Porat is responding to software request, so if you have a procedural kind of thing where you want to say that when this field updates do something else, it's harder to do in an indirect model then it would be to just add a method to your direct model.",
                    "label": 0
                },
                {
                    "sent": "So for both of these that I think that is true that where one has the advantage the other one.",
                    "label": 0
                },
                {
                    "sent": "Doesn't and actually in Java it's pretty hard to reshape a class which you can do it.",
                    "label": 0
                },
                {
                    "sent": "But you're suffering really hard and dynamic object oriented programming languages like small talk, which I much prefer because I'm that way.",
                    "label": 0
                },
                {
                    "sent": "It's easier but.",
                    "label": 0
                }
            ]
        },
        "clip_31": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Not in Java, the main neutral API.",
                    "label": 0
                },
                {
                    "sent": "Well again for ontology back.",
                    "label": 0
                },
                {
                    "sent": "This is obvious because you're using an indirect model, so it's inherently domain neutral.",
                    "label": 0
                },
                {
                    "sent": "For direct ones you can do it again if you do some reflection and you have some code conventions and stuff like that, but you're in pain, right?",
                    "label": 0
                },
                {
                    "sent": "I mean it's not good.",
                    "label": 0
                }
            ]
        },
        "clip_32": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "For domain specific API, the direct model just wins and ontology back just loses.",
                    "label": 0
                }
            ]
        },
        "clip_33": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "For this kind of, depending on how you set the field processing thing, ontology backed ones actually know what he means by that.",
                    "label": 0
                },
                {
                    "sent": "Oh the.",
                    "label": 0
                }
            ]
        },
        "clip_34": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Is more whatever.",
                    "label": 0
                },
                {
                    "sent": "For knowledge engineering by domain experts.",
                    "label": 1
                },
                {
                    "sent": "At least in healthcare and life Sciences, alwyn's heart.",
                    "label": 0
                },
                {
                    "sent": "They tend to be familiar with some kind of ontology language, but not so much with programming language.",
                    "label": 0
                }
            ]
        },
        "clip_35": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "But for knowledge in Capsulation for shielding programmers from the knowledge the direct one obviously is particularly, but they end up with every possible bit.",
                    "label": 0
                },
                {
                    "sent": "How am I doing for time?",
                    "label": 0
                },
                {
                    "sent": "3 minutes I'm.",
                    "label": 0
                }
            ]
        },
        "clip_36": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Scared.",
                    "label": 0
                }
            ]
        },
        "clip_37": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Just went much faster when I was practicing it.",
                    "label": 0
                },
                {
                    "sent": "Oh well.",
                    "label": 0
                },
                {
                    "sent": "So in hybrid models, what we want to do is try to turn all the nodes into.",
                    "label": 1
                },
                {
                    "sent": "Yes is at least qualified.",
                    "label": 0
                },
                {
                    "sent": "Guesses.",
                    "label": 0
                },
                {
                    "sent": "We want to take the best of both worlds.",
                    "label": 0
                },
                {
                    "sent": "We want the Java programmers to be able to work in Java on the part that's relevant to them and we want domain engineers experts who work on the alpart and not have to think about the Java part.",
                    "label": 0
                },
                {
                    "sent": "And really 3 minutes.",
                    "label": 0
                },
                {
                    "sent": "Oh my God.",
                    "label": 0
                }
            ]
        },
        "clip_38": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "OK.",
                    "label": 0
                },
                {
                    "sent": "Sorry.",
                    "label": 0
                },
                {
                    "sent": "OK.",
                    "label": 0
                },
                {
                    "sent": "So remember with direct models, we have everything in Java.",
                    "label": 1
                }
            ]
        },
        "clip_39": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Process and fields and indirect models we have.",
                    "label": 0
                },
                {
                    "sent": "Everything not in all the domain class is not in.",
                    "label": 0
                }
            ]
        },
        "clip_40": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Class in Java classes and fields.",
                    "label": 1
                },
                {
                    "sent": "When we have a hybrid model, we have some of these.",
                    "label": 0
                },
                {
                    "sent": "Being indirect, we have our core models being subclasses of the model instance, but being specific to the domain and we have some other classes which are specific to domain, so we really have both going on at once, and this is all mediated by the framework so that from the programmer POV you can't see the difference.",
                    "label": 0
                },
                {
                    "sent": "But we in the modeling process.",
                    "label": 0
                },
                {
                    "sent": "So how do you usually do this kind of modeling?",
                    "label": 0
                },
                {
                    "sent": "You know somebody comes to you and says, oh, I need something that represents patient records and the programmer sits down and writes a couple classes like problem glimpse or whatever.",
                    "label": 0
                },
                {
                    "sent": "Oh yeah, half of record.",
                    "label": 0
                },
                {
                    "sent": "That's a snapshot in time.",
                    "label": 0
                },
                {
                    "sent": "I write this class alright, a few more classes.",
                    "label": 0
                },
                {
                    "sent": "I write a few dummy very specific classes and that's exactly what you do in hybrid modeling, and then when you're ready for the real big slew of domain knowledge, you just pop in the ontology and it fills in all these other fields so the programmer can work on a program using Java and all the things that are familiar with and have a running thing running program that is relevant and then plug in the vast.",
                    "label": 0
                }
            ]
        },
        "clip_41": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Amount of data that they have to deal with.",
                    "label": 0
                },
                {
                    "sent": "So in general we have a core structure in these hybrid models that is represented in Java typically happens very early.",
                    "label": 1
                },
                {
                    "sent": "It's shallow, deep, tightly interconnected, and it has these kind of generic class names.",
                    "label": 0
                },
                {
                    "sent": "High up class names.",
                    "label": 0
                }
            ]
        },
        "clip_42": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And then you populate the edges of the model with detailed knowledge just from the ontologies.",
                    "label": 0
                },
                {
                    "sent": "So this is where you get deep hierarchies with hundreds or thousands of classes and so.",
                    "label": 0
                }
            ]
        },
        "clip_43": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "The interaction is mediated by the main software classes, again under programmer control, and you can get both ontological inferences via the indirect parts of it, but since you have a kind of directness to it, you can also write specific methods that coordinate or do computation or alter the model in other ways.",
                    "label": 0
                },
                {
                    "sent": "You do have to do in addition to the sanctioning you had to have to do a bit of mapping to make this all workout, but it's relatively constrained so I'm like out of time on time so I'll just skip through the specific demo.",
                    "label": 0
                },
                {
                    "sent": "You can see this in the paper, just to give you a sense.",
                    "label": 0
                },
                {
                    "sent": "Of the model.",
                    "label": 0
                },
                {
                    "sent": "You end up with a very so here you can see the MoD.",
                    "label": 0
                }
            ]
        },
        "clip_44": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "It's very complicated.",
                    "label": 0
                },
                {
                    "sent": "You have both span and snap, so instance and histories in Java and then these are applied to different domain models.",
                    "label": 0
                },
                {
                    "sent": "We can have program patient histories of tumor progression, patient histories of pneumonia progression, whatever the domain model is the programmer simple, this abstract.",
                    "label": 0
                },
                {
                    "sent": "This temporal abstraction that allows them to represent this notion of a sequence of events, which is actually pretty hard to do in Al.",
                    "label": 0
                },
                {
                    "sent": "And this sequence of events, for example, you can do things like time slicing, say.",
                    "label": 0
                },
                {
                    "sent": "Hey go from here to here and tell me what's in there.",
                    "label": 0
                },
                {
                    "sent": "And.",
                    "label": 0
                },
                {
                    "sent": "Interpolate new.",
                    "label": 0
                }
            ]
        },
        "clip_45": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Ontology classes for the new endpoints.",
                    "label": 0
                },
                {
                    "sent": "This didn't exist anywhere.",
                    "label": 0
                },
                {
                    "sent": "It was generated by the program.",
                    "label": 0
                },
                {
                    "sent": "As you can see, this gets to be a pretty complex kind of model, but it isolates the different kinds of complexity for the to the people who are best scopes best suited to cope with that, and hides the others from them.",
                    "label": 0
                }
            ]
        },
        "clip_46": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Just let me get to this slide so we look at this chart again.",
                    "label": 0
                },
                {
                    "sent": "That's some good stuff, some bad, some good, some bad stuff.",
                    "label": 0
                },
                {
                    "sent": "Only good stuff.",
                    "label": 0
                },
                {
                    "sent": "Over here you have everything you need to be a little bit careful.",
                    "label": 0
                },
                {
                    "sent": "We have some qualifications.",
                    "label": 0
                },
                {
                    "sent": "So for example domain specific API.",
                    "label": 0
                },
                {
                    "sent": "That's true, it's here, but only for the core structures, right?",
                    "label": 0
                },
                {
                    "sent": "The periphery, remember is all indirect.",
                    "label": 0
                },
                {
                    "sent": "Similarly for for knowledge engineering we have that by domain experts, but only for the domain knowledge, right?",
                    "label": 1
                },
                {
                    "sent": "They never work on the problem glimpses and stuff.",
                    "label": 0
                },
                {
                    "sent": "They only work on cancer and other things, and similarly for knowledge in capsulation's.",
                    "label": 0
                },
                {
                    "sent": "It only hides from the program, but this is right.",
                    "label": 0
                },
                {
                    "sent": "You know the direct model was for Java and people who want Java.",
                    "label": 0
                },
                {
                    "sent": "We give that to them.",
                    "label": 0
                },
                {
                    "sent": "The indirect model were for model as you wanted to use our and we give that from them.",
                    "label": 0
                },
                {
                    "sent": "So these are qualified.",
                    "label": 1
                },
                {
                    "sent": "Yes, yes is, so they're not fully assess like these guys are, but they're the right.",
                    "label": 0
                },
                {
                    "sent": "Yes, is these guesses.",
                    "label": 0
                },
                {
                    "sent": "Here are actually problems because the benefit comes at the price of sacrificing one of the members of the team and their comfort zone.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                }
            ]
        },
        "clip_47": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So that's all in the paper 2.",
                    "label": 0
                },
                {
                    "sent": "So this has been used in a very large project with using a very complex ontology in a fairly as you saw, a fairly complex model in the Java.",
                    "label": 0
                },
                {
                    "sent": "It works very smoothly if you.",
                    "label": 0
                }
            ]
        },
        "clip_48": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "If you look at the there are a lot of reusable parts in this, so the core model bubble just allows you to set up hybrid models in general and the Chronicle 1 builds in a bunch of temporal information, and that's independent of these cancer records.",
                    "label": 0
                },
                {
                    "sent": "This this one here you could build up, or it's independent of patients.",
                    "label": 0
                },
                {
                    "sent": "You could build a history viewer or something like that for timelines, and so this provides a very nice way for programmers to provide value, add to the modeling side of things in a very structured way.",
                    "label": 0
                },
                {
                    "sent": "Thanks.",
                    "label": 0
                }
            ]
        },
        "clip_49": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Sorry, I went over.",
                    "label": 0
                },
                {
                    "sent": "Thanks, you did a great job and there's the first question.",
                    "label": 0
                },
                {
                    "sent": "I bring it to you.",
                    "label": 0
                },
                {
                    "sent": "Thanks for having chosen my question.",
                    "label": 0
                },
                {
                    "sent": "I'm Alexander apart from when you visited school, I think your address to very relevant problem.",
                    "label": 0
                },
                {
                    "sent": "I disagree.",
                    "label": 0
                },
                {
                    "sent": "However, a little bit with the conclusion that the hybrid approach is the best solution.",
                    "label": 0
                },
                {
                    "sent": "In particular, your feature table legs from my point of view about an important feature which you also mentioned in your paper, is a good thing that is static type checking.",
                    "label": 0
                },
                {
                    "sent": "You refer to Java is, which is correct as statically type checked programming language and you say static type checking is a good thing.",
                    "label": 0
                },
                {
                    "sent": "However, if you present only a selected number of concepts to the programmer, there is static type checking only for this limited set of concepts.",
                    "label": 0
                },
                {
                    "sent": "While there is no type checking for concepts that are lower in the hierarchy.",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "But um, well, this is in fact why I have implemented an extension of the C sharp programming language.",
                    "label": 0
                },
                {
                    "sent": "It's called semantic C sharp, which combines the direct model approach.",
                    "label": 0
                },
                {
                    "sent": "That is, you have only one one proxy class for all concepts in the ontology.",
                    "label": 0
                },
                {
                    "sent": "That is, you don't have a blown up Java or C sharp class hierarchy.",
                    "label": 0
                },
                {
                    "sent": "But in my semantics sharp, you can natively use all concepts of mythology, not only a limited set.",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "This.",
                    "label": 0
                },
                {
                    "sent": "Well, this is only like that's his half of the time every mark.",
                    "label": 0
                },
                {
                    "sent": "I think static type checking is particularly important for concepts that are lower in the hierarchy.",
                    "label": 0
                },
                {
                    "sent": "For example, disjoint concepts are usually declared lower in the hierarchy and for example, in my approach we have static type checking for disjoint concepts.",
                    "label": 0
                },
                {
                    "sent": "While in your approach, well, if you have only a limited number of concepts you may like.",
                    "label": 0
                },
                {
                    "sent": "Make the programmer feel there is static type checking, while in fact there is none.",
                    "label": 0
                },
                {
                    "sent": "Well, OK, I think you're overstating the case on on the static type checking checking front I mean obviously for the core part you do have static type checking.",
                    "label": 0
                },
                {
                    "sent": "Also an by the sanctioning model you can.",
                    "label": 0
                },
                {
                    "sent": "Bring in Co constraints on fields, various kinds.",
                    "label": 0
                },
                {
                    "sent": "So for example you saw when you had breast cancer had only had breast cancer stages allowed there.",
                    "label": 0
                },
                {
                    "sent": "Those are constraints.",
                    "label": 0
                },
                {
                    "sent": "Those are like type checking constraints.",
                    "label": 0
                },
                {
                    "sent": "I mean if you were to try to fill in something wrong, that would be an error.",
                    "label": 0
                },
                {
                    "sent": "Now it would be a runtime error, but.",
                    "label": 0
                },
                {
                    "sent": "America.",
                    "label": 0
                },
                {
                    "sent": "This is dynamic, checking yes, so.",
                    "label": 0
                },
                {
                    "sent": "What where?",
                    "label": 0
                },
                {
                    "sent": "Where are you checking how you check are slightly different issues here.",
                    "label": 0
                },
                {
                    "sent": "I'm not 100%.",
                    "label": 0
                },
                {
                    "sent": "I would really have to see the details.",
                    "label": 0
                },
                {
                    "sent": "I'd be very surprised if you could really check all that.",
                    "label": 0
                },
                {
                    "sent": "I mean, it's where you put it, I'm not, yeah.",
                    "label": 0
                },
                {
                    "sent": "Yeah, we should chat later.",
                    "label": 0
                },
                {
                    "sent": "I mean, I agree it's important or at least interesting, but I'm unconvinced that a lot of these modeling cases that it's the cynic, one on of how you go forward.",
                    "label": 0
                },
                {
                    "sent": "I guess that's really it.",
                    "label": 0
                },
                {
                    "sent": "OK, maybe you can follow up afterwards.",
                    "label": 0
                },
                {
                    "sent": "A quick question.",
                    "label": 0
                },
                {
                    "sent": "Sure.",
                    "label": 0
                },
                {
                    "sent": "So I didn't quite catch something you said.",
                    "label": 0
                },
                {
                    "sent": "I think you said at the end that you use this method.",
                    "label": 0
                },
                {
                    "sent": "This hybrid method to build a system that manages real patient data.",
                    "label": 0
                },
                {
                    "sent": "No, manage patient history data.",
                    "label": 0
                },
                {
                    "sent": "Patient history data sorry correct, this is this.",
                    "label": 0
                },
                {
                    "sent": "This is actually working system.",
                    "label": 0
                },
                {
                    "sent": "Yes you can download it actually.",
                    "label": 0
                },
                {
                    "sent": "I mean it's used in a hospital.",
                    "label": 0
                },
                {
                    "sent": "Or is it?",
                    "label": 0
                },
                {
                    "sent": "Is it a demonstration system?",
                    "label": 0
                },
                {
                    "sent": "I'm not involved with that project, I'm just doing the methodology side so.",
                    "label": 0
                },
                {
                    "sent": "So my my question really is what is in building that system in sort of meet meeting the real requirements of hospital data and the like?",
                    "label": 0
                },
                {
                    "sent": "What were the issues that came up?",
                    "label": 0
                },
                {
                    "sent": "Email: as I said, I only the software engineering side of it.",
                    "label": 0
                },
                {
                    "sent": "I'm not the model in the project, sorry.",
                    "label": 0
                },
                {
                    "sent": "I wish I could tell you more, but I just don't know.",
                    "label": 0
                },
                {
                    "sent": "I think the main goal was to bring in the ontology representation of all the ontology.",
                    "label": 0
                }
            ]
        }
    }
}