{
    "id": "m3yzp5aa2cqekpqckcw7b2awjrolwph3",
    "title": "All-Pairs Nearest Neighbor Search on Manycore Systems",
    "info": {
        "author": [
            "Lawrence Cayton, /Department of Computer Science and Engineering, Institute for Genomics and Bioinformatics, University of California"
        ],
        "published": "Jan. 13, 2011",
        "recorded": "December 2010",
        "category": [
            "Top->Computer Science->Machine Learning->Instance-based Learning"
        ]
    },
    "url": "http://videolectures.net/nipsworkshops2010_cayton_apnn/",
    "segmentation": [
        [
            "OK, so our last talk today is by Lawrence Cayton who is also me.",
            "So this is so.",
            "This is an work that's on basically an accelerating nearest thanks, John."
        ],
        [
            "It's an accelerating nearest neighbor search.",
            "So the point of this work is quite simple.",
            "So basically that maybe one of the best studied problems in computer science is nearest neighbor search or most exhaustively studied, so there's a tremendous amount of work in this kind of basic problem of nearest neighbor search, an metric spaces.",
            "And this is also kind of a core computational routine and many learning problems, so there's a lot of work on this, but now the hardware has changed a bit, and so I really want to do is take some of the ideas from this work and make them very effective and also very simple on.",
            "Modern hardware, so the example of what I mean is this bottom thing here.",
            "So this is a diagram of a GPU, and the reason you might care about such things is because they they can perform a huge number of floating point operations per second, so just tremendously fast.",
            "And so in a way, these older fashioned data structures somewhat obsolete when you have hardware that can."
        ],
        [
            "Process like this so just you know, sort of older standard approach is some sort of tree based space decomposition, so different parts of the space sort of get mapped over to some kind of tree thing, and this tree is exploring some kind of conditional way."
        ],
        [
            "So why?",
            "Why doesn't this fly so easily, especially in GPU's or multicore CPUs?",
            "The problem is is that this these trees are sort of evaluated and explored in this kind of complex conditional way, and this seems rather difficult to distribute, especially if you're really going for these sort of high throughput type situations.",
            "This also leads to a lot of memory issues, just this type of computation and maybe a more more specific point is Third Point, is this data dependent exploration is really.",
            "Almost it's really inefficient on, especially on vector type hardware, which is what a GPU is, or even modern CPUs because of basically because they have these sort of vector units."
        ],
        [
            "OK, So what I'm proposing instead is something that's sort of embarrassingly simple, but fairly effective, and that's to sort of replace these tree based things with just a very simple slicing, and this is sort of a randomized space decomposition where you're actually using just actual random subset of the database.",
            "Sort of representatives.",
            "And so this we can show has some sort of properties much like."
        ],
        [
            "Many of the more modern metric space algorithms.",
            "I'm in our but what's nice about it is the search is still structured much like brute force search, so it still paralyzes, basically trivially.",
            "As an example.",
            "So basically this particular search algorithm that I'm talking about here, and I've developed a few others.",
            "Has to do perform basically three brute force sources, but between only a smaller portions of the database, so it never does the full and squared sort of thing, but just from different parts.",
            "So as an example, one of the forces we have to do is from all these red points, the representatives to the rest of the points.",
            "So that's a much smaller operation and all pairs.",
            "So the point is that it reduces the work for nearest neighbor search but still paralyzes basically very effectively."
        ],
        [
            "And almost trivial to implement.",
            "And that's it.",
            "Thank you."
        ]
    ],
    "summarization": {
        "clip_0": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "OK, so our last talk today is by Lawrence Cayton who is also me.",
                    "label": 1
                },
                {
                    "sent": "So this is so.",
                    "label": 0
                },
                {
                    "sent": "This is an work that's on basically an accelerating nearest thanks, John.",
                    "label": 0
                }
            ]
        },
        "clip_1": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "It's an accelerating nearest neighbor search.",
                    "label": 1
                },
                {
                    "sent": "So the point of this work is quite simple.",
                    "label": 1
                },
                {
                    "sent": "So basically that maybe one of the best studied problems in computer science is nearest neighbor search or most exhaustively studied, so there's a tremendous amount of work in this kind of basic problem of nearest neighbor search, an metric spaces.",
                    "label": 0
                },
                {
                    "sent": "And this is also kind of a core computational routine and many learning problems, so there's a lot of work on this, but now the hardware has changed a bit, and so I really want to do is take some of the ideas from this work and make them very effective and also very simple on.",
                    "label": 0
                },
                {
                    "sent": "Modern hardware, so the example of what I mean is this bottom thing here.",
                    "label": 0
                },
                {
                    "sent": "So this is a diagram of a GPU, and the reason you might care about such things is because they they can perform a huge number of floating point operations per second, so just tremendously fast.",
                    "label": 0
                },
                {
                    "sent": "And so in a way, these older fashioned data structures somewhat obsolete when you have hardware that can.",
                    "label": 0
                }
            ]
        },
        "clip_2": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Process like this so just you know, sort of older standard approach is some sort of tree based space decomposition, so different parts of the space sort of get mapped over to some kind of tree thing, and this tree is exploring some kind of conditional way.",
                    "label": 0
                }
            ]
        },
        "clip_3": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So why?",
                    "label": 0
                },
                {
                    "sent": "Why doesn't this fly so easily, especially in GPU's or multicore CPUs?",
                    "label": 0
                },
                {
                    "sent": "The problem is is that this these trees are sort of evaluated and explored in this kind of complex conditional way, and this seems rather difficult to distribute, especially if you're really going for these sort of high throughput type situations.",
                    "label": 1
                },
                {
                    "sent": "This also leads to a lot of memory issues, just this type of computation and maybe a more more specific point is Third Point, is this data dependent exploration is really.",
                    "label": 0
                },
                {
                    "sent": "Almost it's really inefficient on, especially on vector type hardware, which is what a GPU is, or even modern CPUs because of basically because they have these sort of vector units.",
                    "label": 0
                }
            ]
        },
        "clip_4": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "OK, So what I'm proposing instead is something that's sort of embarrassingly simple, but fairly effective, and that's to sort of replace these tree based things with just a very simple slicing, and this is sort of a randomized space decomposition where you're actually using just actual random subset of the database.",
                    "label": 0
                },
                {
                    "sent": "Sort of representatives.",
                    "label": 0
                },
                {
                    "sent": "And so this we can show has some sort of properties much like.",
                    "label": 0
                }
            ]
        },
        "clip_5": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Many of the more modern metric space algorithms.",
                    "label": 0
                },
                {
                    "sent": "I'm in our but what's nice about it is the search is still structured much like brute force search, so it still paralyzes, basically trivially.",
                    "label": 1
                },
                {
                    "sent": "As an example.",
                    "label": 1
                },
                {
                    "sent": "So basically this particular search algorithm that I'm talking about here, and I've developed a few others.",
                    "label": 0
                },
                {
                    "sent": "Has to do perform basically three brute force sources, but between only a smaller portions of the database, so it never does the full and squared sort of thing, but just from different parts.",
                    "label": 1
                },
                {
                    "sent": "So as an example, one of the forces we have to do is from all these red points, the representatives to the rest of the points.",
                    "label": 0
                },
                {
                    "sent": "So that's a much smaller operation and all pairs.",
                    "label": 0
                },
                {
                    "sent": "So the point is that it reduces the work for nearest neighbor search but still paralyzes basically very effectively.",
                    "label": 0
                }
            ]
        },
        "clip_6": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And almost trivial to implement.",
                    "label": 0
                },
                {
                    "sent": "And that's it.",
                    "label": 0
                },
                {
                    "sent": "Thank you.",
                    "label": 0
                }
            ]
        }
    }
}