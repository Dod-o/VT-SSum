{
    "id": "ln332qizcx6p2xcp2dg36h2ivd556lq2",
    "title": "The path taken for k-path",
    "info": {
        "author": [
            "Andreas Bj\u00f6rklund, Department of Computer Science, Lund University"
        ],
        "published": "Oct. 2, 2012",
        "recorded": "September 2012",
        "category": [
            "Top->Computer Science->Algorithms"
        ]
    },
    "url": "http://videolectures.net/algo2012_bjoerklund_k_path/",
    "segmentation": [
        [
            "Well, I'm very happy to have been given this opportunity to talk about some problem that I'm.",
            "Really fond of and already early in my PhD career.",
            "I studied finding long paths in graphs, but I was working in approximation algorithms from the beginning, but that was too hard for me and other people were stronger, so I started looking at it from this exact algorithm approach instead, and in particular the parameterized version eventually.",
            "So today I'm going to review all the results I'm aware of for this K path problem.",
            "Throughout the years.",
            "And forgive me if I forget any so.",
            "Let's start with defining the problem."
        ],
        [
            "So we're giving a graph and most of the time in my talk this will be an undirected graph and it will have no weights, and we're looking for a simple path that is the part that doesn't cross itself.",
            "Of a given length K and we want to find an fast algorithm for this.",
            "But"
        ],
        [
            "We could also have a directed version where where you have to go along the.",
            "The arrows of the of the arcs.",
            "And of course there is a version where you have weights and you can ask of the of the path that has the least total cost.",
            "Ass."
        ],
        [
            "So.",
            "Let's look at the complexity of this problem.",
            "So the obvious way.",
            "I was solving this is to recursively try to extend the path as long as possible, and clearly that can be enter the K. Time in the worst case.",
            "So one question you can ask is if there can be algorithms which.",
            "Have runtimes which can be factored in something that is dependent on K and something that is polynomial in N. And by now we have a definition for this.",
            "We call them fixed parameter tractable whenever you can do this for a problem.",
            "And we also.",
            "Enjoy trying to make these FK as small as possible.",
            "So this will be most of the.",
            "Most of the results will get smaller and smaller F for this problem.",
            "Right?",
            "So let me just try to.",
            "Go back in time.",
            "Before we knew that this problem was fixed.",
            "Parameter tractable."
        ],
        [
            "And get some intuition why there is such algorithms in the first place.",
            "So if you consider regular graphs, that is, you have every vertex has the neighbors.",
            "Then there are two cases.",
            "Either you have a large degree so it's larger than your parametric K, but then there must be a K path because you can just hit relatively add one more vertex, and since there are more neighbors.",
            "Then verticies you have visited so far, it will always be possible to extend it took a path.",
            "On the other hand.",
            "If the degree is less than K, then of course you can list all potential K paths.",
            "By just enumerating all the all the neighbors and see if there is one and then you have this factorization with something that is polynomial in N. Times the function OK. Name located the K. So this gives some hope that there is FPT for the case where we have.",
            "Not a regular graph.",
            "And.",
            "The 1st result, which I'm aware of."
        ],
        [
            "Is Manions result from 1985?",
            "And he showed that this F of K is K factorial.",
            "Unfortunately, I've put it way way down on the slide so you at the back cannot see it.",
            "But it says K factorial.",
            "And the interesting with this result is that this, as I understand, is before the concept of FT was introduced, so it's one of the earlier fixed point tractable results.",
            "So let's see what's happening here.",
            "So Munyan's idea is that.",
            "Obviously if you kept.",
            "If you've kept all paths of length K -- 1 ending at a vertex, one vertex two and so forth through the vertex N in separate families.",
            "Then of course you could extend these.",
            "Two other families with paths of length K ending in Vertex one works too and were sent.",
            "And the problem with this approach, of course, is that it is as bad as the recursive one.",
            "So this doesn't work, but."
        ],
        [
            "The fact that is interesting here and it's Manius Insight is that you don't need to keep track of all paths.",
            "Becausw to extend the path by one vertex.",
            "The only thing you need to know is if.",
            "Is there a path?",
            "Which ends in a vertex adjacent to the one I want to add.",
            "Such that it doesn't include the vertex I'm going to add.",
            "So this is a question you need to ask your family of paths of length K -- 1.",
            "Is there a path that avoids the vertex?",
            "But I'm going to add.",
            "So for instance, if you list all.",
            "All the paths of length four ending in Vertex 5.",
            "There are a lot of them.",
            "As we can imagine.",
            "And.",
            "Two now to figure out if we can extend one of these.",
            "So that it sorry so that it ends in vertex 3, all we need to ask is there a path of length four ending at vertex five which does not go through vertex 3?",
            "That would have been sufficient for us.",
            "So what money and does is that he build something that is called a path.",
            "Represented representatives of these families.",
            "And these are constructed in the following way.",
            "You see all the paths at the left.",
            "You take one of them arbitrarily."
        ],
        [
            "And put it on the top, and I have omitted the last vertex here.",
            "Yes, to keep it short.",
            "And.",
            "Now, if you want to ask, this data structure, is there a path ending at Vertex 5?",
            "That does not go through vertex 6.",
            "I would just have looked at this and said yeah great there is.",
            "But if I wanted to know is there one that avoids vertex 2?",
            "Then this would not be a sufficient to keep yes this path, so I need for.",
            "For the example of vertex one, I need to store another path that does not include vertex one.",
            "And the same for vertex two and the same converting three.",
            "But then I can ask all kinds of questions for meeting one vertex.",
            "And you can also do this idea recursively now.",
            "So you can add.",
            "Add path that avoids subsets of other vertices.",
            "So in this example we have that.",
            "To at the leftmost over here you have that there is a path avoiding vertex one and two.",
            "Events in Virtex 5.",
            "And you build this.",
            "And the point where this the point with this construction is that we can get a bound on this and you can see that it's it's the length of the path.",
            "Times or raised to the depth, which is the number of vertices you need to avoid.",
            "So this will be at most KK half to the K half in our example, because what you realized going back to?"
        ],
        [
            "His original idea of these families is that you can instead keep these path representative families.",
            "Where you keep all paths of length I -- 1.",
            "That avoids all possible subsets of size K -- I + 1.",
            "And then you can extend these to other path representatives which have longer paths.",
            "But avoids one less.",
            "Vertex.",
            "And he also has an efficient construction going from.",
            "Going from all these to the left to those to the right, so we end up in something that is K factorial.",
            "So this is actually a quite sophisticated argument I think.",
            "I think some of the later techniques are a lot easier to understand.",
            "So already the next one."
        ],
        [
            "Which is due to board lender.",
            "It is conceptually.",
            "Easier I think.",
            "So the idea is just to.",
            "To build depth first search.",
            "Of the graph.",
            "And here.",
            "I have beliefs order from left to right in the order they were discovered by the depth first search.",
            "And you can first ask is.",
            "The depth in this tree larger than K -- 1, then yes, you already have a path of length K. But on the other hand, if it's not.",
            "Then you can use all the parts from the roots to the leaf.",
            "As bags in a path with decomposition.",
            "So all these.",
            "Our bags apart with the conversation and I'm going to tell you a little bit more about what that is.",
            "But the thing with these bags is that or the thing with the first search you can say is that all edges that you know don't see in this.",
            "In this in this tree that is in the graph they go.",
            "Up to ancestors in the tree.",
            "I mean, that's the property of the lips for search.",
            "So you can actually do dynamic programming over this.",
            "These bags in this."
        ],
        [
            "Both with the conversation and it works as follows.",
            "You go from from over the bags from left to right and you keep a border where you're keeping track of all.",
            "Possible states, that's all possible ways that the path can intersect with this border and that.",
            "Hold some information about the notes to the left that you have forgot, but you know that there is some path there.",
            "Of a certain length.",
            "And when you move to next bag.",
            "You can build new states from all the old ones, so the problem is that you need like a factorial States and there is also a factor 2 to the K here involved in actually constructing all these new states.",
            "So this algorithm is actually a bit worse.",
            "It's a factor 2K2 to the K, worse than millions, but it's easier to understand I think, and Moreover, the recent results that Danielle mentioned yesterday.",
            "From from Fox.",
            "Last Fox.",
            "So I guess what's that you can?",
            "You don't need K factorial states.",
            "You need like 4 to the K states in a randomized algorithm.",
            "Actually assembling parts so that that would already give us some constant to the K function.",
            "For this problem.",
            "So then of course it took a few years and the famous."
        ],
        [
            "By alone, just translate that Daniel talked about yesterday.",
            "Let me just brief, briefly mention what it is.",
            "You have a graph and you.",
            "Color all the vertices with as many colors as the length of the path you want to find.",
            "So in this case, we're looking for a path Link 3.",
            "And there is pretty large probability that some path get rainbow colored.",
            "That is, it does not have the same color at two vertices, and you can bound this probability and see that it's roughly E to the minus K. So.",
            "When you have this, you can actually do dynamic programming over the subsets of the colors.",
            "And repeat these E to the K times.",
            "Then you will have something like that is to E to the K randomized algorithm.",
            "And like Daniel said, you can do randomized this as well.",
            "So that's pretty neat and this has a lot of other applications as well as technique.",
            "As you well know.",
            "But what is important for for this talk is that this idea actually.",
            "Continuous in the following approaches on the problem.",
            "So to jump along time like."
        ],
        [
            "12 years.",
            "From that paper, two independent set of authors.",
            "Discovered the same technique and one set called.",
            "It divide and color.",
            "And the idea is again that you call it the vertices of the graph.",
            "But this time you use only two colors.",
            "So you use white sand and black, and if you're looking for a path of length four in this case.",
            "The good case for you is when the path is such that it first traverses the white vertices and then equally many black vertices.",
            "In this case, and you can bound this probability and see that it's two to the minus K. And.",
            "That probability.",
            "Is a bit better than E to the minus K, So what you can do with this is that you can.",
            "Build a recursive structure.",
            "First you try to assemble all paths of.",
            "Of length K using."
        ],
        [
            "Having solved the problem for all caves.",
            "So this is you.",
            "Try all you try.",
            "A lot of colorings like 2 to the K. To split the graph into halfs and you solve anything, look for K half long paths.",
            "In these smaller graphs and then of course you can.",
            "Do this idea recursively.",
            "And this will end up in a four to the K time algorithm.",
            "And this can also be derandomized actually using universal sets.",
            "So to date, this is the fastest deterministic algorithm.",
            "That I know of.",
            "For K path and you can also use.",
            "You can also solve the weighted version here.",
            "In four to the K, so it's quite powerful technique.",
            "But the reason that that I'm standing here today is.",
            "Due to cook this result result.",
            "That was an I Cup 2008 because he realized something very clever.",
            "And that."
        ],
        [
            "That is that instead of trying to construct these.",
            "Construct these paths.",
            "Explicitly, you can do it by.",
            "Algebraic method, where you're implicitly see for the K path by evaluating his son.",
            "And examples of this include, for instance, finding a triangle in a graph when you use fast matrix multiplication.",
            "So let."
        ],
        [
            "See what his algebraic method was.",
            "So once again, you're given the graph, but instead of assigning colors to the vertices.",
            "You assign binary vectors of length K. And the thing that is good for your algorithm is when the path that you're searching for.",
            "Pulses through verticies, which are linear independent of each other.",
            "So why is this better than coloring vertices?",
            "Well, it's because the probability that the K path is linear independence is larger than than a constant.",
            "It has no dependence on K any longer like the earlier.",
            "The earlier random assignment assignment techniques.",
            "The problem is that you can no longer assemble this by dynamic dynamic programming.",
            "You need you need something else to actually find the parts and what coaches does is that he sums over walks and using inclusion exclusion like technique he can.",
            "He can see that there must be a path.",
            "So just let us."
        ],
        [
            "Convince ourself about this probability.",
            "That K path linear independence that it should be larger than a constant which is roughly 1 one, 4th.",
            "First obviously that one taking one vector, the probability is one that it's linear independent.",
            "If you take 2 then you have to multiply Y 1 -- 1/2.",
            "Because that's the.",
            "The size of the subspace band by one vector.",
            "And.",
            "When you add the third one, you see that there is a factor 1 -- 1, one over 4, but this decays exponentially so.",
            "Pretty soon you're just multiplying ones with each other, more or less so this actually.",
            "Stops decreasing quickly very quickly and it's always larger than than 1/4.",
            "So how does this?"
        ],
        [
            "Algorithm work.",
            "So one way of viewing what he is doing is that you take a vector.",
            "In a binary vector of length K. And you look at the sub graph that's induced.",
            "By the vertices whose vectors.",
            "Whose dot product with S?",
            "Is zero module 2.",
            "And you count all the K walks in this induced graph.",
            "And if you just label this by W index S and in the end you just sum over all these and if this sum is odd, then you know there must be a. OK path and if it's zero there may be one, but.",
            "We will try to understand why this works.",
            "So first they cannot be any false positives."
        ],
        [
            "'cause if you have.",
            "A walk that closes on itself like this 1231.",
            "Then if you take the.",
            "The binary vectors associated with these vertices.",
            "You will see that there are.",
            "There are two vectors that.",
            "That are such that their dot product with these are zero, so it actually relates to the nullspace of.",
            "The vectors to the left and the nullspace always contain an even number.",
            "Are vectors?",
            "If it has not full rank.",
            "So on the other hand, to actually actually have to detect K path.",
            "You have to get all all the vectors linear independent, but then we know that this happens with probably at least 1/4.",
            "So, but there's still one."
        ],
        [
            "Big problem here and there is that you can have false negatives for other reasons and that is since we're just counting counting odds and evens here.",
            "So this algorithm won't work if all K sized vertex sets in use a graph.",
            "Such that it has an even number of Hamiltonian cycles.",
            "So that is an even conspiracy of the K paths for us in the graph.",
            "But still it might happen.",
            "And then and then it doesn't matter how many times we run it, we will not see it.",
            "So code is had a fix in this for this problem in is.",
            "In his cycle paper."
        ],
        [
            "And that was to actually increase the dimension to add a few extra.",
            "Elements so that you could label edges as well with these vectors.",
            "And then he would.",
            "Would remove address if they were if they were not.",
            "Zero with this scalar product and he could actually show that by this you could make sure that if you re run the algorithm sufficiently many times then you will detect if it has K path.",
            "So This is why it has this odd odd number 2.8 three to the K, because it's actually 2 to the one point 5K.",
            "But short after code is pressed."
        ],
        [
            "This paper Williams posted a nicer way to resolve this.",
            "Problem.",
            "And that is to instead of.",
            "Yeah, let me just look at look through this important ingredient.",
            "An you notice that you can use this sort simple lemma which is used to see if a polynomial is identical, easier or not.",
            "So, so The thing is that if you have a polynomial a multivariate polynomial.",
            "You can see if it's non zero by plugging in random values and evaluating it and see if it's non 0.",
            "And this works pretty well due to this.",
            "This lemma so William's idea was to instead of just counting odds and events whi don't use a larger."
        ],
        [
            "Field that has characteristic too because the only thing that is interesting is that when we add something and even number with an even number of times he wanted to cancel, and that's always the case in a characteristic to field.",
            "So he also added.",
            "A lot of values from a large field of characteristic 2 on the edges and vertices and now.",
            "You can't account works as previously, but you multiply all the all the scalars on the edges and vertices along the walk.",
            "And then you use this polynomial energy testing machinery to detect if there is a path.",
            "So this is where you get down to two to the K. So this was really nice and there was also some argument why this probably wouldn't wouldn't be possible to improve so."
        ],
        [
            "Nevertheless, we found.",
            "Away too.",
            "To trick this machinery.",
            "And for simplicity I will only tell you in the case of a bipartite graph.",
            "But the trick we used is that instead of labeling all vertices with these vectors.",
            "We just label one color class.",
            "So in this case we call called.",
            "Label the Brown ones.",
            "And now as we're building our walks.",
            "We just reuse the same algorithm and that's.",
            "That the code is on Williams proposed, but we're just saving over a smaller.",
            "A smaller subspace and.",
            "We always keep the yellow vertices in the graph.",
            "So for instance, when we build a walk like this.",
            "We we make sure that we never go back immediately to the to the same yellow one that we came from, but that's easy to accomplish by dynamic programming.",
            "And we still have a problem that we can.",
            "End up with paths that go back to a vertex it has previously visited, but we know that it can't be a Brown one because the Brown ones were canceled out by the cooties Williams machinery.",
            "So if there is a crossing, it must be at a yellow vertex.",
            "And our observation here is that.",
            "Whenever this happens.",
            "There is also.",
            "There is an orientation on how you pass these positive cycle and you can also traverse this cycle the other direction.",
            "Which will then, since the graph is undirected.",
            "Always map to the same monomial and will cancel for that reason instead.",
            "So there are two different cancellation techniques in.",
            "In this algorithm.",
            "But for non bipartite graphs it doesn't work just as clean.",
            "So the we have a bound that is 1.66 to the K, which I hope can be improved.",
            "But I don't see how to do it.",
            "So that was pretty much what I was.",
            "Planning to say about the kpop problem, but this also exists in.",
            "In accounting version, of course you can ask how many K paths is there in a graph.",
            "And.",
            "There was.",
            "There was."
        ],
        [
            "Results from 2002 by Flume.",
            "Android would show that at counting the number of paths is as hard as counting K clicks.",
            "So there is little hope that we can find fixed parameter parameter algorithms for the counting problem.",
            "Nevertheless, people have tried to count them.",
            "So no go alone and the Co author.",
            "Show that if you use if you try to use the color coding technique that is use.",
            "You use families of colorings that are balanced to try to approximate the number of paths.",
            "Then you would at least end up with this end to the K half time, so that doesn't seem to be.",
            "A way forward."
        ],
        [
            "But there are also algorithms which achieve this, even exactly counting the number of K path.",
            "So one of these results is by.",
            "But Slepski, Williams and Williams.",
            "And it says that you can count the K paths in time two and to the K half.",
            "And let me try to explain how this works.",
            "You first have the graph.",
            "This and.",
            "You try to.",
            "If we're looking for a path of length five, we will take half of these vertices rounded up.",
            "This will be 3, three, and for every possible way of mapping these three vertices to the graph.",
            "Like this every ordered way.",
            "We will map map these to every other vertex along the path.",
            "And then we will try to answer the question, how many parts are there passing through the green #5, the red #4 and the blue #2 in that order?",
            "And their insight was that you can map this.",
            "On a.",
            "On a permanent problem in a rectangular matrix.",
            "So what you do is that on the in the rows you put.",
            "You put the pairs of vertices that you have mapped along the path.",
            "And you put a zero or a one for the vertices in the columns.",
            "Whether they can be passed immediately going from the first vertex to the other.",
            "So, like in this case when you're traveling from the green to the red one, you can do it by going.",
            "Via the vertex #6 or you can do it via the vertex #3, but you can't do it via the vertex number one, so that is why there is 011 in the row and the same for the.",
            "For the 2nd row where we're going from vertex four to vertex 2, then you can pass vertex three, or you can pass vertex one, but you can't pass vertex takes.",
            "And then all.",
            "All terms in the in the permanent expansion of this matrix.",
            "You remember the definition of a permanent, so that is the product of always to take one element from each row such that no column is reused.",
            "So for instance.",
            "This will be one term and you will sum over all of these.",
            "And this particular one corresponds to going through.",
            "56412 So what is the runtime of this algorithm?",
            "Well, you.",
            "You went through always too.",
            "Two orderly map K half vertices in the graph.",
            "So that's M to the K half.",
            "And there are also a factor 2 to the K half for solving the permanent problem, because the permanent problem is hard to.",
            "To solve, there is no polynomial time algorithm.",
            "But the good news is that it's it's exponential only in the rows here.",
            "So this technique is interesting because it also works for other subgraphs which has a large independent set, because then you can always put the independent set on the.",
            "On the columns.",
            "And."
        ],
        [
            "My coauthors and myself, we also had a result here, which is slightly better, but it doesn't work for as many cases as.",
            "Oscilloscope Williams Williams.",
            "But we have N to the K half divided by K half factorial runtime.",
            "And let me just try to explain.",
            "So this is the path we're looking for, and obviously there is a way to divide it in the middle.",
            "So every path consists of two smaller paths of half the vertices.",
            "So again.",
            "We can actually.",
            "Introduce a quantity that, for us subset of vertices South counts the number of K K / 2 long paths which contains these vertices.",
            "And the final thing by this quantity is that you can build this.",
            "For all subsets, S pretty quickly.",
            "And I'm not going to tell you how you do this, but it's called a fast, safer transform.",
            "And once you have these quantities.",
            "There is an inclusion exclusion formula.",
            "Which will make sure that you only count the two halfs that doesn't intersect each other, and the idea is again this accounting module 2 or whatever you want to call it that.",
            "When?",
            "When there is an overlap between these objects, they will be counted an equal number of times, and in this case they will be.",
            "Counted with signs so we actually get the the the correct number of the naturals.",
            "Yeah.",
            "So I don't think I'm going to go into the details here because it's it's quite involved.",
            "So."
        ],
        [
            "Thank you."
        ]
    ],
    "summarization": {
        "clip_0": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Well, I'm very happy to have been given this opportunity to talk about some problem that I'm.",
                    "label": 0
                },
                {
                    "sent": "Really fond of and already early in my PhD career.",
                    "label": 0
                },
                {
                    "sent": "I studied finding long paths in graphs, but I was working in approximation algorithms from the beginning, but that was too hard for me and other people were stronger, so I started looking at it from this exact algorithm approach instead, and in particular the parameterized version eventually.",
                    "label": 0
                },
                {
                    "sent": "So today I'm going to review all the results I'm aware of for this K path problem.",
                    "label": 0
                },
                {
                    "sent": "Throughout the years.",
                    "label": 0
                },
                {
                    "sent": "And forgive me if I forget any so.",
                    "label": 0
                },
                {
                    "sent": "Let's start with defining the problem.",
                    "label": 0
                }
            ]
        },
        "clip_1": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So we're giving a graph and most of the time in my talk this will be an undirected graph and it will have no weights, and we're looking for a simple path that is the part that doesn't cross itself.",
                    "label": 0
                },
                {
                    "sent": "Of a given length K and we want to find an fast algorithm for this.",
                    "label": 0
                },
                {
                    "sent": "But",
                    "label": 0
                }
            ]
        },
        "clip_2": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "We could also have a directed version where where you have to go along the.",
                    "label": 0
                },
                {
                    "sent": "The arrows of the of the arcs.",
                    "label": 0
                },
                {
                    "sent": "And of course there is a version where you have weights and you can ask of the of the path that has the least total cost.",
                    "label": 0
                },
                {
                    "sent": "Ass.",
                    "label": 0
                }
            ]
        },
        "clip_3": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "Let's look at the complexity of this problem.",
                    "label": 0
                },
                {
                    "sent": "So the obvious way.",
                    "label": 0
                },
                {
                    "sent": "I was solving this is to recursively try to extend the path as long as possible, and clearly that can be enter the K. Time in the worst case.",
                    "label": 0
                },
                {
                    "sent": "So one question you can ask is if there can be algorithms which.",
                    "label": 1
                },
                {
                    "sent": "Have runtimes which can be factored in something that is dependent on K and something that is polynomial in N. And by now we have a definition for this.",
                    "label": 0
                },
                {
                    "sent": "We call them fixed parameter tractable whenever you can do this for a problem.",
                    "label": 0
                },
                {
                    "sent": "And we also.",
                    "label": 0
                },
                {
                    "sent": "Enjoy trying to make these FK as small as possible.",
                    "label": 0
                },
                {
                    "sent": "So this will be most of the.",
                    "label": 0
                },
                {
                    "sent": "Most of the results will get smaller and smaller F for this problem.",
                    "label": 0
                },
                {
                    "sent": "Right?",
                    "label": 0
                },
                {
                    "sent": "So let me just try to.",
                    "label": 0
                },
                {
                    "sent": "Go back in time.",
                    "label": 0
                },
                {
                    "sent": "Before we knew that this problem was fixed.",
                    "label": 0
                },
                {
                    "sent": "Parameter tractable.",
                    "label": 0
                }
            ]
        },
        "clip_4": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "And get some intuition why there is such algorithms in the first place.",
                    "label": 0
                },
                {
                    "sent": "So if you consider regular graphs, that is, you have every vertex has the neighbors.",
                    "label": 1
                },
                {
                    "sent": "Then there are two cases.",
                    "label": 0
                },
                {
                    "sent": "Either you have a large degree so it's larger than your parametric K, but then there must be a K path because you can just hit relatively add one more vertex, and since there are more neighbors.",
                    "label": 0
                },
                {
                    "sent": "Then verticies you have visited so far, it will always be possible to extend it took a path.",
                    "label": 0
                },
                {
                    "sent": "On the other hand.",
                    "label": 0
                },
                {
                    "sent": "If the degree is less than K, then of course you can list all potential K paths.",
                    "label": 1
                },
                {
                    "sent": "By just enumerating all the all the neighbors and see if there is one and then you have this factorization with something that is polynomial in N. Times the function OK. Name located the K. So this gives some hope that there is FPT for the case where we have.",
                    "label": 0
                },
                {
                    "sent": "Not a regular graph.",
                    "label": 0
                },
                {
                    "sent": "And.",
                    "label": 0
                },
                {
                    "sent": "The 1st result, which I'm aware of.",
                    "label": 0
                }
            ]
        },
        "clip_5": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Is Manions result from 1985?",
                    "label": 0
                },
                {
                    "sent": "And he showed that this F of K is K factorial.",
                    "label": 0
                },
                {
                    "sent": "Unfortunately, I've put it way way down on the slide so you at the back cannot see it.",
                    "label": 0
                },
                {
                    "sent": "But it says K factorial.",
                    "label": 0
                },
                {
                    "sent": "And the interesting with this result is that this, as I understand, is before the concept of FT was introduced, so it's one of the earlier fixed point tractable results.",
                    "label": 0
                },
                {
                    "sent": "So let's see what's happening here.",
                    "label": 0
                },
                {
                    "sent": "So Munyan's idea is that.",
                    "label": 0
                },
                {
                    "sent": "Obviously if you kept.",
                    "label": 0
                },
                {
                    "sent": "If you've kept all paths of length K -- 1 ending at a vertex, one vertex two and so forth through the vertex N in separate families.",
                    "label": 0
                },
                {
                    "sent": "Then of course you could extend these.",
                    "label": 0
                },
                {
                    "sent": "Two other families with paths of length K ending in Vertex one works too and were sent.",
                    "label": 0
                },
                {
                    "sent": "And the problem with this approach, of course, is that it is as bad as the recursive one.",
                    "label": 0
                },
                {
                    "sent": "So this doesn't work, but.",
                    "label": 0
                }
            ]
        },
        "clip_6": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "The fact that is interesting here and it's Manius Insight is that you don't need to keep track of all paths.",
                    "label": 0
                },
                {
                    "sent": "Becausw to extend the path by one vertex.",
                    "label": 0
                },
                {
                    "sent": "The only thing you need to know is if.",
                    "label": 0
                },
                {
                    "sent": "Is there a path?",
                    "label": 0
                },
                {
                    "sent": "Which ends in a vertex adjacent to the one I want to add.",
                    "label": 0
                },
                {
                    "sent": "Such that it doesn't include the vertex I'm going to add.",
                    "label": 0
                },
                {
                    "sent": "So this is a question you need to ask your family of paths of length K -- 1.",
                    "label": 0
                },
                {
                    "sent": "Is there a path that avoids the vertex?",
                    "label": 0
                },
                {
                    "sent": "But I'm going to add.",
                    "label": 0
                },
                {
                    "sent": "So for instance, if you list all.",
                    "label": 0
                },
                {
                    "sent": "All the paths of length four ending in Vertex 5.",
                    "label": 0
                },
                {
                    "sent": "There are a lot of them.",
                    "label": 0
                },
                {
                    "sent": "As we can imagine.",
                    "label": 0
                },
                {
                    "sent": "And.",
                    "label": 0
                },
                {
                    "sent": "Two now to figure out if we can extend one of these.",
                    "label": 0
                },
                {
                    "sent": "So that it sorry so that it ends in vertex 3, all we need to ask is there a path of length four ending at vertex five which does not go through vertex 3?",
                    "label": 0
                },
                {
                    "sent": "That would have been sufficient for us.",
                    "label": 0
                },
                {
                    "sent": "So what money and does is that he build something that is called a path.",
                    "label": 0
                },
                {
                    "sent": "Represented representatives of these families.",
                    "label": 0
                },
                {
                    "sent": "And these are constructed in the following way.",
                    "label": 0
                },
                {
                    "sent": "You see all the paths at the left.",
                    "label": 0
                },
                {
                    "sent": "You take one of them arbitrarily.",
                    "label": 0
                }
            ]
        },
        "clip_7": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And put it on the top, and I have omitted the last vertex here.",
                    "label": 0
                },
                {
                    "sent": "Yes, to keep it short.",
                    "label": 0
                },
                {
                    "sent": "And.",
                    "label": 0
                },
                {
                    "sent": "Now, if you want to ask, this data structure, is there a path ending at Vertex 5?",
                    "label": 0
                },
                {
                    "sent": "That does not go through vertex 6.",
                    "label": 0
                },
                {
                    "sent": "I would just have looked at this and said yeah great there is.",
                    "label": 0
                },
                {
                    "sent": "But if I wanted to know is there one that avoids vertex 2?",
                    "label": 0
                },
                {
                    "sent": "Then this would not be a sufficient to keep yes this path, so I need for.",
                    "label": 0
                },
                {
                    "sent": "For the example of vertex one, I need to store another path that does not include vertex one.",
                    "label": 0
                },
                {
                    "sent": "And the same for vertex two and the same converting three.",
                    "label": 0
                },
                {
                    "sent": "But then I can ask all kinds of questions for meeting one vertex.",
                    "label": 0
                },
                {
                    "sent": "And you can also do this idea recursively now.",
                    "label": 0
                },
                {
                    "sent": "So you can add.",
                    "label": 0
                },
                {
                    "sent": "Add path that avoids subsets of other vertices.",
                    "label": 0
                },
                {
                    "sent": "So in this example we have that.",
                    "label": 0
                },
                {
                    "sent": "To at the leftmost over here you have that there is a path avoiding vertex one and two.",
                    "label": 0
                },
                {
                    "sent": "Events in Virtex 5.",
                    "label": 0
                },
                {
                    "sent": "And you build this.",
                    "label": 0
                },
                {
                    "sent": "And the point where this the point with this construction is that we can get a bound on this and you can see that it's it's the length of the path.",
                    "label": 0
                },
                {
                    "sent": "Times or raised to the depth, which is the number of vertices you need to avoid.",
                    "label": 0
                },
                {
                    "sent": "So this will be at most KK half to the K half in our example, because what you realized going back to?",
                    "label": 0
                }
            ]
        },
        "clip_8": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "His original idea of these families is that you can instead keep these path representative families.",
                    "label": 0
                },
                {
                    "sent": "Where you keep all paths of length I -- 1.",
                    "label": 0
                },
                {
                    "sent": "That avoids all possible subsets of size K -- I + 1.",
                    "label": 0
                },
                {
                    "sent": "And then you can extend these to other path representatives which have longer paths.",
                    "label": 0
                },
                {
                    "sent": "But avoids one less.",
                    "label": 0
                },
                {
                    "sent": "Vertex.",
                    "label": 0
                },
                {
                    "sent": "And he also has an efficient construction going from.",
                    "label": 0
                },
                {
                    "sent": "Going from all these to the left to those to the right, so we end up in something that is K factorial.",
                    "label": 0
                },
                {
                    "sent": "So this is actually a quite sophisticated argument I think.",
                    "label": 0
                },
                {
                    "sent": "I think some of the later techniques are a lot easier to understand.",
                    "label": 0
                },
                {
                    "sent": "So already the next one.",
                    "label": 0
                }
            ]
        },
        "clip_9": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Which is due to board lender.",
                    "label": 0
                },
                {
                    "sent": "It is conceptually.",
                    "label": 0
                },
                {
                    "sent": "Easier I think.",
                    "label": 0
                },
                {
                    "sent": "So the idea is just to.",
                    "label": 0
                },
                {
                    "sent": "To build depth first search.",
                    "label": 0
                },
                {
                    "sent": "Of the graph.",
                    "label": 0
                },
                {
                    "sent": "And here.",
                    "label": 0
                },
                {
                    "sent": "I have beliefs order from left to right in the order they were discovered by the depth first search.",
                    "label": 0
                },
                {
                    "sent": "And you can first ask is.",
                    "label": 0
                },
                {
                    "sent": "The depth in this tree larger than K -- 1, then yes, you already have a path of length K. But on the other hand, if it's not.",
                    "label": 0
                },
                {
                    "sent": "Then you can use all the parts from the roots to the leaf.",
                    "label": 0
                },
                {
                    "sent": "As bags in a path with decomposition.",
                    "label": 0
                },
                {
                    "sent": "So all these.",
                    "label": 0
                },
                {
                    "sent": "Our bags apart with the conversation and I'm going to tell you a little bit more about what that is.",
                    "label": 0
                },
                {
                    "sent": "But the thing with these bags is that or the thing with the first search you can say is that all edges that you know don't see in this.",
                    "label": 0
                },
                {
                    "sent": "In this in this tree that is in the graph they go.",
                    "label": 0
                },
                {
                    "sent": "Up to ancestors in the tree.",
                    "label": 0
                },
                {
                    "sent": "I mean, that's the property of the lips for search.",
                    "label": 0
                },
                {
                    "sent": "So you can actually do dynamic programming over this.",
                    "label": 0
                },
                {
                    "sent": "These bags in this.",
                    "label": 0
                }
            ]
        },
        "clip_10": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Both with the conversation and it works as follows.",
                    "label": 0
                },
                {
                    "sent": "You go from from over the bags from left to right and you keep a border where you're keeping track of all.",
                    "label": 0
                },
                {
                    "sent": "Possible states, that's all possible ways that the path can intersect with this border and that.",
                    "label": 0
                },
                {
                    "sent": "Hold some information about the notes to the left that you have forgot, but you know that there is some path there.",
                    "label": 0
                },
                {
                    "sent": "Of a certain length.",
                    "label": 0
                },
                {
                    "sent": "And when you move to next bag.",
                    "label": 0
                },
                {
                    "sent": "You can build new states from all the old ones, so the problem is that you need like a factorial States and there is also a factor 2 to the K here involved in actually constructing all these new states.",
                    "label": 0
                },
                {
                    "sent": "So this algorithm is actually a bit worse.",
                    "label": 0
                },
                {
                    "sent": "It's a factor 2K2 to the K, worse than millions, but it's easier to understand I think, and Moreover, the recent results that Danielle mentioned yesterday.",
                    "label": 0
                },
                {
                    "sent": "From from Fox.",
                    "label": 0
                },
                {
                    "sent": "Last Fox.",
                    "label": 0
                },
                {
                    "sent": "So I guess what's that you can?",
                    "label": 0
                },
                {
                    "sent": "You don't need K factorial states.",
                    "label": 0
                },
                {
                    "sent": "You need like 4 to the K states in a randomized algorithm.",
                    "label": 0
                },
                {
                    "sent": "Actually assembling parts so that that would already give us some constant to the K function.",
                    "label": 0
                },
                {
                    "sent": "For this problem.",
                    "label": 0
                },
                {
                    "sent": "So then of course it took a few years and the famous.",
                    "label": 0
                }
            ]
        },
        "clip_11": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "By alone, just translate that Daniel talked about yesterday.",
                    "label": 0
                },
                {
                    "sent": "Let me just brief, briefly mention what it is.",
                    "label": 0
                },
                {
                    "sent": "You have a graph and you.",
                    "label": 0
                },
                {
                    "sent": "Color all the vertices with as many colors as the length of the path you want to find.",
                    "label": 0
                },
                {
                    "sent": "So in this case, we're looking for a path Link 3.",
                    "label": 0
                },
                {
                    "sent": "And there is pretty large probability that some path get rainbow colored.",
                    "label": 0
                },
                {
                    "sent": "That is, it does not have the same color at two vertices, and you can bound this probability and see that it's roughly E to the minus K. So.",
                    "label": 0
                },
                {
                    "sent": "When you have this, you can actually do dynamic programming over the subsets of the colors.",
                    "label": 0
                },
                {
                    "sent": "And repeat these E to the K times.",
                    "label": 0
                },
                {
                    "sent": "Then you will have something like that is to E to the K randomized algorithm.",
                    "label": 0
                },
                {
                    "sent": "And like Daniel said, you can do randomized this as well.",
                    "label": 0
                },
                {
                    "sent": "So that's pretty neat and this has a lot of other applications as well as technique.",
                    "label": 0
                },
                {
                    "sent": "As you well know.",
                    "label": 0
                },
                {
                    "sent": "But what is important for for this talk is that this idea actually.",
                    "label": 0
                },
                {
                    "sent": "Continuous in the following approaches on the problem.",
                    "label": 0
                },
                {
                    "sent": "So to jump along time like.",
                    "label": 0
                }
            ]
        },
        "clip_12": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "12 years.",
                    "label": 0
                },
                {
                    "sent": "From that paper, two independent set of authors.",
                    "label": 0
                },
                {
                    "sent": "Discovered the same technique and one set called.",
                    "label": 0
                },
                {
                    "sent": "It divide and color.",
                    "label": 0
                },
                {
                    "sent": "And the idea is again that you call it the vertices of the graph.",
                    "label": 0
                },
                {
                    "sent": "But this time you use only two colors.",
                    "label": 0
                },
                {
                    "sent": "So you use white sand and black, and if you're looking for a path of length four in this case.",
                    "label": 0
                },
                {
                    "sent": "The good case for you is when the path is such that it first traverses the white vertices and then equally many black vertices.",
                    "label": 0
                },
                {
                    "sent": "In this case, and you can bound this probability and see that it's two to the minus K. And.",
                    "label": 0
                },
                {
                    "sent": "That probability.",
                    "label": 0
                },
                {
                    "sent": "Is a bit better than E to the minus K, So what you can do with this is that you can.",
                    "label": 0
                },
                {
                    "sent": "Build a recursive structure.",
                    "label": 0
                },
                {
                    "sent": "First you try to assemble all paths of.",
                    "label": 0
                },
                {
                    "sent": "Of length K using.",
                    "label": 0
                }
            ]
        },
        "clip_13": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Having solved the problem for all caves.",
                    "label": 0
                },
                {
                    "sent": "So this is you.",
                    "label": 0
                },
                {
                    "sent": "Try all you try.",
                    "label": 0
                },
                {
                    "sent": "A lot of colorings like 2 to the K. To split the graph into halfs and you solve anything, look for K half long paths.",
                    "label": 0
                },
                {
                    "sent": "In these smaller graphs and then of course you can.",
                    "label": 0
                },
                {
                    "sent": "Do this idea recursively.",
                    "label": 0
                },
                {
                    "sent": "And this will end up in a four to the K time algorithm.",
                    "label": 0
                },
                {
                    "sent": "And this can also be derandomized actually using universal sets.",
                    "label": 0
                },
                {
                    "sent": "So to date, this is the fastest deterministic algorithm.",
                    "label": 0
                },
                {
                    "sent": "That I know of.",
                    "label": 0
                },
                {
                    "sent": "For K path and you can also use.",
                    "label": 0
                },
                {
                    "sent": "You can also solve the weighted version here.",
                    "label": 0
                },
                {
                    "sent": "In four to the K, so it's quite powerful technique.",
                    "label": 0
                },
                {
                    "sent": "But the reason that that I'm standing here today is.",
                    "label": 0
                },
                {
                    "sent": "Due to cook this result result.",
                    "label": 0
                },
                {
                    "sent": "That was an I Cup 2008 because he realized something very clever.",
                    "label": 0
                },
                {
                    "sent": "And that.",
                    "label": 0
                }
            ]
        },
        "clip_14": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "That is that instead of trying to construct these.",
                    "label": 1
                },
                {
                    "sent": "Construct these paths.",
                    "label": 0
                },
                {
                    "sent": "Explicitly, you can do it by.",
                    "label": 0
                },
                {
                    "sent": "Algebraic method, where you're implicitly see for the K path by evaluating his son.",
                    "label": 1
                },
                {
                    "sent": "And examples of this include, for instance, finding a triangle in a graph when you use fast matrix multiplication.",
                    "label": 1
                },
                {
                    "sent": "So let.",
                    "label": 0
                }
            ]
        },
        "clip_15": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "See what his algebraic method was.",
                    "label": 0
                },
                {
                    "sent": "So once again, you're given the graph, but instead of assigning colors to the vertices.",
                    "label": 0
                },
                {
                    "sent": "You assign binary vectors of length K. And the thing that is good for your algorithm is when the path that you're searching for.",
                    "label": 0
                },
                {
                    "sent": "Pulses through verticies, which are linear independent of each other.",
                    "label": 0
                },
                {
                    "sent": "So why is this better than coloring vertices?",
                    "label": 0
                },
                {
                    "sent": "Well, it's because the probability that the K path is linear independence is larger than than a constant.",
                    "label": 0
                },
                {
                    "sent": "It has no dependence on K any longer like the earlier.",
                    "label": 0
                },
                {
                    "sent": "The earlier random assignment assignment techniques.",
                    "label": 0
                },
                {
                    "sent": "The problem is that you can no longer assemble this by dynamic dynamic programming.",
                    "label": 0
                },
                {
                    "sent": "You need you need something else to actually find the parts and what coaches does is that he sums over walks and using inclusion exclusion like technique he can.",
                    "label": 0
                },
                {
                    "sent": "He can see that there must be a path.",
                    "label": 0
                },
                {
                    "sent": "So just let us.",
                    "label": 0
                }
            ]
        },
        "clip_16": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Convince ourself about this probability.",
                    "label": 0
                },
                {
                    "sent": "That K path linear independence that it should be larger than a constant which is roughly 1 one, 4th.",
                    "label": 0
                },
                {
                    "sent": "First obviously that one taking one vector, the probability is one that it's linear independent.",
                    "label": 1
                },
                {
                    "sent": "If you take 2 then you have to multiply Y 1 -- 1/2.",
                    "label": 0
                },
                {
                    "sent": "Because that's the.",
                    "label": 0
                },
                {
                    "sent": "The size of the subspace band by one vector.",
                    "label": 0
                },
                {
                    "sent": "And.",
                    "label": 1
                },
                {
                    "sent": "When you add the third one, you see that there is a factor 1 -- 1, one over 4, but this decays exponentially so.",
                    "label": 0
                },
                {
                    "sent": "Pretty soon you're just multiplying ones with each other, more or less so this actually.",
                    "label": 0
                },
                {
                    "sent": "Stops decreasing quickly very quickly and it's always larger than than 1/4.",
                    "label": 0
                },
                {
                    "sent": "So how does this?",
                    "label": 0
                }
            ]
        },
        "clip_17": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Algorithm work.",
                    "label": 0
                },
                {
                    "sent": "So one way of viewing what he is doing is that you take a vector.",
                    "label": 0
                },
                {
                    "sent": "In a binary vector of length K. And you look at the sub graph that's induced.",
                    "label": 1
                },
                {
                    "sent": "By the vertices whose vectors.",
                    "label": 1
                },
                {
                    "sent": "Whose dot product with S?",
                    "label": 0
                },
                {
                    "sent": "Is zero module 2.",
                    "label": 0
                },
                {
                    "sent": "And you count all the K walks in this induced graph.",
                    "label": 0
                },
                {
                    "sent": "And if you just label this by W index S and in the end you just sum over all these and if this sum is odd, then you know there must be a. OK path and if it's zero there may be one, but.",
                    "label": 0
                },
                {
                    "sent": "We will try to understand why this works.",
                    "label": 0
                },
                {
                    "sent": "So first they cannot be any false positives.",
                    "label": 0
                }
            ]
        },
        "clip_18": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "'cause if you have.",
                    "label": 0
                },
                {
                    "sent": "A walk that closes on itself like this 1231.",
                    "label": 0
                },
                {
                    "sent": "Then if you take the.",
                    "label": 0
                },
                {
                    "sent": "The binary vectors associated with these vertices.",
                    "label": 0
                },
                {
                    "sent": "You will see that there are.",
                    "label": 0
                },
                {
                    "sent": "There are two vectors that.",
                    "label": 0
                },
                {
                    "sent": "That are such that their dot product with these are zero, so it actually relates to the nullspace of.",
                    "label": 0
                },
                {
                    "sent": "The vectors to the left and the nullspace always contain an even number.",
                    "label": 0
                },
                {
                    "sent": "Are vectors?",
                    "label": 0
                },
                {
                    "sent": "If it has not full rank.",
                    "label": 0
                },
                {
                    "sent": "So on the other hand, to actually actually have to detect K path.",
                    "label": 0
                },
                {
                    "sent": "You have to get all all the vectors linear independent, but then we know that this happens with probably at least 1/4.",
                    "label": 0
                },
                {
                    "sent": "So, but there's still one.",
                    "label": 0
                }
            ]
        },
        "clip_19": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Big problem here and there is that you can have false negatives for other reasons and that is since we're just counting counting odds and evens here.",
                    "label": 0
                },
                {
                    "sent": "So this algorithm won't work if all K sized vertex sets in use a graph.",
                    "label": 0
                },
                {
                    "sent": "Such that it has an even number of Hamiltonian cycles.",
                    "label": 1
                },
                {
                    "sent": "So that is an even conspiracy of the K paths for us in the graph.",
                    "label": 0
                },
                {
                    "sent": "But still it might happen.",
                    "label": 0
                },
                {
                    "sent": "And then and then it doesn't matter how many times we run it, we will not see it.",
                    "label": 0
                },
                {
                    "sent": "So code is had a fix in this for this problem in is.",
                    "label": 0
                },
                {
                    "sent": "In his cycle paper.",
                    "label": 0
                }
            ]
        },
        "clip_20": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "And that was to actually increase the dimension to add a few extra.",
                    "label": 0
                },
                {
                    "sent": "Elements so that you could label edges as well with these vectors.",
                    "label": 1
                },
                {
                    "sent": "And then he would.",
                    "label": 0
                },
                {
                    "sent": "Would remove address if they were if they were not.",
                    "label": 0
                },
                {
                    "sent": "Zero with this scalar product and he could actually show that by this you could make sure that if you re run the algorithm sufficiently many times then you will detect if it has K path.",
                    "label": 0
                },
                {
                    "sent": "So This is why it has this odd odd number 2.8 three to the K, because it's actually 2 to the one point 5K.",
                    "label": 0
                },
                {
                    "sent": "But short after code is pressed.",
                    "label": 0
                }
            ]
        },
        "clip_21": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "This paper Williams posted a nicer way to resolve this.",
                    "label": 0
                },
                {
                    "sent": "Problem.",
                    "label": 0
                },
                {
                    "sent": "And that is to instead of.",
                    "label": 0
                },
                {
                    "sent": "Yeah, let me just look at look through this important ingredient.",
                    "label": 0
                },
                {
                    "sent": "An you notice that you can use this sort simple lemma which is used to see if a polynomial is identical, easier or not.",
                    "label": 0
                },
                {
                    "sent": "So, so The thing is that if you have a polynomial a multivariate polynomial.",
                    "label": 0
                },
                {
                    "sent": "You can see if it's non zero by plugging in random values and evaluating it and see if it's non 0.",
                    "label": 0
                },
                {
                    "sent": "And this works pretty well due to this.",
                    "label": 0
                },
                {
                    "sent": "This lemma so William's idea was to instead of just counting odds and events whi don't use a larger.",
                    "label": 0
                }
            ]
        },
        "clip_22": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Field that has characteristic too because the only thing that is interesting is that when we add something and even number with an even number of times he wanted to cancel, and that's always the case in a characteristic to field.",
                    "label": 0
                },
                {
                    "sent": "So he also added.",
                    "label": 0
                },
                {
                    "sent": "A lot of values from a large field of characteristic 2 on the edges and vertices and now.",
                    "label": 1
                },
                {
                    "sent": "You can't account works as previously, but you multiply all the all the scalars on the edges and vertices along the walk.",
                    "label": 0
                },
                {
                    "sent": "And then you use this polynomial energy testing machinery to detect if there is a path.",
                    "label": 0
                },
                {
                    "sent": "So this is where you get down to two to the K. So this was really nice and there was also some argument why this probably wouldn't wouldn't be possible to improve so.",
                    "label": 0
                }
            ]
        },
        "clip_23": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Nevertheless, we found.",
                    "label": 0
                },
                {
                    "sent": "Away too.",
                    "label": 0
                },
                {
                    "sent": "To trick this machinery.",
                    "label": 0
                },
                {
                    "sent": "And for simplicity I will only tell you in the case of a bipartite graph.",
                    "label": 0
                },
                {
                    "sent": "But the trick we used is that instead of labeling all vertices with these vectors.",
                    "label": 0
                },
                {
                    "sent": "We just label one color class.",
                    "label": 0
                },
                {
                    "sent": "So in this case we call called.",
                    "label": 0
                },
                {
                    "sent": "Label the Brown ones.",
                    "label": 0
                },
                {
                    "sent": "And now as we're building our walks.",
                    "label": 0
                },
                {
                    "sent": "We just reuse the same algorithm and that's.",
                    "label": 0
                },
                {
                    "sent": "That the code is on Williams proposed, but we're just saving over a smaller.",
                    "label": 0
                },
                {
                    "sent": "A smaller subspace and.",
                    "label": 0
                },
                {
                    "sent": "We always keep the yellow vertices in the graph.",
                    "label": 0
                },
                {
                    "sent": "So for instance, when we build a walk like this.",
                    "label": 0
                },
                {
                    "sent": "We we make sure that we never go back immediately to the to the same yellow one that we came from, but that's easy to accomplish by dynamic programming.",
                    "label": 0
                },
                {
                    "sent": "And we still have a problem that we can.",
                    "label": 0
                },
                {
                    "sent": "End up with paths that go back to a vertex it has previously visited, but we know that it can't be a Brown one because the Brown ones were canceled out by the cooties Williams machinery.",
                    "label": 0
                },
                {
                    "sent": "So if there is a crossing, it must be at a yellow vertex.",
                    "label": 0
                },
                {
                    "sent": "And our observation here is that.",
                    "label": 0
                },
                {
                    "sent": "Whenever this happens.",
                    "label": 0
                },
                {
                    "sent": "There is also.",
                    "label": 0
                },
                {
                    "sent": "There is an orientation on how you pass these positive cycle and you can also traverse this cycle the other direction.",
                    "label": 0
                },
                {
                    "sent": "Which will then, since the graph is undirected.",
                    "label": 0
                },
                {
                    "sent": "Always map to the same monomial and will cancel for that reason instead.",
                    "label": 0
                },
                {
                    "sent": "So there are two different cancellation techniques in.",
                    "label": 0
                },
                {
                    "sent": "In this algorithm.",
                    "label": 0
                },
                {
                    "sent": "But for non bipartite graphs it doesn't work just as clean.",
                    "label": 0
                },
                {
                    "sent": "So the we have a bound that is 1.66 to the K, which I hope can be improved.",
                    "label": 0
                },
                {
                    "sent": "But I don't see how to do it.",
                    "label": 0
                },
                {
                    "sent": "So that was pretty much what I was.",
                    "label": 0
                },
                {
                    "sent": "Planning to say about the kpop problem, but this also exists in.",
                    "label": 0
                },
                {
                    "sent": "In accounting version, of course you can ask how many K paths is there in a graph.",
                    "label": 0
                },
                {
                    "sent": "And.",
                    "label": 0
                },
                {
                    "sent": "There was.",
                    "label": 0
                },
                {
                    "sent": "There was.",
                    "label": 0
                }
            ]
        },
        "clip_24": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Results from 2002 by Flume.",
                    "label": 0
                },
                {
                    "sent": "Android would show that at counting the number of paths is as hard as counting K clicks.",
                    "label": 1
                },
                {
                    "sent": "So there is little hope that we can find fixed parameter parameter algorithms for the counting problem.",
                    "label": 0
                },
                {
                    "sent": "Nevertheless, people have tried to count them.",
                    "label": 0
                },
                {
                    "sent": "So no go alone and the Co author.",
                    "label": 1
                },
                {
                    "sent": "Show that if you use if you try to use the color coding technique that is use.",
                    "label": 0
                },
                {
                    "sent": "You use families of colorings that are balanced to try to approximate the number of paths.",
                    "label": 0
                },
                {
                    "sent": "Then you would at least end up with this end to the K half time, so that doesn't seem to be.",
                    "label": 0
                },
                {
                    "sent": "A way forward.",
                    "label": 0
                }
            ]
        },
        "clip_25": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "But there are also algorithms which achieve this, even exactly counting the number of K path.",
                    "label": 0
                },
                {
                    "sent": "So one of these results is by.",
                    "label": 0
                },
                {
                    "sent": "But Slepski, Williams and Williams.",
                    "label": 0
                },
                {
                    "sent": "And it says that you can count the K paths in time two and to the K half.",
                    "label": 0
                },
                {
                    "sent": "And let me try to explain how this works.",
                    "label": 0
                },
                {
                    "sent": "You first have the graph.",
                    "label": 0
                },
                {
                    "sent": "This and.",
                    "label": 0
                },
                {
                    "sent": "You try to.",
                    "label": 0
                },
                {
                    "sent": "If we're looking for a path of length five, we will take half of these vertices rounded up.",
                    "label": 0
                },
                {
                    "sent": "This will be 3, three, and for every possible way of mapping these three vertices to the graph.",
                    "label": 0
                },
                {
                    "sent": "Like this every ordered way.",
                    "label": 0
                },
                {
                    "sent": "We will map map these to every other vertex along the path.",
                    "label": 0
                },
                {
                    "sent": "And then we will try to answer the question, how many parts are there passing through the green #5, the red #4 and the blue #2 in that order?",
                    "label": 0
                },
                {
                    "sent": "And their insight was that you can map this.",
                    "label": 0
                },
                {
                    "sent": "On a.",
                    "label": 0
                },
                {
                    "sent": "On a permanent problem in a rectangular matrix.",
                    "label": 0
                },
                {
                    "sent": "So what you do is that on the in the rows you put.",
                    "label": 0
                },
                {
                    "sent": "You put the pairs of vertices that you have mapped along the path.",
                    "label": 0
                },
                {
                    "sent": "And you put a zero or a one for the vertices in the columns.",
                    "label": 0
                },
                {
                    "sent": "Whether they can be passed immediately going from the first vertex to the other.",
                    "label": 0
                },
                {
                    "sent": "So, like in this case when you're traveling from the green to the red one, you can do it by going.",
                    "label": 0
                },
                {
                    "sent": "Via the vertex #6 or you can do it via the vertex #3, but you can't do it via the vertex number one, so that is why there is 011 in the row and the same for the.",
                    "label": 0
                },
                {
                    "sent": "For the 2nd row where we're going from vertex four to vertex 2, then you can pass vertex three, or you can pass vertex one, but you can't pass vertex takes.",
                    "label": 0
                },
                {
                    "sent": "And then all.",
                    "label": 0
                },
                {
                    "sent": "All terms in the in the permanent expansion of this matrix.",
                    "label": 0
                },
                {
                    "sent": "You remember the definition of a permanent, so that is the product of always to take one element from each row such that no column is reused.",
                    "label": 0
                },
                {
                    "sent": "So for instance.",
                    "label": 0
                },
                {
                    "sent": "This will be one term and you will sum over all of these.",
                    "label": 0
                },
                {
                    "sent": "And this particular one corresponds to going through.",
                    "label": 0
                },
                {
                    "sent": "56412 So what is the runtime of this algorithm?",
                    "label": 0
                },
                {
                    "sent": "Well, you.",
                    "label": 0
                },
                {
                    "sent": "You went through always too.",
                    "label": 0
                },
                {
                    "sent": "Two orderly map K half vertices in the graph.",
                    "label": 0
                },
                {
                    "sent": "So that's M to the K half.",
                    "label": 0
                },
                {
                    "sent": "And there are also a factor 2 to the K half for solving the permanent problem, because the permanent problem is hard to.",
                    "label": 0
                },
                {
                    "sent": "To solve, there is no polynomial time algorithm.",
                    "label": 0
                },
                {
                    "sent": "But the good news is that it's it's exponential only in the rows here.",
                    "label": 0
                },
                {
                    "sent": "So this technique is interesting because it also works for other subgraphs which has a large independent set, because then you can always put the independent set on the.",
                    "label": 0
                },
                {
                    "sent": "On the columns.",
                    "label": 0
                },
                {
                    "sent": "And.",
                    "label": 0
                }
            ]
        },
        "clip_26": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "My coauthors and myself, we also had a result here, which is slightly better, but it doesn't work for as many cases as.",
                    "label": 0
                },
                {
                    "sent": "Oscilloscope Williams Williams.",
                    "label": 0
                },
                {
                    "sent": "But we have N to the K half divided by K half factorial runtime.",
                    "label": 0
                },
                {
                    "sent": "And let me just try to explain.",
                    "label": 0
                },
                {
                    "sent": "So this is the path we're looking for, and obviously there is a way to divide it in the middle.",
                    "label": 0
                },
                {
                    "sent": "So every path consists of two smaller paths of half the vertices.",
                    "label": 1
                },
                {
                    "sent": "So again.",
                    "label": 0
                },
                {
                    "sent": "We can actually.",
                    "label": 1
                },
                {
                    "sent": "Introduce a quantity that, for us subset of vertices South counts the number of K K / 2 long paths which contains these vertices.",
                    "label": 0
                },
                {
                    "sent": "And the final thing by this quantity is that you can build this.",
                    "label": 0
                },
                {
                    "sent": "For all subsets, S pretty quickly.",
                    "label": 0
                },
                {
                    "sent": "And I'm not going to tell you how you do this, but it's called a fast, safer transform.",
                    "label": 0
                },
                {
                    "sent": "And once you have these quantities.",
                    "label": 0
                },
                {
                    "sent": "There is an inclusion exclusion formula.",
                    "label": 0
                },
                {
                    "sent": "Which will make sure that you only count the two halfs that doesn't intersect each other, and the idea is again this accounting module 2 or whatever you want to call it that.",
                    "label": 0
                },
                {
                    "sent": "When?",
                    "label": 0
                },
                {
                    "sent": "When there is an overlap between these objects, they will be counted an equal number of times, and in this case they will be.",
                    "label": 0
                },
                {
                    "sent": "Counted with signs so we actually get the the the correct number of the naturals.",
                    "label": 0
                },
                {
                    "sent": "Yeah.",
                    "label": 0
                },
                {
                    "sent": "So I don't think I'm going to go into the details here because it's it's quite involved.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                }
            ]
        },
        "clip_27": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Thank you.",
                    "label": 0
                }
            ]
        }
    }
}