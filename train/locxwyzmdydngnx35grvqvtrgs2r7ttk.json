{
    "id": "locxwyzmdydngnx35grvqvtrgs2r7ttk",
    "title": "Substring Filtering for Low-Cost Linked Data Interfaces",
    "info": {
        "author": [
            "Joachim Van Herwegen, Multimedia Lab, Ghent University"
        ],
        "published": "Nov. 10, 2015",
        "recorded": "October 2015",
        "category": [
            "Top->Computer Science->Semantic Web"
        ]
    },
    "url": "http://videolectures.net/iswc2015_van_herwegen_substring_filtering/",
    "segmentation": [
        [
            "OK so hi everyone, today I'm going to talk about substring filtering for local slink data interfaces.",
            "This is going to be.",
            "Somewhat similar to the first presentation, in a way that there's some overlap between the concept and the way.",
            "That's both of them are extensions for a low cost linked data interface."
        ],
        [
            "So I think the interfaces there is no one size fits all.",
            "As has been said before.",
            "Everyone has their own needs and things they expect and need from their server.",
            "And this differs from person to person so.",
            "A way to solve this is to simply have multiple interfaces available.",
            "No, but the problem with all of these existing low-cost interface is that most of them focus on the GPS.",
            "But there are more fun things you can do with other things and be GPS like filters for example.",
            "You often want to do a keyword search in your database to find all matches with specific keywords.",
            "So for this presentation we investigated what is the influence if we add this keyword search substring matching to these local sync data interfaces?"
        ],
        [
            "This presentation is.",
            "They are going to consist mostly of two big parts.",
            "At the first one being the actual extending of the interface and the second one of how we actually implemented the substring matching for.",
            "At the back end database.",
            "An obviously we're going to end with some results and conclusion."
        ],
        [
            "So the first part extending the interface."
        ],
        [
            "So you've probably seen this image already, maybe a few times even by now.",
            "The two main ways to.",
            "Distribute Link data is either often providing a data dump that you just download.",
            "And your local requests on or the sparkle endpoint that can do everything for you."
        ],
        [
            "But there are a lot of options possible in between where you provide partial sparkle solutions.",
            "Some other link traversal options."
        ],
        [
            "And we're going to focus focus on triple path."
        ],
        [
            "Fragments, which is one of these solutions in between."
        ],
        [
            "So triple pattern Fragments provides a server that allows you to ask simple pattern questions.",
            "Only a single pattern can be asked at a time.",
            "Our results are paginated.",
            "There's some metadata that helps you.",
            "Traverse all this data, but it's a responsibility of the client.",
            "Do that actually make use of these pages of simple questions to actually solve a complete sparkle query.",
            "The reason?",
            "That triple pattern fragrance has been made is because this offloads a lot of the loads from the server to the client, which allows the server to provide answers to more clients than it usually cut.",
            "On the on on the lower hardware requirements."
        ],
        [
            "But there are still some problems with the system.",
            "Obviously, since every interface has its own advantages and disadvantages.",
            "So since ripple pattern fragments only supports single patterns.",
            "It has some problems with queries that have filters that are quite selective, and they're important to solve the query efficiently.",
            "So in this case we're looking for all actors that have the word Eastwood in the name.",
            "The way the normal triple pattern fragments.",
            "Algorithm solves this is by first looking which pattern is the easiest one to solve, which in this case is all the actors.",
            "Since there are 85,000 actors.",
            "This requires 850 HTTP requests.",
            "Since we have 100 page.",
            "So this pattern gets answered first.",
            "We get 85,000 actors.",
            "We binds all of these to the next pattern and for each of them request the name, which is another 85,000 requests.",
            "And then finally we get a list of all the actors that ever existed locally and then we filter over all their names to find the ones that have the name eastwards, which obviously has some efficiency problems."
        ],
        [
            "So what we tried out is what happens if we add substring filtering to these triple pattern fragments.",
            "That"
        ],
        [
            "Be situated about there.",
            "So."
        ],
        [
            "The server is exactly the same.",
            "It can still answer these simple questions, but besides that you can also ask it to give you all the objects, all the little objects that contain a specific substring.",
            "And on client sites you obviously have to make use of this new interface.",
            "And we did it with a simple heuristic that tries to estimate.",
            "Will it be more efficient if I first calculated my filter and we did it by looking home?",
            "Any answers order to this filter an how does this amount compare to the pattern is going to be matched against."
        ],
        [
            "So we go back to the same query as before.",
            "And in this case.",
            "The most selective solution is to 1st answer the filter since another data set we had 1800 results.",
            "For them eastwards, again paginated.",
            "So it was 18 requests.",
            "We got 1800 results.",
            "He binds all of them during the next pattern.",
            "Which is another 1800 quests.",
            "An of those we also again binds the results to the next pattern.",
            "And this provides us a full answer of the complete query.",
            "And if you compare it to the previous one, it at 85,000 W in total.",
            "This is a great improvement because it's a lot less requests.",
            "OK."
        ],
        [
            "So.",
            "This is how we extended the interface.",
            "But how did we actually do the whole substring filling parts?"
        ],
        [
            "No, for triple button fragments.",
            "We usually use an HD.",
            "Data format as a back back end stage ET is format has been made to.",
            "Greatly compress a big data set of triples.",
            "No, it's quite compact.",
            "And it actually also already sort of had support to do substring search using an FM index, which I'll explain later.",
            "It wasn't complete yet, but since the framework was already there, we could extend this to have a fully working substring search on this HD files."
        ],
        [
            "Before I get to the FM index, it's based on the Burrows Wheeler transform.",
            "If you should not know it.",
            "It's an algorithm that transform a string.",
            "In such a way that it can be more easily compressed, but without actually losing any kind of information.",
            "So in this case, string banana with last character being an old limiter gets transformed into the string you see there."
        ],
        [
            "And in this example you can already see that similar characters appear more next to each other.",
            "Which if user and length encoding makes it a lot easier to compress."
        ],
        [
            "And no information gets lost since it's still possible to reconstruct the original string if you.",
            "Take this sorted string and add it on top.",
            "You know the last characters in old LTC and then you simply look if you put it on top of the cake beneath OK."
        ],
        [
            "It's going to be for it.",
            "You look up A and assorted string."
        ],
        [
            "It is in.",
            "And so on."
        ],
        [
            "And so it's possible to reconstruct the complete string."
        ],
        [
            "Now, if M index makes use of this transform string, but it adds a bunch of metadata to it, an array and matrix.",
            "And the disadvantages obviously that you do is all of your compression advantages, since you had extra metadata, but the advantages does that.",
            "Offend axes are really efficient algorithm to actually do substance search."
        ],
        [
            "So again, we have the transform string and we want to find all the substrings called in A in there."
        ],
        [
            "I'm not going to explain the whole algorithm, but the end result is that you get a range of integers, so in this case we get five to six and these correspond to the indexes and the transform string."
        ],
        [
            "Of all characters that precedes or battery one finds.",
            "So five and six corresponds to those two days, and in the string banana those two Ace also precedes the pattern and a every time.",
            "Obviously these are the indexes in a transform string.",
            "We want to find in the original string, but this can be done by the method I showed previously.",
            "And it can be set up by storing some intermediate index locations."
        ],
        [
            "But for.",
            "Triples usually have more than one literal in our data sets, so we want to be able to apply this algorithm to a bunch of strings instead of 1 string.",
            "And we do this by if you have a list of strings, list of object literals, we simply concatenate all of them with the limited Ebony in between them and then we have a single string which we can again transform as we did with the other strings."
        ],
        [
            "So the interesting thing about the string is if you sort it, all the delimiters appear in front.",
            "And these."
        ],
        [
            "Limiters corresponds to.",
            "The delimiters correspond to the start of every string in the list.",
            "And."
        ],
        [
            "Actually, because the list is sorted, the even corresponds to the.",
            "Object literals in the same position, so the first limiter corresponds to the start of the first object, second or second object, and so on.",
            "And this will make it a lot easier for us to later on find the results."
        ],
        [
            "So here again, we apply the the pattern matching algorithm.",
            "We again gets a list of integers.",
            "And."
        ],
        [
            "This case it's in NB, an NBR.",
            "In this example, the character precedes the substring A in which is the one we're looking for here.",
            "But in this case, we're less interested, actually, in the exact positions of weather patterns are found, but we're more interested in which object literals have the pattern being found in."
        ],
        [
            "But in this case it's really easy since we can simply count the amount of the limiters that appear before them.",
            "So for the B there is one delimited appearing in front of it, so we know is the first thing in the list.",
            "For the end, there are three delimiters appearing in front of it, so we know it's dirt element in the list.",
            "And because of the extra metadata that has been added to the appendix, is actually really falstone almost instance to calculate."
        ],
        [
            "Since we already had that, we don't.",
            "Also might also try to make it case insensitive, because that gives you more options.",
            "So the problem is obviously life.",
            "Use normal ASCII character set for example.",
            "That uppercase and lowercase characters are next to each other.",
            "So we solved this by simply.",
            "Updating your comparator to interpret these characters as identical.",
            "We actually did this by shifting the ASCII domain abit so and or strings.",
            "They actually are next to each other in value.",
            "And besides that, there were some other changes that we had to do to actually make things work.",
            "Since this sort of screwed up the sorting and sorting is important for the algorithm.",
            "But they are like really end up changes, so I would refer to the paper to actually see them.",
            "If you want to know them."
        ],
        [
            "So this is how we implemented substring search.",
            "We then obviously evaluated them."
        ],
        [
            "And the first thing we did is we compared with the external elastic search server.",
            "The index.",
            "I mean simply other lists of strings that each had an amount of occurrences going from a really low amount with high amounts.",
            "We simply checked how long does it take to find all the strings that correspond to or pattern?",
            "I mean in this case if MX one which is sort of what we expected, since FNX has to hide the big advantage of being completely integrated into the HD data.",
            "Everlasting search is an external index.",
            "Which also has the disadvantage of being really big actually, since the index here was about 60 gigabytes, I think."
        ],
        [
            "Besides that, we obviously also compared.",
            "What is the effect on triple button fragments like?",
            "This is a lot worse.",
            "Is it better?",
            "What happened?",
            "So we have two kinds of queries.",
            "You have the queries.",
            "Well, also substring search actually helps a lot.",
            "These are the queries that have filters in them.",
            "Where the filters are really selective.",
            "And being able to calculate this filter in advance helps lots.",
            "On the other hand, you have the queries where, for example there's no filter or substring search has no.",
            "Influence at all the results.",
            "So we didn't.",
            "We also wanted to make sure that for these queries we didn't make the results a lot worse than it used to be.",
            "So if you look at the results, you can see that for the improved query.",
            "That can be improved a lot, like for one query had the original algorithm had 300,080 P calls necessary to solve its well.",
            "If you could execute the filter 1st and it's like 150 in total.",
            "Which obviously also influenced the execution time.",
            "Well, on the other hand, the.",
            "The query there was no influence, there was no degradation in the result.",
            "It stayed the same.",
            "And it didn't go any slower at all."
        ],
        [
            "The disadvantage though is the memory usage.",
            "Because of the way FM index works, you need to load the entire concatenated string.",
            "And the metadata in memory to be able to actually find the results.",
            "So either for a big string on a small string, the memory usage stays the same for FM index, since it needs to have the full string in memory.",
            "Where is the original implementation for simpler queries had less memory use sections if they need to load all the objects into memory.",
            "And also since we have to store extra metadata.",
            "The file size of the HD will be a bit bigger."
        ],
        [
            "So.",
            "To conclude, we have we tried extending triple pattern fragments within FM and extra low for substring search, and we notice that this is quite efficient.",
            "It's really efficient algorithm to do substring search.",
            "Also it helps a lot in this case.",
            "And so we found out that extending triple pattern fragments can be quite interesting.",
            "Can have a new interface that's no longer triple pattern fragments, but something else.",
            "But it has new advantages and new disadvantages, but maybe someone can use this done because he had all the requirements."
        ],
        [
            "But in the future we.",
            "Still want to extend this?",
            "Obviously for for example, for this case we simply used simple ASCII strings.",
            "If you want to use diacritics or more advanced Unicode stuff.",
            "We would have to do some adaptations.",
            "Also, the client algorithm we use.",
            "This is simple ristic.",
            "Some smarter usage can be done here.",
            "And also it's just something search we actually wanted to have full regular expressions, but we don't have that yet.",
            "And besides this, as has been seen in the first presentation of the session, there are other extensions you can do.",
            "And the really interesting thing.",
            "This is how you can combine these multiple extensions, like what happens if we combine both substring search together with the Bloom filter, for example that Neil talked about.",
            "And this is actually what we did for demo.",
            "Four, I still see, so I highly recommend everyone to come check it out.",
            "Thank you."
        ]
    ],
    "summarization": {
        "clip_0": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "OK so hi everyone, today I'm going to talk about substring filtering for local slink data interfaces.",
                    "label": 1
                },
                {
                    "sent": "This is going to be.",
                    "label": 0
                },
                {
                    "sent": "Somewhat similar to the first presentation, in a way that there's some overlap between the concept and the way.",
                    "label": 0
                },
                {
                    "sent": "That's both of them are extensions for a low cost linked data interface.",
                    "label": 0
                }
            ]
        },
        "clip_1": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So I think the interfaces there is no one size fits all.",
                    "label": 1
                },
                {
                    "sent": "As has been said before.",
                    "label": 0
                },
                {
                    "sent": "Everyone has their own needs and things they expect and need from their server.",
                    "label": 0
                },
                {
                    "sent": "And this differs from person to person so.",
                    "label": 0
                },
                {
                    "sent": "A way to solve this is to simply have multiple interfaces available.",
                    "label": 0
                },
                {
                    "sent": "No, but the problem with all of these existing low-cost interface is that most of them focus on the GPS.",
                    "label": 0
                },
                {
                    "sent": "But there are more fun things you can do with other things and be GPS like filters for example.",
                    "label": 0
                },
                {
                    "sent": "You often want to do a keyword search in your database to find all matches with specific keywords.",
                    "label": 0
                },
                {
                    "sent": "So for this presentation we investigated what is the influence if we add this keyword search substring matching to these local sync data interfaces?",
                    "label": 0
                }
            ]
        },
        "clip_2": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "This presentation is.",
                    "label": 0
                },
                {
                    "sent": "They are going to consist mostly of two big parts.",
                    "label": 0
                },
                {
                    "sent": "At the first one being the actual extending of the interface and the second one of how we actually implemented the substring matching for.",
                    "label": 0
                },
                {
                    "sent": "At the back end database.",
                    "label": 0
                },
                {
                    "sent": "An obviously we're going to end with some results and conclusion.",
                    "label": 0
                }
            ]
        },
        "clip_3": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So the first part extending the interface.",
                    "label": 0
                }
            ]
        },
        "clip_4": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So you've probably seen this image already, maybe a few times even by now.",
                    "label": 0
                },
                {
                    "sent": "The two main ways to.",
                    "label": 0
                },
                {
                    "sent": "Distribute Link data is either often providing a data dump that you just download.",
                    "label": 1
                },
                {
                    "sent": "And your local requests on or the sparkle endpoint that can do everything for you.",
                    "label": 0
                }
            ]
        },
        "clip_5": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "But there are a lot of options possible in between where you provide partial sparkle solutions.",
                    "label": 0
                },
                {
                    "sent": "Some other link traversal options.",
                    "label": 0
                }
            ]
        },
        "clip_6": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And we're going to focus focus on triple path.",
                    "label": 0
                }
            ]
        },
        "clip_7": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Fragments, which is one of these solutions in between.",
                    "label": 0
                }
            ]
        },
        "clip_8": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So triple pattern Fragments provides a server that allows you to ask simple pattern questions.",
                    "label": 1
                },
                {
                    "sent": "Only a single pattern can be asked at a time.",
                    "label": 0
                },
                {
                    "sent": "Our results are paginated.",
                    "label": 0
                },
                {
                    "sent": "There's some metadata that helps you.",
                    "label": 0
                },
                {
                    "sent": "Traverse all this data, but it's a responsibility of the client.",
                    "label": 0
                },
                {
                    "sent": "Do that actually make use of these pages of simple questions to actually solve a complete sparkle query.",
                    "label": 0
                },
                {
                    "sent": "The reason?",
                    "label": 0
                },
                {
                    "sent": "That triple pattern fragrance has been made is because this offloads a lot of the loads from the server to the client, which allows the server to provide answers to more clients than it usually cut.",
                    "label": 0
                },
                {
                    "sent": "On the on on the lower hardware requirements.",
                    "label": 0
                }
            ]
        },
        "clip_9": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "But there are still some problems with the system.",
                    "label": 0
                },
                {
                    "sent": "Obviously, since every interface has its own advantages and disadvantages.",
                    "label": 0
                },
                {
                    "sent": "So since ripple pattern fragments only supports single patterns.",
                    "label": 1
                },
                {
                    "sent": "It has some problems with queries that have filters that are quite selective, and they're important to solve the query efficiently.",
                    "label": 0
                },
                {
                    "sent": "So in this case we're looking for all actors that have the word Eastwood in the name.",
                    "label": 0
                },
                {
                    "sent": "The way the normal triple pattern fragments.",
                    "label": 0
                },
                {
                    "sent": "Algorithm solves this is by first looking which pattern is the easiest one to solve, which in this case is all the actors.",
                    "label": 0
                },
                {
                    "sent": "Since there are 85,000 actors.",
                    "label": 0
                },
                {
                    "sent": "This requires 850 HTTP requests.",
                    "label": 0
                },
                {
                    "sent": "Since we have 100 page.",
                    "label": 0
                },
                {
                    "sent": "So this pattern gets answered first.",
                    "label": 0
                },
                {
                    "sent": "We get 85,000 actors.",
                    "label": 0
                },
                {
                    "sent": "We binds all of these to the next pattern and for each of them request the name, which is another 85,000 requests.",
                    "label": 0
                },
                {
                    "sent": "And then finally we get a list of all the actors that ever existed locally and then we filter over all their names to find the ones that have the name eastwards, which obviously has some efficiency problems.",
                    "label": 0
                }
            ]
        },
        "clip_10": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So what we tried out is what happens if we add substring filtering to these triple pattern fragments.",
                    "label": 0
                },
                {
                    "sent": "That",
                    "label": 0
                }
            ]
        },
        "clip_11": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Be situated about there.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                }
            ]
        },
        "clip_12": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "The server is exactly the same.",
                    "label": 0
                },
                {
                    "sent": "It can still answer these simple questions, but besides that you can also ask it to give you all the objects, all the little objects that contain a specific substring.",
                    "label": 0
                },
                {
                    "sent": "And on client sites you obviously have to make use of this new interface.",
                    "label": 0
                },
                {
                    "sent": "And we did it with a simple heuristic that tries to estimate.",
                    "label": 0
                },
                {
                    "sent": "Will it be more efficient if I first calculated my filter and we did it by looking home?",
                    "label": 0
                },
                {
                    "sent": "Any answers order to this filter an how does this amount compare to the pattern is going to be matched against.",
                    "label": 0
                }
            ]
        },
        "clip_13": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So we go back to the same query as before.",
                    "label": 0
                },
                {
                    "sent": "And in this case.",
                    "label": 0
                },
                {
                    "sent": "The most selective solution is to 1st answer the filter since another data set we had 1800 results.",
                    "label": 0
                },
                {
                    "sent": "For them eastwards, again paginated.",
                    "label": 0
                },
                {
                    "sent": "So it was 18 requests.",
                    "label": 0
                },
                {
                    "sent": "We got 1800 results.",
                    "label": 0
                },
                {
                    "sent": "He binds all of them during the next pattern.",
                    "label": 0
                },
                {
                    "sent": "Which is another 1800 quests.",
                    "label": 0
                },
                {
                    "sent": "An of those we also again binds the results to the next pattern.",
                    "label": 0
                },
                {
                    "sent": "And this provides us a full answer of the complete query.",
                    "label": 0
                },
                {
                    "sent": "And if you compare it to the previous one, it at 85,000 W in total.",
                    "label": 0
                },
                {
                    "sent": "This is a great improvement because it's a lot less requests.",
                    "label": 0
                },
                {
                    "sent": "OK.",
                    "label": 0
                }
            ]
        },
        "clip_14": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "This is how we extended the interface.",
                    "label": 0
                },
                {
                    "sent": "But how did we actually do the whole substring filling parts?",
                    "label": 0
                }
            ]
        },
        "clip_15": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "No, for triple button fragments.",
                    "label": 0
                },
                {
                    "sent": "We usually use an HD.",
                    "label": 0
                },
                {
                    "sent": "Data format as a back back end stage ET is format has been made to.",
                    "label": 1
                },
                {
                    "sent": "Greatly compress a big data set of triples.",
                    "label": 0
                },
                {
                    "sent": "No, it's quite compact.",
                    "label": 0
                },
                {
                    "sent": "And it actually also already sort of had support to do substring search using an FM index, which I'll explain later.",
                    "label": 0
                },
                {
                    "sent": "It wasn't complete yet, but since the framework was already there, we could extend this to have a fully working substring search on this HD files.",
                    "label": 0
                }
            ]
        },
        "clip_16": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Before I get to the FM index, it's based on the Burrows Wheeler transform.",
                    "label": 0
                },
                {
                    "sent": "If you should not know it.",
                    "label": 0
                },
                {
                    "sent": "It's an algorithm that transform a string.",
                    "label": 0
                },
                {
                    "sent": "In such a way that it can be more easily compressed, but without actually losing any kind of information.",
                    "label": 0
                },
                {
                    "sent": "So in this case, string banana with last character being an old limiter gets transformed into the string you see there.",
                    "label": 0
                }
            ]
        },
        "clip_17": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And in this example you can already see that similar characters appear more next to each other.",
                    "label": 0
                },
                {
                    "sent": "Which if user and length encoding makes it a lot easier to compress.",
                    "label": 0
                }
            ]
        },
        "clip_18": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And no information gets lost since it's still possible to reconstruct the original string if you.",
                    "label": 0
                },
                {
                    "sent": "Take this sorted string and add it on top.",
                    "label": 0
                },
                {
                    "sent": "You know the last characters in old LTC and then you simply look if you put it on top of the cake beneath OK.",
                    "label": 0
                }
            ]
        },
        "clip_19": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "It's going to be for it.",
                    "label": 0
                },
                {
                    "sent": "You look up A and assorted string.",
                    "label": 0
                }
            ]
        },
        "clip_20": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "It is in.",
                    "label": 0
                },
                {
                    "sent": "And so on.",
                    "label": 0
                }
            ]
        },
        "clip_21": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And so it's possible to reconstruct the complete string.",
                    "label": 0
                }
            ]
        },
        "clip_22": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Now, if M index makes use of this transform string, but it adds a bunch of metadata to it, an array and matrix.",
                    "label": 0
                },
                {
                    "sent": "And the disadvantages obviously that you do is all of your compression advantages, since you had extra metadata, but the advantages does that.",
                    "label": 0
                },
                {
                    "sent": "Offend axes are really efficient algorithm to actually do substance search.",
                    "label": 0
                }
            ]
        },
        "clip_23": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So again, we have the transform string and we want to find all the substrings called in A in there.",
                    "label": 0
                }
            ]
        },
        "clip_24": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "I'm not going to explain the whole algorithm, but the end result is that you get a range of integers, so in this case we get five to six and these correspond to the indexes and the transform string.",
                    "label": 0
                }
            ]
        },
        "clip_25": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Of all characters that precedes or battery one finds.",
                    "label": 1
                },
                {
                    "sent": "So five and six corresponds to those two days, and in the string banana those two Ace also precedes the pattern and a every time.",
                    "label": 0
                },
                {
                    "sent": "Obviously these are the indexes in a transform string.",
                    "label": 0
                },
                {
                    "sent": "We want to find in the original string, but this can be done by the method I showed previously.",
                    "label": 1
                },
                {
                    "sent": "And it can be set up by storing some intermediate index locations.",
                    "label": 0
                }
            ]
        },
        "clip_26": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "But for.",
                    "label": 0
                },
                {
                    "sent": "Triples usually have more than one literal in our data sets, so we want to be able to apply this algorithm to a bunch of strings instead of 1 string.",
                    "label": 1
                },
                {
                    "sent": "And we do this by if you have a list of strings, list of object literals, we simply concatenate all of them with the limited Ebony in between them and then we have a single string which we can again transform as we did with the other strings.",
                    "label": 0
                }
            ]
        },
        "clip_27": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So the interesting thing about the string is if you sort it, all the delimiters appear in front.",
                    "label": 0
                },
                {
                    "sent": "And these.",
                    "label": 0
                }
            ]
        },
        "clip_28": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Limiters corresponds to.",
                    "label": 0
                },
                {
                    "sent": "The delimiters correspond to the start of every string in the list.",
                    "label": 1
                },
                {
                    "sent": "And.",
                    "label": 0
                }
            ]
        },
        "clip_29": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Actually, because the list is sorted, the even corresponds to the.",
                    "label": 0
                },
                {
                    "sent": "Object literals in the same position, so the first limiter corresponds to the start of the first object, second or second object, and so on.",
                    "label": 1
                },
                {
                    "sent": "And this will make it a lot easier for us to later on find the results.",
                    "label": 0
                }
            ]
        },
        "clip_30": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So here again, we apply the the pattern matching algorithm.",
                    "label": 0
                },
                {
                    "sent": "We again gets a list of integers.",
                    "label": 1
                },
                {
                    "sent": "And.",
                    "label": 0
                }
            ]
        },
        "clip_31": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "This case it's in NB, an NBR.",
                    "label": 0
                },
                {
                    "sent": "In this example, the character precedes the substring A in which is the one we're looking for here.",
                    "label": 0
                },
                {
                    "sent": "But in this case, we're less interested, actually, in the exact positions of weather patterns are found, but we're more interested in which object literals have the pattern being found in.",
                    "label": 0
                }
            ]
        },
        "clip_32": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "But in this case it's really easy since we can simply count the amount of the limiters that appear before them.",
                    "label": 0
                },
                {
                    "sent": "So for the B there is one delimited appearing in front of it, so we know is the first thing in the list.",
                    "label": 0
                },
                {
                    "sent": "For the end, there are three delimiters appearing in front of it, so we know it's dirt element in the list.",
                    "label": 0
                },
                {
                    "sent": "And because of the extra metadata that has been added to the appendix, is actually really falstone almost instance to calculate.",
                    "label": 0
                }
            ]
        },
        "clip_33": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Since we already had that, we don't.",
                    "label": 0
                },
                {
                    "sent": "Also might also try to make it case insensitive, because that gives you more options.",
                    "label": 0
                },
                {
                    "sent": "So the problem is obviously life.",
                    "label": 0
                },
                {
                    "sent": "Use normal ASCII character set for example.",
                    "label": 0
                },
                {
                    "sent": "That uppercase and lowercase characters are next to each other.",
                    "label": 0
                },
                {
                    "sent": "So we solved this by simply.",
                    "label": 0
                },
                {
                    "sent": "Updating your comparator to interpret these characters as identical.",
                    "label": 1
                },
                {
                    "sent": "We actually did this by shifting the ASCII domain abit so and or strings.",
                    "label": 0
                },
                {
                    "sent": "They actually are next to each other in value.",
                    "label": 0
                },
                {
                    "sent": "And besides that, there were some other changes that we had to do to actually make things work.",
                    "label": 1
                },
                {
                    "sent": "Since this sort of screwed up the sorting and sorting is important for the algorithm.",
                    "label": 0
                },
                {
                    "sent": "But they are like really end up changes, so I would refer to the paper to actually see them.",
                    "label": 0
                },
                {
                    "sent": "If you want to know them.",
                    "label": 0
                }
            ]
        },
        "clip_34": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So this is how we implemented substring search.",
                    "label": 0
                },
                {
                    "sent": "We then obviously evaluated them.",
                    "label": 0
                }
            ]
        },
        "clip_35": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And the first thing we did is we compared with the external elastic search server.",
                    "label": 0
                },
                {
                    "sent": "The index.",
                    "label": 0
                },
                {
                    "sent": "I mean simply other lists of strings that each had an amount of occurrences going from a really low amount with high amounts.",
                    "label": 0
                },
                {
                    "sent": "We simply checked how long does it take to find all the strings that correspond to or pattern?",
                    "label": 0
                },
                {
                    "sent": "I mean in this case if MX one which is sort of what we expected, since FNX has to hide the big advantage of being completely integrated into the HD data.",
                    "label": 0
                },
                {
                    "sent": "Everlasting search is an external index.",
                    "label": 0
                },
                {
                    "sent": "Which also has the disadvantage of being really big actually, since the index here was about 60 gigabytes, I think.",
                    "label": 0
                }
            ]
        },
        "clip_36": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Besides that, we obviously also compared.",
                    "label": 0
                },
                {
                    "sent": "What is the effect on triple button fragments like?",
                    "label": 0
                },
                {
                    "sent": "This is a lot worse.",
                    "label": 0
                },
                {
                    "sent": "Is it better?",
                    "label": 0
                },
                {
                    "sent": "What happened?",
                    "label": 0
                },
                {
                    "sent": "So we have two kinds of queries.",
                    "label": 0
                },
                {
                    "sent": "You have the queries.",
                    "label": 0
                },
                {
                    "sent": "Well, also substring search actually helps a lot.",
                    "label": 0
                },
                {
                    "sent": "These are the queries that have filters in them.",
                    "label": 0
                },
                {
                    "sent": "Where the filters are really selective.",
                    "label": 0
                },
                {
                    "sent": "And being able to calculate this filter in advance helps lots.",
                    "label": 0
                },
                {
                    "sent": "On the other hand, you have the queries where, for example there's no filter or substring search has no.",
                    "label": 0
                },
                {
                    "sent": "Influence at all the results.",
                    "label": 0
                },
                {
                    "sent": "So we didn't.",
                    "label": 0
                },
                {
                    "sent": "We also wanted to make sure that for these queries we didn't make the results a lot worse than it used to be.",
                    "label": 0
                },
                {
                    "sent": "So if you look at the results, you can see that for the improved query.",
                    "label": 0
                },
                {
                    "sent": "That can be improved a lot, like for one query had the original algorithm had 300,080 P calls necessary to solve its well.",
                    "label": 0
                },
                {
                    "sent": "If you could execute the filter 1st and it's like 150 in total.",
                    "label": 0
                },
                {
                    "sent": "Which obviously also influenced the execution time.",
                    "label": 0
                },
                {
                    "sent": "Well, on the other hand, the.",
                    "label": 0
                },
                {
                    "sent": "The query there was no influence, there was no degradation in the result.",
                    "label": 0
                },
                {
                    "sent": "It stayed the same.",
                    "label": 0
                },
                {
                    "sent": "And it didn't go any slower at all.",
                    "label": 0
                }
            ]
        },
        "clip_37": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "The disadvantage though is the memory usage.",
                    "label": 0
                },
                {
                    "sent": "Because of the way FM index works, you need to load the entire concatenated string.",
                    "label": 0
                },
                {
                    "sent": "And the metadata in memory to be able to actually find the results.",
                    "label": 0
                },
                {
                    "sent": "So either for a big string on a small string, the memory usage stays the same for FM index, since it needs to have the full string in memory.",
                    "label": 0
                },
                {
                    "sent": "Where is the original implementation for simpler queries had less memory use sections if they need to load all the objects into memory.",
                    "label": 1
                },
                {
                    "sent": "And also since we have to store extra metadata.",
                    "label": 0
                },
                {
                    "sent": "The file size of the HD will be a bit bigger.",
                    "label": 1
                }
            ]
        },
        "clip_38": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "To conclude, we have we tried extending triple pattern fragments within FM and extra low for substring search, and we notice that this is quite efficient.",
                    "label": 1
                },
                {
                    "sent": "It's really efficient algorithm to do substring search.",
                    "label": 0
                },
                {
                    "sent": "Also it helps a lot in this case.",
                    "label": 0
                },
                {
                    "sent": "And so we found out that extending triple pattern fragments can be quite interesting.",
                    "label": 0
                },
                {
                    "sent": "Can have a new interface that's no longer triple pattern fragments, but something else.",
                    "label": 0
                },
                {
                    "sent": "But it has new advantages and new disadvantages, but maybe someone can use this done because he had all the requirements.",
                    "label": 0
                }
            ]
        },
        "clip_39": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "But in the future we.",
                    "label": 0
                },
                {
                    "sent": "Still want to extend this?",
                    "label": 0
                },
                {
                    "sent": "Obviously for for example, for this case we simply used simple ASCII strings.",
                    "label": 0
                },
                {
                    "sent": "If you want to use diacritics or more advanced Unicode stuff.",
                    "label": 1
                },
                {
                    "sent": "We would have to do some adaptations.",
                    "label": 0
                },
                {
                    "sent": "Also, the client algorithm we use.",
                    "label": 1
                },
                {
                    "sent": "This is simple ristic.",
                    "label": 0
                },
                {
                    "sent": "Some smarter usage can be done here.",
                    "label": 1
                },
                {
                    "sent": "And also it's just something search we actually wanted to have full regular expressions, but we don't have that yet.",
                    "label": 0
                },
                {
                    "sent": "And besides this, as has been seen in the first presentation of the session, there are other extensions you can do.",
                    "label": 0
                },
                {
                    "sent": "And the really interesting thing.",
                    "label": 0
                },
                {
                    "sent": "This is how you can combine these multiple extensions, like what happens if we combine both substring search together with the Bloom filter, for example that Neil talked about.",
                    "label": 0
                },
                {
                    "sent": "And this is actually what we did for demo.",
                    "label": 0
                },
                {
                    "sent": "Four, I still see, so I highly recommend everyone to come check it out.",
                    "label": 0
                },
                {
                    "sent": "Thank you.",
                    "label": 0
                }
            ]
        }
    }
}