{
    "id": "ao3ko5wpdihttsvivvpaewb374e734na",
    "title": "Basic algorithms for surface-embedded graphs",
    "info": {
        "author": [
            "Jeff Erickson, Department of Computer Science, University of Illinois at Urbana-Champaign"
        ],
        "published": "Nov. 4, 2013",
        "recorded": "July 2013",
        "category": [
            "Top->Mathematics->Topology"
        ]
    },
    "url": "http://videolectures.net/computationaltopology2013_erickson_algorithms/",
    "segmentation": [
        [
            "So what I want to talk about today and tomorrow are basic algorithms for graphs embedded on surfaces.",
            "I'm going to go kind of fast.",
            "So.",
            "If you want if something is confusing, if something goes too quickly, please stop me and ask questions.",
            "I'm also going to stop about halfway through.",
            "There will be a natural breakpoint in the in the lecture, so if you want to wait and hold your questions until then, that's fine.",
            "If you want to interrupt me, that's fine.",
            "Please don't be shy.",
            "OK, so I want to start off just by establishing some basic vocabulary.",
            "What what surface graphs are a lot of this is very elementary stuff.",
            "If you've got some background in topology, we've got some background in graph theory.",
            "This is all very familiar, so forgive me for saying things that are maybe a little bit too basic."
        ],
        [
            "But I want to just establish some basic vocabulary at the beginning, and so when I talk about surface is I mean connected orientable two manifolds, so formally A2 manifold is a how storage space that's locally homeomorphic to the plane I'm going to restrict myself to things that are connected and compact, and Moreover I'm going to restrict myself to manifolds that are orientable, so none of the.",
            "Surface is I'm going to talk about have a subspace that looks like the Mobius Band.",
            "That's not a, uh, an intrinsic limitation.",
            "Almost everything that I'm going to say applies to non orientable surfaces as well, but this is just to keep the discussion simple.",
            "So locally homeomorphic to the plane just means if there's an Ant wandering around here and the ants can't detect things like gravity or curvature as far as the Ant can tell, it's just walking around and in the plane.",
            "OK."
        ],
        [
            "So, given that I've restricted myself to compact, orientable two manifolds, there's a simple characterization based on the number of handles or tunnels.",
            "So there formally there's something called the genus, which is 0 for the sphere, one for the Taurus, 2 for this thing, free for the pretzel that completely characterizes the surface up to homeomorphism."
        ],
        [
            "So that's a surface.",
            "What's a graph?",
            "Well, everybody knows that a graph is a set of vertices in a set of edges, where every edge is an unordered pair of vertices and everybody is wrong.",
            "This is great for building intuition.",
            "It's great to simplify notation and in terms of proofs, but it has one distinct disadvantage that I want to avoid, which is by definition it's impossible to have two edges that have the same endpoint, because in edge is just a pair of vertices and E is just a set of edges.",
            "It's impossible to have an edge that has both endpoints the same, so I need to move away for a little bit from the textbook definition to allow."
        ],
        [
            "Or general things?",
            "So this is a graph.",
            "This is the way that I, I think it's most useful for thinking about graphs when they're sitting on surface is so that you still have this arbitrary finite set of things which I will call vertices, and I have a second arbitrary finite set of things that I'll call darts.",
            "And intuitively you should think of a dart as an edge plus a direction.",
            "Um, every dart has ahead, which is the vertex that the dart is pointing into, and every dart has a reversal, which is just the dart pointing the other way.",
            "So formally, head is a function from didavi and Rev is an involution, a permutation where everything every orbit has size 2.",
            "And then just to complete the vocabulary, I can define the tail of a dart to be the head of its reversal, and then if I want to talk about edges I mean pairs of darks and their reversals.",
            "If you're used to thinking about, you know oriented simplicial complexes, this is actually not that far off from a reasonable definition of an oriented 1 dimensional simplicial complex or 1 dimensional simplicial set.",
            "Maybe more accurately."
        ],
        [
            "So, um.",
            "If your computer scientists this definition, may you may think this definition is unfamiliar, but again, you're wrong.",
            "This is exactly the definition that computer scientists are used to playing with, because it's an exact description of an adjacency list.",
            "So the standard data structure that that everyone learns as an undergraduate to store a graph.",
            "Is an array that has one entry for every vertex in the graph and a linked list of things that are adjacent to that vertex and all I'm doing is nailing down exactly what those things are, what these things are, just the list of the darts heading into that vertex.",
            "Um so, and to help with navigation, I'm going to connect.",
            "The two records in this data structure that correspond to the same edge by a reversal pointer, so these dashed edges are connecting the two darts that represent this blue edge between Z&W, right?",
            "This is what you already do if you're playing with graphs, you already represent your graphs this way just now.",
            "Remember that this record is corresponding to a dart going from W in dizzy and the other one is going from Z into W. Pam"
        ],
        [
            "Now.",
            "I don't want to think about arbitrary graphs, I mean arbitrary graphs are fun.",
            "Their arbitrary graphs are useful.",
            "I want to restrict myself to graphs that I can draw on surface is.",
            "So what do I mean?",
            "So an embedding is a map from this abstract graph to a structure on the surface where the vertices of the graph are mapped to distinct points on the surface.",
            "Edges are mapped to simple paths that intersect only at the end points where they should and again darts.",
            "I mean orientations of these paths.",
            "And then faces are defined sort of, as everything that isn't a vertex or an edge.",
            "So if I remove the image of the graph from the surface, this decomposes the surface into a bunch of pieces in each of those pieces I'm going to call face.",
            "Now again, not because it's necessarily intrinsic, but just as I want to simplify the discussion."
        ],
        [
            "I'm only going to consider embeddings where these faces are disks.",
            "So I can draw, you know, a graph consisting of 1 edge on any surface I want.",
            "And that that drawing will have exactly 1 face, which looks like a surface with a line segment removed.",
            "I really want to think of things that are in some sense minimal.",
            "So if I have a complicated face, I want to imagine I'm going to throw that away and replace it with the disk, because in general the algorithms I'm going to talk about are going to become slower as the genus of the surface goes up.",
            "So just to keep the genus down, I'll keep the faces to disks, and then I want to refer to this complex.",
            "This cell complex, the vertices, edges and faces as a surface map.",
            "Right, so a graph is just the vertices and edges of map also has faces attached to it.",
            "OK, so we know how to navigate around graphs, but there's."
        ],
        [
            "Additional things that we might want to be able to do when we're navigating around a map.",
            "So just as I did for graphs, I really want to think of darts as the 1st order object that you're playing with when you want to implement these things so."
        ],
        [
            "Even a dart.",
            "One thing you want to be able to do is find its reversal.",
            "Um?"
        ],
        [
            "Another is you want to somehow have access to its endpoints its head in its tail.",
            "The head is just, you know, directly from the definition of the graph as a reversal tail is derived from that.",
            "But now I have faces on either side."
        ],
        [
            "If the dart so which I'm going to call the left and right shores of the dart, which one is left in which one is right depends on the orientation of the dart.",
            "So if I reversed the dart, that would also have to swap the left and right right shores, and that I also need to be able to."
        ],
        [
            "Navigate to other nearby darts.",
            "So I'm going to define a successor permutation.",
            "Which tells you the next dart in counterclockwise order around the same vertex.",
            "So keep the head the same.",
            "And move counterclockwise to the next dart.",
            "And I might also want the predecessor, which is just the inverse of the successor permutation.",
            "And so this gives me a way of sort of navigating are in the neighborhood of a vertex.",
            "But I also have faith."
        ],
        [
            "So I'm going to define another permutation next, which tells me the next dart in clockwise order around the face to my right.",
            "And again, I might want to also have access to previous, which is just the inverse permutation of next.",
            "A man, just like head head tail, is defined in terms of reverse and head and left.",
            "You can define in terms of reversing right.",
            "These two permutations, successor and next."
        ],
        [
            "They are also related by the reversal permutation, so the the the the clockwise successor on the right face is just the reversal of the counterclockwise successor around the head.",
            "OK.",
            "So these are things that I want to just sort of generally have access to when I'm talking about Surface Maps and of data structures that will allow me access to all of these things.",
            "Sort of a minimal intuitive set of."
        ],
        [
            "Things that I might really need to store in addition to, say, the head and the right face.",
            "Is I need to store the darts I need to store this reversal involution and I need to store this next pointer.",
            "And once I have the next pointers, I can sort of follow the orbits of that permutation and that will describe the faces.",
            "And between the description of the faces and the reversal pointers Ascentia Lee.",
            "I have a set of rules for taking a bunch of polygons, pieces of paper and saying, OK, this edge of this piece of paper should be glued to that edge of that piece of paper.",
            "So this is an abstraction of something called the polygonal schema.",
            "Is a way of sewing a surface together out of polygons and this is."
        ],
        [
            "You know the standard way that that surfaces are usually presented in topology textbooks.",
            "The way that you define a Taurus following zeros backwards.",
            "So you take a square and you say the left side and the right side should be glued together and the top side in the bottom side should be glued together.",
            "If I glue the top and bottom first, I get a cylinder and then I glued the left and right sides.",
            "I get a Taurus.",
            "This followed that construction."
        ],
        [
            "Worse.",
            "Now, once I have these permutations then I can define the right face is just the orbit of the next permutation.",
            "The left faces the orbit of Reversive next reverse.",
            "That's another permutation.",
            "Head is the orbit of reverse next, which you might recognize as the successor permutation and tail is the orbit of next Rev, so the vertices and faces just show up implicitly as orbits of various permutations.",
            "Um?",
            "So given I have a dart list and reversal pointers and this next permutation, I can actually store this."
        ],
        [
            "In a standard instance list data structure.",
            "Except now in these pointers will be the next permutation and I'll have pointers back and forth for reversals.",
            "Except."
        ],
        [
            "The one distinction is that instead of.",
            "Instead of having one list of darts per vertex, I'll have one list of darts per face.",
            "And in the normal graph data structures, the order that I store things in the list doesn't matter.",
            "But here the order is actually carrying information."
        ],
        [
            "OK, so standard polygonal schema.",
            "This is standard rules for gluing polygons into surfaces."
        ],
        [
            "This is also familiar if you do computer graphics or geometric modeling.",
            "The way that one specified surface is often is by saying, you know, here are some polygons.",
            "Glue them.",
            "Here's where I'm going to glue the polygons into the graph.",
            "Essentially you have list for taking these things and gluing them together."
        ],
        [
            "And this also dates back to.",
            "You know, Albrecht Durer and then in the 1500s, who's the 1st to sort of unfold convex polyhedra into what are now called Nets.",
            "This is this thing.",
            "On the left is a polygonal schema for a snub cube.",
            "This thing on the right is a familiar, hopefully polygonal schema for the cube.",
            "There's a, there's a different one I could different."
        ],
        [
            "Thing I could use besides a polygonal schema and this one is usually called a rotation system.",
            "Instead of storing the darts reversal, and next I'm going to store the darts reversal and successor.",
            "So instead of storing the order of things around it faces, I'm going to store the order of things around vertices and everything else is going to follow more or less by just a permutation of the names.",
            "So I can still get right and left by composing successor with the reversal pointer, the reversal involution.",
            "I mean, now this really looks like a standard incidence list.",
            "I have one list of per vertex, namely of all the, all the darts coming into that vertex is just as before.",
            "Only now the order actually matters.",
            "This is the formulation that topological graph theory people seem to like more.",
            "I'm not entirely sure why, because it's exactly equivalent."
        ],
        [
            "Um?",
            "I.",
            "If you actually wanted to implement this stuff, I mean you could use."
        ],
        [
            "This you know this rotation system.",
            "You can think of this as a data structure.",
            "You have a list of darts and then the couple of permutations, which I'm maybe just stored in arrays and I can get access to all this other information by by chasing pointers."
        ],
        [
            "It might actually be more useful to think of your data structure as storing all this stuff simultaneously.",
            "So I could overlay.",
            "The natural data structure that I would get from a rotation system that has a list of darts for every vertex.",
            "And on top of that, overlay the incidents list for polygonal schema which has a list of darts for every face.",
            "So this vertical list.",
            "Here this is not the whole data structure, by the way.",
            "This vertical list here is all the darts surrounding face be this horizontal list.",
            "Here is all the darts coming into this vertex.",
            "ZI still have reversal things coming into each other and you can kind of see the if I.",
            "Let's see, it's a reverse than successor is the same as as sorry, reverse and then next is the same as successor.",
            "Some of those arrows may be drawn backwards, but.",
            "And there are lots of names of data structures.",
            "If you've heard of Winged Edge data structures or Half edge data structures requires data structures or doubly connected edge lists, or split edge or facet edge or whatever, these are all variants in the same idea.",
            "So up to implementation details.",
            "They're all identical.",
            "OK. Now there's."
        ],
        [
            "Already been a hint of this, when I say you know that these rotation systems and polygonal schemas are the same.",
            "I don't just mean that sort of syntactically they look identical, it's a set of darts, an involution in a permutation, but there's a.",
            "There's a deeper connection.",
            "Which is I can sort of look at a rotation system and say this is a polygonal schema for something.",
            "And the thing it's a polygonal scheme of four is the dual map.",
            "So if you've seen planar graphs before this is.",
            "This is hopefully familiar to define the dual of a planar map.",
            "I put a vertex inside each face.",
            "I connect two of these dual vertices by an edge if the corresponding faces are separated by an edge, and then naturally these dual vertices and faces carved the plane to faces which turned out the correspond to the original vertices.",
            "Um?",
            "And if you think about it for awhile, you realize also there's a natural way of defining this so that darts in the original map correspond one to one and onto with the darts in the dual map.",
            "Intuitively, the way you define the dual of a dart as you imagine rotating it 90 degrees clockwise around its midpoint.",
            "Come.",
            "Um?",
            "Now it's really common for people to use the phrase dual graph."
        ],
        [
            "And technically that's wrong, because the dual of a graph depends on the way that it's embedded.",
            "So duality is a relationship between graphs between Maps.",
            "So here are two embeddings of the same graph in the plane an in white.",
            "Hopefully you can see this.",
            "There I've drawn the dual map San as graphs, they're different this.",
            "This one has a single vertex, has two loops attached to it.",
            "Here I've loop 1 loop on each of the vertices.",
            "And the other thing to keep in mind, and the reason why I started out saying I don't want to restrict myself to simple graphs.",
            "Is even if I start off with a map whose underlying graph is simple, when I take it's dual, the dual map is not necessarily going to have a simple graph, so I need to be able to deal with non simple graphs almost from the beginning anyway.",
            "Alright."
        ],
        [
            "Um?",
            "So there's this dictionary.",
            "Um, if you if you have.",
            "Any map and you start reasoning about that map.",
            "You can mechanically translate any statement you want to make about that map into a corresponding statement about the dual map.",
            "So whenever you say reverse, I'll say reverse whenever you say successor, I'll say next.",
            "Whenever you say right, I'll say head whenever you say left I say tail when you say head I say right and so on.",
            "OK, now one subtlety here.",
            "I want to define duality so that the dual of the dual is the original map.",
            "And in order to make that work, there is one weird thing.",
            "If you remember the successor permutation around the vertices defines the counterclockwise order around the vertices.",
            "But the next permutation defines the clockwise order around the faces.",
            "An clockwise and counterclockwise are different, so when I do allies, I now in the natural picture I would draw actually have the.",
            "Uh, I've drawn both all the arrows the wrong way, so say that those arrows are wrong.",
            "I've drawn counterclockwise around the faces and clockwise around the vertices, so really you should image."
        ],
        [
            "And that the dual is drawn on the back of the surface.",
            "OK, so that means when you say clockwise I say counter clockwise.",
            "There is some deep connection here to the sign of.",
            "The cat product with the fundamental something or other of the surface, but it just it works to do it this way, so we're just going to do it.",
            "This is the only thing."
        ],
        [
            "You have to keep in mind when you're doing this."
        ],
        [
            "Longer dictionary there are other things you could define.",
            "Some of these will actually see later.",
            "I know this, but you know this this this mechanical translation between."
        ],
        [
            "Maps and their duals really is very very deep, much like the translation in projective geometry between statements about lines and planes, there's always in lines and points in the plane.",
            "There's always some equivalent statement about points and lines in the plane.",
            "Any statement about convex polytopes is convex hulls of points.",
            "There's a corresponding statement about convex polyhedra, intersection of linear halfspaces, any statement about minimisation, linear programs.",
            "There's a corresponding statement about the dual maximization linear program.",
            "It's it's the same thing.",
            "It's just as mechanical and just as in all of those other cases, the right way to think about going from the primal to dual computationally is not.",
            "I have this data structure that represents the first map I'm going to do some processing on it to turn it into the data structure for the dual.",
            "The proper, the proper computation that you need to do is to say."
        ],
        [
            "Now it's the duel.",
            "And the only thing that changes that, I mean the change, is pretty."
        ],
        [
            "Here, watch this cloud.",
            "Horizontal successor downward is next, and if I switch to the dual all I."
        ],
        [
            "All I'm doing is changing that now horizontal is next and down as successor.",
            "OK, so any reasonable data structure for the primal map is a data structure for the dual map.",
            "You're manipulating both of them at the same time.",
            "This sort of.",
            "Careful data structure work also applies to higher dimensional manifold self complexes if you do it the right way.",
            "Which means when you start talking about punk array duality, it isn't weird.",
            "It's just Oh yeah, I just do this done.",
            "OK."
        ],
        [
            "Um?",
            "Now probably the most significant theorem and the most basic theorem about surface Maps is this thing called Oilers orlici formula.",
            "Which of course.",
            "Is not really due to Euler.",
            "There is this wonderful thing called Stigler's law of appana me, which says no scientific discovery is named after its discoverer.",
            "Stigler's law of Konomi was named by Richard Morton after someone named Stigler who studied related thing in sociology called the Matthew Effect is this passage in the Gospel of Matthew.",
            "It says essentially the rich get richer and the poor get poorer.",
            "So Merton named it after Stigler sort of jokingly thinking.",
            "Now this is Stigler.",
            "It's his idea, and in fact it wasn't his idea.",
            "It was his father's idea.",
            "Anyway, so Euler's formula which was originally stated for convex polyhedra by Descartes.",
            "About 120 years before Euler for general map says the number of vertices minus the number of edges plus the number of faces.",
            "Is always the same for any map on the surface of genus G. Namely, it's always this number 2 -- 2 G, and this is this number is referred to as the the Euler characteristic of the map an because it's the same for any map on the same surface.",
            "It's also called the early characteristic of the surface.",
            "OK.",
            "So I'm the two.",
            "Don't know the planar version of this for planar planar Maps, it's equal to two.",
            "I mean this was first discovered by as far as we know first discovered by Descartes was first published by Euler, and Euler attempted to prove it and failed in Carson, attempted to prove it and failed, and my sister attempted to prove it and failed and then later or Co. She attempted to prove it and failed and you can find this proof in Wikipedia and it's wrong.",
            "Um, it was originally the first actual approved for the planar cases do lasiandra everybody hated that proof, so they ignored it?",
            "When Koshy proved that every said OK, finally we have a proof.",
            "Also, coaches proof was originally is actually due to my sister.",
            "So if you go to Wikipedia and look up the proof of Euler's formula.",
            "You'll get coaches proof, which in fact is neither coaches nor approve."
        ],
        [
            "So."
        ],
        [
            "Let me give you the actual first combinatorial proof, which is due to punched out in 1847.",
            "And remarkably, his proof is almost exactly this terse.",
            "This is really, you know, gem of a proof, and it appeared fully formed in this textbook that he wrote, so the proof goes like this.",
            "Pick any spanning tree of the map that you want this thing in blue.",
            "And look at the leftover edges.",
            "The stuff in red.",
            "But look at it in the dual.",
            "I claim that that stuff in red is also a spanning tree of the dual map and the proof of this is pretty straightforward.",
            "Becausw the treaty is connected, the other graph.",
            "See Star can't have any cycles in it, because if Sistar had any cycles in it, then by the Jordan Curve theorem those cycles would separate some vertices on the inside from some vertices on the outside, and that doesn't happen.",
            "And so magically T is a cyclic because it's a spanning tree and therefore see star is connected, because if Sistar were disconnected then I could take the boundary edges of the one of the component set of faces and all of this boundary edges would be in T and that would be a cycle.",
            "So C star is a tree.",
            "Well, we know how many edges a tree has.",
            "It's one less.",
            "The number of vertices, so that's how many edges are in T and we know how many edges the other tree has.",
            "It's one less the number of faces.",
            "So the total number of edges is the number of edges in the tree plus the number of edges in the tree, and we're done.",
            "OK."
        ],
        [
            "Now there's a similar.",
            "The proof for higher genus relies on classifying two manifolds.",
            "It's not that much more complicated, but it would take you 15 minutes or so, which I don't want to spend.",
            "But I'll show you the main component of the proof in a second, but the nice thing about Euler's formula has a couple of obvious corollary's and a couple of maybe not so obvious ones.",
            "The obvious corollary is that just by doing a double careful double counting argument.",
            "You can establish an upper bound on the complexity of the map, provided the underlying map is simple.",
            "So if I have if I have a map whose graph is simple, no parallel edges, no loops, then the number of edges is at most three times the number of vertices minus 6 + 6 times the genus.",
            "And Moreover, if every face is a triangle that that upper bound is exact.",
            "Similarly, have a similar upper bound on the number of faces.",
            "And then you think, well, you know the edges, half the sum of the degrees of the vertices.",
            "So if G is is less than N, then this number of edges is less than 9 N, so there must be a vertex that has degree less than 18.",
            "Despite the pigeonhole principle.",
            "And then by duality, there must be a face that has degree less than 18.",
            "And if you're a little bit more careful, you can actually show that either there's a vertex of degree less than less than eight, or there's a face with degree less than 8.",
            "So you can quickly boil down if you are interested in local structure.",
            "You can always find some local piece of the map that has some small constant complexity.",
            "Right, so one consequence of this, this is not not as well known as it should be.",
            "You can compute the minimum spanning tree of a graph that's embedded that is embeddable on a surface.",
            "In linear time.",
            "So there's an algorithm, actually, the first minimum spanning tree algorithm, which is due to baruca 1926.",
            "One way of phrasing the Baruch's algorithm is, hey, everybody, find your lightest edge, and contract it.",
            "Throw away parallel edges and loops, and recurse.",
            "OK, so there's a slight variant on this that was first described by Sheraton and Tarjan 1976 for planar graphs.",
            "Just find the the edge, find some vertex with minimum degree.",
            "The lightest edge leaving that Vertex has to be part of the minimum spanning tree, so market is part of the minimum spanning tree and contract it delete any.",
            "Delete any that should say heavy parallel edges.",
            "Any any parallel edges that you get from that contraction that are obviously not going to be in the minimum spanning tree.",
            "And now you have a new simple graph with one fewer vertex, so you recurse.",
            "Because the minimum degree vertex has degree at most 18, I can with the right data structures I can find it in constant time.",
            "I can do the contraction in constant time.",
            "Everything works in constant time per vertex.",
            "So."
        ],
        [
            "How does this treecko tree idea generalize to higher genus graphs?",
            "Well, it's no longer the case that the complement of a tree is a dual spanning tree.",
            "It's slightly more complicated than that, so."
        ],
        [
            "Pick your favorite spanning tree of the underlying graph and let's call that T. Now the the."
        ],
        [
            "He left over edges in the dual.",
            "That graph is still going to be connected, so it's going to have a spanning tree.",
            "Pick a spanning tree of that and call it see star.",
            "And now there."
        ],
        [
            "It's going to be a few edges that are leftover that are not in the primal spanning tree, not in the rules pane."
        ],
        [
            "Call those edges L for leftover in this triple tree leftover kotri.",
            "I'm going to call a Trico tree decomposition.",
            "An Euler's formula tells you exactly how many edges are going to be in this leftover set.",
            "It's always going to be exactly twice the genus.",
            "This just falls out of the proof in the planar setting.",
            "What would follow it is there are no leftover edges here.",
            "You get some GF divers.",
            "OK great so I have this.",
            "I chose a spanning tree.",
            "Then I chose a dual spanning tree based on what wasn't in TI.",
            "Could actually reverse."
        ],
        [
            "That I could say start by choosing my spanning tree in the dual, then throw."
        ],
        [
            "Away everything in the dual and choose the primal spanning tree.",
            "What's leftover and then choose."
        ],
        [
            "The left everything's, and this is of course exactly."
        ],
        [
            "Same thing.",
            "OK so I can get any tricot tree decomposition by choosing one or the other spanning trees arbitrarily."
        ],
        [
            "Now what can you do with this?",
            "Well, one of the nice things you can do with these, these tricot tree decompositions, if you imagine taking the edges that are in the spanning tree plus the edges that are in the leftovers.",
            "And ignoring the edges for the moment that are in the spanning coat tree, the dual spanning tree, so T union L. This is a.",
            "This is an object that is sometimes called the cut graph.",
            "If you imagine taking a pair of scissors and cutting the surface along all the edges into Union L, What you're going to get left, what you're going to have leftover is a disk, and you know it's a disk because the faces are glued together along edges that correspond to the dual spanning tree which is connected, and it's acyclic.",
            "So the surface that you get is going to be connected in a cyclic.",
            "Um, maybe an easier way of saying that is if I just delete all the edges in the country, I'm going to be left with a map that has exactly 1 face.",
            "That's the disk you would get if you cut along the cut graph.",
            "I'm now in general the cut graph is going to have lots of sort of hair hanging off it.",
            "I haven't drawn it in this picture, but there might be lots of vertices of degree one.",
            "Things that look locally like trees.",
            "I can remove all of those things and get something called a reduced cut graph that looks much cleaner.",
            "Looks like this.",
            "And this reduced cut graph.",
            "This is sort of a minimal thing that you can cut along to get a disk.",
            "It locally is going to look more or less like the picture here is going to consist of.",
            "Some number of pads meeting at some number of vertices with degree greater than two.",
            "And the total number of paths is only a constant times the genus and the total number of these vertices is only in constant times the genus.",
            "So you can represent this cut graph really compactly and use this to sort of reason about unfolding the surface into into a disk, possibly running some planar graph algorithm in that disk, and then folding things back up.",
            "Came."
        ],
        [
            "Um?",
            "There's actually a.",
            "This is cut grass are nice and intuitive, and this was actually the first problem that I thought of."
        ],
        [
            "But when I started thinking about these sorts of things, how do you construct these things efficiently turns out to be NP hard.",
            "If I want to minimize the length of those edges."
        ],
        [
            "But there's another sort of similar idea that shows up fairly naturally, which is I'd like to find a cycle on the surface that is topologically nontrivial.",
            "So if you remember, I mentioned the Jordan Curve theorem briefly during the discussion about planar Euler's formula, the Jordan Curve theorem says if I draw any closed curve in the plane that separates the plane into two pieces, or if I draw it on the sphere, it separates the sphere into two discs if I draw."
        ],
        [
            "Call a.",
            "Let us cycle on a more complicated surface that may not be true.",
            "Right, so there are cycles that violate the Jordan Curve."
        ],
        [
            "Durham Um and it be nice to find these.",
            "Um, it would be nice to find them so that they are short and the reason that I want them to be short.",
            "Is this strategy for lots of surface graph algorithms finds some short nontrivial cycle figure out whatever solutions you have that interact with that cycle.",
            "Then cut the surface open along that cycle, which makes the genus smaller and recurse on what's left, and eventually I cut my graph down to something planar.",
            "So doing the cut graph thing that was NP hard.",
            "This turns out to be doable in polynomial time.",
            "We can find in fact in near linear time of the genus is constant, the other place where short, short, nontrivial cycles show up.",
            "You'll hear more about this when you talk about persistent technology, but one of the earliest applications was identifying topological noise in reconstructed surface is so is fairly common about 10 years ago, there was a big push and taking clouds of points and sewing them up into surface.",
            "Watertight surface is.",
            "Um, and because of the inherent noise in the measurements that you get from physical devices.",
            "Often the reconstructed surfaces would have additional topological structure that wasn't really there, so Michelangelo's David is a famous example.",
            "Bunch of people from Stanford went to Florence and digitize this thing at quarter millimeter resolution.",
            "David's head is a block of of of marble.",
            "It's a ball topologically, but their first reconstruction of David's head to head genus 164."
        ],
        [
            "Um?",
            "So they needed to find all those little tiny holes that their their reconstruction algorithm found so that they could get rid of them.",
            "So they needed to do exactly what I'm describing here.",
            "OK, so there are two kinds of nontrivial cycles.",
            "There are non contractible cycles and there are non separating cycles, so a contractible cycle means that it bounds a disk just like in the plane.",
            "A separating cycle means it's the boundary of something, but it's not a disk.",
            "If I delete the separating cycle, the surface will fall apart into two pieces, but neither of those pieces is a disk.",
            "And then finally a non separating cycle is 1 where if I cut it, it doesn't separate the cycle at all.",
            "The surface stays connected.",
            "OK, so I'm going to describe.",
            "Um algorithms for finding the shortest non separating cycle in the shortest non contractible cycle and the two are almost the same.",
            "So I'm just going to follow them both and then some later point I'll split and say you do a or you do be depending on what kind of cycle you want.",
            "No.",
            "Since we're interested in finding shortest cycles, I need to assume that."
        ],
        [
            "Edges have lengths and I'm going to assume those links are non negative.",
            "I'm not going to assume that the links satisfy the triangle inequality or correspond to Euclidean metric or from any kind of embedding.",
            "They're just numbers that are greater than 0.",
            "I'm I'm going to use not just any tricot treating composition, but I'm going to use a particular one that I called the greedy country decomposition.",
            "So remember, I can choose whatever spanning tree in whatever spanning country I want, so the one that I'm going to choose as my spanning tree, I'm going to pick a source vertex X, and I'm going to compute the shortest path tree root X using the lengths of the edges as my weights.",
            "And then for the Kotri.",
            "Well, every edge that's not in the spanning tree defines a loop.",
            "So I started X.",
            "Here's you, here's V. Alright, here's some LCA of UV in my in my shortest path tree.",
            "So.",
            "The loop defined by this edge starts at X, goes to V, crosses over to you, and then goes back to X.",
            "Time so for every non tree edge I compute, I can compute the length of this loop by just summing up the shortest path distances at the end points and adding the length of this edge.",
            "And then I can use those those lengths as the weights of my dual edges.",
            "And then compute the maximum spanning tree.",
            "OK, now we already know that we can compute minimum spanning trees in linear time, so therefore we can compute maximum spanning trees in linear time.",
            "The more difficult part is actually computing the shortest path tree.",
            "So if I just use Dijkstra, this runs and then log in time.",
            "If all the links are equal to 1, I don't even need to use Dijkstra conditions, but for search.",
            "And as long as the genus is not too big, you can actually compute the shortest paths in linear time using a separator hierarchy, which is something I will talk about tomorrow.",
            "OK."
        ],
        [
            "So I've already mentioned.",
            "What these some of these things are right?",
            "So I am going to be talking about fundamental loops and fundamental cycles.",
            "These are just the things that you get when you add an entrie edge into a spanning tree.",
            "Loop starts at X and goes around around the edge.",
            "The only difference between a loop in a cycle is that the cycle doesn't include the stick on the lollipop, so I just go to the least common ancestor and then back.",
            "OK."
        ],
        [
            "Now what I eventually want to be able to claim is that the shortest nontrivial cycle actually has the form of one of these fundamenta."
        ],
        [
            "Cycles.",
            "OK, the shortest non trivial loop with the given base point is actually going to be one of these fundamental loops.",
            "So how do I show this?"
        ],
        [
            "This is an observation that was made first by Carsten Thomassen in 1990, called the Three Path condition.",
            "So let's pick two vertices on the face on the surface and pick your favorite three paths between those two points.",
            "Now these three paths define three cycles.",
            "There's a red, blue cycle.",
            "There's a red green cycle, and there's a blue green cycle.",
            "And the the easy observation is that if any two of these cycles are topologically trivial, so is the third.",
            "So if the red blue cycle bounded a disk and the red green cycle bounded a disk, then I can glue those two discs together along the red edge, and I have a disk bounded by the blue green cycle.",
            "Similarly, if the red blue cycle separates off a chunk of the surface and the red blue, I can show this for separating cycles as well."
        ],
        [
            "So the the immediate corollary of this.",
            "Is that if I'm interested in the shortest nontrivial cycle, it has this nice structure that if I pick two points that are as far apart as possible on that cycle.",
            "Those two points decompose the shortest nontrivial cycle into two shortest paths of equal length.",
            "And the proof is, you know, if the red blue thing where I claim this red blue cycle is the shortest non contractible cycle.",
            "If the red and blue things are not shortest paths, then I can throw in this green shortest path.",
            "And by the three path condition, one of these other two cycles will be non contractible and both of those cycles are shorter and I've reached a contradiction.",
            "I started off saying it's the shortest non contractible cycle and ended up finding a shorter one.",
            "OK so um."
        ],
        [
            "This.",
            "Three path condition implies can see this on the third line.",
            "The shortest nontrivial loop with any given base point is one of these fundamental loops.",
            "It consists of a shortest path from X to some antipodal point, which might lie in the middle of an edge.",
            "But I have these two shortest paths.",
            "Which up to the last vertex is a path in the shortest path tree?",
            "Came.",
            "So if I want to compute the shortest nontrivial loop with a given base point.",
            "I build the greedy Kotri decomposition with that base point.",
            "I build the cut graph that I talked about earlier, but I build it in the dual.",
            "Meaning instead of gluing together the primal spanning tree in the leftovers, I glue together the dual spanning tree in the leftovers.",
            "And then I reduce it.",
            "I get rid of all the degree one vertices, But again this is all doing the reduction in the dual.",
            "Came.",
            "And then finally, here's where I have the split.",
            "A particular fundamental loop is non contractible if and only if it's defined by an edge that's in that reduced dual cut graph.",
            "I'm not going to prove that to you, but essentially it's it's contractible.",
            "It cuts off a disk, so it must cut off a tree.",
            "Part of the dual cut graph.",
            "Which wouldn't be there if you're in the reduced part.",
            "I'm in similarly, this fundamental loop is non separating if and only if the edge that defines it doesn't separate the cut graph.",
            "So you could, when you build this reduced cut graph, you could scan it in linear time and find all of the bridges.",
            "All of the edges whose deletion would separate the disconnect the graph.",
            "This is a standard undergraduate homework exercise in depth research.",
            "I'm.",
            "So I build the greedy code tree decomposition, which requires me to compute the lengths of all these loops.",
            "I build this reduced dual cut graph and then in constant time I look at every edge and say, well, does it satisfy this condition and how long is it?",
            "And then after linear time, I'm done.",
            "OK, so sorry all her pellet and I had a much more complicated description of this algorithm, but several years ago Sergio together with Eric Landaverde and Lazarus realized that we were being silly and we just needed to do some stuff.",
            "So this used to be 10 slides.",
            "You probably wish it was still 10 slides."
        ],
        [
            "Now that's if I want to find the shortest non trivial loop of the given base point.",
            "I said I wanted to find the shortest nontrivial cycle we can think of a cycle as a loop by just picking an arbitrary vertex as its base point, but I don't know what base point to pick.",
            "So the obvious thing is just try them all.",
            "If there are N vertices, and for each one I can find the shortest loop and then log in time, then it gives me running time.",
            "But then squared log in and that N squared log in is in fact the best time bound known for arbitrary arbitrary surface is.",
            "Now with Sergio and my former student Erin Chambers, after a long success, succession of other intermediate results, we showed that that using some more sophisticated techniques you can trade off that factor of N for some small polynomial in G and the precise polynomial G depends on whether you think of expected randomized algorithms that succeed with high probability as algorithms or not.",
            "I do, the referee did not.",
            "Which is why we had to add the next line an it maybe for some of these applications.",
            "Actually, you don't really need it to be short S, you just need it to be short in that case, if you're willing to take a factor 2 approximation, you can get rid of all but one factor of G. Alright, so these are the best time bounds known for this particular problem.",
            "There's absolutely no reason to think that these are optimal.",
            "There's no lower bounds except you have to look at the entire graph, so order N, maybe there's some argument that you showed that there's a natural N log in there, but I don't know why the factors of G or in these time bounds.",
            "So if you want a problem to think about after you have tenure, this is this is a good one.",
            "Right, because this these algorithms really do get used everywhere, so getting you know every last shred of of time out of the running time is.",
            "Good yes.",
            "So I'm I'm simplifying here by assuming the genus is less than the number of vertices.",
            "Which means that if I take N to be the number of vertices, then the number of edges is less than 9 N, the number of faces is less than 6 N, so N is just the input size.",
            "If the genus gets really big, then I have to be a bit more careful about how expressed these bounds.",
            "Right, so some of those ends are really Em's numbers of edges.",
            "But if I say, you know, take the genus to be.",
            "Square root of N. Then this is fine.",
            "I mean, typically in practice, UN is on the order for the Michelangelo's David model and is on the orders of hundreds of thousands.",
            "An even with the noise, the genus was only in hundreds.",
            "Alright.",
            "OK."
        ],
        [
            "So this is a reasonable time for me to stop and ask if there are any other questions.",
            "Can you go back to the slide them about the three path and condition?",
            "Maybe I'm asking something that you said before, but but temperatures so high that my brain becomes slow and slow.",
            "So yeah, yeah, so."
        ],
        [
            "Maybe 1 slide after that there was some mention of a antipodal points.",
            "What does it mean on so?",
            "So take your take your cycle.",
            "Pick an arbitrary point and then go halfway around the cycle.",
            "So and and typical just means on the opposite pole.",
            "OK, so so these two points you pick are really exact.",
            "There are two shorter different.",
            "Yeah.",
            "OK, OK, that's putting the cycle exactly in half.",
            "That's exactly the answer to my question, thanks.",
            "You are counting on a number of edges.",
            "When you consider length of path.",
            "Or are you measuring length and so you can do it however you like?",
            "I'm assuming that there is a non negative weight attached to every edge and I'm summing up those weights.",
            "OK so if you like you can set all those weights to be equal to 1 so these points don't have to be vertices.",
            "Points don't have to be vertices.",
            "In fact this theorem is true for arbitrary metrics on smooth surfaces as well, right?",
            "And the only problem is we don't know how to compute shortest paths on arbitrary services.",
            "So and I don't know what other questions to ask.",
            "So normally when I'm teaching a class, I do this horrible experiment where I say I'm going to say.",
            "Are there any questions and then I'm going to shut up?",
            "And it usually takes about 45 seconds, so I have another one.",
            "So right at the beginning, you talked about the fact that there's actually no dual graph defined on.",
            "So do a graph is not really well defined on a graph, But you would need an embedding first, yes, but for what we saw this morning for three connected graphs is probably fine, that's well."
        ],
        [
            "OK, so you have to be a little bit careful here.",
            "For planar graphs.",
            "If it's a planar 3 connected graph as an essentially unique embedding.",
            "For higher genus graphs, even if the graph is 3 connected, that's possible for there to be distinct embeddings.",
            "There's another is more subtle condition that you have to apply, which I I don't remember what the exact condition is, so I don't want to.",
            "Embarrassed myself, but it is.",
            "It is possible to have a 3 connected graph of genus one that has more than one fundamentally different embedding on the Taurus.",
            "And in those cases, the dual the dual graphs might not be the same, and they also don't contain loops.",
            "Yes, that's right, right?",
            "So the the the dual of a.",
            "3 connected graph with representative iti.",
            "At least four is always simple.",
            "Right, so there are some conditions that you can apply that that you have a simple graph and you have a simple dual graph and the dual graph is essentially unique.",
            "Um, but I don't want to start out making those assumptions.",
            "OK."
        ]
    ],
    "summarization": {
        "clip_0": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So what I want to talk about today and tomorrow are basic algorithms for graphs embedded on surfaces.",
                    "label": 1
                },
                {
                    "sent": "I'm going to go kind of fast.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "If you want if something is confusing, if something goes too quickly, please stop me and ask questions.",
                    "label": 0
                },
                {
                    "sent": "I'm also going to stop about halfway through.",
                    "label": 0
                },
                {
                    "sent": "There will be a natural breakpoint in the in the lecture, so if you want to wait and hold your questions until then, that's fine.",
                    "label": 0
                },
                {
                    "sent": "If you want to interrupt me, that's fine.",
                    "label": 0
                },
                {
                    "sent": "Please don't be shy.",
                    "label": 0
                },
                {
                    "sent": "OK, so I want to start off just by establishing some basic vocabulary.",
                    "label": 1
                },
                {
                    "sent": "What what surface graphs are a lot of this is very elementary stuff.",
                    "label": 0
                },
                {
                    "sent": "If you've got some background in topology, we've got some background in graph theory.",
                    "label": 0
                },
                {
                    "sent": "This is all very familiar, so forgive me for saying things that are maybe a little bit too basic.",
                    "label": 0
                }
            ]
        },
        "clip_1": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "But I want to just establish some basic vocabulary at the beginning, and so when I talk about surface is I mean connected orientable two manifolds, so formally A2 manifold is a how storage space that's locally homeomorphic to the plane I'm going to restrict myself to things that are connected and compact, and Moreover I'm going to restrict myself to manifolds that are orientable, so none of the.",
                    "label": 0
                },
                {
                    "sent": "Surface is I'm going to talk about have a subspace that looks like the Mobius Band.",
                    "label": 1
                },
                {
                    "sent": "That's not a, uh, an intrinsic limitation.",
                    "label": 0
                },
                {
                    "sent": "Almost everything that I'm going to say applies to non orientable surfaces as well, but this is just to keep the discussion simple.",
                    "label": 0
                },
                {
                    "sent": "So locally homeomorphic to the plane just means if there's an Ant wandering around here and the ants can't detect things like gravity or curvature as far as the Ant can tell, it's just walking around and in the plane.",
                    "label": 0
                },
                {
                    "sent": "OK.",
                    "label": 0
                }
            ]
        },
        "clip_2": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So, given that I've restricted myself to compact, orientable two manifolds, there's a simple characterization based on the number of handles or tunnels.",
                    "label": 0
                },
                {
                    "sent": "So there formally there's something called the genus, which is 0 for the sphere, one for the Taurus, 2 for this thing, free for the pretzel that completely characterizes the surface up to homeomorphism.",
                    "label": 0
                }
            ]
        },
        "clip_3": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So that's a surface.",
                    "label": 0
                },
                {
                    "sent": "What's a graph?",
                    "label": 0
                },
                {
                    "sent": "Well, everybody knows that a graph is a set of vertices in a set of edges, where every edge is an unordered pair of vertices and everybody is wrong.",
                    "label": 0
                },
                {
                    "sent": "This is great for building intuition.",
                    "label": 0
                },
                {
                    "sent": "It's great to simplify notation and in terms of proofs, but it has one distinct disadvantage that I want to avoid, which is by definition it's impossible to have two edges that have the same endpoint, because in edge is just a pair of vertices and E is just a set of edges.",
                    "label": 1
                },
                {
                    "sent": "It's impossible to have an edge that has both endpoints the same, so I need to move away for a little bit from the textbook definition to allow.",
                    "label": 0
                }
            ]
        },
        "clip_4": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Or general things?",
                    "label": 0
                },
                {
                    "sent": "So this is a graph.",
                    "label": 1
                },
                {
                    "sent": "This is the way that I, I think it's most useful for thinking about graphs when they're sitting on surface is so that you still have this arbitrary finite set of things which I will call vertices, and I have a second arbitrary finite set of things that I'll call darts.",
                    "label": 0
                },
                {
                    "sent": "And intuitively you should think of a dart as an edge plus a direction.",
                    "label": 0
                },
                {
                    "sent": "Um, every dart has ahead, which is the vertex that the dart is pointing into, and every dart has a reversal, which is just the dart pointing the other way.",
                    "label": 0
                },
                {
                    "sent": "So formally, head is a function from didavi and Rev is an involution, a permutation where everything every orbit has size 2.",
                    "label": 1
                },
                {
                    "sent": "And then just to complete the vocabulary, I can define the tail of a dart to be the head of its reversal, and then if I want to talk about edges I mean pairs of darks and their reversals.",
                    "label": 0
                },
                {
                    "sent": "If you're used to thinking about, you know oriented simplicial complexes, this is actually not that far off from a reasonable definition of an oriented 1 dimensional simplicial complex or 1 dimensional simplicial set.",
                    "label": 0
                },
                {
                    "sent": "Maybe more accurately.",
                    "label": 0
                }
            ]
        },
        "clip_5": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So, um.",
                    "label": 0
                },
                {
                    "sent": "If your computer scientists this definition, may you may think this definition is unfamiliar, but again, you're wrong.",
                    "label": 0
                },
                {
                    "sent": "This is exactly the definition that computer scientists are used to playing with, because it's an exact description of an adjacency list.",
                    "label": 1
                },
                {
                    "sent": "So the standard data structure that that everyone learns as an undergraduate to store a graph.",
                    "label": 1
                },
                {
                    "sent": "Is an array that has one entry for every vertex in the graph and a linked list of things that are adjacent to that vertex and all I'm doing is nailing down exactly what those things are, what these things are, just the list of the darts heading into that vertex.",
                    "label": 0
                },
                {
                    "sent": "Um so, and to help with navigation, I'm going to connect.",
                    "label": 0
                },
                {
                    "sent": "The two records in this data structure that correspond to the same edge by a reversal pointer, so these dashed edges are connecting the two darts that represent this blue edge between Z&W, right?",
                    "label": 0
                },
                {
                    "sent": "This is what you already do if you're playing with graphs, you already represent your graphs this way just now.",
                    "label": 0
                },
                {
                    "sent": "Remember that this record is corresponding to a dart going from W in dizzy and the other one is going from Z into W. Pam",
                    "label": 0
                }
            ]
        },
        "clip_6": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Now.",
                    "label": 0
                },
                {
                    "sent": "I don't want to think about arbitrary graphs, I mean arbitrary graphs are fun.",
                    "label": 0
                },
                {
                    "sent": "Their arbitrary graphs are useful.",
                    "label": 0
                },
                {
                    "sent": "I want to restrict myself to graphs that I can draw on surface is.",
                    "label": 0
                },
                {
                    "sent": "So what do I mean?",
                    "label": 0
                },
                {
                    "sent": "So an embedding is a map from this abstract graph to a structure on the surface where the vertices of the graph are mapped to distinct points on the surface.",
                    "label": 1
                },
                {
                    "sent": "Edges are mapped to simple paths that intersect only at the end points where they should and again darts.",
                    "label": 0
                },
                {
                    "sent": "I mean orientations of these paths.",
                    "label": 1
                },
                {
                    "sent": "And then faces are defined sort of, as everything that isn't a vertex or an edge.",
                    "label": 0
                },
                {
                    "sent": "So if I remove the image of the graph from the surface, this decomposes the surface into a bunch of pieces in each of those pieces I'm going to call face.",
                    "label": 0
                },
                {
                    "sent": "Now again, not because it's necessarily intrinsic, but just as I want to simplify the discussion.",
                    "label": 0
                }
            ]
        },
        "clip_7": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "I'm only going to consider embeddings where these faces are disks.",
                    "label": 0
                },
                {
                    "sent": "So I can draw, you know, a graph consisting of 1 edge on any surface I want.",
                    "label": 0
                },
                {
                    "sent": "And that that drawing will have exactly 1 face, which looks like a surface with a line segment removed.",
                    "label": 0
                },
                {
                    "sent": "I really want to think of things that are in some sense minimal.",
                    "label": 0
                },
                {
                    "sent": "So if I have a complicated face, I want to imagine I'm going to throw that away and replace it with the disk, because in general the algorithms I'm going to talk about are going to become slower as the genus of the surface goes up.",
                    "label": 0
                },
                {
                    "sent": "So just to keep the genus down, I'll keep the faces to disks, and then I want to refer to this complex.",
                    "label": 0
                },
                {
                    "sent": "This cell complex, the vertices, edges and faces as a surface map.",
                    "label": 1
                },
                {
                    "sent": "Right, so a graph is just the vertices and edges of map also has faces attached to it.",
                    "label": 0
                },
                {
                    "sent": "OK, so we know how to navigate around graphs, but there's.",
                    "label": 0
                }
            ]
        },
        "clip_8": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Additional things that we might want to be able to do when we're navigating around a map.",
                    "label": 0
                },
                {
                    "sent": "So just as I did for graphs, I really want to think of darts as the 1st order object that you're playing with when you want to implement these things so.",
                    "label": 0
                }
            ]
        },
        "clip_9": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Even a dart.",
                    "label": 0
                },
                {
                    "sent": "One thing you want to be able to do is find its reversal.",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 0
                }
            ]
        },
        "clip_10": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Another is you want to somehow have access to its endpoints its head in its tail.",
                    "label": 0
                },
                {
                    "sent": "The head is just, you know, directly from the definition of the graph as a reversal tail is derived from that.",
                    "label": 0
                },
                {
                    "sent": "But now I have faces on either side.",
                    "label": 0
                }
            ]
        },
        "clip_11": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "If the dart so which I'm going to call the left and right shores of the dart, which one is left in which one is right depends on the orientation of the dart.",
                    "label": 0
                },
                {
                    "sent": "So if I reversed the dart, that would also have to swap the left and right right shores, and that I also need to be able to.",
                    "label": 0
                }
            ]
        },
        "clip_12": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Navigate to other nearby darts.",
                    "label": 0
                },
                {
                    "sent": "So I'm going to define a successor permutation.",
                    "label": 0
                },
                {
                    "sent": "Which tells you the next dart in counterclockwise order around the same vertex.",
                    "label": 0
                },
                {
                    "sent": "So keep the head the same.",
                    "label": 0
                },
                {
                    "sent": "And move counterclockwise to the next dart.",
                    "label": 0
                },
                {
                    "sent": "And I might also want the predecessor, which is just the inverse of the successor permutation.",
                    "label": 0
                },
                {
                    "sent": "And so this gives me a way of sort of navigating are in the neighborhood of a vertex.",
                    "label": 0
                },
                {
                    "sent": "But I also have faith.",
                    "label": 0
                }
            ]
        },
        "clip_13": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So I'm going to define another permutation next, which tells me the next dart in clockwise order around the face to my right.",
                    "label": 0
                },
                {
                    "sent": "And again, I might want to also have access to previous, which is just the inverse permutation of next.",
                    "label": 0
                },
                {
                    "sent": "A man, just like head head tail, is defined in terms of reverse and head and left.",
                    "label": 0
                },
                {
                    "sent": "You can define in terms of reversing right.",
                    "label": 0
                },
                {
                    "sent": "These two permutations, successor and next.",
                    "label": 0
                }
            ]
        },
        "clip_14": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "They are also related by the reversal permutation, so the the the the clockwise successor on the right face is just the reversal of the counterclockwise successor around the head.",
                    "label": 0
                },
                {
                    "sent": "OK.",
                    "label": 0
                },
                {
                    "sent": "So these are things that I want to just sort of generally have access to when I'm talking about Surface Maps and of data structures that will allow me access to all of these things.",
                    "label": 0
                },
                {
                    "sent": "Sort of a minimal intuitive set of.",
                    "label": 0
                }
            ]
        },
        "clip_15": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Things that I might really need to store in addition to, say, the head and the right face.",
                    "label": 0
                },
                {
                    "sent": "Is I need to store the darts I need to store this reversal involution and I need to store this next pointer.",
                    "label": 0
                },
                {
                    "sent": "And once I have the next pointers, I can sort of follow the orbits of that permutation and that will describe the faces.",
                    "label": 0
                },
                {
                    "sent": "And between the description of the faces and the reversal pointers Ascentia Lee.",
                    "label": 0
                },
                {
                    "sent": "I have a set of rules for taking a bunch of polygons, pieces of paper and saying, OK, this edge of this piece of paper should be glued to that edge of that piece of paper.",
                    "label": 0
                },
                {
                    "sent": "So this is an abstraction of something called the polygonal schema.",
                    "label": 0
                },
                {
                    "sent": "Is a way of sewing a surface together out of polygons and this is.",
                    "label": 0
                }
            ]
        },
        "clip_16": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "You know the standard way that that surfaces are usually presented in topology textbooks.",
                    "label": 0
                },
                {
                    "sent": "The way that you define a Taurus following zeros backwards.",
                    "label": 0
                },
                {
                    "sent": "So you take a square and you say the left side and the right side should be glued together and the top side in the bottom side should be glued together.",
                    "label": 0
                },
                {
                    "sent": "If I glue the top and bottom first, I get a cylinder and then I glued the left and right sides.",
                    "label": 0
                },
                {
                    "sent": "I get a Taurus.",
                    "label": 0
                },
                {
                    "sent": "This followed that construction.",
                    "label": 0
                }
            ]
        },
        "clip_17": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Worse.",
                    "label": 0
                },
                {
                    "sent": "Now, once I have these permutations then I can define the right face is just the orbit of the next permutation.",
                    "label": 1
                },
                {
                    "sent": "The left faces the orbit of Reversive next reverse.",
                    "label": 1
                },
                {
                    "sent": "That's another permutation.",
                    "label": 0
                },
                {
                    "sent": "Head is the orbit of reverse next, which you might recognize as the successor permutation and tail is the orbit of next Rev, so the vertices and faces just show up implicitly as orbits of various permutations.",
                    "label": 1
                },
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "So given I have a dart list and reversal pointers and this next permutation, I can actually store this.",
                    "label": 0
                }
            ]
        },
        "clip_18": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "In a standard instance list data structure.",
                    "label": 0
                },
                {
                    "sent": "Except now in these pointers will be the next permutation and I'll have pointers back and forth for reversals.",
                    "label": 0
                },
                {
                    "sent": "Except.",
                    "label": 0
                }
            ]
        },
        "clip_19": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "The one distinction is that instead of.",
                    "label": 0
                },
                {
                    "sent": "Instead of having one list of darts per vertex, I'll have one list of darts per face.",
                    "label": 1
                },
                {
                    "sent": "And in the normal graph data structures, the order that I store things in the list doesn't matter.",
                    "label": 0
                },
                {
                    "sent": "But here the order is actually carrying information.",
                    "label": 0
                }
            ]
        },
        "clip_20": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "OK, so standard polygonal schema.",
                    "label": 0
                },
                {
                    "sent": "This is standard rules for gluing polygons into surfaces.",
                    "label": 0
                }
            ]
        },
        "clip_21": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "This is also familiar if you do computer graphics or geometric modeling.",
                    "label": 1
                },
                {
                    "sent": "The way that one specified surface is often is by saying, you know, here are some polygons.",
                    "label": 0
                },
                {
                    "sent": "Glue them.",
                    "label": 0
                },
                {
                    "sent": "Here's where I'm going to glue the polygons into the graph.",
                    "label": 0
                },
                {
                    "sent": "Essentially you have list for taking these things and gluing them together.",
                    "label": 0
                }
            ]
        },
        "clip_22": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "And this also dates back to.",
                    "label": 0
                },
                {
                    "sent": "You know, Albrecht Durer and then in the 1500s, who's the 1st to sort of unfold convex polyhedra into what are now called Nets.",
                    "label": 0
                },
                {
                    "sent": "This is this thing.",
                    "label": 0
                },
                {
                    "sent": "On the left is a polygonal schema for a snub cube.",
                    "label": 0
                },
                {
                    "sent": "This thing on the right is a familiar, hopefully polygonal schema for the cube.",
                    "label": 1
                },
                {
                    "sent": "There's a, there's a different one I could different.",
                    "label": 0
                }
            ]
        },
        "clip_23": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Thing I could use besides a polygonal schema and this one is usually called a rotation system.",
                    "label": 0
                },
                {
                    "sent": "Instead of storing the darts reversal, and next I'm going to store the darts reversal and successor.",
                    "label": 0
                },
                {
                    "sent": "So instead of storing the order of things around it faces, I'm going to store the order of things around vertices and everything else is going to follow more or less by just a permutation of the names.",
                    "label": 0
                },
                {
                    "sent": "So I can still get right and left by composing successor with the reversal pointer, the reversal involution.",
                    "label": 0
                },
                {
                    "sent": "I mean, now this really looks like a standard incidence list.",
                    "label": 1
                },
                {
                    "sent": "I have one list of per vertex, namely of all the, all the darts coming into that vertex is just as before.",
                    "label": 0
                },
                {
                    "sent": "Only now the order actually matters.",
                    "label": 0
                },
                {
                    "sent": "This is the formulation that topological graph theory people seem to like more.",
                    "label": 0
                },
                {
                    "sent": "I'm not entirely sure why, because it's exactly equivalent.",
                    "label": 0
                }
            ]
        },
        "clip_24": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "I.",
                    "label": 0
                },
                {
                    "sent": "If you actually wanted to implement this stuff, I mean you could use.",
                    "label": 0
                }
            ]
        },
        "clip_25": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "This you know this rotation system.",
                    "label": 1
                },
                {
                    "sent": "You can think of this as a data structure.",
                    "label": 1
                },
                {
                    "sent": "You have a list of darts and then the couple of permutations, which I'm maybe just stored in arrays and I can get access to all this other information by by chasing pointers.",
                    "label": 0
                }
            ]
        },
        "clip_26": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "It might actually be more useful to think of your data structure as storing all this stuff simultaneously.",
                    "label": 0
                },
                {
                    "sent": "So I could overlay.",
                    "label": 0
                },
                {
                    "sent": "The natural data structure that I would get from a rotation system that has a list of darts for every vertex.",
                    "label": 1
                },
                {
                    "sent": "And on top of that, overlay the incidents list for polygonal schema which has a list of darts for every face.",
                    "label": 0
                },
                {
                    "sent": "So this vertical list.",
                    "label": 0
                },
                {
                    "sent": "Here this is not the whole data structure, by the way.",
                    "label": 0
                },
                {
                    "sent": "This vertical list here is all the darts surrounding face be this horizontal list.",
                    "label": 0
                },
                {
                    "sent": "Here is all the darts coming into this vertex.",
                    "label": 0
                },
                {
                    "sent": "ZI still have reversal things coming into each other and you can kind of see the if I.",
                    "label": 0
                },
                {
                    "sent": "Let's see, it's a reverse than successor is the same as as sorry, reverse and then next is the same as successor.",
                    "label": 0
                },
                {
                    "sent": "Some of those arrows may be drawn backwards, but.",
                    "label": 0
                },
                {
                    "sent": "And there are lots of names of data structures.",
                    "label": 0
                },
                {
                    "sent": "If you've heard of Winged Edge data structures or Half edge data structures requires data structures or doubly connected edge lists, or split edge or facet edge or whatever, these are all variants in the same idea.",
                    "label": 0
                },
                {
                    "sent": "So up to implementation details.",
                    "label": 0
                },
                {
                    "sent": "They're all identical.",
                    "label": 0
                },
                {
                    "sent": "OK. Now there's.",
                    "label": 0
                }
            ]
        },
        "clip_27": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Already been a hint of this, when I say you know that these rotation systems and polygonal schemas are the same.",
                    "label": 0
                },
                {
                    "sent": "I don't just mean that sort of syntactically they look identical, it's a set of darts, an involution in a permutation, but there's a.",
                    "label": 0
                },
                {
                    "sent": "There's a deeper connection.",
                    "label": 0
                },
                {
                    "sent": "Which is I can sort of look at a rotation system and say this is a polygonal schema for something.",
                    "label": 0
                },
                {
                    "sent": "And the thing it's a polygonal scheme of four is the dual map.",
                    "label": 0
                },
                {
                    "sent": "So if you've seen planar graphs before this is.",
                    "label": 0
                },
                {
                    "sent": "This is hopefully familiar to define the dual of a planar map.",
                    "label": 0
                },
                {
                    "sent": "I put a vertex inside each face.",
                    "label": 0
                },
                {
                    "sent": "I connect two of these dual vertices by an edge if the corresponding faces are separated by an edge, and then naturally these dual vertices and faces carved the plane to faces which turned out the correspond to the original vertices.",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "And if you think about it for awhile, you realize also there's a natural way of defining this so that darts in the original map correspond one to one and onto with the darts in the dual map.",
                    "label": 0
                },
                {
                    "sent": "Intuitively, the way you define the dual of a dart as you imagine rotating it 90 degrees clockwise around its midpoint.",
                    "label": 0
                },
                {
                    "sent": "Come.",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "Now it's really common for people to use the phrase dual graph.",
                    "label": 0
                }
            ]
        },
        "clip_28": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "And technically that's wrong, because the dual of a graph depends on the way that it's embedded.",
                    "label": 0
                },
                {
                    "sent": "So duality is a relationship between graphs between Maps.",
                    "label": 1
                },
                {
                    "sent": "So here are two embeddings of the same graph in the plane an in white.",
                    "label": 0
                },
                {
                    "sent": "Hopefully you can see this.",
                    "label": 0
                },
                {
                    "sent": "There I've drawn the dual map San as graphs, they're different this.",
                    "label": 0
                },
                {
                    "sent": "This one has a single vertex, has two loops attached to it.",
                    "label": 0
                },
                {
                    "sent": "Here I've loop 1 loop on each of the vertices.",
                    "label": 0
                },
                {
                    "sent": "And the other thing to keep in mind, and the reason why I started out saying I don't want to restrict myself to simple graphs.",
                    "label": 0
                },
                {
                    "sent": "Is even if I start off with a map whose underlying graph is simple, when I take it's dual, the dual map is not necessarily going to have a simple graph, so I need to be able to deal with non simple graphs almost from the beginning anyway.",
                    "label": 0
                },
                {
                    "sent": "Alright.",
                    "label": 0
                }
            ]
        },
        "clip_29": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "So there's this dictionary.",
                    "label": 0
                },
                {
                    "sent": "Um, if you if you have.",
                    "label": 0
                },
                {
                    "sent": "Any map and you start reasoning about that map.",
                    "label": 0
                },
                {
                    "sent": "You can mechanically translate any statement you want to make about that map into a corresponding statement about the dual map.",
                    "label": 0
                },
                {
                    "sent": "So whenever you say reverse, I'll say reverse whenever you say successor, I'll say next.",
                    "label": 0
                },
                {
                    "sent": "Whenever you say right, I'll say head whenever you say left I say tail when you say head I say right and so on.",
                    "label": 0
                },
                {
                    "sent": "OK, now one subtlety here.",
                    "label": 0
                },
                {
                    "sent": "I want to define duality so that the dual of the dual is the original map.",
                    "label": 0
                },
                {
                    "sent": "And in order to make that work, there is one weird thing.",
                    "label": 0
                },
                {
                    "sent": "If you remember the successor permutation around the vertices defines the counterclockwise order around the vertices.",
                    "label": 0
                },
                {
                    "sent": "But the next permutation defines the clockwise order around the faces.",
                    "label": 0
                },
                {
                    "sent": "An clockwise and counterclockwise are different, so when I do allies, I now in the natural picture I would draw actually have the.",
                    "label": 0
                },
                {
                    "sent": "Uh, I've drawn both all the arrows the wrong way, so say that those arrows are wrong.",
                    "label": 0
                },
                {
                    "sent": "I've drawn counterclockwise around the faces and clockwise around the vertices, so really you should image.",
                    "label": 0
                }
            ]
        },
        "clip_30": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And that the dual is drawn on the back of the surface.",
                    "label": 0
                },
                {
                    "sent": "OK, so that means when you say clockwise I say counter clockwise.",
                    "label": 0
                },
                {
                    "sent": "There is some deep connection here to the sign of.",
                    "label": 0
                },
                {
                    "sent": "The cat product with the fundamental something or other of the surface, but it just it works to do it this way, so we're just going to do it.",
                    "label": 0
                },
                {
                    "sent": "This is the only thing.",
                    "label": 0
                }
            ]
        },
        "clip_31": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "You have to keep in mind when you're doing this.",
                    "label": 0
                }
            ]
        },
        "clip_32": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Longer dictionary there are other things you could define.",
                    "label": 0
                },
                {
                    "sent": "Some of these will actually see later.",
                    "label": 0
                },
                {
                    "sent": "I know this, but you know this this this mechanical translation between.",
                    "label": 0
                }
            ]
        },
        "clip_33": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Maps and their duals really is very very deep, much like the translation in projective geometry between statements about lines and planes, there's always in lines and points in the plane.",
                    "label": 0
                },
                {
                    "sent": "There's always some equivalent statement about points and lines in the plane.",
                    "label": 0
                },
                {
                    "sent": "Any statement about convex polytopes is convex hulls of points.",
                    "label": 0
                },
                {
                    "sent": "There's a corresponding statement about convex polyhedra, intersection of linear halfspaces, any statement about minimisation, linear programs.",
                    "label": 0
                },
                {
                    "sent": "There's a corresponding statement about the dual maximization linear program.",
                    "label": 0
                },
                {
                    "sent": "It's it's the same thing.",
                    "label": 0
                },
                {
                    "sent": "It's just as mechanical and just as in all of those other cases, the right way to think about going from the primal to dual computationally is not.",
                    "label": 0
                },
                {
                    "sent": "I have this data structure that represents the first map I'm going to do some processing on it to turn it into the data structure for the dual.",
                    "label": 0
                },
                {
                    "sent": "The proper, the proper computation that you need to do is to say.",
                    "label": 0
                }
            ]
        },
        "clip_34": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Now it's the duel.",
                    "label": 0
                },
                {
                    "sent": "And the only thing that changes that, I mean the change, is pretty.",
                    "label": 0
                }
            ]
        },
        "clip_35": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Here, watch this cloud.",
                    "label": 0
                },
                {
                    "sent": "Horizontal successor downward is next, and if I switch to the dual all I.",
                    "label": 0
                }
            ]
        },
        "clip_36": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "All I'm doing is changing that now horizontal is next and down as successor.",
                    "label": 0
                },
                {
                    "sent": "OK, so any reasonable data structure for the primal map is a data structure for the dual map.",
                    "label": 0
                },
                {
                    "sent": "You're manipulating both of them at the same time.",
                    "label": 0
                },
                {
                    "sent": "This sort of.",
                    "label": 0
                },
                {
                    "sent": "Careful data structure work also applies to higher dimensional manifold self complexes if you do it the right way.",
                    "label": 0
                },
                {
                    "sent": "Which means when you start talking about punk array duality, it isn't weird.",
                    "label": 0
                },
                {
                    "sent": "It's just Oh yeah, I just do this done.",
                    "label": 0
                },
                {
                    "sent": "OK.",
                    "label": 0
                }
            ]
        },
        "clip_37": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "Now probably the most significant theorem and the most basic theorem about surface Maps is this thing called Oilers orlici formula.",
                    "label": 0
                },
                {
                    "sent": "Which of course.",
                    "label": 0
                },
                {
                    "sent": "Is not really due to Euler.",
                    "label": 0
                },
                {
                    "sent": "There is this wonderful thing called Stigler's law of appana me, which says no scientific discovery is named after its discoverer.",
                    "label": 0
                },
                {
                    "sent": "Stigler's law of Konomi was named by Richard Morton after someone named Stigler who studied related thing in sociology called the Matthew Effect is this passage in the Gospel of Matthew.",
                    "label": 0
                },
                {
                    "sent": "It says essentially the rich get richer and the poor get poorer.",
                    "label": 0
                },
                {
                    "sent": "So Merton named it after Stigler sort of jokingly thinking.",
                    "label": 0
                },
                {
                    "sent": "Now this is Stigler.",
                    "label": 0
                },
                {
                    "sent": "It's his idea, and in fact it wasn't his idea.",
                    "label": 0
                },
                {
                    "sent": "It was his father's idea.",
                    "label": 0
                },
                {
                    "sent": "Anyway, so Euler's formula which was originally stated for convex polyhedra by Descartes.",
                    "label": 0
                },
                {
                    "sent": "About 120 years before Euler for general map says the number of vertices minus the number of edges plus the number of faces.",
                    "label": 0
                },
                {
                    "sent": "Is always the same for any map on the surface of genus G. Namely, it's always this number 2 -- 2 G, and this is this number is referred to as the the Euler characteristic of the map an because it's the same for any map on the same surface.",
                    "label": 1
                },
                {
                    "sent": "It's also called the early characteristic of the surface.",
                    "label": 0
                },
                {
                    "sent": "OK.",
                    "label": 0
                },
                {
                    "sent": "So I'm the two.",
                    "label": 0
                },
                {
                    "sent": "Don't know the planar version of this for planar planar Maps, it's equal to two.",
                    "label": 0
                },
                {
                    "sent": "I mean this was first discovered by as far as we know first discovered by Descartes was first published by Euler, and Euler attempted to prove it and failed in Carson, attempted to prove it and failed, and my sister attempted to prove it and failed and then later or Co. She attempted to prove it and failed and you can find this proof in Wikipedia and it's wrong.",
                    "label": 0
                },
                {
                    "sent": "Um, it was originally the first actual approved for the planar cases do lasiandra everybody hated that proof, so they ignored it?",
                    "label": 0
                },
                {
                    "sent": "When Koshy proved that every said OK, finally we have a proof.",
                    "label": 0
                },
                {
                    "sent": "Also, coaches proof was originally is actually due to my sister.",
                    "label": 0
                },
                {
                    "sent": "So if you go to Wikipedia and look up the proof of Euler's formula.",
                    "label": 0
                },
                {
                    "sent": "You'll get coaches proof, which in fact is neither coaches nor approve.",
                    "label": 0
                }
            ]
        },
        "clip_38": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So.",
                    "label": 0
                }
            ]
        },
        "clip_39": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Let me give you the actual first combinatorial proof, which is due to punched out in 1847.",
                    "label": 0
                },
                {
                    "sent": "And remarkably, his proof is almost exactly this terse.",
                    "label": 0
                },
                {
                    "sent": "This is really, you know, gem of a proof, and it appeared fully formed in this textbook that he wrote, so the proof goes like this.",
                    "label": 0
                },
                {
                    "sent": "Pick any spanning tree of the map that you want this thing in blue.",
                    "label": 1
                },
                {
                    "sent": "And look at the leftover edges.",
                    "label": 0
                },
                {
                    "sent": "The stuff in red.",
                    "label": 0
                },
                {
                    "sent": "But look at it in the dual.",
                    "label": 0
                },
                {
                    "sent": "I claim that that stuff in red is also a spanning tree of the dual map and the proof of this is pretty straightforward.",
                    "label": 1
                },
                {
                    "sent": "Becausw the treaty is connected, the other graph.",
                    "label": 0
                },
                {
                    "sent": "See Star can't have any cycles in it, because if Sistar had any cycles in it, then by the Jordan Curve theorem those cycles would separate some vertices on the inside from some vertices on the outside, and that doesn't happen.",
                    "label": 0
                },
                {
                    "sent": "And so magically T is a cyclic because it's a spanning tree and therefore see star is connected, because if Sistar were disconnected then I could take the boundary edges of the one of the component set of faces and all of this boundary edges would be in T and that would be a cycle.",
                    "label": 1
                },
                {
                    "sent": "So C star is a tree.",
                    "label": 0
                },
                {
                    "sent": "Well, we know how many edges a tree has.",
                    "label": 0
                },
                {
                    "sent": "It's one less.",
                    "label": 0
                },
                {
                    "sent": "The number of vertices, so that's how many edges are in T and we know how many edges the other tree has.",
                    "label": 0
                },
                {
                    "sent": "It's one less the number of faces.",
                    "label": 0
                },
                {
                    "sent": "So the total number of edges is the number of edges in the tree plus the number of edges in the tree, and we're done.",
                    "label": 0
                },
                {
                    "sent": "OK.",
                    "label": 0
                }
            ]
        },
        "clip_40": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Now there's a similar.",
                    "label": 0
                },
                {
                    "sent": "The proof for higher genus relies on classifying two manifolds.",
                    "label": 0
                },
                {
                    "sent": "It's not that much more complicated, but it would take you 15 minutes or so, which I don't want to spend.",
                    "label": 0
                },
                {
                    "sent": "But I'll show you the main component of the proof in a second, but the nice thing about Euler's formula has a couple of obvious corollary's and a couple of maybe not so obvious ones.",
                    "label": 0
                },
                {
                    "sent": "The obvious corollary is that just by doing a double careful double counting argument.",
                    "label": 0
                },
                {
                    "sent": "You can establish an upper bound on the complexity of the map, provided the underlying map is simple.",
                    "label": 0
                },
                {
                    "sent": "So if I have if I have a map whose graph is simple, no parallel edges, no loops, then the number of edges is at most three times the number of vertices minus 6 + 6 times the genus.",
                    "label": 0
                },
                {
                    "sent": "And Moreover, if every face is a triangle that that upper bound is exact.",
                    "label": 1
                },
                {
                    "sent": "Similarly, have a similar upper bound on the number of faces.",
                    "label": 0
                },
                {
                    "sent": "And then you think, well, you know the edges, half the sum of the degrees of the vertices.",
                    "label": 0
                },
                {
                    "sent": "So if G is is less than N, then this number of edges is less than 9 N, so there must be a vertex that has degree less than 18.",
                    "label": 0
                },
                {
                    "sent": "Despite the pigeonhole principle.",
                    "label": 0
                },
                {
                    "sent": "And then by duality, there must be a face that has degree less than 18.",
                    "label": 1
                },
                {
                    "sent": "And if you're a little bit more careful, you can actually show that either there's a vertex of degree less than less than eight, or there's a face with degree less than 8.",
                    "label": 0
                },
                {
                    "sent": "So you can quickly boil down if you are interested in local structure.",
                    "label": 0
                },
                {
                    "sent": "You can always find some local piece of the map that has some small constant complexity.",
                    "label": 0
                },
                {
                    "sent": "Right, so one consequence of this, this is not not as well known as it should be.",
                    "label": 0
                },
                {
                    "sent": "You can compute the minimum spanning tree of a graph that's embedded that is embeddable on a surface.",
                    "label": 0
                },
                {
                    "sent": "In linear time.",
                    "label": 0
                },
                {
                    "sent": "So there's an algorithm, actually, the first minimum spanning tree algorithm, which is due to baruca 1926.",
                    "label": 0
                },
                {
                    "sent": "One way of phrasing the Baruch's algorithm is, hey, everybody, find your lightest edge, and contract it.",
                    "label": 0
                },
                {
                    "sent": "Throw away parallel edges and loops, and recurse.",
                    "label": 1
                },
                {
                    "sent": "OK, so there's a slight variant on this that was first described by Sheraton and Tarjan 1976 for planar graphs.",
                    "label": 0
                },
                {
                    "sent": "Just find the the edge, find some vertex with minimum degree.",
                    "label": 0
                },
                {
                    "sent": "The lightest edge leaving that Vertex has to be part of the minimum spanning tree, so market is part of the minimum spanning tree and contract it delete any.",
                    "label": 1
                },
                {
                    "sent": "Delete any that should say heavy parallel edges.",
                    "label": 1
                },
                {
                    "sent": "Any any parallel edges that you get from that contraction that are obviously not going to be in the minimum spanning tree.",
                    "label": 0
                },
                {
                    "sent": "And now you have a new simple graph with one fewer vertex, so you recurse.",
                    "label": 0
                },
                {
                    "sent": "Because the minimum degree vertex has degree at most 18, I can with the right data structures I can find it in constant time.",
                    "label": 0
                },
                {
                    "sent": "I can do the contraction in constant time.",
                    "label": 0
                },
                {
                    "sent": "Everything works in constant time per vertex.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                }
            ]
        },
        "clip_41": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "How does this treecko tree idea generalize to higher genus graphs?",
                    "label": 0
                },
                {
                    "sent": "Well, it's no longer the case that the complement of a tree is a dual spanning tree.",
                    "label": 1
                },
                {
                    "sent": "It's slightly more complicated than that, so.",
                    "label": 0
                }
            ]
        },
        "clip_42": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Pick your favorite spanning tree of the underlying graph and let's call that T. Now the the.",
                    "label": 0
                }
            ]
        },
        "clip_43": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "He left over edges in the dual.",
                    "label": 0
                },
                {
                    "sent": "That graph is still going to be connected, so it's going to have a spanning tree.",
                    "label": 1
                },
                {
                    "sent": "Pick a spanning tree of that and call it see star.",
                    "label": 1
                },
                {
                    "sent": "And now there.",
                    "label": 0
                }
            ]
        },
        "clip_44": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "It's going to be a few edges that are leftover that are not in the primal spanning tree, not in the rules pane.",
                    "label": 0
                }
            ]
        },
        "clip_45": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Call those edges L for leftover in this triple tree leftover kotri.",
                    "label": 0
                },
                {
                    "sent": "I'm going to call a Trico tree decomposition.",
                    "label": 0
                },
                {
                    "sent": "An Euler's formula tells you exactly how many edges are going to be in this leftover set.",
                    "label": 1
                },
                {
                    "sent": "It's always going to be exactly twice the genus.",
                    "label": 0
                },
                {
                    "sent": "This just falls out of the proof in the planar setting.",
                    "label": 1
                },
                {
                    "sent": "What would follow it is there are no leftover edges here.",
                    "label": 0
                },
                {
                    "sent": "You get some GF divers.",
                    "label": 0
                },
                {
                    "sent": "OK great so I have this.",
                    "label": 1
                },
                {
                    "sent": "I chose a spanning tree.",
                    "label": 1
                },
                {
                    "sent": "Then I chose a dual spanning tree based on what wasn't in TI.",
                    "label": 0
                },
                {
                    "sent": "Could actually reverse.",
                    "label": 0
                }
            ]
        },
        "clip_46": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "That I could say start by choosing my spanning tree in the dual, then throw.",
                    "label": 0
                }
            ]
        },
        "clip_47": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Away everything in the dual and choose the primal spanning tree.",
                    "label": 0
                },
                {
                    "sent": "What's leftover and then choose.",
                    "label": 0
                }
            ]
        },
        "clip_48": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "The left everything's, and this is of course exactly.",
                    "label": 0
                }
            ]
        },
        "clip_49": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Same thing.",
                    "label": 0
                },
                {
                    "sent": "OK so I can get any tricot tree decomposition by choosing one or the other spanning trees arbitrarily.",
                    "label": 0
                }
            ]
        },
        "clip_50": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Now what can you do with this?",
                    "label": 0
                },
                {
                    "sent": "Well, one of the nice things you can do with these, these tricot tree decompositions, if you imagine taking the edges that are in the spanning tree plus the edges that are in the leftovers.",
                    "label": 0
                },
                {
                    "sent": "And ignoring the edges for the moment that are in the spanning coat tree, the dual spanning tree, so T union L. This is a.",
                    "label": 0
                },
                {
                    "sent": "This is an object that is sometimes called the cut graph.",
                    "label": 1
                },
                {
                    "sent": "If you imagine taking a pair of scissors and cutting the surface along all the edges into Union L, What you're going to get left, what you're going to have leftover is a disk, and you know it's a disk because the faces are glued together along edges that correspond to the dual spanning tree which is connected, and it's acyclic.",
                    "label": 0
                },
                {
                    "sent": "So the surface that you get is going to be connected in a cyclic.",
                    "label": 0
                },
                {
                    "sent": "Um, maybe an easier way of saying that is if I just delete all the edges in the country, I'm going to be left with a map that has exactly 1 face.",
                    "label": 0
                },
                {
                    "sent": "That's the disk you would get if you cut along the cut graph.",
                    "label": 0
                },
                {
                    "sent": "I'm now in general the cut graph is going to have lots of sort of hair hanging off it.",
                    "label": 0
                },
                {
                    "sent": "I haven't drawn it in this picture, but there might be lots of vertices of degree one.",
                    "label": 0
                },
                {
                    "sent": "Things that look locally like trees.",
                    "label": 0
                },
                {
                    "sent": "I can remove all of those things and get something called a reduced cut graph that looks much cleaner.",
                    "label": 0
                },
                {
                    "sent": "Looks like this.",
                    "label": 0
                },
                {
                    "sent": "And this reduced cut graph.",
                    "label": 1
                },
                {
                    "sent": "This is sort of a minimal thing that you can cut along to get a disk.",
                    "label": 0
                },
                {
                    "sent": "It locally is going to look more or less like the picture here is going to consist of.",
                    "label": 0
                },
                {
                    "sent": "Some number of pads meeting at some number of vertices with degree greater than two.",
                    "label": 0
                },
                {
                    "sent": "And the total number of paths is only a constant times the genus and the total number of these vertices is only in constant times the genus.",
                    "label": 0
                },
                {
                    "sent": "So you can represent this cut graph really compactly and use this to sort of reason about unfolding the surface into into a disk, possibly running some planar graph algorithm in that disk, and then folding things back up.",
                    "label": 0
                },
                {
                    "sent": "Came.",
                    "label": 0
                }
            ]
        },
        "clip_51": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "There's actually a.",
                    "label": 0
                },
                {
                    "sent": "This is cut grass are nice and intuitive, and this was actually the first problem that I thought of.",
                    "label": 0
                }
            ]
        },
        "clip_52": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "But when I started thinking about these sorts of things, how do you construct these things efficiently turns out to be NP hard.",
                    "label": 0
                },
                {
                    "sent": "If I want to minimize the length of those edges.",
                    "label": 0
                }
            ]
        },
        "clip_53": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "But there's another sort of similar idea that shows up fairly naturally, which is I'd like to find a cycle on the surface that is topologically nontrivial.",
                    "label": 0
                },
                {
                    "sent": "So if you remember, I mentioned the Jordan Curve theorem briefly during the discussion about planar Euler's formula, the Jordan Curve theorem says if I draw any closed curve in the plane that separates the plane into two pieces, or if I draw it on the sphere, it separates the sphere into two discs if I draw.",
                    "label": 0
                }
            ]
        },
        "clip_54": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Call a.",
                    "label": 0
                },
                {
                    "sent": "Let us cycle on a more complicated surface that may not be true.",
                    "label": 0
                },
                {
                    "sent": "Right, so there are cycles that violate the Jordan Curve.",
                    "label": 0
                }
            ]
        },
        "clip_55": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Durham Um and it be nice to find these.",
                    "label": 0
                },
                {
                    "sent": "Um, it would be nice to find them so that they are short and the reason that I want them to be short.",
                    "label": 0
                },
                {
                    "sent": "Is this strategy for lots of surface graph algorithms finds some short nontrivial cycle figure out whatever solutions you have that interact with that cycle.",
                    "label": 0
                },
                {
                    "sent": "Then cut the surface open along that cycle, which makes the genus smaller and recurse on what's left, and eventually I cut my graph down to something planar.",
                    "label": 0
                },
                {
                    "sent": "So doing the cut graph thing that was NP hard.",
                    "label": 0
                },
                {
                    "sent": "This turns out to be doable in polynomial time.",
                    "label": 0
                },
                {
                    "sent": "We can find in fact in near linear time of the genus is constant, the other place where short, short, nontrivial cycles show up.",
                    "label": 0
                },
                {
                    "sent": "You'll hear more about this when you talk about persistent technology, but one of the earliest applications was identifying topological noise in reconstructed surface is so is fairly common about 10 years ago, there was a big push and taking clouds of points and sewing them up into surface.",
                    "label": 0
                },
                {
                    "sent": "Watertight surface is.",
                    "label": 0
                },
                {
                    "sent": "Um, and because of the inherent noise in the measurements that you get from physical devices.",
                    "label": 0
                },
                {
                    "sent": "Often the reconstructed surfaces would have additional topological structure that wasn't really there, so Michelangelo's David is a famous example.",
                    "label": 0
                },
                {
                    "sent": "Bunch of people from Stanford went to Florence and digitize this thing at quarter millimeter resolution.",
                    "label": 0
                },
                {
                    "sent": "David's head is a block of of of marble.",
                    "label": 0
                },
                {
                    "sent": "It's a ball topologically, but their first reconstruction of David's head to head genus 164.",
                    "label": 0
                }
            ]
        },
        "clip_56": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "So they needed to find all those little tiny holes that their their reconstruction algorithm found so that they could get rid of them.",
                    "label": 0
                },
                {
                    "sent": "So they needed to do exactly what I'm describing here.",
                    "label": 0
                },
                {
                    "sent": "OK, so there are two kinds of nontrivial cycles.",
                    "label": 0
                },
                {
                    "sent": "There are non contractible cycles and there are non separating cycles, so a contractible cycle means that it bounds a disk just like in the plane.",
                    "label": 0
                },
                {
                    "sent": "A separating cycle means it's the boundary of something, but it's not a disk.",
                    "label": 1
                },
                {
                    "sent": "If I delete the separating cycle, the surface will fall apart into two pieces, but neither of those pieces is a disk.",
                    "label": 0
                },
                {
                    "sent": "And then finally a non separating cycle is 1 where if I cut it, it doesn't separate the cycle at all.",
                    "label": 0
                },
                {
                    "sent": "The surface stays connected.",
                    "label": 0
                },
                {
                    "sent": "OK, so I'm going to describe.",
                    "label": 0
                },
                {
                    "sent": "Um algorithms for finding the shortest non separating cycle in the shortest non contractible cycle and the two are almost the same.",
                    "label": 0
                },
                {
                    "sent": "So I'm just going to follow them both and then some later point I'll split and say you do a or you do be depending on what kind of cycle you want.",
                    "label": 0
                },
                {
                    "sent": "No.",
                    "label": 0
                },
                {
                    "sent": "Since we're interested in finding shortest cycles, I need to assume that.",
                    "label": 0
                }
            ]
        },
        "clip_57": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Edges have lengths and I'm going to assume those links are non negative.",
                    "label": 1
                },
                {
                    "sent": "I'm not going to assume that the links satisfy the triangle inequality or correspond to Euclidean metric or from any kind of embedding.",
                    "label": 0
                },
                {
                    "sent": "They're just numbers that are greater than 0.",
                    "label": 0
                },
                {
                    "sent": "I'm I'm going to use not just any tricot treating composition, but I'm going to use a particular one that I called the greedy country decomposition.",
                    "label": 0
                },
                {
                    "sent": "So remember, I can choose whatever spanning tree in whatever spanning country I want, so the one that I'm going to choose as my spanning tree, I'm going to pick a source vertex X, and I'm going to compute the shortest path tree root X using the lengths of the edges as my weights.",
                    "label": 1
                },
                {
                    "sent": "And then for the Kotri.",
                    "label": 0
                },
                {
                    "sent": "Well, every edge that's not in the spanning tree defines a loop.",
                    "label": 0
                },
                {
                    "sent": "So I started X.",
                    "label": 0
                },
                {
                    "sent": "Here's you, here's V. Alright, here's some LCA of UV in my in my shortest path tree.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "The loop defined by this edge starts at X, goes to V, crosses over to you, and then goes back to X.",
                    "label": 0
                },
                {
                    "sent": "Time so for every non tree edge I compute, I can compute the length of this loop by just summing up the shortest path distances at the end points and adding the length of this edge.",
                    "label": 0
                },
                {
                    "sent": "And then I can use those those lengths as the weights of my dual edges.",
                    "label": 0
                },
                {
                    "sent": "And then compute the maximum spanning tree.",
                    "label": 0
                },
                {
                    "sent": "OK, now we already know that we can compute minimum spanning trees in linear time, so therefore we can compute maximum spanning trees in linear time.",
                    "label": 0
                },
                {
                    "sent": "The more difficult part is actually computing the shortest path tree.",
                    "label": 0
                },
                {
                    "sent": "So if I just use Dijkstra, this runs and then log in time.",
                    "label": 0
                },
                {
                    "sent": "If all the links are equal to 1, I don't even need to use Dijkstra conditions, but for search.",
                    "label": 0
                },
                {
                    "sent": "And as long as the genus is not too big, you can actually compute the shortest paths in linear time using a separator hierarchy, which is something I will talk about tomorrow.",
                    "label": 0
                },
                {
                    "sent": "OK.",
                    "label": 0
                }
            ]
        },
        "clip_58": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So I've already mentioned.",
                    "label": 0
                },
                {
                    "sent": "What these some of these things are right?",
                    "label": 0
                },
                {
                    "sent": "So I am going to be talking about fundamental loops and fundamental cycles.",
                    "label": 1
                },
                {
                    "sent": "These are just the things that you get when you add an entrie edge into a spanning tree.",
                    "label": 0
                },
                {
                    "sent": "Loop starts at X and goes around around the edge.",
                    "label": 0
                },
                {
                    "sent": "The only difference between a loop in a cycle is that the cycle doesn't include the stick on the lollipop, so I just go to the least common ancestor and then back.",
                    "label": 0
                },
                {
                    "sent": "OK.",
                    "label": 0
                }
            ]
        },
        "clip_59": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Now what I eventually want to be able to claim is that the shortest nontrivial cycle actually has the form of one of these fundamenta.",
                    "label": 0
                }
            ]
        },
        "clip_60": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Cycles.",
                    "label": 0
                },
                {
                    "sent": "OK, the shortest non trivial loop with the given base point is actually going to be one of these fundamental loops.",
                    "label": 0
                },
                {
                    "sent": "So how do I show this?",
                    "label": 0
                }
            ]
        },
        "clip_61": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "This is an observation that was made first by Carsten Thomassen in 1990, called the Three Path condition.",
                    "label": 0
                },
                {
                    "sent": "So let's pick two vertices on the face on the surface and pick your favorite three paths between those two points.",
                    "label": 0
                },
                {
                    "sent": "Now these three paths define three cycles.",
                    "label": 1
                },
                {
                    "sent": "There's a red, blue cycle.",
                    "label": 0
                },
                {
                    "sent": "There's a red green cycle, and there's a blue green cycle.",
                    "label": 0
                },
                {
                    "sent": "And the the easy observation is that if any two of these cycles are topologically trivial, so is the third.",
                    "label": 1
                },
                {
                    "sent": "So if the red blue cycle bounded a disk and the red green cycle bounded a disk, then I can glue those two discs together along the red edge, and I have a disk bounded by the blue green cycle.",
                    "label": 0
                },
                {
                    "sent": "Similarly, if the red blue cycle separates off a chunk of the surface and the red blue, I can show this for separating cycles as well.",
                    "label": 0
                }
            ]
        },
        "clip_62": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So the the immediate corollary of this.",
                    "label": 0
                },
                {
                    "sent": "Is that if I'm interested in the shortest nontrivial cycle, it has this nice structure that if I pick two points that are as far apart as possible on that cycle.",
                    "label": 0
                },
                {
                    "sent": "Those two points decompose the shortest nontrivial cycle into two shortest paths of equal length.",
                    "label": 1
                },
                {
                    "sent": "And the proof is, you know, if the red blue thing where I claim this red blue cycle is the shortest non contractible cycle.",
                    "label": 0
                },
                {
                    "sent": "If the red and blue things are not shortest paths, then I can throw in this green shortest path.",
                    "label": 0
                },
                {
                    "sent": "And by the three path condition, one of these other two cycles will be non contractible and both of those cycles are shorter and I've reached a contradiction.",
                    "label": 0
                },
                {
                    "sent": "I started off saying it's the shortest non contractible cycle and ended up finding a shorter one.",
                    "label": 0
                },
                {
                    "sent": "OK so um.",
                    "label": 0
                }
            ]
        },
        "clip_63": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "This.",
                    "label": 0
                },
                {
                    "sent": "Three path condition implies can see this on the third line.",
                    "label": 0
                },
                {
                    "sent": "The shortest nontrivial loop with any given base point is one of these fundamental loops.",
                    "label": 1
                },
                {
                    "sent": "It consists of a shortest path from X to some antipodal point, which might lie in the middle of an edge.",
                    "label": 0
                },
                {
                    "sent": "But I have these two shortest paths.",
                    "label": 0
                },
                {
                    "sent": "Which up to the last vertex is a path in the shortest path tree?",
                    "label": 0
                },
                {
                    "sent": "Came.",
                    "label": 0
                },
                {
                    "sent": "So if I want to compute the shortest nontrivial loop with a given base point.",
                    "label": 1
                },
                {
                    "sent": "I build the greedy Kotri decomposition with that base point.",
                    "label": 0
                },
                {
                    "sent": "I build the cut graph that I talked about earlier, but I build it in the dual.",
                    "label": 0
                },
                {
                    "sent": "Meaning instead of gluing together the primal spanning tree in the leftovers, I glue together the dual spanning tree in the leftovers.",
                    "label": 0
                },
                {
                    "sent": "And then I reduce it.",
                    "label": 0
                },
                {
                    "sent": "I get rid of all the degree one vertices, But again this is all doing the reduction in the dual.",
                    "label": 0
                },
                {
                    "sent": "Came.",
                    "label": 0
                },
                {
                    "sent": "And then finally, here's where I have the split.",
                    "label": 0
                },
                {
                    "sent": "A particular fundamental loop is non contractible if and only if it's defined by an edge that's in that reduced dual cut graph.",
                    "label": 0
                },
                {
                    "sent": "I'm not going to prove that to you, but essentially it's it's contractible.",
                    "label": 0
                },
                {
                    "sent": "It cuts off a disk, so it must cut off a tree.",
                    "label": 1
                },
                {
                    "sent": "Part of the dual cut graph.",
                    "label": 0
                },
                {
                    "sent": "Which wouldn't be there if you're in the reduced part.",
                    "label": 0
                },
                {
                    "sent": "I'm in similarly, this fundamental loop is non separating if and only if the edge that defines it doesn't separate the cut graph.",
                    "label": 0
                },
                {
                    "sent": "So you could, when you build this reduced cut graph, you could scan it in linear time and find all of the bridges.",
                    "label": 0
                },
                {
                    "sent": "All of the edges whose deletion would separate the disconnect the graph.",
                    "label": 0
                },
                {
                    "sent": "This is a standard undergraduate homework exercise in depth research.",
                    "label": 0
                },
                {
                    "sent": "I'm.",
                    "label": 0
                },
                {
                    "sent": "So I build the greedy code tree decomposition, which requires me to compute the lengths of all these loops.",
                    "label": 0
                },
                {
                    "sent": "I build this reduced dual cut graph and then in constant time I look at every edge and say, well, does it satisfy this condition and how long is it?",
                    "label": 0
                },
                {
                    "sent": "And then after linear time, I'm done.",
                    "label": 0
                },
                {
                    "sent": "OK, so sorry all her pellet and I had a much more complicated description of this algorithm, but several years ago Sergio together with Eric Landaverde and Lazarus realized that we were being silly and we just needed to do some stuff.",
                    "label": 0
                },
                {
                    "sent": "So this used to be 10 slides.",
                    "label": 0
                },
                {
                    "sent": "You probably wish it was still 10 slides.",
                    "label": 0
                }
            ]
        },
        "clip_64": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Now that's if I want to find the shortest non trivial loop of the given base point.",
                    "label": 0
                },
                {
                    "sent": "I said I wanted to find the shortest nontrivial cycle we can think of a cycle as a loop by just picking an arbitrary vertex as its base point, but I don't know what base point to pick.",
                    "label": 0
                },
                {
                    "sent": "So the obvious thing is just try them all.",
                    "label": 0
                },
                {
                    "sent": "If there are N vertices, and for each one I can find the shortest loop and then log in time, then it gives me running time.",
                    "label": 0
                },
                {
                    "sent": "But then squared log in and that N squared log in is in fact the best time bound known for arbitrary arbitrary surface is.",
                    "label": 0
                },
                {
                    "sent": "Now with Sergio and my former student Erin Chambers, after a long success, succession of other intermediate results, we showed that that using some more sophisticated techniques you can trade off that factor of N for some small polynomial in G and the precise polynomial G depends on whether you think of expected randomized algorithms that succeed with high probability as algorithms or not.",
                    "label": 1
                },
                {
                    "sent": "I do, the referee did not.",
                    "label": 0
                },
                {
                    "sent": "Which is why we had to add the next line an it maybe for some of these applications.",
                    "label": 0
                },
                {
                    "sent": "Actually, you don't really need it to be short S, you just need it to be short in that case, if you're willing to take a factor 2 approximation, you can get rid of all but one factor of G. Alright, so these are the best time bounds known for this particular problem.",
                    "label": 0
                },
                {
                    "sent": "There's absolutely no reason to think that these are optimal.",
                    "label": 0
                },
                {
                    "sent": "There's no lower bounds except you have to look at the entire graph, so order N, maybe there's some argument that you showed that there's a natural N log in there, but I don't know why the factors of G or in these time bounds.",
                    "label": 0
                },
                {
                    "sent": "So if you want a problem to think about after you have tenure, this is this is a good one.",
                    "label": 0
                },
                {
                    "sent": "Right, because this these algorithms really do get used everywhere, so getting you know every last shred of of time out of the running time is.",
                    "label": 0
                },
                {
                    "sent": "Good yes.",
                    "label": 0
                },
                {
                    "sent": "So I'm I'm simplifying here by assuming the genus is less than the number of vertices.",
                    "label": 0
                },
                {
                    "sent": "Which means that if I take N to be the number of vertices, then the number of edges is less than 9 N, the number of faces is less than 6 N, so N is just the input size.",
                    "label": 0
                },
                {
                    "sent": "If the genus gets really big, then I have to be a bit more careful about how expressed these bounds.",
                    "label": 0
                },
                {
                    "sent": "Right, so some of those ends are really Em's numbers of edges.",
                    "label": 0
                },
                {
                    "sent": "But if I say, you know, take the genus to be.",
                    "label": 0
                },
                {
                    "sent": "Square root of N. Then this is fine.",
                    "label": 0
                },
                {
                    "sent": "I mean, typically in practice, UN is on the order for the Michelangelo's David model and is on the orders of hundreds of thousands.",
                    "label": 0
                },
                {
                    "sent": "An even with the noise, the genus was only in hundreds.",
                    "label": 0
                },
                {
                    "sent": "Alright.",
                    "label": 0
                },
                {
                    "sent": "OK.",
                    "label": 0
                }
            ]
        },
        "clip_65": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So this is a reasonable time for me to stop and ask if there are any other questions.",
                    "label": 0
                },
                {
                    "sent": "Can you go back to the slide them about the three path and condition?",
                    "label": 0
                },
                {
                    "sent": "Maybe I'm asking something that you said before, but but temperatures so high that my brain becomes slow and slow.",
                    "label": 0
                },
                {
                    "sent": "So yeah, yeah, so.",
                    "label": 0
                }
            ]
        },
        "clip_66": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Maybe 1 slide after that there was some mention of a antipodal points.",
                    "label": 1
                },
                {
                    "sent": "What does it mean on so?",
                    "label": 0
                },
                {
                    "sent": "So take your take your cycle.",
                    "label": 0
                },
                {
                    "sent": "Pick an arbitrary point and then go halfway around the cycle.",
                    "label": 0
                },
                {
                    "sent": "So and and typical just means on the opposite pole.",
                    "label": 0
                },
                {
                    "sent": "OK, so so these two points you pick are really exact.",
                    "label": 0
                },
                {
                    "sent": "There are two shorter different.",
                    "label": 0
                },
                {
                    "sent": "Yeah.",
                    "label": 0
                },
                {
                    "sent": "OK, OK, that's putting the cycle exactly in half.",
                    "label": 0
                },
                {
                    "sent": "That's exactly the answer to my question, thanks.",
                    "label": 0
                },
                {
                    "sent": "You are counting on a number of edges.",
                    "label": 0
                },
                {
                    "sent": "When you consider length of path.",
                    "label": 0
                },
                {
                    "sent": "Or are you measuring length and so you can do it however you like?",
                    "label": 0
                },
                {
                    "sent": "I'm assuming that there is a non negative weight attached to every edge and I'm summing up those weights.",
                    "label": 0
                },
                {
                    "sent": "OK so if you like you can set all those weights to be equal to 1 so these points don't have to be vertices.",
                    "label": 0
                },
                {
                    "sent": "Points don't have to be vertices.",
                    "label": 0
                },
                {
                    "sent": "In fact this theorem is true for arbitrary metrics on smooth surfaces as well, right?",
                    "label": 1
                },
                {
                    "sent": "And the only problem is we don't know how to compute shortest paths on arbitrary services.",
                    "label": 0
                },
                {
                    "sent": "So and I don't know what other questions to ask.",
                    "label": 0
                },
                {
                    "sent": "So normally when I'm teaching a class, I do this horrible experiment where I say I'm going to say.",
                    "label": 0
                },
                {
                    "sent": "Are there any questions and then I'm going to shut up?",
                    "label": 0
                },
                {
                    "sent": "And it usually takes about 45 seconds, so I have another one.",
                    "label": 0
                },
                {
                    "sent": "So right at the beginning, you talked about the fact that there's actually no dual graph defined on.",
                    "label": 0
                },
                {
                    "sent": "So do a graph is not really well defined on a graph, But you would need an embedding first, yes, but for what we saw this morning for three connected graphs is probably fine, that's well.",
                    "label": 0
                }
            ]
        },
        "clip_67": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "OK, so you have to be a little bit careful here.",
                    "label": 0
                },
                {
                    "sent": "For planar graphs.",
                    "label": 0
                },
                {
                    "sent": "If it's a planar 3 connected graph as an essentially unique embedding.",
                    "label": 0
                },
                {
                    "sent": "For higher genus graphs, even if the graph is 3 connected, that's possible for there to be distinct embeddings.",
                    "label": 0
                },
                {
                    "sent": "There's another is more subtle condition that you have to apply, which I I don't remember what the exact condition is, so I don't want to.",
                    "label": 0
                },
                {
                    "sent": "Embarrassed myself, but it is.",
                    "label": 0
                },
                {
                    "sent": "It is possible to have a 3 connected graph of genus one that has more than one fundamentally different embedding on the Taurus.",
                    "label": 0
                },
                {
                    "sent": "And in those cases, the dual the dual graphs might not be the same, and they also don't contain loops.",
                    "label": 0
                },
                {
                    "sent": "Yes, that's right, right?",
                    "label": 0
                },
                {
                    "sent": "So the the the dual of a.",
                    "label": 1
                },
                {
                    "sent": "3 connected graph with representative iti.",
                    "label": 0
                },
                {
                    "sent": "At least four is always simple.",
                    "label": 0
                },
                {
                    "sent": "Right, so there are some conditions that you can apply that that you have a simple graph and you have a simple dual graph and the dual graph is essentially unique.",
                    "label": 0
                },
                {
                    "sent": "Um, but I don't want to start out making those assumptions.",
                    "label": 0
                },
                {
                    "sent": "OK.",
                    "label": 0
                }
            ]
        }
    }
}