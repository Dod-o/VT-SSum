{
    "id": "eplcui7awken7rbwzgwkqvfdzkviweet",
    "title": "Convex Optimization in Python with CVXPY",
    "info": {
        "author": [
            "Steven Diamond, Computer Science Department, Stanford University"
        ],
        "published": "Oct. 13, 2014",
        "recorded": "September 2014",
        "category": [
            "Top->Computers->Software->Open-Source Software",
            "Top->Computers->Programming->Python",
            "Top->Computer Science->Programming Languages",
            "Top->Computer Science->Optimization Methods",
            "Top->Computer Science->Machine Learning",
            "Top->Mathematics"
        ]
    },
    "url": "http://videolectures.net/tcmm2014_diamond_cvxpy_convex_optimization/",
    "segmentation": [
        [
            "I'd like to thank you guys for inviting me to be here an for coming to hear about CVS Pie.",
            "This is a project I'm really excited about, so I'm from Stanford.",
            "I work in Stephen Boyd's group and we do convex optimization and CDX pie is a tool for doing convex optimization.",
            "In Python, in a way that's really easy.",
            "And I'll be showing you how civic Spy works on how to use it, and this is an interactive tutorial.",
            "So in between the pieces of this talk we're going to do some exercises so you can get some hands on experience with the xpi and see some of the things you can solve with it."
        ],
        [
            "So to start off."
        ],
        [
            "What is convex optimization?",
            "So here's the standard form for a convex optimization problem.",
            "So we have some decision variable X that we want to find.",
            "Such that we minimize this objective.",
            "Subject to all these constraints holding.",
            "And what makes this a convex optimization problem and not just an optimization problem is that these functions.",
            "Have the property of being convex, and so here's a formal definition.",
            "But intuitively, what it means is that the graphs of these functions curve upwards like a parabola.",
            "If you were, if they were just scalar functions, then you could say that the curvature the second derivative is non negative."
        ],
        [
            "So the reason we're interested in this class of functions is that, well, First off, there's a lot of great theory behind them.",
            "That tells us things like there are any local minima, is a global minima, so if we're solving a convex problem, we don't have to worry about getting trapped at bad local optimum.",
            "And and out of this theory, we get all kinds of really effective and useful algorithms that have good that work well in theory.",
            "So they have good like big O complexity, but also, in practice they're very fast and efficient.",
            "And most importantly, there's a huge class of applications that fall into this domain, so all kinds of machine learning problems and statistics problems.",
            "So imagine fitting some parametric model that's usually a convex problem.",
            "Control problems so you could have some some sort of model of a dynamical system where you say.",
            "So you have a model rocket and you say how do I minimize the fuel use?",
            "Given this trajectory image processing, I'll show you one of those soon.",
            "Anne.",
            "Here engineering design, you could do some kind of worst case analysis.",
            "Ann, anyway, the point here is that there are million applications to all areas of engineering in the computational Sciences."
        ],
        [
            "So how do you solve these problems?",
            "Well, one way is to use these standard solvers that people have made.",
            "There are a lot of really great solvers, some open source, some commercial.",
            "But all these solvers expect some standard form for their problem, and so this could be something like a linear program in standard form, or a quadratic program, 2nd order cone program.",
            "Semi definite program.",
            "These are different classes of convex problems.",
            "If you've heard of them.",
            "And so these are really nice, fast, easy to use.",
            "But the difficulties you have to convert your problem into this standard form.",
            "And so I was the class of convex problems is enormous.",
            "And so it can often be a very tedious and time consuming process to convert your convex model into one of these standard forms.",
            "Another alternative is to write your own solver and so this is something you might do if your problem has some special structure that you can really take advantage of for a huge computational gain, or if you have some kind of special.",
            "Consideration that makes these solvers.",
            "Ineffective, so for example, if you if you need to solve your problem really really fast like it's on an embedded system, or if you have a really large problem where there aren't a lot of great.",
            "Open source or standard solvers for really large problems.",
            "But both of these are this.",
            "One is a ton of work.",
            "This one is still a decent amount of work.",
            "To convert your problem to that form, but there's a third solution, which is what CVS pie is all about.",
            "And that's to use a convex modeling language.",
            "And so this is a domain specific language of modern language.",
            "A way of expressing your problem in a mathematically convenient way.",
            "Anna user friendly Way that looks like it would in a textbook.",
            "And then internally it'll convert your problem into one of these standard forms.",
            "Which means that you can now have now this enormous class of problems that you can solve using these really nice solvers that people have developed."
        ],
        [
            "So there's a long history of modern languages for optimization.",
            "Going back to things like sample and Gamze.",
            "And there's.",
            "A decent number of modern languages for convex optimization, in particular that people have developed CV, Xin, Yama or both in Matlab embedded in Matlab.",
            "These two are.",
            "More standalone things.",
            "So you write.",
            "You write your problem in text and it'll compile it.",
            "And so there are many approaches to this.",
            "To developing these systems.",
            "And there are a few things they have in common.",
            "All functions that they all do.",
            "One is converting to the standard form which I talked about.",
            "The other is to verify that the problem is convex.",
            "Ann, this is important because like I said, there are a lot of properties that you get out of being convex in this.",
            "All these algorithms assume that and so you need some sort of nice way to ensure that anything that the user puts in anything that gets compiled into this standard form is convex and so can be solved."
        ],
        [
            "So I'll talk a bit more about that first, so the systems that we've developed in our group starting with CDX, use something called disciplined convex programming.",
            "And so this is essentially a type system to guarantee convexity.",
            "So every mathematical expression in your language.",
            "Is tagged with the curvature, so this is like the type.",
            "And so there are four different types.",
            "It can be a constant.",
            "It can be a fine, it can be convex, meaning it is non negative curvature concave.",
            "And so.",
            "Using these types are there's a type.",
            "There's a system, a logic for how these types get assigned.",
            "Two expressions and.",
            "It's basically an inductive reasoning system.",
            "You start off with the base case, which are variables and constants, so these have a pre defined curvature & So we keep track of the sign.",
            "Here it's it helps to make a.",
            "More precise type system.",
            "And so variables, they've afine curvature.",
            "The sign is unknown constants.",
            "They have constant curvature.",
            "The sign is known.",
            "And then there's a library of atoms which are different kinds of functions.",
            "Basically a library of functions.",
            "That the language implements.",
            "That have a known curvature & as a function of their arguments, and so here if you have something like X squared, then it'll look that's the function square the Atom square.",
            "It will look at its argument.",
            "It will see that it's a variable, so it's by definition alphine an unknown sign, and it can reason by from that to say that square of X is convex and there's a lot more about this at this website that I made.",
            "Dcp.stanford.edu, I'm not going to get into the details here."
        ],
        [
            "So we keep talking about this standard form and this is what I mean by that for CBS pie.",
            "So this is called conic form.",
            "And econic form you have a linear objective.",
            "You have linear equality constraints and then you have this cone constraint which you can think of as a generalization of non negativity of X greater than equal to 0.",
            "And so this is.",
            "This is a form that can capture a huge number of convex problems.",
            "Most of the problems that people are interested in solving, and it's nice because it is a lot of structure that solvers can work with.",
            "So to give you some examples of different cones, this is the cone of.",
            "Positive reals and that lets you express a linear program.",
            "Another cone is the amount of positive semi definite matrices, so that allows you to express all semi definite programs and so this is a a standard form that we've had a lot of success with and this is the one that all of this solvers that CVS \u03c0 uses expect."
        ],
        [
            "So now let me say a bit more about civics by itself.",
            "So it's a modern language embedded in Python, so it's just a Python library.",
            "It like I said, it translates this mathematical expression which will show you in a minute into a standard form that conic form that I just showed you.",
            "It uses the DCP type system to verify convexity, Ann.",
            "Just another word about that, so it's it's.",
            "It's a conservative system, so if you if it's verified convex by this type system, then you know for sure your problem is convex.",
            "It can be solved.",
            "And but there are certain things you can express that you could prove are convex mathematically, but the type system doesn't recognize.",
            "But we've developed this general.",
            "Framework in these atoms to extend this system and so this really isn't an issue.",
            "The fact that it's not capturing it's not fully reasoning about convexity, it's just using some information.",
            "It's completely open source, so CVS Pie and all its dependencies are open source.",
            "All the solvers that uses are open source.",
            "One nice feature that's sort of new to it is parameterized problems, so this is something you run into very often.",
            "If you say something like a tradeoff curve.",
            "Where you have some constant in your problem that you want to vary without, but the rest of the problem stays the same, and so this is a way of expressing that fact and making it so you don't have to rebuild the problem every time you don't recompile it in a sense.",
            "You could just change that number.",
            "And one of the benefits that we get out of embedding this in Python is that we can combine it in really interesting ways with standard Python libraries and just general Python code, so I'll show you some examples with multi processing, which is the standard library for using parallel computation with processes.",
            "But also.",
            "Interfaces really nicely with NUM PY, which is the main library that people use for matrices.",
            "And so so expires already gotten a lot of use.",
            "It's been used in a bunch of research projects and two classes.",
            "The convex optimization class at Stanford this summer.",
            "UCB xpi.",
            "An affair number of downloads from the Python repository."
        ],
        [
            "So either the solvers that CVS Civic Spy uses first is CDX opt that was developed by leaving Vandenberg at UCLA and others, and that's totally in.",
            "Python uses an interior point method, which is kind of 2nd order method.",
            "Icos that was made by Alex to Mickey D ET ET Djuric, and that's a similar, uses a similar algorithm that ones in C. It's really nice, it is no dependencies, so it's very portable.",
            "Um, this one is a bit different.",
            "It's using a first order method.",
            "This was developed by our group recently.",
            "And there's some interesting things that come out of that you can get support for some cones that you don't have with these interior point methods, and this exponential cone lets you express things like log of X or Y to the X.",
            "And you also have some inherent parallelism.",
            "In this case we're using open MP.",
            "Whereas these guys are single threaded."
        ],
        [
            "Alright, but let's see what savings by actually looks like.",
            "So here's a optimization problem right here.",
            "So this is saying we want to minimize.",
            "The sum of the squares of this vector X -- B.",
            "Plus the sum of the absolute values of this of the vector X.",
            "With some parameter gamma that's trading them off.",
            "And we have some constraints, so the entries of X have to sum to zero and the largest absolute value of X is less than or equal to 1.",
            "And so this is the code to express that problem, and so it's very concise, and it looks pretty similar to the actual math.",
            "So let me just interpret this a bit for you.",
            "So this is just importing the library.",
            "This is constructing a variable object that's a CV xpi object, and so this is saying this has.",
            "This is a column vector of length N, That's what that syntax means, and we're assigning it to the name X.",
            "This right here is using operator overloading.",
            "So that this a we imagine it's something like a NUM py ND array.",
            "So the standard Python matrix class.",
            "That's already been defined up here, and so CVS Pie has implemented operator overloading, so you can write this nice syntax like this and it will just handle it and make sure that the CVS by expression sort of symbolic representation.",
            "Some squares, that's one of those atoms I was talking about, so it's a built in CVS Pi function, and so that's just representing this this function here.",
            "This is taking the L1 norm of X and that's another civic spy function.",
            "Gamma is just some number is defined above, and so you can see this whole thing becomes a CV xpi expression, which we assign to the name cost.",
            "And then we create our objective for this problem, which is to minimize the cost.",
            "So this is a constructor here for this objective object.",
            "And the constraints also use operator overloading, so they look pretty nice.",
            "So here this is saying the entries of X sum to zero, and this is this constraint here, and so this is just a list of these constraint objects.",
            "OK, so then we just create our problem.",
            "We give it the objective and constraints and it makes this problem object and then we call the solve method and that's it.",
            "We solve the problem.",
            "So this guy returns this optimal value, so the optimal value of the objective and as a side effect of calling the solve method you assign a.",
            "The solution, so all the variable values to this value field.",
            "So in this case there's just X, but you.",
            "This is how you access the solution for XOX dot value.",
            "You can also do dot value on things like the cost or any other expression."
        ],
        [
            "So that's the basic syntax of CDX pie and a little bit about what it's about.",
            "Any questions about this so far?",
            "I'm going to go through an example and then we're going to do some exercises.",
            "So before I go on any questions about what I showed you.",
            "Yeah.",
            "Scaleability or four methods, sure.",
            "So the interior point methods.",
            "So the big.",
            "Scalability challenge is."
        ],
        [
            "The number of nonzeros in this matrix here and so you can have if this is very sparse then you can have something like a million variables and it will be fine.",
            "It will solve it and say a minute I'll show you an example of that.",
            "If this is very dense than the limitation is more of what you can solve in a reasonable amount of time would be more like 10s of thousands of variables, maybe 100,000.",
            "So, so that's that's.",
            "About the scope of what you could expect to solve in in in, say, under.",
            "No more than a few minutes, no more than 10 minutes, but most problems will just solve in a few seconds.",
            "And I can comment about that a little bit more later.",
            "I have some numbers.",
            "So for very large problems this isn't really going to work, but that's something actually that I'm going to I'm working on with my current research is to extend this to those cases.",
            "And what do you consider to be the advantage of working in Python?",
            "Well, I'll talk about that more later, but the really the main advantage is that you can combine your code with all these libraries.",
            "These higher level.",
            "Concepts in Python, so things like parallelism.",
            "It's very very easy to paralyze solving multiple problems in CV exponent, and you can use that functionality also to implement distributed optimization fairly easily.",
            "And again this is more prototyping.",
            "It's not going to be state of the art fast, but it's pretty easy to do.",
            "Just just like 10 or 15 lines of code.",
            "And.",
            "And there are other things that you other interesting things you can do.",
            "In terms of like building a program that.",
            "Embeds optimization in this larger system and I have an example of that.",
            "Is there any symbolic tools programming tools behind?",
            "What you're developping?",
            "Now so everything.",
            "I guess all the symbolics in a sense I implemented, so it's not using any existing Python tools for that.",
            "These problems.",
            "That's something that I'm interested in looking into more, but these generally the problems are not that complicated in terms of their expression, and so that isn't a huge bottleneck.",
            "And because it's converting to this conic form, I guess that's really the main symbolic transformation that's happening.",
            "Is converting to this form.",
            "So, but this is this is a fairly easy thing to work with.",
            "And you don't need to retain that much information about.",
            "So for example, in this form there are no functions anymore, they've all been expanded.",
            "Into these cone constraints.",
            "So the primal problem with your tool also be able to symbolically derive the dual.",
            "By product.",
            "Able to give the expression of the dual well so this form can easily be converted into the dual, but in terms of working with the original thing that it doesn't do that.",
            "It is oriented towards converting problems into this standard form and not really working with the functions themselves.",
            "So for example, it doesn't look at functions don't like return their Hessian or anything like that, because it always converts it into this form, where that's not necessary information, sure."
        ],
        [
            "Alright, so this is an image processing example.",
            "And in this prob."
        ],
        [
            "One we have some image where we have a set of known pixels and we have a set of pixel unknown pixels that we know nothing about and our goal is to recover the unknown pixels given the known pixels.",
            "And so each pixel is a vector in R3, because this is a color image, so an RGB value.",
            "And the way we pose this problem is as a total variation problem.",
            "And what that means is we essentially taking each pixel we look at its neighbor to the left, say, and we take that difference.",
            "And we concatenate it with.",
            "The difference between it's this vector in R3 for the pixel and its neighbor below it.",
            "So now this is a vector in R6.",
            "And you take the L2 norm of this whole thing.",
            "And then you sum across all the pixels.",
            "And your constraint is that the known pixels cannot change.",
            "So this is not anything new that I'm showing you.",
            "People been doing this since the 90s.",
            "But as you'll see, it's really, really easy to do in CV xpi."
        ],
        [
            "So the way we're going to express this is using a mask, so this is just a matrix where so sorry, we have a five.",
            "I'm going to show you an example with a 512 by 512 color image.",
            "Our mask is 1.",
            "It's same dimensions and entries one if that pixels known and zero if it's unknown.",
            "And then our data set is this.",
            "This 3D array which is.",
            "The corrupted image.",
            "So with the known pixels there and then, the missing pixels gone."
        ],
        [
            "So this is how we express that optimization problem in CV xpi.",
            "So we're creating a separate variable for each of the red values, the green values, the blue values.",
            "And so we just make that here.",
            "We append it to this list of variables.",
            "That just means append to list in Python.",
            "And then we use this mask.",
            "This is basically just saying that.",
            "If the map for known pixels.",
            "These two values have to be exactly the same, so the value of the variable and then the value of our data.",
            "And so you can see it's just a few lines we append this to the list of constraints.",
            "And then we express our problem using this total variation function.",
            "Which is another predefined function.",
            "And then we solve it.",
            "In this case using SCS, which is one of the three solvers I showed you.",
            "It tends to work better for really large problems, and so this one is about 750,000 variables.",
            "And it takes about a minute to solve."
        ],
        [
            "So this is what it's actually doing, so this is our original image right here.",
            "And this is our corrupted image.",
            "So you can see that it's missing a fair amount.",
            "I mean, it's maybe 1/5 of the pixels, so all the white text is totally unknown.",
            "And here's what happens when you apply total variation."
        ],
        [
            "So you get this image.",
            "Right?",
            "I mean, if you haven't seen this before, it almost looks like magic because they basically look the same.",
            "And now if you really dived into it, you would see they're not exactly the same.",
            "The pixel values differ slightly, but somehow visually they are the same.",
            "Visually, the reconstruction is almost perfect.",
            "So."
        ],
        [
            "Here I'll show you a more difficult one, so here 80% of the pixels are gone.",
            "And so it's almost.",
            "I mean, it seems it's not clear how good a job we can do with this.",
            "But using exactly that, those nine lines or whatever code that I showed you before."
        ],
        [
            "You can go from that to this.",
            "And so here it's a little blurrier.",
            "If you look really closely like this is blurrier, the face is a bit blurrier.",
            "But it's really impressive.",
            "And so, again, this is not a new algorithm.",
            "That's not why I'm showing you this.",
            "What school is?",
            "How easy it is to do an how in CDX pie, and how quickly it can solve it?"
        ],
        [
            "And now if all you cared about is total variation in painting and we wanted to solve a million total variation in painting problems, this would not be the right tool.",
            "You should use some sort of specialized thing for that problem.",
            "It's going to be faster.",
            "But the thing that's nice about this is that suppose you wanted to try some variant of that algorithm, like maybe I can let the known pixels change a little bit, say their norm can change by 10%.",
            "Maybe that will improve the result.",
            "With that all you have to do is add another constraint here and you get to experiment with that problem.",
            "And maybe it doesn't work, but it only took you a few minutes to try, whereas if you were working with this C library, that is total variation, this would be a pretty serious project to make that change.",
            "And so that's really what CVS Pie is about.",
            "It's about prototyping and seeing whether your algorithm is good before you decide that it's worth implementing some super fast version of it.",
            "Yes so.",
            "I'm now we're going to do some exercises, but I guess any any questions about this of?",
            "Yeah, Marco.",
            "Oh, this is just a Python thing, so it means unpack a list into arguments.",
            "It's just how this function is implemented right now.",
            "That's for unpacking a dictionary.",
            "This is for unpacking a list.",
            "Yeah, so that's just what that is.",
            "It could have been.",
            "It could have taken a list as well.",
            "It would have been the same idea.",
            "Alright.",
            "So.",
            "How many of you have CV xpi installed?",
            "If you're using one of the laptops that.",
            "Were given and it's already installed.",
            "You don't worry bout that.",
            "But who doesn't have CV Xpi installed?",
            "OK.",
            "So you want to go to CVS spy.org?",
            "And there are instructions there.",
            "You just want to follow them exactly.",
            "It should be very quick.",
            "But for everyone using the laptops are already expired, stalled.",
            "I have you should get these files.",
            "Here OK.",
            "So you can either get clone this or you can go to this site and download a zip file.",
            "So this is what we're going to be working with for the exercises.",
            "And also you need to update Matplotlib so when you when you once you've downloaded these just run this command on your laptop.",
            "So I guess if you're if you're if you've downloaded this and you have installed, you can just try so there are two things I would recommend so this is called exercises PDF.",
            "You can just open it, it's in the folder that you downloaded.",
            "You can do this one just to make sure everything is working.",
            "Just try to see the problem basically and solve it.",
            "Also, if you want to try the total variation thing yourself, there's something called inpainting dot PY.",
            "That's a in there and so you can see what happens.",
            "With that problem."
        ],
        [
            "Sounds like most of you have CV Xpi installed at least, and so I'm going to talk about another aspect of CVS Pie before we finish the section, and there will be some exercises related to that.",
            "So.",
            "So professor so we can raise the question of why is it interesting to have this in Python an so?",
            "The."
        ],
        [
            "Reason is because."
        ],
        [
            "You have all these nice things in Python for doing things like parallelism, which is the example I'll show you and other higher level features and it's really really easy to combine those with the xpi.",
            "So I'm going to show you how to do a tradeoff curve in parallel.",
            "For a lasso problem."
        ],
        [
            "So before I get into that a little bit more about parameters, so I said civic Spike and do parameterized problems.",
            "So what a parameter is is a symbolic representation of a constant.",
            "So it has symbolic attributes like assign and dimensions, but it doesn't have a numeric attribute when you create it, it doesn't have a value.",
            "That's something you assign later.",
            "And the per point of this is that you can change this without rebuilding the whole problem."
        ],
        [
            "So this is what the syntax looks like.",
            "So you can see here I create a scalar parameter.",
            "That's positive.",
            "This one is a vector of length 5 and it has unknown sign 'cause we didn't specify a sign that's the default.",
            "And this one has.",
            "This is a matrix, so 4 by 7 matrix.",
            "So this is just the same syntax is for variables.",
            "And so here, this is how you actually instantiate these parameters.",
            "You assign them a value, you update the value field and so here this is.",
            "This is basically a matrix of all negative one, all negative ones.",
            "And so you can see that matches the symbolic attributes of this parameter G if it didn't match, then there would be an error, so you know that these will always be instantiated with something that satisfies these attributes, and so CVS Spike and reason about them."
        ],
        [
            "So here's a lasso problem.",
            "There's an example where you get to try solving one, and you'll see why this is a really nice optimization problem, But basically the idea with the lasso is that you're solving a regression problem, But you want your answer to be sparse.",
            "And so you have this regularization that is pushing.",
            "The variables towards 0.",
            "And so this is.",
            "A very natural situation to have a parameter here 'cause you have a tradeoff between the regularization and then getting the best fit.",
            "And so here's the code to declare this problem so you can see it's just like before you make your variable, you make a parameter here, so we're instantiating gamma and then.",
            "So here this is kind of nice, so you can give a name to your sub expression.",
            "So then afterwards you can do error value when you've solved it, and so that's a convenient way to make a tradeoff curve, for example, and then here's our regularization term and then our problem is just to minimize the sum of those two.",
            "So this here we have no constraints, that's totally fine.",
            "You need an objective, but you don't need constraints.",
            "So this is how you declare a lasso problem."
        ],
        [
            "And this is how you compute a tradeoff curve.",
            "So this is just this is very basic for loop syntax.",
            "Or sort of standard Python for loop syntax.",
            "So basically what we want to do here is find the X that solves the lasso problem for.",
            "Different instances of gamma for different values of gamma.",
            "And so we do this using a for loop.",
            "We iterate over this this list of values and so this means.",
            "That we have values that are evenly spaced in log rhythmic space.",
            "So from 10 to the minus four to 10 to the 2nd, and by default it's 100 values.",
            "But you could get more.",
            "And so it's going to iterate over this list.",
            "Answer Val is going to be started at 10 for the next one, the next one, and then we assign that to gamma and then we solve the problem.",
            "So notice we don't have to reconstruct the problem, you just solve it.",
            "The parameter is already in there.",
            "And then we get out a solution and so we append that to our list.",
            "So this is how this is one way to compute tradeoff curve."
        ],
        [
            "And so this is the sort of thing you would get.",
            "If you this is the tradeoff between the sum of squares error and then the regularization term.",
            "And so Gamma is sort of implicit in here, so this is for a very large gamma up here, which means that this is the only term that matters, and so here you would see that all the entries of X.",
            "So this whole thing evaluates to zero, which means all the entries of X or 0.",
            "Which is what you would expect if you were just trying to minimize this.",
            "On the other end, you have a really tiny gamma.",
            "This doesn't matter at all, you just care about this and so here you can see this is the best fit that it can get.",
            "For this linear system.",
            "And so as you iterate over the gammas, you're going to get all the different places in this tradeoff curve."
        ],
        [
            "And if you were to plot the entries of X, you would see how they're gradually pushed to zero overtime.",
            "So here is gamma on the bottom and then this is.",
            "Problem where X is 10 different entries, so it's plotting them and so you can see that it starts off the initially.",
            "The regularization isn't doing anything, none of them are zero, but overtime they start moving towards zero, though it's not monotonic.",
            "Some of them increase before they decrease.",
            "Some of them go to zero, then go away from zero, and then you get a certain point.",
            "They're all zero and there's an analytical solution.",
            "Actually for what that point is.",
            "Yeah.",
            "Initialization first ever solving.",
            "Initialization play this case you would you would use basically a priest that we've ever isation.",
            "Oh so so use the value from the last one to help you complete the next one.",
            "Yeah so for.",
            "That functionality isn't there right now for Interior Point methods.",
            "It doesn't really help, but for there's also as I mentioned, there's a first order solver.",
            "There would be a very logical thing to do, and I'm going to add that soon.",
            "Yeah, so that's a good point.",
            "In addition to parameters, you would also want Worm starting in some cases.",
            "OK, but you could."
        ],
        [
            "There are lots of ways you can make these tradeoff curves.",
            "This isn't something that special deceive expire.",
            "But this is more interesting.",
            "OK, so here we're going to calculate the regularization path in parallel.",
            "And so we use this built in standard Library in Python And we use this concept called a pool, which is basically a bunch of worker processes that are instantiated and sit there waiting for jobs and when they get a job they do it and then they go back to the pool and wait for more work.",
            "And so we make a function that does the same thing that for loop did.",
            "It just assigns a value to gamma, solves the problem, returns the solution.",
            "And then this is all it takes to do this in parallel.",
            "We make this pool.",
            "We assign however many processes we think is make sense for machine and then you do this map which applies this function.",
            "Basically to all the entries in this list, but it's doing it in parallel using this pool abstraction.",
            "And so this is a really."
        ],
        [
            "Perfect problem for parallelism because this is what we call embarrassingly parallel, meaning you can solve all of these problems totally independently.",
            "There's no.",
            "There's no ordering that we need to enforce.",
            "OK, so here are some numbers.",
            "It will tell you a little bit more about performance.",
            "So we have a lasso problem with 500,000 nonzeros and this is a dense matrix and then we would want to do 100 values of gamma in our tradeoff curve and so.",
            "On my laptop it takes 4 seconds to solve this problem.",
            "And so.",
            "And that's using this solver, and so you can see as you would expect, if you solve 100 of them, it takes 400 seconds.",
            "This is using the for loop.",
            "But if instead you do that parallel construction, which is really just as simple as the for loop in Python.",
            "Then you get a parallel speedup.",
            "And so you can see it's not a four.",
            "This is using four processes, so it's taking advantage of the four cores on the MacBook Pro.",
            "And so this isn't a full parallel speedup, but it's pretty good.",
            "Right, and so this is using just the built in things in Python in the standard library.",
            "And so here if you do more processes, it's not going to help 'cause you only four cores, but I also did it on a 32 core machine and so there each core was a little slower.",
            "It took about 6 seconds to solve the problem.",
            "But this time when you scale to 32 processes, you continue to get speedup, and so here in the end it only took a 10th as long to solve this problem of computing the tradeoff curve.",
            "And so again, this isn't impossible.",
            "Without CV Xpi you could do like the MATLAB parallel toolbox and CDX, or you can use some special, I mean a lasso problem is a very intensively studied problem and something that people have developed a lot of tools for.",
            "And so if all you care about is the lasso, then.",
            "You would use one of those tools, but The thing is, this is completely general.",
            "This is doing a tradeoff curve."
        ],
        [
            "For any problem whatsoever that has.",
            "That has this parameter that's waiting to objectives.",
            "Any problem that you can express in CV xpi.",
            "So you could try, you know if you just want to modify the last problem, you could say Oh my weights have to be non negative or they are in some box.",
            "You could Add all kinds of constraints and it's no big deal.",
            "It's exactly the same code as before.",
            "All you do is add one constraint to your problem definition.",
            "And so again, this makes this means that signifies a really useful prototyping tool.",
            "Anne.",
            "Not just because it's easy to express your problem which I've already shown you, but also because you have access to these Python features that allow you to do a lot of exploration really easily.",
            "OK, and so we have a problem about the lasso in that file that you downloaded and so you can see why why this is an interesting problem.",
            "And this comes from a field called compressed sensing.",
            "And so if you go to.",
            "If you go back to that.",
            "Exercise those exercises.",
            "There's a lasso problem.",
            "And so here you can compare Ridge regression, which is this this guy versus a lasso first bar signal.",
            "And so again, this is nice because it's easy.",
            "It's really easy, you just change one, you just change the function you're calling and you get to solve a completely different problem."
        ],
        [
            "Alright, I'm going to continue now with another example and this one.",
            "Is again in the spirit of why is it interesting to have this in Python?",
            "So this example is about a different way of thinking about optimization problems, so that's possible because you have this modern language within Python And so this is a way of thinking about problems.",
            "That's more object oriented, and so we're going to look at a single commodity flow problem."
        ],
        [
            "In a single commodity flow problem, you have a directed graph with P nodes, an edges.",
            "Each edge has a flow on it.",
            "This is a variable in our problem.",
            "And each node has a source or sink.",
            "Going into it and so you can think of this as an extra edge that just goes into that node directly, or as flow that's being generated on that node.",
            "And again, this is another variable.",
            "And so our problem is here.",
            "OK, we have these convex cost functions.",
            "On our flows in our sources, slash sinks.",
            "And we have a constraint that there's zero net flow at each node, so the node has flow coming in from edges and it has its internal source, and so those together after some to 0.",
            "And so that's the definition of the single commodity flow framework.",
            "And to elaborate here, these so these are just any convex cost functions whatsoever.",
            "They can include constraints, so here the only constraint I list is that there's zero net flow at each node.",
            "But you can imagine the constraints being embedded in here.",
            "So something like the flow being in a range.",
            "Would be could be part of this function."
        ],
        [
            "So here's a way to express that constraint that the net flow is zero, and this is a very common approach, which is to create something called an incidence matrix or adjacency matrix and how this works is you have this matrix which has one one row for each node and one column for each edge, and the entries every entry in this matrix represents some interaction between a node in an edge.",
            "So for example, remember the edges are directed so they're leaving some node.",
            "In entering another, they have an orientation.",
            "And so we can define it.",
            "Say that this is entry AIJ is 1.",
            "If this edge is leaving the node minus one if it's entering it.",
            "Otherwise it's zero.",
            "So this is a very very sparse matrix which represents our graph structure.",
            "And now we can write this zero net flow constraint just like this zero AF equals S. Where F is the vector of all the flows and S is the vector of all these sources.",
            "And so we arrive at this problem, which is a perfectly reasonable reasonable formulation of the problem.",
            "Mathematically, this is all we would want.",
            "But there's something a little strange.",
            "Which is that we started with a problem about a graph, nodes and edges, and we ended up with this formulation that's just about matrices and vectors, right?",
            "There's no node or edge here, at least explicitly.",
            "And so this may not be a computational issue, because again, this is sparse.",
            "You can take advantage of that sparsity, but conceptually argue that this is.",
            "It's uh, it's a little strange and there's a better way to think about it."
        ],
        [
            "And so the idea is to have objects that represent nodes and objects that represent edges an all the information.",
            "All the intelligence about what these nodes mean and what these edges mean is embedded in those objects versus in this external problem, where you're sort of losing the connection between the node and then these costs and all the different parts of it.",
            "And so a node object.",
            "It has a source that's an internal thing.",
            "Nobody else needs to know about that.",
            "So you have this nice abstraction.",
            "And then the cost.",
            "So that's some function of the source, and that's external.",
            "You need to export that and then you have constraints, and there might be constraints on the source as part of the cost function.",
            "And then there's a net flow constraint.",
            "So that's going to be embedded in the node.",
            "And the edge object is similar.",
            "It's going to have a flow variable.",
            "Which is internal as before, and then these cost and these constraints that are exported.",
            "And so to solve this problem, what it looks like is just this code right here.",
            "So we have a list of nodes and a list of edges.",
            "We concatenate them.",
            "That's what that means in Python And then we iterate over them and we take the cost for every one of these objects and we sum them together.",
            "And then our objective is to minimize that cost and we do the same thing with the nodes in the edges.",
            "We concatenate all the constraints and then we solve our problem.",
            "So the thing to notice here is there really isn't very much information here, right?",
            "This is very generic, which is good because we could use this for example for multi commodity flow problem or some other variant of a flow problem.",
            "But it's also good because.",
            "We're putting the information where it belongs, which is in the nodes and in the edges.",
            "So let me let me explain that more.",
            "So."
        ],
        [
            "Here's a node object.",
            "So you can see this is this is basically the syntax for the constructor.",
            "This is how this is explaining the function that creates a node.",
            "And so you can see, like I said, it has a source and this is.",
            "An internal thing.",
            "It's a property of the node.",
            "It has a cost that something we pass in.",
            "It just applies a function to the source and it creates this cost attribute which we access to collect all the local costs into a global cost.",
            "And then it has a set of flows that are going into it from different edges.",
            "This is how we're going to do the net flow equals zero constraint.",
            "And then here this is.",
            "This is exactly that constraint.",
            "So we sum up all the flows going into it.",
            "We add in the source, we get the net flow and then we have this constraint that the net flow is zero and so this is a list with just that.",
            "That one entry in it.",
            "And so you can think of this as like the bare bones node.",
            "This is the node.",
            "The base class for all possible nodes, and so you could imagine extending this class to represent something in your model.",
            "So, for example, suppose we're looking at a power grid model, which is a single commodity flow problem.",
            "You're looking at the flow of power.",
            "You could have a generator object which is like a subclass of this node.",
            "And a generator might have something like a maximum power output an so that would be you would have a constructor that would take that instead of this.",
            "And so, and it would have the constraints.",
            "The additional constraints that the power the sources say between zero and that maximum, and so now.",
            "When we can just create this generator object and we know it's doing everything that we want right?",
            "We don't have to worry about this global problem.",
            "How this all fits in in the big picture in the global problem, it's all automatically created by CDX Pie.",
            "Using that code that I showed you before.",
            "So using this."
        ],
        [
            "Code you go from all these local objects and in a very generic way you construct a global problem."
        ],
        [
            "So another thing you could have a say in our power grid situation.",
            "We could have a consumer and.",
            "That's a totally different situation.",
            "You there?",
            "They're not generating power.",
            "They have a fixed demand that you need to me, and so there you would have a constraint that, like the source, equals this fixed demand, and so by subclassing this node in building out, we can have ever more complicated.",
            "Models.",
            "For these single commodity flow problem and we don't really have to worry about the complexity.",
            "Because we have this abstraction.",
            "This in capsulation through the object."
        ],
        [
            "So here's the same thing for an edge.",
            "This is the base edge object.",
            "The thing you would extend.",
            "And so here again, you have this flow, which is an internal variable.",
            "You have a cost which we apply to the flow and then we have a Connect method and so this is how the this is.",
            "The alternative to having that matrix that incidence matrix.",
            "Is you have a function of an edge which is to connect two nodes across it.",
            "And so this so you would do Edge Dot Connect and then you would give it the two nodes that it's linking and it just takes care internally of what that means.",
            "In this case, it means that the net flow is zero, and so again you could imagine extending this and you actually will.",
            "This is one of the exercises, so you'll get to see how this works and think about this.",
            "You can imagine extending this to be edge with the capacity, so then you would have another constraint that the net flow said the absolute value of the flow is bounded.",
            "And so.",
            "Again, you can make these ever more elaborate.",
            "Representations of edges.",
            "And manage the complexity and make it very understandable and readable by using this object oriented framework.",
            "And I think the I'll go through an example problem in a second, but I think the really interesting thing is if you actually have.",
            "Anne.",
            "Objects which have many objects in them.",
            "So for example, you could have.",
            "In our power grid, maybe you could have an entire like block of a city, which is just it has some edges going out and it is some edges going in, but all the internals are just taken care of.",
            "They're all.",
            "They're all represented using these objects.",
            "That are all somehow concatenated into this higher level."
        ],
        [
            "So to make the whole single commodity flow thing more concrete, here's an example.",
            "So we have a grid of nodes and we want to send a unit of flow from some origin to some destination.",
            "And so there we have the constraint that there's one unit of flow going into this origin.",
            "There's one order flow coming out of the destination, and everybody else has no no extra source flow, no internal flow, and then our cost is on the edges.",
            "So we have some convex cost on the edge flow, and so here.",
            "It's a combination of balance between the absolute value and between.",
            "The square, so similar.",
            "Actually the lasso that you just did.",
            "And so this this W. This is just to make the edges different, so each edge has a different weight.",
            "That makes it better or worse than another."
        ],
        [
            "So here's what we get if we have Lambda equals zero we have.",
            "This is actually solving a shortest path problem, so this is the unique shortest path from here to here.",
            "Given those edge weights now, this is.",
            "A totally over the top way to solve a shortest path problem.",
            "Obviously there's.",
            "But it is nice that you can do something like that very easily and it could fit into a larger structure.",
            "So again, remember, this is we're bound."
        ],
        [
            "And sing just like in the last.",
            "So we're balancing a squared term in an absolute value term and so here.",
            "This is when the squared term is to."
        ],
        [
            "Gone with Lambda equals 0."
        ],
        [
            "So if we totally if we only focus on the squared term, if we get rid of the absolute value term, then you get some sort of diffusion model and so you could say you have an amp going in here and amp coming out of here.",
            "And these are all resistors on these edges and this is how much current is going across each resistor.",
            "So you could interpret that way, so just.",
            "You probably saw this already, but this is showing how much flow is on each edge.",
            "The intensity of the color represents how much flows on each edge."
        ],
        [
            "And you could do something in between and again, this is in the spirit of experimentation and prototyping, 'cause who knows what this actually means.",
            "You still have some diffusion.",
            "This is you're balancing both terms equally, so you still have some diffusion and you still have some, but you also are sort of narrowing in on some good paths.",
            "So.",
            "Yeah, so that's an example of.",
            "Single commodity flow.",
            "I've created an exercise that sort of illustrates this whole object oriented thing.",
            "And that's called power Grid, so it's in that folder that you downloaded power grid \u03c0.",
            "And so they have the classes that I mentioned, which are the generator, the consumer, etc.",
            "There's a Fuller description in that PDF that's in there theexercises.pdf.",
            "And so using this you can see how to represent the problem using these objects and it will plot.",
            "It'll make some cool plot like this for you, which shows how the power is going across the network.",
            "But"
        ],
        [
            "Before we get into that, let me just say a little bit more about.",
            "CVS Pie an where it's going?"
        ],
        [
            "So one thing I hope I've convinced you of is that C convex optimization is very easy with CVS by it's very easy to represent convex problems.",
            "To change a convex problem around to try lots of different models quickly.",
            "And I've also shown you how it can mix with higher level Python concepts like parallelism in this object oriented stuff that you'll get to play with soon.",
            "And so that's an example of why this is useful to have in Python.",
            "Why it's important that your modeling language be embedded in a high level?",
            "Well designed language.",
            "And one thing I didn't get to show you, but is equally interesting is how you can use Civic Spy as a building block for these.",
            "Higher level algorithms that use that have convex subproblems, but are themselves either nonconvex or involve some sort of distributed optimization, and that's also very, very easy to do when you combine Python in these NSX by these.",
            "So the just basic Python parallelism stuff.",
            "And.",
            "These basic civics by models.",
            "And."
        ],
        [
            "In terms of the future of CBS Pie.",
            "So it's already a very useful tool for prototyping.",
            "People use it all the time in our group and.",
            "At Stanford but I'd like it to be more than that.",
            "I would like it to be to really so.",
            "You have this prototyping tool that implies at some point you're going to have to implement your own solver.",
            "Which is a lot of work.",
            "And ideally I would like to save you that work.",
            "And seeing Spy is never going to be as fast as your custom implementation, but if he can get 90% of the way there, maybe that's good enough.",
            "Depending on your application.",
            "In particular, one thing that's coming soon is.",
            "Very large scale problems where you need to either distribute the computation across multiple machines or use GPU's or do something like that for this to be feasible.",
            "And so here this is actually more in the level of prototyping, because at this point you can't really even prototype these huge problems.",
            "It's not that you're not using the absolute optimal solver, it just doesn't really work with the algorithms and solvers that are implemented right now.",
            "And so the way to I'm going to get to this and is through the idea of an abstract linear operator, and so I showed you a long time ago that we have this standard form.",
            "Added."
        ],
        [
            "We have this conic standard form and you can see here really the only thing in this standard form all the information is in this matrix.",
            "And so that's what controls how long it takes to solve the problem, and that's what embeds all the structure of the problem.",
            "And so one thing that's interesting is for certain methods you don't actually have to form this matrix, you can represent it as a function where you can multiply by the matrix and its transpose, and you can use it for matrix free algorithms that do something like constant gradient.",
            "And so that's what I'm looking at now, and part of one thing you get out of this is distributed backends, another is.",
            "Things like a Fourier transform or a convolution where you could make this matrix, but you would never want to do that because it's very inefficient.",
            "And let me say a little bit more about performance.",
            "So you saw you solve this lasso problem.",
            "And I don't know if you tried this, but if you try making it bigger eventually it's going to take just too long to be to be very interesting, and so this is actually a plot for CVX.",
            "But CBS pie is pretty similar in performance, and so this says, well, you can get to about 10 to this is.",
            "500 features and then.",
            "Some number of training examples and so you can see 10 to the 4th.",
            "Training examples that takes about 11 seconds.",
            "It's not terrible.",
            "10 to the 5th.",
            "That's starting to get into 100 seconds, two minutes, and as we scale more, eventually it's just too long.",
            "But the thing that's interesting here is that this plot.",
            "Is actually also a totally general convex solver.",
            "So this is using GPU's, it's using a version of a DMM.",
            "And so you can see here you're actually getting enormous problems.",
            "And solving them in a very short time.",
            "So this one right here.",
            "This is with a billion entries in your matrix.",
            "A dense matrix with a billion entries and it solves it in 11 seconds.",
            "And so this could be a back end for CVS Pie.",
            "It's a bit more complicated.",
            "It's not the conic form, it's doing something else.",
            "But I think this shows that.",
            "At the moment, the scale of the problems you can solve using these very general.",
            "Modern languages and very general frameworks is limited, but that's not an inherent limitation.",
            "That's something I think we can handle.",
            "So that's all I'm going to say about CVS Pie.",
            "I have that exercise that you can take a look at, but I guess any any questions about any of this stuff?",
            "Before we get into the exercise.",
            "OK."
        ]
    ],
    "summarization": {
        "clip_0": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "I'd like to thank you guys for inviting me to be here an for coming to hear about CVS Pie.",
                    "label": 0
                },
                {
                    "sent": "This is a project I'm really excited about, so I'm from Stanford.",
                    "label": 0
                },
                {
                    "sent": "I work in Stephen Boyd's group and we do convex optimization and CDX pie is a tool for doing convex optimization.",
                    "label": 0
                },
                {
                    "sent": "In Python, in a way that's really easy.",
                    "label": 1
                },
                {
                    "sent": "And I'll be showing you how civic Spy works on how to use it, and this is an interactive tutorial.",
                    "label": 0
                },
                {
                    "sent": "So in between the pieces of this talk we're going to do some exercises so you can get some hands on experience with the xpi and see some of the things you can solve with it.",
                    "label": 0
                }
            ]
        },
        "clip_1": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So to start off.",
                    "label": 0
                }
            ]
        },
        "clip_2": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "What is convex optimization?",
                    "label": 0
                },
                {
                    "sent": "So here's the standard form for a convex optimization problem.",
                    "label": 1
                },
                {
                    "sent": "So we have some decision variable X that we want to find.",
                    "label": 0
                },
                {
                    "sent": "Such that we minimize this objective.",
                    "label": 1
                },
                {
                    "sent": "Subject to all these constraints holding.",
                    "label": 0
                },
                {
                    "sent": "And what makes this a convex optimization problem and not just an optimization problem is that these functions.",
                    "label": 0
                },
                {
                    "sent": "Have the property of being convex, and so here's a formal definition.",
                    "label": 0
                },
                {
                    "sent": "But intuitively, what it means is that the graphs of these functions curve upwards like a parabola.",
                    "label": 0
                },
                {
                    "sent": "If you were, if they were just scalar functions, then you could say that the curvature the second derivative is non negative.",
                    "label": 0
                }
            ]
        },
        "clip_3": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So the reason we're interested in this class of functions is that, well, First off, there's a lot of great theory behind them.",
                    "label": 0
                },
                {
                    "sent": "That tells us things like there are any local minima, is a global minima, so if we're solving a convex problem, we don't have to worry about getting trapped at bad local optimum.",
                    "label": 0
                },
                {
                    "sent": "And and out of this theory, we get all kinds of really effective and useful algorithms that have good that work well in theory.",
                    "label": 1
                },
                {
                    "sent": "So they have good like big O complexity, but also, in practice they're very fast and efficient.",
                    "label": 0
                },
                {
                    "sent": "And most importantly, there's a huge class of applications that fall into this domain, so all kinds of machine learning problems and statistics problems.",
                    "label": 0
                },
                {
                    "sent": "So imagine fitting some parametric model that's usually a convex problem.",
                    "label": 0
                },
                {
                    "sent": "Control problems so you could have some some sort of model of a dynamical system where you say.",
                    "label": 0
                },
                {
                    "sent": "So you have a model rocket and you say how do I minimize the fuel use?",
                    "label": 0
                },
                {
                    "sent": "Given this trajectory image processing, I'll show you one of those soon.",
                    "label": 0
                },
                {
                    "sent": "Anne.",
                    "label": 0
                },
                {
                    "sent": "Here engineering design, you could do some kind of worst case analysis.",
                    "label": 0
                },
                {
                    "sent": "Ann, anyway, the point here is that there are million applications to all areas of engineering in the computational Sciences.",
                    "label": 0
                }
            ]
        },
        "clip_4": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So how do you solve these problems?",
                    "label": 1
                },
                {
                    "sent": "Well, one way is to use these standard solvers that people have made.",
                    "label": 0
                },
                {
                    "sent": "There are a lot of really great solvers, some open source, some commercial.",
                    "label": 0
                },
                {
                    "sent": "But all these solvers expect some standard form for their problem, and so this could be something like a linear program in standard form, or a quadratic program, 2nd order cone program.",
                    "label": 0
                },
                {
                    "sent": "Semi definite program.",
                    "label": 0
                },
                {
                    "sent": "These are different classes of convex problems.",
                    "label": 0
                },
                {
                    "sent": "If you've heard of them.",
                    "label": 0
                },
                {
                    "sent": "And so these are really nice, fast, easy to use.",
                    "label": 1
                },
                {
                    "sent": "But the difficulties you have to convert your problem into this standard form.",
                    "label": 0
                },
                {
                    "sent": "And so I was the class of convex problems is enormous.",
                    "label": 0
                },
                {
                    "sent": "And so it can often be a very tedious and time consuming process to convert your convex model into one of these standard forms.",
                    "label": 0
                },
                {
                    "sent": "Another alternative is to write your own solver and so this is something you might do if your problem has some special structure that you can really take advantage of for a huge computational gain, or if you have some kind of special.",
                    "label": 1
                },
                {
                    "sent": "Consideration that makes these solvers.",
                    "label": 0
                },
                {
                    "sent": "Ineffective, so for example, if you if you need to solve your problem really really fast like it's on an embedded system, or if you have a really large problem where there aren't a lot of great.",
                    "label": 0
                },
                {
                    "sent": "Open source or standard solvers for really large problems.",
                    "label": 1
                },
                {
                    "sent": "But both of these are this.",
                    "label": 0
                },
                {
                    "sent": "One is a ton of work.",
                    "label": 0
                },
                {
                    "sent": "This one is still a decent amount of work.",
                    "label": 0
                },
                {
                    "sent": "To convert your problem to that form, but there's a third solution, which is what CVS pie is all about.",
                    "label": 1
                },
                {
                    "sent": "And that's to use a convex modeling language.",
                    "label": 0
                },
                {
                    "sent": "And so this is a domain specific language of modern language.",
                    "label": 0
                },
                {
                    "sent": "A way of expressing your problem in a mathematically convenient way.",
                    "label": 0
                },
                {
                    "sent": "Anna user friendly Way that looks like it would in a textbook.",
                    "label": 0
                },
                {
                    "sent": "And then internally it'll convert your problem into one of these standard forms.",
                    "label": 0
                },
                {
                    "sent": "Which means that you can now have now this enormous class of problems that you can solve using these really nice solvers that people have developed.",
                    "label": 0
                }
            ]
        },
        "clip_5": {
            "is_summarization_sample": false,
            "summarization_data": []
        },
        "clip_6": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So there's a long history of modern languages for optimization.",
                    "label": 1
                },
                {
                    "sent": "Going back to things like sample and Gamze.",
                    "label": 0
                },
                {
                    "sent": "And there's.",
                    "label": 0
                },
                {
                    "sent": "A decent number of modern languages for convex optimization, in particular that people have developed CV, Xin, Yama or both in Matlab embedded in Matlab.",
                    "label": 1
                },
                {
                    "sent": "These two are.",
                    "label": 0
                },
                {
                    "sent": "More standalone things.",
                    "label": 0
                },
                {
                    "sent": "So you write.",
                    "label": 0
                },
                {
                    "sent": "You write your problem in text and it'll compile it.",
                    "label": 0
                },
                {
                    "sent": "And so there are many approaches to this.",
                    "label": 0
                },
                {
                    "sent": "To developing these systems.",
                    "label": 0
                },
                {
                    "sent": "And there are a few things they have in common.",
                    "label": 1
                },
                {
                    "sent": "All functions that they all do.",
                    "label": 0
                },
                {
                    "sent": "One is converting to the standard form which I talked about.",
                    "label": 0
                },
                {
                    "sent": "The other is to verify that the problem is convex.",
                    "label": 0
                },
                {
                    "sent": "Ann, this is important because like I said, there are a lot of properties that you get out of being convex in this.",
                    "label": 0
                },
                {
                    "sent": "All these algorithms assume that and so you need some sort of nice way to ensure that anything that the user puts in anything that gets compiled into this standard form is convex and so can be solved.",
                    "label": 0
                }
            ]
        },
        "clip_7": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So I'll talk a bit more about that first, so the systems that we've developed in our group starting with CDX, use something called disciplined convex programming.",
                    "label": 1
                },
                {
                    "sent": "And so this is essentially a type system to guarantee convexity.",
                    "label": 0
                },
                {
                    "sent": "So every mathematical expression in your language.",
                    "label": 0
                },
                {
                    "sent": "Is tagged with the curvature, so this is like the type.",
                    "label": 0
                },
                {
                    "sent": "And so there are four different types.",
                    "label": 0
                },
                {
                    "sent": "It can be a constant.",
                    "label": 0
                },
                {
                    "sent": "It can be a fine, it can be convex, meaning it is non negative curvature concave.",
                    "label": 0
                },
                {
                    "sent": "And so.",
                    "label": 0
                },
                {
                    "sent": "Using these types are there's a type.",
                    "label": 0
                },
                {
                    "sent": "There's a system, a logic for how these types get assigned.",
                    "label": 0
                },
                {
                    "sent": "Two expressions and.",
                    "label": 0
                },
                {
                    "sent": "It's basically an inductive reasoning system.",
                    "label": 0
                },
                {
                    "sent": "You start off with the base case, which are variables and constants, so these have a pre defined curvature & So we keep track of the sign.",
                    "label": 0
                },
                {
                    "sent": "Here it's it helps to make a.",
                    "label": 0
                },
                {
                    "sent": "More precise type system.",
                    "label": 0
                },
                {
                    "sent": "And so variables, they've afine curvature.",
                    "label": 0
                },
                {
                    "sent": "The sign is unknown constants.",
                    "label": 0
                },
                {
                    "sent": "They have constant curvature.",
                    "label": 0
                },
                {
                    "sent": "The sign is known.",
                    "label": 0
                },
                {
                    "sent": "And then there's a library of atoms which are different kinds of functions.",
                    "label": 1
                },
                {
                    "sent": "Basically a library of functions.",
                    "label": 0
                },
                {
                    "sent": "That the language implements.",
                    "label": 0
                },
                {
                    "sent": "That have a known curvature & as a function of their arguments, and so here if you have something like X squared, then it'll look that's the function square the Atom square.",
                    "label": 1
                },
                {
                    "sent": "It will look at its argument.",
                    "label": 0
                },
                {
                    "sent": "It will see that it's a variable, so it's by definition alphine an unknown sign, and it can reason by from that to say that square of X is convex and there's a lot more about this at this website that I made.",
                    "label": 0
                },
                {
                    "sent": "Dcp.stanford.edu, I'm not going to get into the details here.",
                    "label": 0
                }
            ]
        },
        "clip_8": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So we keep talking about this standard form and this is what I mean by that for CBS pie.",
                    "label": 0
                },
                {
                    "sent": "So this is called conic form.",
                    "label": 1
                },
                {
                    "sent": "And econic form you have a linear objective.",
                    "label": 0
                },
                {
                    "sent": "You have linear equality constraints and then you have this cone constraint which you can think of as a generalization of non negativity of X greater than equal to 0.",
                    "label": 1
                },
                {
                    "sent": "And so this is.",
                    "label": 0
                },
                {
                    "sent": "This is a form that can capture a huge number of convex problems.",
                    "label": 0
                },
                {
                    "sent": "Most of the problems that people are interested in solving, and it's nice because it is a lot of structure that solvers can work with.",
                    "label": 1
                },
                {
                    "sent": "So to give you some examples of different cones, this is the cone of.",
                    "label": 0
                },
                {
                    "sent": "Positive reals and that lets you express a linear program.",
                    "label": 0
                },
                {
                    "sent": "Another cone is the amount of positive semi definite matrices, so that allows you to express all semi definite programs and so this is a a standard form that we've had a lot of success with and this is the one that all of this solvers that CVS \u03c0 uses expect.",
                    "label": 0
                }
            ]
        },
        "clip_9": {
            "is_summarization_sample": false,
            "summarization_data": []
        },
        "clip_10": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So now let me say a bit more about civics by itself.",
                    "label": 0
                },
                {
                    "sent": "So it's a modern language embedded in Python, so it's just a Python library.",
                    "label": 0
                },
                {
                    "sent": "It like I said, it translates this mathematical expression which will show you in a minute into a standard form that conic form that I just showed you.",
                    "label": 0
                },
                {
                    "sent": "It uses the DCP type system to verify convexity, Ann.",
                    "label": 0
                },
                {
                    "sent": "Just another word about that, so it's it's.",
                    "label": 0
                },
                {
                    "sent": "It's a conservative system, so if you if it's verified convex by this type system, then you know for sure your problem is convex.",
                    "label": 0
                },
                {
                    "sent": "It can be solved.",
                    "label": 0
                },
                {
                    "sent": "And but there are certain things you can express that you could prove are convex mathematically, but the type system doesn't recognize.",
                    "label": 0
                },
                {
                    "sent": "But we've developed this general.",
                    "label": 0
                },
                {
                    "sent": "Framework in these atoms to extend this system and so this really isn't an issue.",
                    "label": 0
                },
                {
                    "sent": "The fact that it's not capturing it's not fully reasoning about convexity, it's just using some information.",
                    "label": 0
                },
                {
                    "sent": "It's completely open source, so CVS Pie and all its dependencies are open source.",
                    "label": 0
                },
                {
                    "sent": "All the solvers that uses are open source.",
                    "label": 1
                },
                {
                    "sent": "One nice feature that's sort of new to it is parameterized problems, so this is something you run into very often.",
                    "label": 0
                },
                {
                    "sent": "If you say something like a tradeoff curve.",
                    "label": 0
                },
                {
                    "sent": "Where you have some constant in your problem that you want to vary without, but the rest of the problem stays the same, and so this is a way of expressing that fact and making it so you don't have to rebuild the problem every time you don't recompile it in a sense.",
                    "label": 0
                },
                {
                    "sent": "You could just change that number.",
                    "label": 0
                },
                {
                    "sent": "And one of the benefits that we get out of embedding this in Python is that we can combine it in really interesting ways with standard Python libraries and just general Python code, so I'll show you some examples with multi processing, which is the standard library for using parallel computation with processes.",
                    "label": 0
                },
                {
                    "sent": "But also.",
                    "label": 0
                },
                {
                    "sent": "Interfaces really nicely with NUM PY, which is the main library that people use for matrices.",
                    "label": 0
                },
                {
                    "sent": "And so so expires already gotten a lot of use.",
                    "label": 0
                },
                {
                    "sent": "It's been used in a bunch of research projects and two classes.",
                    "label": 1
                },
                {
                    "sent": "The convex optimization class at Stanford this summer.",
                    "label": 0
                },
                {
                    "sent": "UCB xpi.",
                    "label": 0
                },
                {
                    "sent": "An affair number of downloads from the Python repository.",
                    "label": 0
                }
            ]
        },
        "clip_11": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So either the solvers that CVS Civic Spy uses first is CDX opt that was developed by leaving Vandenberg at UCLA and others, and that's totally in.",
                    "label": 0
                },
                {
                    "sent": "Python uses an interior point method, which is kind of 2nd order method.",
                    "label": 0
                },
                {
                    "sent": "Icos that was made by Alex to Mickey D ET ET Djuric, and that's a similar, uses a similar algorithm that ones in C. It's really nice, it is no dependencies, so it's very portable.",
                    "label": 0
                },
                {
                    "sent": "Um, this one is a bit different.",
                    "label": 0
                },
                {
                    "sent": "It's using a first order method.",
                    "label": 0
                },
                {
                    "sent": "This was developed by our group recently.",
                    "label": 0
                },
                {
                    "sent": "And there's some interesting things that come out of that you can get support for some cones that you don't have with these interior point methods, and this exponential cone lets you express things like log of X or Y to the X.",
                    "label": 0
                },
                {
                    "sent": "And you also have some inherent parallelism.",
                    "label": 0
                },
                {
                    "sent": "In this case we're using open MP.",
                    "label": 0
                },
                {
                    "sent": "Whereas these guys are single threaded.",
                    "label": 0
                }
            ]
        },
        "clip_12": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Alright, but let's see what savings by actually looks like.",
                    "label": 0
                },
                {
                    "sent": "So here's a optimization problem right here.",
                    "label": 0
                },
                {
                    "sent": "So this is saying we want to minimize.",
                    "label": 0
                },
                {
                    "sent": "The sum of the squares of this vector X -- B.",
                    "label": 0
                },
                {
                    "sent": "Plus the sum of the absolute values of this of the vector X.",
                    "label": 0
                },
                {
                    "sent": "With some parameter gamma that's trading them off.",
                    "label": 0
                },
                {
                    "sent": "And we have some constraints, so the entries of X have to sum to zero and the largest absolute value of X is less than or equal to 1.",
                    "label": 0
                },
                {
                    "sent": "And so this is the code to express that problem, and so it's very concise, and it looks pretty similar to the actual math.",
                    "label": 0
                },
                {
                    "sent": "So let me just interpret this a bit for you.",
                    "label": 0
                },
                {
                    "sent": "So this is just importing the library.",
                    "label": 0
                },
                {
                    "sent": "This is constructing a variable object that's a CV xpi object, and so this is saying this has.",
                    "label": 0
                },
                {
                    "sent": "This is a column vector of length N, That's what that syntax means, and we're assigning it to the name X.",
                    "label": 0
                },
                {
                    "sent": "This right here is using operator overloading.",
                    "label": 0
                },
                {
                    "sent": "So that this a we imagine it's something like a NUM py ND array.",
                    "label": 0
                },
                {
                    "sent": "So the standard Python matrix class.",
                    "label": 0
                },
                {
                    "sent": "That's already been defined up here, and so CVS Pie has implemented operator overloading, so you can write this nice syntax like this and it will just handle it and make sure that the CVS by expression sort of symbolic representation.",
                    "label": 0
                },
                {
                    "sent": "Some squares, that's one of those atoms I was talking about, so it's a built in CVS Pi function, and so that's just representing this this function here.",
                    "label": 0
                },
                {
                    "sent": "This is taking the L1 norm of X and that's another civic spy function.",
                    "label": 0
                },
                {
                    "sent": "Gamma is just some number is defined above, and so you can see this whole thing becomes a CV xpi expression, which we assign to the name cost.",
                    "label": 0
                },
                {
                    "sent": "And then we create our objective for this problem, which is to minimize the cost.",
                    "label": 0
                },
                {
                    "sent": "So this is a constructor here for this objective object.",
                    "label": 0
                },
                {
                    "sent": "And the constraints also use operator overloading, so they look pretty nice.",
                    "label": 0
                },
                {
                    "sent": "So here this is saying the entries of X sum to zero, and this is this constraint here, and so this is just a list of these constraint objects.",
                    "label": 0
                },
                {
                    "sent": "OK, so then we just create our problem.",
                    "label": 0
                },
                {
                    "sent": "We give it the objective and constraints and it makes this problem object and then we call the solve method and that's it.",
                    "label": 0
                },
                {
                    "sent": "We solve the problem.",
                    "label": 0
                },
                {
                    "sent": "So this guy returns this optimal value, so the optimal value of the objective and as a side effect of calling the solve method you assign a.",
                    "label": 0
                },
                {
                    "sent": "The solution, so all the variable values to this value field.",
                    "label": 0
                },
                {
                    "sent": "So in this case there's just X, but you.",
                    "label": 0
                },
                {
                    "sent": "This is how you access the solution for XOX dot value.",
                    "label": 0
                },
                {
                    "sent": "You can also do dot value on things like the cost or any other expression.",
                    "label": 0
                }
            ]
        },
        "clip_13": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So that's the basic syntax of CDX pie and a little bit about what it's about.",
                    "label": 0
                },
                {
                    "sent": "Any questions about this so far?",
                    "label": 0
                },
                {
                    "sent": "I'm going to go through an example and then we're going to do some exercises.",
                    "label": 0
                },
                {
                    "sent": "So before I go on any questions about what I showed you.",
                    "label": 0
                },
                {
                    "sent": "Yeah.",
                    "label": 0
                },
                {
                    "sent": "Scaleability or four methods, sure.",
                    "label": 0
                },
                {
                    "sent": "So the interior point methods.",
                    "label": 0
                },
                {
                    "sent": "So the big.",
                    "label": 0
                },
                {
                    "sent": "Scalability challenge is.",
                    "label": 0
                }
            ]
        },
        "clip_14": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "The number of nonzeros in this matrix here and so you can have if this is very sparse then you can have something like a million variables and it will be fine.",
                    "label": 0
                },
                {
                    "sent": "It will solve it and say a minute I'll show you an example of that.",
                    "label": 0
                },
                {
                    "sent": "If this is very dense than the limitation is more of what you can solve in a reasonable amount of time would be more like 10s of thousands of variables, maybe 100,000.",
                    "label": 0
                },
                {
                    "sent": "So, so that's that's.",
                    "label": 0
                },
                {
                    "sent": "About the scope of what you could expect to solve in in in, say, under.",
                    "label": 0
                },
                {
                    "sent": "No more than a few minutes, no more than 10 minutes, but most problems will just solve in a few seconds.",
                    "label": 0
                },
                {
                    "sent": "And I can comment about that a little bit more later.",
                    "label": 0
                },
                {
                    "sent": "I have some numbers.",
                    "label": 0
                },
                {
                    "sent": "So for very large problems this isn't really going to work, but that's something actually that I'm going to I'm working on with my current research is to extend this to those cases.",
                    "label": 0
                },
                {
                    "sent": "And what do you consider to be the advantage of working in Python?",
                    "label": 0
                },
                {
                    "sent": "Well, I'll talk about that more later, but the really the main advantage is that you can combine your code with all these libraries.",
                    "label": 0
                },
                {
                    "sent": "These higher level.",
                    "label": 0
                },
                {
                    "sent": "Concepts in Python, so things like parallelism.",
                    "label": 0
                },
                {
                    "sent": "It's very very easy to paralyze solving multiple problems in CV exponent, and you can use that functionality also to implement distributed optimization fairly easily.",
                    "label": 0
                },
                {
                    "sent": "And again this is more prototyping.",
                    "label": 0
                },
                {
                    "sent": "It's not going to be state of the art fast, but it's pretty easy to do.",
                    "label": 0
                },
                {
                    "sent": "Just just like 10 or 15 lines of code.",
                    "label": 0
                },
                {
                    "sent": "And.",
                    "label": 0
                },
                {
                    "sent": "And there are other things that you other interesting things you can do.",
                    "label": 0
                },
                {
                    "sent": "In terms of like building a program that.",
                    "label": 0
                },
                {
                    "sent": "Embeds optimization in this larger system and I have an example of that.",
                    "label": 0
                },
                {
                    "sent": "Is there any symbolic tools programming tools behind?",
                    "label": 0
                },
                {
                    "sent": "What you're developping?",
                    "label": 0
                },
                {
                    "sent": "Now so everything.",
                    "label": 0
                },
                {
                    "sent": "I guess all the symbolics in a sense I implemented, so it's not using any existing Python tools for that.",
                    "label": 0
                },
                {
                    "sent": "These problems.",
                    "label": 0
                },
                {
                    "sent": "That's something that I'm interested in looking into more, but these generally the problems are not that complicated in terms of their expression, and so that isn't a huge bottleneck.",
                    "label": 0
                },
                {
                    "sent": "And because it's converting to this conic form, I guess that's really the main symbolic transformation that's happening.",
                    "label": 1
                },
                {
                    "sent": "Is converting to this form.",
                    "label": 0
                },
                {
                    "sent": "So, but this is this is a fairly easy thing to work with.",
                    "label": 1
                },
                {
                    "sent": "And you don't need to retain that much information about.",
                    "label": 0
                },
                {
                    "sent": "So for example, in this form there are no functions anymore, they've all been expanded.",
                    "label": 0
                },
                {
                    "sent": "Into these cone constraints.",
                    "label": 0
                },
                {
                    "sent": "So the primal problem with your tool also be able to symbolically derive the dual.",
                    "label": 0
                },
                {
                    "sent": "By product.",
                    "label": 0
                },
                {
                    "sent": "Able to give the expression of the dual well so this form can easily be converted into the dual, but in terms of working with the original thing that it doesn't do that.",
                    "label": 0
                },
                {
                    "sent": "It is oriented towards converting problems into this standard form and not really working with the functions themselves.",
                    "label": 0
                },
                {
                    "sent": "So for example, it doesn't look at functions don't like return their Hessian or anything like that, because it always converts it into this form, where that's not necessary information, sure.",
                    "label": 0
                }
            ]
        },
        "clip_15": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Alright, so this is an image processing example.",
                    "label": 0
                },
                {
                    "sent": "And in this prob.",
                    "label": 0
                }
            ]
        },
        "clip_16": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "One we have some image where we have a set of known pixels and we have a set of pixel unknown pixels that we know nothing about and our goal is to recover the unknown pixels given the known pixels.",
                    "label": 0
                },
                {
                    "sent": "And so each pixel is a vector in R3, because this is a color image, so an RGB value.",
                    "label": 0
                },
                {
                    "sent": "And the way we pose this problem is as a total variation problem.",
                    "label": 0
                },
                {
                    "sent": "And what that means is we essentially taking each pixel we look at its neighbor to the left, say, and we take that difference.",
                    "label": 0
                },
                {
                    "sent": "And we concatenate it with.",
                    "label": 0
                },
                {
                    "sent": "The difference between it's this vector in R3 for the pixel and its neighbor below it.",
                    "label": 0
                },
                {
                    "sent": "So now this is a vector in R6.",
                    "label": 0
                },
                {
                    "sent": "And you take the L2 norm of this whole thing.",
                    "label": 0
                },
                {
                    "sent": "And then you sum across all the pixels.",
                    "label": 0
                },
                {
                    "sent": "And your constraint is that the known pixels cannot change.",
                    "label": 0
                },
                {
                    "sent": "So this is not anything new that I'm showing you.",
                    "label": 0
                },
                {
                    "sent": "People been doing this since the 90s.",
                    "label": 0
                },
                {
                    "sent": "But as you'll see, it's really, really easy to do in CV xpi.",
                    "label": 0
                }
            ]
        },
        "clip_17": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So the way we're going to express this is using a mask, so this is just a matrix where so sorry, we have a five.",
                    "label": 0
                },
                {
                    "sent": "I'm going to show you an example with a 512 by 512 color image.",
                    "label": 1
                },
                {
                    "sent": "Our mask is 1.",
                    "label": 0
                },
                {
                    "sent": "It's same dimensions and entries one if that pixels known and zero if it's unknown.",
                    "label": 0
                },
                {
                    "sent": "And then our data set is this.",
                    "label": 0
                },
                {
                    "sent": "This 3D array which is.",
                    "label": 0
                },
                {
                    "sent": "The corrupted image.",
                    "label": 0
                },
                {
                    "sent": "So with the known pixels there and then, the missing pixels gone.",
                    "label": 0
                }
            ]
        },
        "clip_18": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So this is how we express that optimization problem in CV xpi.",
                    "label": 0
                },
                {
                    "sent": "So we're creating a separate variable for each of the red values, the green values, the blue values.",
                    "label": 0
                },
                {
                    "sent": "And so we just make that here.",
                    "label": 0
                },
                {
                    "sent": "We append it to this list of variables.",
                    "label": 0
                },
                {
                    "sent": "That just means append to list in Python.",
                    "label": 0
                },
                {
                    "sent": "And then we use this mask.",
                    "label": 0
                },
                {
                    "sent": "This is basically just saying that.",
                    "label": 0
                },
                {
                    "sent": "If the map for known pixels.",
                    "label": 0
                },
                {
                    "sent": "These two values have to be exactly the same, so the value of the variable and then the value of our data.",
                    "label": 0
                },
                {
                    "sent": "And so you can see it's just a few lines we append this to the list of constraints.",
                    "label": 0
                },
                {
                    "sent": "And then we express our problem using this total variation function.",
                    "label": 0
                },
                {
                    "sent": "Which is another predefined function.",
                    "label": 0
                },
                {
                    "sent": "And then we solve it.",
                    "label": 0
                },
                {
                    "sent": "In this case using SCS, which is one of the three solvers I showed you.",
                    "label": 0
                },
                {
                    "sent": "It tends to work better for really large problems, and so this one is about 750,000 variables.",
                    "label": 0
                },
                {
                    "sent": "And it takes about a minute to solve.",
                    "label": 0
                }
            ]
        },
        "clip_19": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So this is what it's actually doing, so this is our original image right here.",
                    "label": 0
                },
                {
                    "sent": "And this is our corrupted image.",
                    "label": 1
                },
                {
                    "sent": "So you can see that it's missing a fair amount.",
                    "label": 0
                },
                {
                    "sent": "I mean, it's maybe 1/5 of the pixels, so all the white text is totally unknown.",
                    "label": 0
                },
                {
                    "sent": "And here's what happens when you apply total variation.",
                    "label": 0
                }
            ]
        },
        "clip_20": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So you get this image.",
                    "label": 0
                },
                {
                    "sent": "Right?",
                    "label": 0
                },
                {
                    "sent": "I mean, if you haven't seen this before, it almost looks like magic because they basically look the same.",
                    "label": 0
                },
                {
                    "sent": "And now if you really dived into it, you would see they're not exactly the same.",
                    "label": 0
                },
                {
                    "sent": "The pixel values differ slightly, but somehow visually they are the same.",
                    "label": 0
                },
                {
                    "sent": "Visually, the reconstruction is almost perfect.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                }
            ]
        },
        "clip_21": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Here I'll show you a more difficult one, so here 80% of the pixels are gone.",
                    "label": 1
                },
                {
                    "sent": "And so it's almost.",
                    "label": 0
                },
                {
                    "sent": "I mean, it seems it's not clear how good a job we can do with this.",
                    "label": 0
                },
                {
                    "sent": "But using exactly that, those nine lines or whatever code that I showed you before.",
                    "label": 0
                }
            ]
        },
        "clip_22": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "You can go from that to this.",
                    "label": 0
                },
                {
                    "sent": "And so here it's a little blurrier.",
                    "label": 0
                },
                {
                    "sent": "If you look really closely like this is blurrier, the face is a bit blurrier.",
                    "label": 0
                },
                {
                    "sent": "But it's really impressive.",
                    "label": 0
                },
                {
                    "sent": "And so, again, this is not a new algorithm.",
                    "label": 0
                },
                {
                    "sent": "That's not why I'm showing you this.",
                    "label": 0
                },
                {
                    "sent": "What school is?",
                    "label": 0
                },
                {
                    "sent": "How easy it is to do an how in CDX pie, and how quickly it can solve it?",
                    "label": 0
                }
            ]
        },
        "clip_23": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And now if all you cared about is total variation in painting and we wanted to solve a million total variation in painting problems, this would not be the right tool.",
                    "label": 0
                },
                {
                    "sent": "You should use some sort of specialized thing for that problem.",
                    "label": 0
                },
                {
                    "sent": "It's going to be faster.",
                    "label": 0
                },
                {
                    "sent": "But the thing that's nice about this is that suppose you wanted to try some variant of that algorithm, like maybe I can let the known pixels change a little bit, say their norm can change by 10%.",
                    "label": 0
                },
                {
                    "sent": "Maybe that will improve the result.",
                    "label": 0
                },
                {
                    "sent": "With that all you have to do is add another constraint here and you get to experiment with that problem.",
                    "label": 0
                },
                {
                    "sent": "And maybe it doesn't work, but it only took you a few minutes to try, whereas if you were working with this C library, that is total variation, this would be a pretty serious project to make that change.",
                    "label": 0
                },
                {
                    "sent": "And so that's really what CVS Pie is about.",
                    "label": 0
                },
                {
                    "sent": "It's about prototyping and seeing whether your algorithm is good before you decide that it's worth implementing some super fast version of it.",
                    "label": 0
                },
                {
                    "sent": "Yes so.",
                    "label": 0
                },
                {
                    "sent": "I'm now we're going to do some exercises, but I guess any any questions about this of?",
                    "label": 0
                },
                {
                    "sent": "Yeah, Marco.",
                    "label": 0
                },
                {
                    "sent": "Oh, this is just a Python thing, so it means unpack a list into arguments.",
                    "label": 0
                },
                {
                    "sent": "It's just how this function is implemented right now.",
                    "label": 0
                },
                {
                    "sent": "That's for unpacking a dictionary.",
                    "label": 0
                },
                {
                    "sent": "This is for unpacking a list.",
                    "label": 0
                },
                {
                    "sent": "Yeah, so that's just what that is.",
                    "label": 0
                },
                {
                    "sent": "It could have been.",
                    "label": 0
                },
                {
                    "sent": "It could have taken a list as well.",
                    "label": 0
                },
                {
                    "sent": "It would have been the same idea.",
                    "label": 0
                },
                {
                    "sent": "Alright.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "How many of you have CV xpi installed?",
                    "label": 0
                },
                {
                    "sent": "If you're using one of the laptops that.",
                    "label": 0
                },
                {
                    "sent": "Were given and it's already installed.",
                    "label": 0
                },
                {
                    "sent": "You don't worry bout that.",
                    "label": 0
                },
                {
                    "sent": "But who doesn't have CV Xpi installed?",
                    "label": 0
                },
                {
                    "sent": "OK.",
                    "label": 0
                },
                {
                    "sent": "So you want to go to CVS spy.org?",
                    "label": 0
                },
                {
                    "sent": "And there are instructions there.",
                    "label": 0
                },
                {
                    "sent": "You just want to follow them exactly.",
                    "label": 0
                },
                {
                    "sent": "It should be very quick.",
                    "label": 0
                },
                {
                    "sent": "But for everyone using the laptops are already expired, stalled.",
                    "label": 0
                },
                {
                    "sent": "I have you should get these files.",
                    "label": 0
                },
                {
                    "sent": "Here OK.",
                    "label": 0
                },
                {
                    "sent": "So you can either get clone this or you can go to this site and download a zip file.",
                    "label": 0
                },
                {
                    "sent": "So this is what we're going to be working with for the exercises.",
                    "label": 0
                },
                {
                    "sent": "And also you need to update Matplotlib so when you when you once you've downloaded these just run this command on your laptop.",
                    "label": 0
                },
                {
                    "sent": "So I guess if you're if you're if you've downloaded this and you have installed, you can just try so there are two things I would recommend so this is called exercises PDF.",
                    "label": 0
                },
                {
                    "sent": "You can just open it, it's in the folder that you downloaded.",
                    "label": 0
                },
                {
                    "sent": "You can do this one just to make sure everything is working.",
                    "label": 0
                },
                {
                    "sent": "Just try to see the problem basically and solve it.",
                    "label": 0
                },
                {
                    "sent": "Also, if you want to try the total variation thing yourself, there's something called inpainting dot PY.",
                    "label": 0
                },
                {
                    "sent": "That's a in there and so you can see what happens.",
                    "label": 0
                },
                {
                    "sent": "With that problem.",
                    "label": 0
                }
            ]
        },
        "clip_24": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Sounds like most of you have CV Xpi installed at least, and so I'm going to talk about another aspect of CVS Pie before we finish the section, and there will be some exercises related to that.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "So professor so we can raise the question of why is it interesting to have this in Python an so?",
                    "label": 0
                },
                {
                    "sent": "The.",
                    "label": 0
                }
            ]
        },
        "clip_25": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Reason is because.",
                    "label": 0
                }
            ]
        },
        "clip_26": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "You have all these nice things in Python for doing things like parallelism, which is the example I'll show you and other higher level features and it's really really easy to combine those with the xpi.",
                    "label": 0
                },
                {
                    "sent": "So I'm going to show you how to do a tradeoff curve in parallel.",
                    "label": 1
                },
                {
                    "sent": "For a lasso problem.",
                    "label": 0
                }
            ]
        },
        "clip_27": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So before I get into that a little bit more about parameters, so I said civic Spike and do parameterized problems.",
                    "label": 0
                },
                {
                    "sent": "So what a parameter is is a symbolic representation of a constant.",
                    "label": 0
                },
                {
                    "sent": "So it has symbolic attributes like assign and dimensions, but it doesn't have a numeric attribute when you create it, it doesn't have a value.",
                    "label": 1
                },
                {
                    "sent": "That's something you assign later.",
                    "label": 0
                },
                {
                    "sent": "And the per point of this is that you can change this without rebuilding the whole problem.",
                    "label": 1
                }
            ]
        },
        "clip_28": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So this is what the syntax looks like.",
                    "label": 0
                },
                {
                    "sent": "So you can see here I create a scalar parameter.",
                    "label": 1
                },
                {
                    "sent": "That's positive.",
                    "label": 1
                },
                {
                    "sent": "This one is a vector of length 5 and it has unknown sign 'cause we didn't specify a sign that's the default.",
                    "label": 0
                },
                {
                    "sent": "And this one has.",
                    "label": 0
                },
                {
                    "sent": "This is a matrix, so 4 by 7 matrix.",
                    "label": 0
                },
                {
                    "sent": "So this is just the same syntax is for variables.",
                    "label": 0
                },
                {
                    "sent": "And so here, this is how you actually instantiate these parameters.",
                    "label": 0
                },
                {
                    "sent": "You assign them a value, you update the value field and so here this is.",
                    "label": 0
                },
                {
                    "sent": "This is basically a matrix of all negative one, all negative ones.",
                    "label": 0
                },
                {
                    "sent": "And so you can see that matches the symbolic attributes of this parameter G if it didn't match, then there would be an error, so you know that these will always be instantiated with something that satisfies these attributes, and so CVS Spike and reason about them.",
                    "label": 0
                }
            ]
        },
        "clip_29": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So here's a lasso problem.",
                    "label": 0
                },
                {
                    "sent": "There's an example where you get to try solving one, and you'll see why this is a really nice optimization problem, But basically the idea with the lasso is that you're solving a regression problem, But you want your answer to be sparse.",
                    "label": 0
                },
                {
                    "sent": "And so you have this regularization that is pushing.",
                    "label": 0
                },
                {
                    "sent": "The variables towards 0.",
                    "label": 0
                },
                {
                    "sent": "And so this is.",
                    "label": 0
                },
                {
                    "sent": "A very natural situation to have a parameter here 'cause you have a tradeoff between the regularization and then getting the best fit.",
                    "label": 0
                },
                {
                    "sent": "And so here's the code to declare this problem so you can see it's just like before you make your variable, you make a parameter here, so we're instantiating gamma and then.",
                    "label": 0
                },
                {
                    "sent": "So here this is kind of nice, so you can give a name to your sub expression.",
                    "label": 0
                },
                {
                    "sent": "So then afterwards you can do error value when you've solved it, and so that's a convenient way to make a tradeoff curve, for example, and then here's our regularization term and then our problem is just to minimize the sum of those two.",
                    "label": 0
                },
                {
                    "sent": "So this here we have no constraints, that's totally fine.",
                    "label": 0
                },
                {
                    "sent": "You need an objective, but you don't need constraints.",
                    "label": 0
                },
                {
                    "sent": "So this is how you declare a lasso problem.",
                    "label": 0
                }
            ]
        },
        "clip_30": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "And this is how you compute a tradeoff curve.",
                    "label": 1
                },
                {
                    "sent": "So this is just this is very basic for loop syntax.",
                    "label": 1
                },
                {
                    "sent": "Or sort of standard Python for loop syntax.",
                    "label": 0
                },
                {
                    "sent": "So basically what we want to do here is find the X that solves the lasso problem for.",
                    "label": 0
                },
                {
                    "sent": "Different instances of gamma for different values of gamma.",
                    "label": 0
                },
                {
                    "sent": "And so we do this using a for loop.",
                    "label": 0
                },
                {
                    "sent": "We iterate over this this list of values and so this means.",
                    "label": 0
                },
                {
                    "sent": "That we have values that are evenly spaced in log rhythmic space.",
                    "label": 0
                },
                {
                    "sent": "So from 10 to the minus four to 10 to the 2nd, and by default it's 100 values.",
                    "label": 0
                },
                {
                    "sent": "But you could get more.",
                    "label": 0
                },
                {
                    "sent": "And so it's going to iterate over this list.",
                    "label": 0
                },
                {
                    "sent": "Answer Val is going to be started at 10 for the next one, the next one, and then we assign that to gamma and then we solve the problem.",
                    "label": 0
                },
                {
                    "sent": "So notice we don't have to reconstruct the problem, you just solve it.",
                    "label": 0
                },
                {
                    "sent": "The parameter is already in there.",
                    "label": 0
                },
                {
                    "sent": "And then we get out a solution and so we append that to our list.",
                    "label": 0
                },
                {
                    "sent": "So this is how this is one way to compute tradeoff curve.",
                    "label": 0
                }
            ]
        },
        "clip_31": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "And so this is the sort of thing you would get.",
                    "label": 0
                },
                {
                    "sent": "If you this is the tradeoff between the sum of squares error and then the regularization term.",
                    "label": 0
                },
                {
                    "sent": "And so Gamma is sort of implicit in here, so this is for a very large gamma up here, which means that this is the only term that matters, and so here you would see that all the entries of X.",
                    "label": 0
                },
                {
                    "sent": "So this whole thing evaluates to zero, which means all the entries of X or 0.",
                    "label": 0
                },
                {
                    "sent": "Which is what you would expect if you were just trying to minimize this.",
                    "label": 0
                },
                {
                    "sent": "On the other end, you have a really tiny gamma.",
                    "label": 0
                },
                {
                    "sent": "This doesn't matter at all, you just care about this and so here you can see this is the best fit that it can get.",
                    "label": 0
                },
                {
                    "sent": "For this linear system.",
                    "label": 0
                },
                {
                    "sent": "And so as you iterate over the gammas, you're going to get all the different places in this tradeoff curve.",
                    "label": 1
                }
            ]
        },
        "clip_32": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "And if you were to plot the entries of X, you would see how they're gradually pushed to zero overtime.",
                    "label": 1
                },
                {
                    "sent": "So here is gamma on the bottom and then this is.",
                    "label": 0
                },
                {
                    "sent": "Problem where X is 10 different entries, so it's plotting them and so you can see that it starts off the initially.",
                    "label": 0
                },
                {
                    "sent": "The regularization isn't doing anything, none of them are zero, but overtime they start moving towards zero, though it's not monotonic.",
                    "label": 0
                },
                {
                    "sent": "Some of them increase before they decrease.",
                    "label": 0
                },
                {
                    "sent": "Some of them go to zero, then go away from zero, and then you get a certain point.",
                    "label": 0
                },
                {
                    "sent": "They're all zero and there's an analytical solution.",
                    "label": 0
                },
                {
                    "sent": "Actually for what that point is.",
                    "label": 0
                },
                {
                    "sent": "Yeah.",
                    "label": 0
                },
                {
                    "sent": "Initialization first ever solving.",
                    "label": 0
                },
                {
                    "sent": "Initialization play this case you would you would use basically a priest that we've ever isation.",
                    "label": 0
                },
                {
                    "sent": "Oh so so use the value from the last one to help you complete the next one.",
                    "label": 0
                },
                {
                    "sent": "Yeah so for.",
                    "label": 0
                },
                {
                    "sent": "That functionality isn't there right now for Interior Point methods.",
                    "label": 0
                },
                {
                    "sent": "It doesn't really help, but for there's also as I mentioned, there's a first order solver.",
                    "label": 0
                },
                {
                    "sent": "There would be a very logical thing to do, and I'm going to add that soon.",
                    "label": 0
                },
                {
                    "sent": "Yeah, so that's a good point.",
                    "label": 0
                },
                {
                    "sent": "In addition to parameters, you would also want Worm starting in some cases.",
                    "label": 0
                },
                {
                    "sent": "OK, but you could.",
                    "label": 0
                }
            ]
        },
        "clip_33": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "There are lots of ways you can make these tradeoff curves.",
                    "label": 0
                },
                {
                    "sent": "This isn't something that special deceive expire.",
                    "label": 0
                },
                {
                    "sent": "But this is more interesting.",
                    "label": 0
                },
                {
                    "sent": "OK, so here we're going to calculate the regularization path in parallel.",
                    "label": 1
                },
                {
                    "sent": "And so we use this built in standard Library in Python And we use this concept called a pool, which is basically a bunch of worker processes that are instantiated and sit there waiting for jobs and when they get a job they do it and then they go back to the pool and wait for more work.",
                    "label": 0
                },
                {
                    "sent": "And so we make a function that does the same thing that for loop did.",
                    "label": 0
                },
                {
                    "sent": "It just assigns a value to gamma, solves the problem, returns the solution.",
                    "label": 1
                },
                {
                    "sent": "And then this is all it takes to do this in parallel.",
                    "label": 0
                },
                {
                    "sent": "We make this pool.",
                    "label": 0
                },
                {
                    "sent": "We assign however many processes we think is make sense for machine and then you do this map which applies this function.",
                    "label": 0
                },
                {
                    "sent": "Basically to all the entries in this list, but it's doing it in parallel using this pool abstraction.",
                    "label": 0
                },
                {
                    "sent": "And so this is a really.",
                    "label": 0
                }
            ]
        },
        "clip_34": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Perfect problem for parallelism because this is what we call embarrassingly parallel, meaning you can solve all of these problems totally independently.",
                    "label": 0
                },
                {
                    "sent": "There's no.",
                    "label": 0
                },
                {
                    "sent": "There's no ordering that we need to enforce.",
                    "label": 0
                },
                {
                    "sent": "OK, so here are some numbers.",
                    "label": 0
                },
                {
                    "sent": "It will tell you a little bit more about performance.",
                    "label": 0
                },
                {
                    "sent": "So we have a lasso problem with 500,000 nonzeros and this is a dense matrix and then we would want to do 100 values of gamma in our tradeoff curve and so.",
                    "label": 1
                },
                {
                    "sent": "On my laptop it takes 4 seconds to solve this problem.",
                    "label": 0
                },
                {
                    "sent": "And so.",
                    "label": 0
                },
                {
                    "sent": "And that's using this solver, and so you can see as you would expect, if you solve 100 of them, it takes 400 seconds.",
                    "label": 1
                },
                {
                    "sent": "This is using the for loop.",
                    "label": 0
                },
                {
                    "sent": "But if instead you do that parallel construction, which is really just as simple as the for loop in Python.",
                    "label": 1
                },
                {
                    "sent": "Then you get a parallel speedup.",
                    "label": 0
                },
                {
                    "sent": "And so you can see it's not a four.",
                    "label": 0
                },
                {
                    "sent": "This is using four processes, so it's taking advantage of the four cores on the MacBook Pro.",
                    "label": 0
                },
                {
                    "sent": "And so this isn't a full parallel speedup, but it's pretty good.",
                    "label": 0
                },
                {
                    "sent": "Right, and so this is using just the built in things in Python in the standard library.",
                    "label": 0
                },
                {
                    "sent": "And so here if you do more processes, it's not going to help 'cause you only four cores, but I also did it on a 32 core machine and so there each core was a little slower.",
                    "label": 0
                },
                {
                    "sent": "It took about 6 seconds to solve the problem.",
                    "label": 0
                },
                {
                    "sent": "But this time when you scale to 32 processes, you continue to get speedup, and so here in the end it only took a 10th as long to solve this problem of computing the tradeoff curve.",
                    "label": 0
                },
                {
                    "sent": "And so again, this isn't impossible.",
                    "label": 0
                },
                {
                    "sent": "Without CV Xpi you could do like the MATLAB parallel toolbox and CDX, or you can use some special, I mean a lasso problem is a very intensively studied problem and something that people have developed a lot of tools for.",
                    "label": 0
                },
                {
                    "sent": "And so if all you care about is the lasso, then.",
                    "label": 0
                },
                {
                    "sent": "You would use one of those tools, but The thing is, this is completely general.",
                    "label": 0
                },
                {
                    "sent": "This is doing a tradeoff curve.",
                    "label": 0
                }
            ]
        },
        "clip_35": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "For any problem whatsoever that has.",
                    "label": 0
                },
                {
                    "sent": "That has this parameter that's waiting to objectives.",
                    "label": 0
                },
                {
                    "sent": "Any problem that you can express in CV xpi.",
                    "label": 0
                },
                {
                    "sent": "So you could try, you know if you just want to modify the last problem, you could say Oh my weights have to be non negative or they are in some box.",
                    "label": 0
                },
                {
                    "sent": "You could Add all kinds of constraints and it's no big deal.",
                    "label": 0
                },
                {
                    "sent": "It's exactly the same code as before.",
                    "label": 0
                },
                {
                    "sent": "All you do is add one constraint to your problem definition.",
                    "label": 0
                },
                {
                    "sent": "And so again, this makes this means that signifies a really useful prototyping tool.",
                    "label": 0
                },
                {
                    "sent": "Anne.",
                    "label": 0
                },
                {
                    "sent": "Not just because it's easy to express your problem which I've already shown you, but also because you have access to these Python features that allow you to do a lot of exploration really easily.",
                    "label": 0
                },
                {
                    "sent": "OK, and so we have a problem about the lasso in that file that you downloaded and so you can see why why this is an interesting problem.",
                    "label": 0
                },
                {
                    "sent": "And this comes from a field called compressed sensing.",
                    "label": 0
                },
                {
                    "sent": "And so if you go to.",
                    "label": 0
                },
                {
                    "sent": "If you go back to that.",
                    "label": 0
                },
                {
                    "sent": "Exercise those exercises.",
                    "label": 0
                },
                {
                    "sent": "There's a lasso problem.",
                    "label": 0
                },
                {
                    "sent": "And so here you can compare Ridge regression, which is this this guy versus a lasso first bar signal.",
                    "label": 0
                },
                {
                    "sent": "And so again, this is nice because it's easy.",
                    "label": 0
                },
                {
                    "sent": "It's really easy, you just change one, you just change the function you're calling and you get to solve a completely different problem.",
                    "label": 0
                }
            ]
        },
        "clip_36": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Alright, I'm going to continue now with another example and this one.",
                    "label": 0
                },
                {
                    "sent": "Is again in the spirit of why is it interesting to have this in Python?",
                    "label": 0
                },
                {
                    "sent": "So this example is about a different way of thinking about optimization problems, so that's possible because you have this modern language within Python And so this is a way of thinking about problems.",
                    "label": 0
                },
                {
                    "sent": "That's more object oriented, and so we're going to look at a single commodity flow problem.",
                    "label": 1
                }
            ]
        },
        "clip_37": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "In a single commodity flow problem, you have a directed graph with P nodes, an edges.",
                    "label": 1
                },
                {
                    "sent": "Each edge has a flow on it.",
                    "label": 0
                },
                {
                    "sent": "This is a variable in our problem.",
                    "label": 0
                },
                {
                    "sent": "And each node has a source or sink.",
                    "label": 0
                },
                {
                    "sent": "Going into it and so you can think of this as an extra edge that just goes into that node directly, or as flow that's being generated on that node.",
                    "label": 0
                },
                {
                    "sent": "And again, this is another variable.",
                    "label": 0
                },
                {
                    "sent": "And so our problem is here.",
                    "label": 1
                },
                {
                    "sent": "OK, we have these convex cost functions.",
                    "label": 0
                },
                {
                    "sent": "On our flows in our sources, slash sinks.",
                    "label": 0
                },
                {
                    "sent": "And we have a constraint that there's zero net flow at each node, so the node has flow coming in from edges and it has its internal source, and so those together after some to 0.",
                    "label": 1
                },
                {
                    "sent": "And so that's the definition of the single commodity flow framework.",
                    "label": 0
                },
                {
                    "sent": "And to elaborate here, these so these are just any convex cost functions whatsoever.",
                    "label": 1
                },
                {
                    "sent": "They can include constraints, so here the only constraint I list is that there's zero net flow at each node.",
                    "label": 0
                },
                {
                    "sent": "But you can imagine the constraints being embedded in here.",
                    "label": 0
                },
                {
                    "sent": "So something like the flow being in a range.",
                    "label": 0
                },
                {
                    "sent": "Would be could be part of this function.",
                    "label": 0
                }
            ]
        },
        "clip_38": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So here's a way to express that constraint that the net flow is zero, and this is a very common approach, which is to create something called an incidence matrix or adjacency matrix and how this works is you have this matrix which has one one row for each node and one column for each edge, and the entries every entry in this matrix represents some interaction between a node in an edge.",
                    "label": 1
                },
                {
                    "sent": "So for example, remember the edges are directed so they're leaving some node.",
                    "label": 0
                },
                {
                    "sent": "In entering another, they have an orientation.",
                    "label": 0
                },
                {
                    "sent": "And so we can define it.",
                    "label": 0
                },
                {
                    "sent": "Say that this is entry AIJ is 1.",
                    "label": 0
                },
                {
                    "sent": "If this edge is leaving the node minus one if it's entering it.",
                    "label": 0
                },
                {
                    "sent": "Otherwise it's zero.",
                    "label": 0
                },
                {
                    "sent": "So this is a very very sparse matrix which represents our graph structure.",
                    "label": 1
                },
                {
                    "sent": "And now we can write this zero net flow constraint just like this zero AF equals S. Where F is the vector of all the flows and S is the vector of all these sources.",
                    "label": 0
                },
                {
                    "sent": "And so we arrive at this problem, which is a perfectly reasonable reasonable formulation of the problem.",
                    "label": 0
                },
                {
                    "sent": "Mathematically, this is all we would want.",
                    "label": 0
                },
                {
                    "sent": "But there's something a little strange.",
                    "label": 0
                },
                {
                    "sent": "Which is that we started with a problem about a graph, nodes and edges, and we ended up with this formulation that's just about matrices and vectors, right?",
                    "label": 0
                },
                {
                    "sent": "There's no node or edge here, at least explicitly.",
                    "label": 0
                },
                {
                    "sent": "And so this may not be a computational issue, because again, this is sparse.",
                    "label": 0
                },
                {
                    "sent": "You can take advantage of that sparsity, but conceptually argue that this is.",
                    "label": 0
                },
                {
                    "sent": "It's uh, it's a little strange and there's a better way to think about it.",
                    "label": 0
                }
            ]
        },
        "clip_39": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "And so the idea is to have objects that represent nodes and objects that represent edges an all the information.",
                    "label": 0
                },
                {
                    "sent": "All the intelligence about what these nodes mean and what these edges mean is embedded in those objects versus in this external problem, where you're sort of losing the connection between the node and then these costs and all the different parts of it.",
                    "label": 0
                },
                {
                    "sent": "And so a node object.",
                    "label": 1
                },
                {
                    "sent": "It has a source that's an internal thing.",
                    "label": 0
                },
                {
                    "sent": "Nobody else needs to know about that.",
                    "label": 0
                },
                {
                    "sent": "So you have this nice abstraction.",
                    "label": 0
                },
                {
                    "sent": "And then the cost.",
                    "label": 0
                },
                {
                    "sent": "So that's some function of the source, and that's external.",
                    "label": 0
                },
                {
                    "sent": "You need to export that and then you have constraints, and there might be constraints on the source as part of the cost function.",
                    "label": 0
                },
                {
                    "sent": "And then there's a net flow constraint.",
                    "label": 0
                },
                {
                    "sent": "So that's going to be embedded in the node.",
                    "label": 1
                },
                {
                    "sent": "And the edge object is similar.",
                    "label": 0
                },
                {
                    "sent": "It's going to have a flow variable.",
                    "label": 0
                },
                {
                    "sent": "Which is internal as before, and then these cost and these constraints that are exported.",
                    "label": 0
                },
                {
                    "sent": "And so to solve this problem, what it looks like is just this code right here.",
                    "label": 0
                },
                {
                    "sent": "So we have a list of nodes and a list of edges.",
                    "label": 0
                },
                {
                    "sent": "We concatenate them.",
                    "label": 0
                },
                {
                    "sent": "That's what that means in Python And then we iterate over them and we take the cost for every one of these objects and we sum them together.",
                    "label": 0
                },
                {
                    "sent": "And then our objective is to minimize that cost and we do the same thing with the nodes in the edges.",
                    "label": 0
                },
                {
                    "sent": "We concatenate all the constraints and then we solve our problem.",
                    "label": 0
                },
                {
                    "sent": "So the thing to notice here is there really isn't very much information here, right?",
                    "label": 0
                },
                {
                    "sent": "This is very generic, which is good because we could use this for example for multi commodity flow problem or some other variant of a flow problem.",
                    "label": 0
                },
                {
                    "sent": "But it's also good because.",
                    "label": 0
                },
                {
                    "sent": "We're putting the information where it belongs, which is in the nodes and in the edges.",
                    "label": 0
                },
                {
                    "sent": "So let me let me explain that more.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                }
            ]
        },
        "clip_40": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Here's a node object.",
                    "label": 0
                },
                {
                    "sent": "So you can see this is this is basically the syntax for the constructor.",
                    "label": 0
                },
                {
                    "sent": "This is how this is explaining the function that creates a node.",
                    "label": 0
                },
                {
                    "sent": "And so you can see, like I said, it has a source and this is.",
                    "label": 0
                },
                {
                    "sent": "An internal thing.",
                    "label": 0
                },
                {
                    "sent": "It's a property of the node.",
                    "label": 0
                },
                {
                    "sent": "It has a cost that something we pass in.",
                    "label": 0
                },
                {
                    "sent": "It just applies a function to the source and it creates this cost attribute which we access to collect all the local costs into a global cost.",
                    "label": 0
                },
                {
                    "sent": "And then it has a set of flows that are going into it from different edges.",
                    "label": 0
                },
                {
                    "sent": "This is how we're going to do the net flow equals zero constraint.",
                    "label": 1
                },
                {
                    "sent": "And then here this is.",
                    "label": 0
                },
                {
                    "sent": "This is exactly that constraint.",
                    "label": 0
                },
                {
                    "sent": "So we sum up all the flows going into it.",
                    "label": 0
                },
                {
                    "sent": "We add in the source, we get the net flow and then we have this constraint that the net flow is zero and so this is a list with just that.",
                    "label": 0
                },
                {
                    "sent": "That one entry in it.",
                    "label": 0
                },
                {
                    "sent": "And so you can think of this as like the bare bones node.",
                    "label": 0
                },
                {
                    "sent": "This is the node.",
                    "label": 0
                },
                {
                    "sent": "The base class for all possible nodes, and so you could imagine extending this class to represent something in your model.",
                    "label": 0
                },
                {
                    "sent": "So, for example, suppose we're looking at a power grid model, which is a single commodity flow problem.",
                    "label": 1
                },
                {
                    "sent": "You're looking at the flow of power.",
                    "label": 0
                },
                {
                    "sent": "You could have a generator object which is like a subclass of this node.",
                    "label": 0
                },
                {
                    "sent": "And a generator might have something like a maximum power output an so that would be you would have a constructor that would take that instead of this.",
                    "label": 0
                },
                {
                    "sent": "And so, and it would have the constraints.",
                    "label": 0
                },
                {
                    "sent": "The additional constraints that the power the sources say between zero and that maximum, and so now.",
                    "label": 0
                },
                {
                    "sent": "When we can just create this generator object and we know it's doing everything that we want right?",
                    "label": 0
                },
                {
                    "sent": "We don't have to worry about this global problem.",
                    "label": 0
                },
                {
                    "sent": "How this all fits in in the big picture in the global problem, it's all automatically created by CDX Pie.",
                    "label": 0
                },
                {
                    "sent": "Using that code that I showed you before.",
                    "label": 0
                },
                {
                    "sent": "So using this.",
                    "label": 0
                }
            ]
        },
        "clip_41": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Code you go from all these local objects and in a very generic way you construct a global problem.",
                    "label": 0
                }
            ]
        },
        "clip_42": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So another thing you could have a say in our power grid situation.",
                    "label": 0
                },
                {
                    "sent": "We could have a consumer and.",
                    "label": 0
                },
                {
                    "sent": "That's a totally different situation.",
                    "label": 0
                },
                {
                    "sent": "You there?",
                    "label": 0
                },
                {
                    "sent": "They're not generating power.",
                    "label": 0
                },
                {
                    "sent": "They have a fixed demand that you need to me, and so there you would have a constraint that, like the source, equals this fixed demand, and so by subclassing this node in building out, we can have ever more complicated.",
                    "label": 0
                },
                {
                    "sent": "Models.",
                    "label": 0
                },
                {
                    "sent": "For these single commodity flow problem and we don't really have to worry about the complexity.",
                    "label": 1
                },
                {
                    "sent": "Because we have this abstraction.",
                    "label": 0
                },
                {
                    "sent": "This in capsulation through the object.",
                    "label": 0
                }
            ]
        },
        "clip_43": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So here's the same thing for an edge.",
                    "label": 0
                },
                {
                    "sent": "This is the base edge object.",
                    "label": 1
                },
                {
                    "sent": "The thing you would extend.",
                    "label": 0
                },
                {
                    "sent": "And so here again, you have this flow, which is an internal variable.",
                    "label": 0
                },
                {
                    "sent": "You have a cost which we apply to the flow and then we have a Connect method and so this is how the this is.",
                    "label": 0
                },
                {
                    "sent": "The alternative to having that matrix that incidence matrix.",
                    "label": 1
                },
                {
                    "sent": "Is you have a function of an edge which is to connect two nodes across it.",
                    "label": 0
                },
                {
                    "sent": "And so this so you would do Edge Dot Connect and then you would give it the two nodes that it's linking and it just takes care internally of what that means.",
                    "label": 0
                },
                {
                    "sent": "In this case, it means that the net flow is zero, and so again you could imagine extending this and you actually will.",
                    "label": 0
                },
                {
                    "sent": "This is one of the exercises, so you'll get to see how this works and think about this.",
                    "label": 0
                },
                {
                    "sent": "You can imagine extending this to be edge with the capacity, so then you would have another constraint that the net flow said the absolute value of the flow is bounded.",
                    "label": 0
                },
                {
                    "sent": "And so.",
                    "label": 0
                },
                {
                    "sent": "Again, you can make these ever more elaborate.",
                    "label": 0
                },
                {
                    "sent": "Representations of edges.",
                    "label": 0
                },
                {
                    "sent": "And manage the complexity and make it very understandable and readable by using this object oriented framework.",
                    "label": 0
                },
                {
                    "sent": "And I think the I'll go through an example problem in a second, but I think the really interesting thing is if you actually have.",
                    "label": 0
                },
                {
                    "sent": "Anne.",
                    "label": 0
                },
                {
                    "sent": "Objects which have many objects in them.",
                    "label": 0
                },
                {
                    "sent": "So for example, you could have.",
                    "label": 0
                },
                {
                    "sent": "In our power grid, maybe you could have an entire like block of a city, which is just it has some edges going out and it is some edges going in, but all the internals are just taken care of.",
                    "label": 0
                },
                {
                    "sent": "They're all.",
                    "label": 0
                },
                {
                    "sent": "They're all represented using these objects.",
                    "label": 0
                },
                {
                    "sent": "That are all somehow concatenated into this higher level.",
                    "label": 0
                }
            ]
        },
        "clip_44": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So to make the whole single commodity flow thing more concrete, here's an example.",
                    "label": 1
                },
                {
                    "sent": "So we have a grid of nodes and we want to send a unit of flow from some origin to some destination.",
                    "label": 1
                },
                {
                    "sent": "And so there we have the constraint that there's one unit of flow going into this origin.",
                    "label": 0
                },
                {
                    "sent": "There's one order flow coming out of the destination, and everybody else has no no extra source flow, no internal flow, and then our cost is on the edges.",
                    "label": 0
                },
                {
                    "sent": "So we have some convex cost on the edge flow, and so here.",
                    "label": 0
                },
                {
                    "sent": "It's a combination of balance between the absolute value and between.",
                    "label": 0
                },
                {
                    "sent": "The square, so similar.",
                    "label": 0
                },
                {
                    "sent": "Actually the lasso that you just did.",
                    "label": 0
                },
                {
                    "sent": "And so this this W. This is just to make the edges different, so each edge has a different weight.",
                    "label": 0
                },
                {
                    "sent": "That makes it better or worse than another.",
                    "label": 0
                }
            ]
        },
        "clip_45": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So here's what we get if we have Lambda equals zero we have.",
                    "label": 0
                },
                {
                    "sent": "This is actually solving a shortest path problem, so this is the unique shortest path from here to here.",
                    "label": 0
                },
                {
                    "sent": "Given those edge weights now, this is.",
                    "label": 0
                },
                {
                    "sent": "A totally over the top way to solve a shortest path problem.",
                    "label": 1
                },
                {
                    "sent": "Obviously there's.",
                    "label": 0
                },
                {
                    "sent": "But it is nice that you can do something like that very easily and it could fit into a larger structure.",
                    "label": 0
                },
                {
                    "sent": "So again, remember, this is we're bound.",
                    "label": 0
                }
            ]
        },
        "clip_46": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And sing just like in the last.",
                    "label": 0
                },
                {
                    "sent": "So we're balancing a squared term in an absolute value term and so here.",
                    "label": 0
                },
                {
                    "sent": "This is when the squared term is to.",
                    "label": 0
                }
            ]
        },
        "clip_47": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Gone with Lambda equals 0.",
                    "label": 0
                }
            ]
        },
        "clip_48": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So if we totally if we only focus on the squared term, if we get rid of the absolute value term, then you get some sort of diffusion model and so you could say you have an amp going in here and amp coming out of here.",
                    "label": 0
                },
                {
                    "sent": "And these are all resistors on these edges and this is how much current is going across each resistor.",
                    "label": 0
                },
                {
                    "sent": "So you could interpret that way, so just.",
                    "label": 0
                },
                {
                    "sent": "You probably saw this already, but this is showing how much flow is on each edge.",
                    "label": 0
                },
                {
                    "sent": "The intensity of the color represents how much flows on each edge.",
                    "label": 0
                }
            ]
        },
        "clip_49": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And you could do something in between and again, this is in the spirit of experimentation and prototyping, 'cause who knows what this actually means.",
                    "label": 0
                },
                {
                    "sent": "You still have some diffusion.",
                    "label": 0
                },
                {
                    "sent": "This is you're balancing both terms equally, so you still have some diffusion and you still have some, but you also are sort of narrowing in on some good paths.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "Yeah, so that's an example of.",
                    "label": 0
                },
                {
                    "sent": "Single commodity flow.",
                    "label": 0
                },
                {
                    "sent": "I've created an exercise that sort of illustrates this whole object oriented thing.",
                    "label": 0
                },
                {
                    "sent": "And that's called power Grid, so it's in that folder that you downloaded power grid \u03c0.",
                    "label": 0
                },
                {
                    "sent": "And so they have the classes that I mentioned, which are the generator, the consumer, etc.",
                    "label": 0
                },
                {
                    "sent": "There's a Fuller description in that PDF that's in there theexercises.pdf.",
                    "label": 0
                },
                {
                    "sent": "And so using this you can see how to represent the problem using these objects and it will plot.",
                    "label": 0
                },
                {
                    "sent": "It'll make some cool plot like this for you, which shows how the power is going across the network.",
                    "label": 0
                },
                {
                    "sent": "But",
                    "label": 0
                }
            ]
        },
        "clip_50": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Before we get into that, let me just say a little bit more about.",
                    "label": 0
                },
                {
                    "sent": "CVS Pie an where it's going?",
                    "label": 0
                }
            ]
        },
        "clip_51": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So one thing I hope I've convinced you of is that C convex optimization is very easy with CVS by it's very easy to represent convex problems.",
                    "label": 1
                },
                {
                    "sent": "To change a convex problem around to try lots of different models quickly.",
                    "label": 0
                },
                {
                    "sent": "And I've also shown you how it can mix with higher level Python concepts like parallelism in this object oriented stuff that you'll get to play with soon.",
                    "label": 0
                },
                {
                    "sent": "And so that's an example of why this is useful to have in Python.",
                    "label": 0
                },
                {
                    "sent": "Why it's important that your modeling language be embedded in a high level?",
                    "label": 0
                },
                {
                    "sent": "Well designed language.",
                    "label": 0
                },
                {
                    "sent": "And one thing I didn't get to show you, but is equally interesting is how you can use Civic Spy as a building block for these.",
                    "label": 0
                },
                {
                    "sent": "Higher level algorithms that use that have convex subproblems, but are themselves either nonconvex or involve some sort of distributed optimization, and that's also very, very easy to do when you combine Python in these NSX by these.",
                    "label": 1
                },
                {
                    "sent": "So the just basic Python parallelism stuff.",
                    "label": 0
                },
                {
                    "sent": "And.",
                    "label": 0
                },
                {
                    "sent": "These basic civics by models.",
                    "label": 0
                },
                {
                    "sent": "And.",
                    "label": 0
                }
            ]
        },
        "clip_52": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "In terms of the future of CBS Pie.",
                    "label": 0
                },
                {
                    "sent": "So it's already a very useful tool for prototyping.",
                    "label": 1
                },
                {
                    "sent": "People use it all the time in our group and.",
                    "label": 0
                },
                {
                    "sent": "At Stanford but I'd like it to be more than that.",
                    "label": 0
                },
                {
                    "sent": "I would like it to be to really so.",
                    "label": 0
                },
                {
                    "sent": "You have this prototyping tool that implies at some point you're going to have to implement your own solver.",
                    "label": 0
                },
                {
                    "sent": "Which is a lot of work.",
                    "label": 0
                },
                {
                    "sent": "And ideally I would like to save you that work.",
                    "label": 0
                },
                {
                    "sent": "And seeing Spy is never going to be as fast as your custom implementation, but if he can get 90% of the way there, maybe that's good enough.",
                    "label": 0
                },
                {
                    "sent": "Depending on your application.",
                    "label": 0
                },
                {
                    "sent": "In particular, one thing that's coming soon is.",
                    "label": 0
                },
                {
                    "sent": "Very large scale problems where you need to either distribute the computation across multiple machines or use GPU's or do something like that for this to be feasible.",
                    "label": 0
                },
                {
                    "sent": "And so here this is actually more in the level of prototyping, because at this point you can't really even prototype these huge problems.",
                    "label": 0
                },
                {
                    "sent": "It's not that you're not using the absolute optimal solver, it just doesn't really work with the algorithms and solvers that are implemented right now.",
                    "label": 0
                },
                {
                    "sent": "And so the way to I'm going to get to this and is through the idea of an abstract linear operator, and so I showed you a long time ago that we have this standard form.",
                    "label": 0
                },
                {
                    "sent": "Added.",
                    "label": 0
                }
            ]
        },
        "clip_53": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "We have this conic standard form and you can see here really the only thing in this standard form all the information is in this matrix.",
                    "label": 0
                },
                {
                    "sent": "And so that's what controls how long it takes to solve the problem, and that's what embeds all the structure of the problem.",
                    "label": 0
                },
                {
                    "sent": "And so one thing that's interesting is for certain methods you don't actually have to form this matrix, you can represent it as a function where you can multiply by the matrix and its transpose, and you can use it for matrix free algorithms that do something like constant gradient.",
                    "label": 0
                },
                {
                    "sent": "And so that's what I'm looking at now, and part of one thing you get out of this is distributed backends, another is.",
                    "label": 0
                },
                {
                    "sent": "Things like a Fourier transform or a convolution where you could make this matrix, but you would never want to do that because it's very inefficient.",
                    "label": 0
                },
                {
                    "sent": "And let me say a little bit more about performance.",
                    "label": 0
                },
                {
                    "sent": "So you saw you solve this lasso problem.",
                    "label": 0
                },
                {
                    "sent": "And I don't know if you tried this, but if you try making it bigger eventually it's going to take just too long to be to be very interesting, and so this is actually a plot for CVX.",
                    "label": 0
                },
                {
                    "sent": "But CBS pie is pretty similar in performance, and so this says, well, you can get to about 10 to this is.",
                    "label": 0
                },
                {
                    "sent": "500 features and then.",
                    "label": 0
                },
                {
                    "sent": "Some number of training examples and so you can see 10 to the 4th.",
                    "label": 0
                },
                {
                    "sent": "Training examples that takes about 11 seconds.",
                    "label": 0
                },
                {
                    "sent": "It's not terrible.",
                    "label": 0
                },
                {
                    "sent": "10 to the 5th.",
                    "label": 0
                },
                {
                    "sent": "That's starting to get into 100 seconds, two minutes, and as we scale more, eventually it's just too long.",
                    "label": 0
                },
                {
                    "sent": "But the thing that's interesting here is that this plot.",
                    "label": 0
                },
                {
                    "sent": "Is actually also a totally general convex solver.",
                    "label": 0
                },
                {
                    "sent": "So this is using GPU's, it's using a version of a DMM.",
                    "label": 0
                },
                {
                    "sent": "And so you can see here you're actually getting enormous problems.",
                    "label": 0
                },
                {
                    "sent": "And solving them in a very short time.",
                    "label": 0
                },
                {
                    "sent": "So this one right here.",
                    "label": 0
                },
                {
                    "sent": "This is with a billion entries in your matrix.",
                    "label": 0
                },
                {
                    "sent": "A dense matrix with a billion entries and it solves it in 11 seconds.",
                    "label": 0
                },
                {
                    "sent": "And so this could be a back end for CVS Pie.",
                    "label": 0
                },
                {
                    "sent": "It's a bit more complicated.",
                    "label": 0
                },
                {
                    "sent": "It's not the conic form, it's doing something else.",
                    "label": 0
                },
                {
                    "sent": "But I think this shows that.",
                    "label": 0
                },
                {
                    "sent": "At the moment, the scale of the problems you can solve using these very general.",
                    "label": 0
                },
                {
                    "sent": "Modern languages and very general frameworks is limited, but that's not an inherent limitation.",
                    "label": 0
                },
                {
                    "sent": "That's something I think we can handle.",
                    "label": 0
                },
                {
                    "sent": "So that's all I'm going to say about CVS Pie.",
                    "label": 0
                },
                {
                    "sent": "I have that exercise that you can take a look at, but I guess any any questions about any of this stuff?",
                    "label": 0
                },
                {
                    "sent": "Before we get into the exercise.",
                    "label": 0
                },
                {
                    "sent": "OK.",
                    "label": 0
                }
            ]
        }
    }
}