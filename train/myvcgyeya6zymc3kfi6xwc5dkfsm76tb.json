{
    "id": "myvcgyeya6zymc3kfi6xwc5dkfsm76tb",
    "title": "Scalable Semantic Version Control for Linked Data Management",
    "info": {
        "author": [
            "Claudius Hauptmann, TU Munich"
        ],
        "published": "July 15, 2015",
        "recorded": "June 2015",
        "category": [
            "Top->Computer Science->Big Data",
            "Top->Computer Science->Semantic Web"
        ]
    },
    "url": "http://videolectures.net/eswc2015_hauptmann_linked_data/",
    "segmentation": [
        [
            "So my name is Chris Hoffman.",
            "I work at technician.",
            "You visited munchen.",
            "And we focus on version control for linked data.",
            "The reason is when we have a look at software development in the 90s when when we wanted to share source code or to collaborate, we put on the source code and zip files and people could download the data and the source code and then we figured out this is not practical and something like subversion or Git or clearcase was invented.",
            "And when you have a look at linked data we are putting data into zip files which people can download."
        ],
        [
            "So there are already solutions for version control for link data, and either they are scalable, which means you can add a lot of triples or a lot of different versions, or they are semantic, which means you can access access.",
            "And the data about the versioning itself, while sparkle or reasoners.",
            "But at the moment we couldn't find systems that provide both of this.",
            "So again, it's response time, which is important."
        ],
        [
            "So which what type of queries do we want to support?",
            "So there's always a tradeoff.",
            "We focus on how we want to support the cross version queries.",
            "And something like which triples were modified last month, never related to Portrush.",
            "And targeted queries.",
            "What did we know about water rush in a specific version?",
            "So the second one is a query which is run inside 1 version."
        ],
        [
            "OK, when we have a version control system which modifications have we got on this system?",
            "When we collaborate, we want to create branches.",
            "Modifier triples reviewed this triples to check the quality.",
            "If you are sure this could be a contribution.",
            "We can create a commit.",
            "And merge different branches.",
            "And of course branches that are no longer needed.",
            "We can delete them."
        ],
        [
            "OK, then how do we start the data?",
            "I said we wanted to have a semantic version control system, so the data itself is start as a link data.",
            "Their version based systems.",
            "So each version is start.",
            "I'm going to triple store.",
            "And of course, when we have a lot of different version and big data sets and we need a lot of space, then there are Delta based systems.",
            "They only store the Deltas and there the problem is response time when we want to have a query at the specific versions and the hybrid systems like revision for triples which was presented last in the last workshop on linked data quality.",
            "And some hypergraph based or partial order index structures?"
        ],
        [
            "So we for our system we started with the Delta based schema.",
            "This is a shot and see the big picture.",
            "So what we do is we stop versions of graphs inside a triple store and here we have a graph and this references branches syntax and those references, commits, commits can have 0, one or two previous commits.",
            "So if you have two previous commits emerge.",
            "Iperf only got one previous commit.",
            "It's just an ordinary new version and these commits.",
            "They either add or remove triples, and these triples are stored.",
            "And.",
            "A lot of graphs or contexts and this context is calculated from the hash value of subject, predicate and object.",
            "OK."
        ],
        [
            "And.",
            "If you want to run a query on your historic version, we cannot run it directly because the version doesn't exist.",
            "If it would exist, Moon would need a lot of space.",
            "So what you can do is first calculate which trip is belong to the version.",
            "Which is obviously I'm not the best case if we only use a small part of the triples or the other way is we run our query on all trips that ever existed and then we remove the solutions that are based on versions.",
            "Which is not part of the solution.",
            "So in this example, if you would want to run query on this commit #5, we will use all the triples and then we would select only 222 and three for the solution set and then we have a look only those triples that are added by a previous commit of commit 5.",
            "That I added belong to the version, but they don't must not have a commit between the two commits which removed this one.",
            "OK."
        ],
        [
            "If you have.",
            "This query over here which is looking for.",
            "One triple pattern.",
            "We cannot run it directly.",
            "We have to rewrite it.",
            "And here at the bottom you have the rewritten query and we see a lot of arbitrary length path operators.",
            "They're working pretty well, but they're very slow and we have when we have a lot of versions.",
            "This takes a long time and if you have got a lot of troubles, let's run.",
            "Many times."
        ],
        [
            "OK."
        ],
        [
            "OK.",
            "So if you cannot optimize the query.",
            "We can maybe optimize the query engine becausw the sparkle engines are not optimized for this specific problem.",
            "The reason is there are too many lookup operations every commit.",
            "Then there's a look up on the disk or in the cache version of the disk, whether there's a previous commit.",
            "And this takes a lot of time, so we had the idea to remove or tonight to add a new operator to the query engine.",
            "And this operator is using an in memory index which can be cashed and this index is storing the version information, especially the graph of the commits."
        ],
        [
            "So there our system is basically basically using an four steps.",
            "The first step is loading the commits in an in memory index.",
            "It's basically a hashmap.",
            "Which can be traversed very fast.",
            "This can be used for even for other queries on other versions, as long as the same graph and the version is already loaded."
        ],
        [
            "Then the next step.",
            "When we want to check whether triple is part of revision, we have to go back and look for the last add or delete on this triple.",
            "And thus we have to make a do a partial order planning on the versions.",
            "In this case we wanted check number version #6.",
            "We have to go back and we should not check commit number one before we checked commit two and three."
        ],
        [
            "Then the, but we do want to do is to check whether triples belong to a version.",
            "So this query engines work pipelined.",
            "This means some parts are already called, even if the result is not complete, and then we load for a chunk of triples.",
            "The relations and their relations to commit sorta versions.",
            "And put them in an index in both directions."
        ],
        [
            "So now it's the part where we traverse the graph backwards from the version.",
            "We check for each revision whether there are additions or deletions of triples.",
            "We check whether we have to delete, delete, or remove.",
            "Add them and.",
            "For then we remove the trip before the index becausw.",
            "If you added it, we didn't do not want it to remove.",
            "When we go to an older revision, of course this is repeated until the index is empty or there are no more commits."
        ],
        [
            "So we evaluated this approach.",
            "I repeated the evaluation.",
            "So with an kind of new data set, this is our other data and then in the paper we submitted.",
            "We had some issues with importing this data into this triple stores.",
            "A lot of data and we used a part of DB pedia, especially the class assertions on the version 2014.",
            "It's a round about 28 million triples, and we generated three datasets with different numbers of commits 2828 thousand 280,000 commits.",
            "We distributed the triples equally to the commits.",
            "There were no branches.",
            "And no delete for this first type of evaluation is baseline.",
            "We in this presentation contrast with the paper we used the query with arbitrary length path operators and we repeated it several times.",
            "We had two queries, one that returned several results and one query that returns.",
            "3108 triples of course there is only each query only one triplet pattern, but the limiting factor is the numbers of triples.",
            "We have to test.",
            "Let's, uh."
        ],
        [
            "Look at the data and the result so it's about response time.",
            "And.",
            "The baseline, it wasn't not not that bad, so if you run the first query with seven results on the native sparkle query, it's about 30 seconds.",
            "So this is still acceptable acceptable when we use the 28,000 triples, it's already 5 minutes, which could be improved, and with two thousand 2000.",
            "280,000 commits it's already 50 minutes, which is a little bit long.",
            "So then we tried our approach.",
            "Which looks very promising when we have only little commits, but then we need no optimization and.",
            "There it's needs some time when we have a lot of commits.",
            "But this can be cashed for.",
            "Other, I'm curious the the longest part here is the loading of the commits."
        ],
        [
            "Let's have a look at the second query, which is more interesting because of more data.",
            "So the baseline took 60 seconds without optimization.",
            "More than five 5 minutes for the 28,000 commits, and I wasn't able to run the query for the last version because in the memory was not enough.",
            "OK, that could be because of the query engine, but we can see the optimization.",
            "In contrast isn't that bad so?",
            "We have 6 seconds for the many commits.",
            "And OK, this can be cashed and.",
            "And then we the most time is for the traversal through the graph.",
            "But we have junk sites from 100 triples and if we increase the chunk size, maybe this is even better.",
            "OK."
        ],
        [
            "So our conclusion.",
            "An improvement is possible and we can use Delta based storages.",
            "An inversion triples the thousands.",
            "Of versions and millions of triples.",
            "If we use targeted queries.",
            "And our future work would be an optimization of the implementations.",
            "At the moment we start strings in memory and we could use the internal M identifiers of the triple Star, which would be faster.",
            "We want to use established benchmarks for the evaluation.",
            "Think about what kind of caching would be useful and test the approach with hybrids storage strategies.",
            "And because this is a positive.",
            "Small part of.",
            "Optimization we want to integrate it or would be nice.",
            "We we have to integrate it into existing triple version control systems like revision for triples which was presented the last time.",
            "OK, thank you."
        ]
    ],
    "summarization": {
        "clip_0": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So my name is Chris Hoffman.",
                    "label": 0
                },
                {
                    "sent": "I work at technician.",
                    "label": 0
                },
                {
                    "sent": "You visited munchen.",
                    "label": 0
                },
                {
                    "sent": "And we focus on version control for linked data.",
                    "label": 1
                },
                {
                    "sent": "The reason is when we have a look at software development in the 90s when when we wanted to share source code or to collaborate, we put on the source code and zip files and people could download the data and the source code and then we figured out this is not practical and something like subversion or Git or clearcase was invented.",
                    "label": 0
                },
                {
                    "sent": "And when you have a look at linked data we are putting data into zip files which people can download.",
                    "label": 0
                }
            ]
        },
        "clip_1": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So there are already solutions for version control for link data, and either they are scalable, which means you can add a lot of triples or a lot of different versions, or they are semantic, which means you can access access.",
                    "label": 1
                },
                {
                    "sent": "And the data about the versioning itself, while sparkle or reasoners.",
                    "label": 0
                },
                {
                    "sent": "But at the moment we couldn't find systems that provide both of this.",
                    "label": 0
                },
                {
                    "sent": "So again, it's response time, which is important.",
                    "label": 0
                }
            ]
        },
        "clip_2": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So which what type of queries do we want to support?",
                    "label": 0
                },
                {
                    "sent": "So there's always a tradeoff.",
                    "label": 0
                },
                {
                    "sent": "We focus on how we want to support the cross version queries.",
                    "label": 0
                },
                {
                    "sent": "And something like which triples were modified last month, never related to Portrush.",
                    "label": 1
                },
                {
                    "sent": "And targeted queries.",
                    "label": 1
                },
                {
                    "sent": "What did we know about water rush in a specific version?",
                    "label": 0
                },
                {
                    "sent": "So the second one is a query which is run inside 1 version.",
                    "label": 0
                }
            ]
        },
        "clip_3": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "OK, when we have a version control system which modifications have we got on this system?",
                    "label": 0
                },
                {
                    "sent": "When we collaborate, we want to create branches.",
                    "label": 0
                },
                {
                    "sent": "Modifier triples reviewed this triples to check the quality.",
                    "label": 0
                },
                {
                    "sent": "If you are sure this could be a contribution.",
                    "label": 0
                },
                {
                    "sent": "We can create a commit.",
                    "label": 0
                },
                {
                    "sent": "And merge different branches.",
                    "label": 0
                },
                {
                    "sent": "And of course branches that are no longer needed.",
                    "label": 0
                },
                {
                    "sent": "We can delete them.",
                    "label": 0
                }
            ]
        },
        "clip_4": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "OK, then how do we start the data?",
                    "label": 0
                },
                {
                    "sent": "I said we wanted to have a semantic version control system, so the data itself is start as a link data.",
                    "label": 0
                },
                {
                    "sent": "Their version based systems.",
                    "label": 0
                },
                {
                    "sent": "So each version is start.",
                    "label": 0
                },
                {
                    "sent": "I'm going to triple store.",
                    "label": 0
                },
                {
                    "sent": "And of course, when we have a lot of different version and big data sets and we need a lot of space, then there are Delta based systems.",
                    "label": 0
                },
                {
                    "sent": "They only store the Deltas and there the problem is response time when we want to have a query at the specific versions and the hybrid systems like revision for triples which was presented last in the last workshop on linked data quality.",
                    "label": 0
                },
                {
                    "sent": "And some hypergraph based or partial order index structures?",
                    "label": 1
                }
            ]
        },
        "clip_5": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So we for our system we started with the Delta based schema.",
                    "label": 0
                },
                {
                    "sent": "This is a shot and see the big picture.",
                    "label": 0
                },
                {
                    "sent": "So what we do is we stop versions of graphs inside a triple store and here we have a graph and this references branches syntax and those references, commits, commits can have 0, one or two previous commits.",
                    "label": 0
                },
                {
                    "sent": "So if you have two previous commits emerge.",
                    "label": 0
                },
                {
                    "sent": "Iperf only got one previous commit.",
                    "label": 0
                },
                {
                    "sent": "It's just an ordinary new version and these commits.",
                    "label": 0
                },
                {
                    "sent": "They either add or remove triples, and these triples are stored.",
                    "label": 0
                },
                {
                    "sent": "And.",
                    "label": 0
                },
                {
                    "sent": "A lot of graphs or contexts and this context is calculated from the hash value of subject, predicate and object.",
                    "label": 0
                },
                {
                    "sent": "OK.",
                    "label": 0
                }
            ]
        },
        "clip_6": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And.",
                    "label": 0
                },
                {
                    "sent": "If you want to run a query on your historic version, we cannot run it directly because the version doesn't exist.",
                    "label": 0
                },
                {
                    "sent": "If it would exist, Moon would need a lot of space.",
                    "label": 0
                },
                {
                    "sent": "So what you can do is first calculate which trip is belong to the version.",
                    "label": 0
                },
                {
                    "sent": "Which is obviously I'm not the best case if we only use a small part of the triples or the other way is we run our query on all trips that ever existed and then we remove the solutions that are based on versions.",
                    "label": 0
                },
                {
                    "sent": "Which is not part of the solution.",
                    "label": 0
                },
                {
                    "sent": "So in this example, if you would want to run query on this commit #5, we will use all the triples and then we would select only 222 and three for the solution set and then we have a look only those triples that are added by a previous commit of commit 5.",
                    "label": 0
                },
                {
                    "sent": "That I added belong to the version, but they don't must not have a commit between the two commits which removed this one.",
                    "label": 0
                },
                {
                    "sent": "OK.",
                    "label": 0
                }
            ]
        },
        "clip_7": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "If you have.",
                    "label": 0
                },
                {
                    "sent": "This query over here which is looking for.",
                    "label": 0
                },
                {
                    "sent": "One triple pattern.",
                    "label": 0
                },
                {
                    "sent": "We cannot run it directly.",
                    "label": 0
                },
                {
                    "sent": "We have to rewrite it.",
                    "label": 0
                },
                {
                    "sent": "And here at the bottom you have the rewritten query and we see a lot of arbitrary length path operators.",
                    "label": 0
                },
                {
                    "sent": "They're working pretty well, but they're very slow and we have when we have a lot of versions.",
                    "label": 0
                },
                {
                    "sent": "This takes a long time and if you have got a lot of troubles, let's run.",
                    "label": 0
                },
                {
                    "sent": "Many times.",
                    "label": 0
                }
            ]
        },
        "clip_8": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "OK.",
                    "label": 0
                }
            ]
        },
        "clip_9": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "OK.",
                    "label": 0
                },
                {
                    "sent": "So if you cannot optimize the query.",
                    "label": 0
                },
                {
                    "sent": "We can maybe optimize the query engine becausw the sparkle engines are not optimized for this specific problem.",
                    "label": 1
                },
                {
                    "sent": "The reason is there are too many lookup operations every commit.",
                    "label": 1
                },
                {
                    "sent": "Then there's a look up on the disk or in the cache version of the disk, whether there's a previous commit.",
                    "label": 0
                },
                {
                    "sent": "And this takes a lot of time, so we had the idea to remove or tonight to add a new operator to the query engine.",
                    "label": 0
                },
                {
                    "sent": "And this operator is using an in memory index which can be cashed and this index is storing the version information, especially the graph of the commits.",
                    "label": 0
                }
            ]
        },
        "clip_10": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So there our system is basically basically using an four steps.",
                    "label": 0
                },
                {
                    "sent": "The first step is loading the commits in an in memory index.",
                    "label": 0
                },
                {
                    "sent": "It's basically a hashmap.",
                    "label": 0
                },
                {
                    "sent": "Which can be traversed very fast.",
                    "label": 0
                },
                {
                    "sent": "This can be used for even for other queries on other versions, as long as the same graph and the version is already loaded.",
                    "label": 1
                }
            ]
        },
        "clip_11": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Then the next step.",
                    "label": 0
                },
                {
                    "sent": "When we want to check whether triple is part of revision, we have to go back and look for the last add or delete on this triple.",
                    "label": 0
                },
                {
                    "sent": "And thus we have to make a do a partial order planning on the versions.",
                    "label": 0
                },
                {
                    "sent": "In this case we wanted check number version #6.",
                    "label": 0
                },
                {
                    "sent": "We have to go back and we should not check commit number one before we checked commit two and three.",
                    "label": 0
                }
            ]
        },
        "clip_12": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Then the, but we do want to do is to check whether triples belong to a version.",
                    "label": 0
                },
                {
                    "sent": "So this query engines work pipelined.",
                    "label": 0
                },
                {
                    "sent": "This means some parts are already called, even if the result is not complete, and then we load for a chunk of triples.",
                    "label": 1
                },
                {
                    "sent": "The relations and their relations to commit sorta versions.",
                    "label": 1
                },
                {
                    "sent": "And put them in an index in both directions.",
                    "label": 0
                }
            ]
        },
        "clip_13": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So now it's the part where we traverse the graph backwards from the version.",
                    "label": 0
                },
                {
                    "sent": "We check for each revision whether there are additions or deletions of triples.",
                    "label": 0
                },
                {
                    "sent": "We check whether we have to delete, delete, or remove.",
                    "label": 0
                },
                {
                    "sent": "Add them and.",
                    "label": 0
                },
                {
                    "sent": "For then we remove the trip before the index becausw.",
                    "label": 0
                },
                {
                    "sent": "If you added it, we didn't do not want it to remove.",
                    "label": 0
                },
                {
                    "sent": "When we go to an older revision, of course this is repeated until the index is empty or there are no more commits.",
                    "label": 0
                }
            ]
        },
        "clip_14": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So we evaluated this approach.",
                    "label": 0
                },
                {
                    "sent": "I repeated the evaluation.",
                    "label": 0
                },
                {
                    "sent": "So with an kind of new data set, this is our other data and then in the paper we submitted.",
                    "label": 0
                },
                {
                    "sent": "We had some issues with importing this data into this triple stores.",
                    "label": 0
                },
                {
                    "sent": "A lot of data and we used a part of DB pedia, especially the class assertions on the version 2014.",
                    "label": 1
                },
                {
                    "sent": "It's a round about 28 million triples, and we generated three datasets with different numbers of commits 2828 thousand 280,000 commits.",
                    "label": 1
                },
                {
                    "sent": "We distributed the triples equally to the commits.",
                    "label": 0
                },
                {
                    "sent": "There were no branches.",
                    "label": 0
                },
                {
                    "sent": "And no delete for this first type of evaluation is baseline.",
                    "label": 0
                },
                {
                    "sent": "We in this presentation contrast with the paper we used the query with arbitrary length path operators and we repeated it several times.",
                    "label": 1
                },
                {
                    "sent": "We had two queries, one that returned several results and one query that returns.",
                    "label": 0
                },
                {
                    "sent": "3108 triples of course there is only each query only one triplet pattern, but the limiting factor is the numbers of triples.",
                    "label": 0
                },
                {
                    "sent": "We have to test.",
                    "label": 0
                },
                {
                    "sent": "Let's, uh.",
                    "label": 0
                }
            ]
        },
        "clip_15": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Look at the data and the result so it's about response time.",
                    "label": 0
                },
                {
                    "sent": "And.",
                    "label": 0
                },
                {
                    "sent": "The baseline, it wasn't not not that bad, so if you run the first query with seven results on the native sparkle query, it's about 30 seconds.",
                    "label": 0
                },
                {
                    "sent": "So this is still acceptable acceptable when we use the 28,000 triples, it's already 5 minutes, which could be improved, and with two thousand 2000.",
                    "label": 0
                },
                {
                    "sent": "280,000 commits it's already 50 minutes, which is a little bit long.",
                    "label": 0
                },
                {
                    "sent": "So then we tried our approach.",
                    "label": 0
                },
                {
                    "sent": "Which looks very promising when we have only little commits, but then we need no optimization and.",
                    "label": 0
                },
                {
                    "sent": "There it's needs some time when we have a lot of commits.",
                    "label": 0
                },
                {
                    "sent": "But this can be cashed for.",
                    "label": 0
                },
                {
                    "sent": "Other, I'm curious the the longest part here is the loading of the commits.",
                    "label": 0
                }
            ]
        },
        "clip_16": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Let's have a look at the second query, which is more interesting because of more data.",
                    "label": 0
                },
                {
                    "sent": "So the baseline took 60 seconds without optimization.",
                    "label": 0
                },
                {
                    "sent": "More than five 5 minutes for the 28,000 commits, and I wasn't able to run the query for the last version because in the memory was not enough.",
                    "label": 0
                },
                {
                    "sent": "OK, that could be because of the query engine, but we can see the optimization.",
                    "label": 0
                },
                {
                    "sent": "In contrast isn't that bad so?",
                    "label": 0
                },
                {
                    "sent": "We have 6 seconds for the many commits.",
                    "label": 0
                },
                {
                    "sent": "And OK, this can be cashed and.",
                    "label": 0
                },
                {
                    "sent": "And then we the most time is for the traversal through the graph.",
                    "label": 0
                },
                {
                    "sent": "But we have junk sites from 100 triples and if we increase the chunk size, maybe this is even better.",
                    "label": 0
                },
                {
                    "sent": "OK.",
                    "label": 0
                }
            ]
        },
        "clip_17": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So our conclusion.",
                    "label": 0
                },
                {
                    "sent": "An improvement is possible and we can use Delta based storages.",
                    "label": 0
                },
                {
                    "sent": "An inversion triples the thousands.",
                    "label": 0
                },
                {
                    "sent": "Of versions and millions of triples.",
                    "label": 1
                },
                {
                    "sent": "If we use targeted queries.",
                    "label": 1
                },
                {
                    "sent": "And our future work would be an optimization of the implementations.",
                    "label": 0
                },
                {
                    "sent": "At the moment we start strings in memory and we could use the internal M identifiers of the triple Star, which would be faster.",
                    "label": 1
                },
                {
                    "sent": "We want to use established benchmarks for the evaluation.",
                    "label": 0
                },
                {
                    "sent": "Think about what kind of caching would be useful and test the approach with hybrids storage strategies.",
                    "label": 0
                },
                {
                    "sent": "And because this is a positive.",
                    "label": 0
                },
                {
                    "sent": "Small part of.",
                    "label": 0
                },
                {
                    "sent": "Optimization we want to integrate it or would be nice.",
                    "label": 0
                },
                {
                    "sent": "We we have to integrate it into existing triple version control systems like revision for triples which was presented the last time.",
                    "label": 0
                },
                {
                    "sent": "OK, thank you.",
                    "label": 0
                }
            ]
        }
    }
}