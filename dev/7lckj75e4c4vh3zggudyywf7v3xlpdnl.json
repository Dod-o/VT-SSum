{
    "id": "7lckj75e4c4vh3zggudyywf7v3xlpdnl",
    "title": "OBDA: Query Rewriting or Materialization? In Practice, Both!",
    "info": {
        "author": [
            "Juan F. Sequeda, Department of Computer Science, University of Texas at Austin"
        ],
        "published": "Dec. 19, 2014",
        "recorded": "October 2014",
        "category": [
            "Top->Computer Science->Semantic Web"
        ]
    },
    "url": "http://videolectures.net/iswc2014_sequeda_query_rewriting/",
    "segmentation": [
        [
            "This is joint work with Marcelo Arenas from from Chile and for my advisor at Denver anchor and I want to point out the sponsorship from the NSF for the Student Travel Award.",
            "So let me."
        ],
        [
            "Start out with some historical context.",
            "It's been an early computer science vision to create intelligent systems capable of reasoning by combining logic and data.",
            "So this isn't new and if you look into the literature, there's actually a landmark workshop back in 1977 organized by Gollier Nicholas and Jack Minker, and it said that in this meeting is when the field of logic and data was formed.",
            "So throughout the last several decades, there's been a lot of work in this area of combining logic and data.",
            "For example, the Japanese 5th Generation project they had this goal of creating an artist artificial intelligence computer by combining prologue and its data in relational representation, and this product sparked a lot of different other projects in the world.",
            "For example, MCC, or were from in Austin, TX, LV in the UK and throughout the last several decades.",
            "There's been workshops on expert systems on deductive databases on knowledge representation meets databases.",
            "However, independent advances we've had, we've had also independent advances in the area of data and logic.",
            "So in data we have relational algebra and the studying how we can store and manage data efficiently, and they've also incorporated features capable of reasoning such as views, triggers, an even recursion, which is in the standard of 1999 on the logic side will get some here kind of preaching to the choir.",
            "Well, we've description logic has been studying the tradeoff between the computational complexity of reasoning.",
            "And the expressive power logic languages.",
            "And now we have these ideas have matured and we have these systems now.",
            "Industrial wise relational database management systems and the semantic web.",
            "So today we're in a way revisiting this problem of logic and databases with current technologies today.",
            "And if you want to combine those things together and do reasoning over relational databases, this is where ontology based data access comes from.",
            "The point here is that it's important to understand where we're coming from.",
            "To know where we want to go, O."
        ],
        [
            "In case people in the audience are not aware with the field of this area, so ontology based data access is giving a relational database target ontology which has been created independent of the database and a mapping from the source database to the target ontology.",
            "The goal is to answer sparkle queries in terms of the target ontology using the mappings and the database.",
            "What I'll be presenting is our approach to achieve this goal, which is."
        ],
        [
            "Grounded in our previous work of a system called Alter app, and the approach is to push the processing as much as possible into the SQL optimizer.",
            "So commonly have these."
        ],
        [
            "Coaches of backward chaining or query writing and forward chaining materialization and you have your databases and your ontologies.",
            "So let me just have a simple example.",
            "Here we have an ontology which is a subclass of different jobs.",
            "We have a database which is a table employee."
        ],
        [
            "And we have a mapping.",
            "I'll give more detail about this, but just note that this mapping consists of a set of rules.",
            "The head of the rule will generate the triples which are going to be instances in terms of the ontology and the left hand side or queries over the database.",
            "So this first approach.",
            "But you."
        ],
        [
            "Causation or forward chaining is a bottom up approach where we were given an ontology.",
            "The mapping and databases and these are combined to infer new facts at the same time to change the representation to an RDF database, and now I can just evaluate a sparkle query directly on the new database, which is an RDF and get the answers back.",
            "So as you can imagine, the Pro is that their advantage is that we have no preprocessing for evaluating the queries.",
            "The disadvantage here is that well.",
            "If the source is updated, I'm not going to get the immediate up-to-date results with the RDF database.",
            "The other approach, which is actually the title of this session, is query right."
        ],
        [
            "Where it's a top down approach and it's the backward chaining approach where you're giving a sparkle query your AL ontology.",
            "And then there's a rewriting.",
            "There's a new until new query that is created which takes into account the knowledge from the from the ontology.",
            "And then the mappings come into place and then you apply the mappings to the new ontology to the new query.",
            "Sorry, and you generate a SQL query which is now evaluated directly on the database.",
            "So the problem here is that you're actually querying the data live, so if the data gets updated, you're always going to get current results, but there is an overhead in the rewriting process, and in this Community alot has been studying on the query writing."
        ],
        [
            "There's a lot of work, but very little work has considered the mapping part.",
            "So.",
            "OK."
        ],
        [
            "So what our approach here is to have a hybrid.",
            "Backward chaining approach where mappings play a key role.",
            "Additionally, we want to take advantage of the SQL optimizer of features that the SQL Optimizer has that we can reuse.",
            "As for reasoning in particular, views, materialized views and also recursion.",
            "Finally, we are considering at the moment ontologies that have inheritance, subclasses, and transitivity of properties.",
            "So, for example ancestor."
        ],
        [
            "So consider this the query rewriting approach.",
            "What we're proposing is to have a hybrid approach where.",
            "We have a compiler step that takes as input the ontology and the mappings, not the data, not the query, but the mappings.",
            "And we process these two things together and we generate what we call the saturated mappings.",
            "The saturated mappings now taken account the knowledge from the ontology.",
            "So let me give a little bit more detail about the mappings an what happens inside of this compiler.",
            "What is the behavior of this compiler?",
            "So this is."
        ],
        [
            "The mappings is a set of rules an in these rules you can see that the head of the rule will generate a triple, the RDF triple the body of the rule is a query over the database in the assignments of what the subject predicate in the object should be.",
            "So in this example we have a query over the employee database that says return everybody who does Java.",
            "the ID attribute is assigned to the subject of the triple.",
            "We're assigning the predicate RDF type and the object will be programmer.",
            "So if I were to run apply this rule over my database.",
            "The resulting already of triple is the one we see at the far right."
        ],
        [
            "So the behavior of the compiler is.",
            "Is that is a set of inference rules, so here's an example inference rule for RDF subclass.",
            "So if I say a programmer is a subclass of an IT employee, and I know that X is a type of programmer, I can refer them to.",
            "The X is a type of IT employee.",
            "The idea here is to."
        ],
        [
            "Alter these inference rules to support these relational database to RDF mapping rules.",
            "So how do we do this?",
            "First, we're going to keep the same.",
            "Ontological triple The programmer subclass of IT employee.",
            "But now where we have this triple it says if X is a type of programmer so it's talking about the facts that are about programmers.",
            "We're going to substitute that.",
            "With a mapping that talks about programmers.",
            "So instead of saying if X is a type of programmer who is saying well for anything that is anything from the relational database that is mapped to programmer.",
            "And then, as you can imagine, the following the X type of employee.",
            "We do the same thing we generate now and you mapping rule that says well for anybody who's who was before a programmer just going to now say it's also 90 employee.",
            "So for the bottom for the bottom one says anybody who does Java is going to be a programmer and now we can say anybody who's going to Java is also going to be a Knight employee.",
            "Now."
        ],
        [
            "This approach can also support creativity and why?",
            "Because relational databases, relational databases today support SQL Recursion, so this is something that we should take in account and we should take advantage of.",
            "So the expressivity that we've considered we know this Venn diagram.",
            "Are these nine different acts."
        ],
        [
            "So we have minimal are DFS plus inverse property symmetric property and the transitive property, and you can check the paper for all the night inference rules."
        ],
        [
            "So I do need to note some things.",
            "First of all, we call this saturated mappings because it's inspired by the the step in the Requiem algorithm from FPS, Tina and in Oregon for small talk they have a step in their algorithm called the saturated set.",
            "So that's where we that's what we call.",
            "This is saturated mapping.",
            "And then I realized that this idea of saturated mappings are similar to the idea of T mappings that Mariano Rodriguez model, which was around presented last year and.",
            "We talked and we realized that we independently came to the same result.",
            "Now how can we do the saturation?",
            "It can be performed exhaustively till you hit fixed points and you play all the inference rules.",
            "So in the paper we also present a linear time algorithm based by.",
            "We represent everything in Datalog, we run the program and so you can check the paper for details on that.",
            "So now."
        ],
        [
            "Grounded in our previous work of Ultra, where we represented mappings as views, we said, well, we can.",
            "Represent the saturated mappings as views too, so the idea is to how can we generate?",
            "How can we represent these mappings as SQL views?"
        ],
        [
            "So from a saturated mappings to SQL views, here we have a mapping which is set up.",
            "These two rules for every rule.",
            "We will create a SQL query that will output triples.",
            "So if you look at the select clause it says S piano and the rest of the query the from where from job from employer job equals Java is the rest of the query.",
            "Now that we have every rule as a query.",
            "We can unify them where they share the same class with a Mr property.",
            "So in this case both of these queries talk about mapping things to the class employee, so I can put 'em all in the same view."
        ],
        [
            "And as you can imagine this view, the SQL view Now models the data as a table with three columns.",
            "So everything I've talked to up to now has happened, happens in a compile step in an offline step, so you can do this independently of any query execution.",
            "So let's right now forget about this and let's focus on the database.",
            "So now we have our data which is in relational database.",
            "We have the mappings as SQL views, but we still have our queries in sparkle.",
            "But recall that these views model the table as three columns, so we can do a syntactic translation from a sparkle query to a SQL query.",
            "In terms of this view.",
            "And now we have our queries in terms of the views we have our mappings, views.",
            "We have our data in the relational database, so we can evaluate the query.",
            "So one question you may be asking is, is every sparkle query rewritable to SQL under the context of mappings the answer is yes and you can check the paper for the proof.",
            "But now you may also be thinking, is this going to work as this is going to be efficient.",
            "So a common."
        ],
        [
            "Approach for query optimization when you have use system materialism.",
            "So if I materialized, if I materialized nothing, I'm not going to consume any extra space, but I'm going to have the worst query time goes.",
            "I'm accessing the raw data tables.",
            "If I materialize everything, I'm having the best query response time but not consuming the most amount of space.",
            "So you really want to find some sweet spot somewhere, and we believe that this can be done with the hybrid approach.",
            "Now this is not a new problem.",
            "Figuring out which views to materialize has been well studied.",
            "The database literature, especially in the areas of data cubes and an old lap and star schemas.",
            "So we divide the cost model."
        ],
        [
            "And I'm not going to go through it all in detail, but so we have a cost model.",
            "Few materialized.",
            "Nothing materialized everything.",
            "But we have a hypothesis after a lot of observations, my hypothesis was.",
            "If a relational database is capable of rewriting a query in terms of materialized views, then.",
            "Only materialized views that represents mappings to the leaf classes of an ontology.",
            "So if you have a subclass, you have mappings.",
            "You just want to materialize views of represent mappings to the leaf classes.",
            "Now we've also provides the query cost here, but what I want to note is that the query cost for hypothesis an for materialized everything.",
            "Is the same 0.",
            "For this analysis, we said well they should have.",
            "If I materialize everything and we only want to realize the leaf classes, the execution time should be the same.",
            "So you can check the paper for details on this cost model.",
            "But in order to evaluate them to find evidence that supports this, we created what we call the tech."
        ],
        [
            "This benchmark, which is first grounded, started off from the Wisconsin benchmark.",
            "A famous benchmarking databases where you have large table with different attributes with different selectivities for attribute and we have ontologies we're considering now subclasses in this experiment with different depths and the goal of this benchmark is to understand the behavior when you're querying instance of classes, But when you're varying the depth and the selectivity.",
            "So."
        ],
        [
            "Are the results that I'm showing you in the form of a heat map?",
            "Darker colors are better on the far right.",
            "You have all materialization, so this is our baseline and next to it.",
            "When you see top says Union leaves.",
            "This was our approach of our hypothesis and as you can see there are very similar.",
            "The colors, I mean the the time is there is very compatible is not equal.",
            "Sometimes the following are other approaches that we considered.",
            "If we did it.",
            "Actually if we didn't materialize and we use indices and the far left is a competing system we compared to.",
            "What I want to know.",
            "We tested on Oracle and on the right there is.",
            "This is a query plan and you can see that there was actually materialized view rewrite access operator.",
            "This is in Oracle and if you look in the documentation DB two and SQL Server also has this.",
            "So in order to evaluate transitivity we extended the Berlin benchmark because if."
        ],
        [
            "Brooklyn Bridge work has this workload on ecommerce and they have a table called product type.",
            "As a parent child relationship.",
            "So we said, oh there's a type ancestor relationship there and we tested three queries.",
            "Three types of queries, a simple queries, returning all the ancestors, and then we're adding more joints to them.",
            "So at the moment of writing the.",
            "No system we can compare to, so we just compare what happens when you materialize or you don't materialize views."
        ],
        [
            "And as you would expect, if you materialized views, you get much better results.",
            "So the just to see what happened.",
            "This is just a view."
        ],
        [
            "The relational database can actually do the recursion an if you materialize the cost is much lower.",
            "So if you're interested, we have this up obd-benchmark.org we really I would really love to find people who want to collaborate on this.",
            "I think it's very important to have benchmarks for OBD where you're actually having mappings.",
            "So to conclude we."
        ],
        [
            "Isn't Ultra OBD, which is an extension of our previous work which takes advantage of query writing using materialized views and recursion which exists in relational databases?",
            "So in the paper you will find an efficient algorithm to generate these saturated Mac means a proof that sparkle is SQL rideable under mappings, a cost model to determine which views to materialize, and experiential experiments which suggests that commercial relational databases we evaluated."
        ],
        [
            "Oracle will includes features for Obediente with subclass Intransitivity ontologies.",
            "So we."
        ],
        [
            "Are we today?",
            "This is the expressivity I considered and."
        ],
        [
            "I'm going to be bold and say I'm going to name this profile owl SQL.",
            "This is where we have evidence that the relational database can act as a reasoner.",
            "Now the question is, can we make that bigger?",
            "Thank you."
        ],
        [
            "Best new speaker.",
            "So we have time for questions I remember some years ago there.",
            "Some people said that on commercial databases the recursive views were not really implemented efficiently, so that might have changed.",
            "So the what they did back there.",
            "These were people from deductive databases which said that more or less stimulative evaluation implemented natively work better than evaluating the stuff on commercial systems with recursive views.",
            "So is there anything you could?",
            "Comment on that.",
            "Maybe it has improved over the last years.",
            "Yes, great question.",
            "So we just evaluated what we have with Oracle right now, and I think there's an opportunity to keep evaluating more and we have to do this evaluation today again, I believe and personally this is something I call the tipping point problem that if I start from a relational database and I want to be able to take advantage of these features from the semantic web, such as reasoning.",
            "How much can I subsume with the relational database technology to the point that it tips over and I said, you know what?",
            "You gotta move to relate to an RDF triplestores other thing and that tipping point.",
            "I don't think we understand where it is and there's different features to consider and think transitivity is one of 'em, so an experiment that we should do is let's have for this obedient benchmark is let's have our data.",
            "We have our mappings.",
            "We have our queries.",
            "Let's put him in the relational database and let's compare it to what our triple Store materialized backward chaining and and see what happens.",
            "I don't think we have done that so.",
            "That's why I don't have an answer to your question at the moment, but I think it's open thing.",
            "I really think as a community, if we're interested in advancing this and understanding these systems, we need to focus on benchmarks and have a systematic way of understanding these particular details, not just the query workload, But what happens with transitivity, for example."
        ]
    ],
    "summarization": {
        "clip_0": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "This is joint work with Marcelo Arenas from from Chile and for my advisor at Denver anchor and I want to point out the sponsorship from the NSF for the Student Travel Award.",
                    "label": 0
                },
                {
                    "sent": "So let me.",
                    "label": 0
                }
            ]
        },
        "clip_1": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Start out with some historical context.",
                    "label": 0
                },
                {
                    "sent": "It's been an early computer science vision to create intelligent systems capable of reasoning by combining logic and data.",
                    "label": 0
                },
                {
                    "sent": "So this isn't new and if you look into the literature, there's actually a landmark workshop back in 1977 organized by Gollier Nicholas and Jack Minker, and it said that in this meeting is when the field of logic and data was formed.",
                    "label": 0
                },
                {
                    "sent": "So throughout the last several decades, there's been a lot of work in this area of combining logic and data.",
                    "label": 0
                },
                {
                    "sent": "For example, the Japanese 5th Generation project they had this goal of creating an artist artificial intelligence computer by combining prologue and its data in relational representation, and this product sparked a lot of different other projects in the world.",
                    "label": 0
                },
                {
                    "sent": "For example, MCC, or were from in Austin, TX, LV in the UK and throughout the last several decades.",
                    "label": 0
                },
                {
                    "sent": "There's been workshops on expert systems on deductive databases on knowledge representation meets databases.",
                    "label": 0
                },
                {
                    "sent": "However, independent advances we've had, we've had also independent advances in the area of data and logic.",
                    "label": 0
                },
                {
                    "sent": "So in data we have relational algebra and the studying how we can store and manage data efficiently, and they've also incorporated features capable of reasoning such as views, triggers, an even recursion, which is in the standard of 1999 on the logic side will get some here kind of preaching to the choir.",
                    "label": 0
                },
                {
                    "sent": "Well, we've description logic has been studying the tradeoff between the computational complexity of reasoning.",
                    "label": 0
                },
                {
                    "sent": "And the expressive power logic languages.",
                    "label": 0
                },
                {
                    "sent": "And now we have these ideas have matured and we have these systems now.",
                    "label": 0
                },
                {
                    "sent": "Industrial wise relational database management systems and the semantic web.",
                    "label": 0
                },
                {
                    "sent": "So today we're in a way revisiting this problem of logic and databases with current technologies today.",
                    "label": 0
                },
                {
                    "sent": "And if you want to combine those things together and do reasoning over relational databases, this is where ontology based data access comes from.",
                    "label": 0
                },
                {
                    "sent": "The point here is that it's important to understand where we're coming from.",
                    "label": 0
                },
                {
                    "sent": "To know where we want to go, O.",
                    "label": 0
                }
            ]
        },
        "clip_2": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "In case people in the audience are not aware with the field of this area, so ontology based data access is giving a relational database target ontology which has been created independent of the database and a mapping from the source database to the target ontology.",
                    "label": 1
                },
                {
                    "sent": "The goal is to answer sparkle queries in terms of the target ontology using the mappings and the database.",
                    "label": 0
                },
                {
                    "sent": "What I'll be presenting is our approach to achieve this goal, which is.",
                    "label": 0
                }
            ]
        },
        "clip_3": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Grounded in our previous work of a system called Alter app, and the approach is to push the processing as much as possible into the SQL optimizer.",
                    "label": 0
                },
                {
                    "sent": "So commonly have these.",
                    "label": 0
                }
            ]
        },
        "clip_4": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Coaches of backward chaining or query writing and forward chaining materialization and you have your databases and your ontologies.",
                    "label": 1
                },
                {
                    "sent": "So let me just have a simple example.",
                    "label": 0
                },
                {
                    "sent": "Here we have an ontology which is a subclass of different jobs.",
                    "label": 0
                },
                {
                    "sent": "We have a database which is a table employee.",
                    "label": 0
                }
            ]
        },
        "clip_5": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And we have a mapping.",
                    "label": 0
                },
                {
                    "sent": "I'll give more detail about this, but just note that this mapping consists of a set of rules.",
                    "label": 0
                },
                {
                    "sent": "The head of the rule will generate the triples which are going to be instances in terms of the ontology and the left hand side or queries over the database.",
                    "label": 0
                },
                {
                    "sent": "So this first approach.",
                    "label": 0
                },
                {
                    "sent": "But you.",
                    "label": 0
                }
            ]
        },
        "clip_6": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Causation or forward chaining is a bottom up approach where we were given an ontology.",
                    "label": 0
                },
                {
                    "sent": "The mapping and databases and these are combined to infer new facts at the same time to change the representation to an RDF database, and now I can just evaluate a sparkle query directly on the new database, which is an RDF and get the answers back.",
                    "label": 0
                },
                {
                    "sent": "So as you can imagine, the Pro is that their advantage is that we have no preprocessing for evaluating the queries.",
                    "label": 0
                },
                {
                    "sent": "The disadvantage here is that well.",
                    "label": 0
                },
                {
                    "sent": "If the source is updated, I'm not going to get the immediate up-to-date results with the RDF database.",
                    "label": 0
                },
                {
                    "sent": "The other approach, which is actually the title of this session, is query right.",
                    "label": 0
                }
            ]
        },
        "clip_7": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Where it's a top down approach and it's the backward chaining approach where you're giving a sparkle query your AL ontology.",
                    "label": 0
                },
                {
                    "sent": "And then there's a rewriting.",
                    "label": 0
                },
                {
                    "sent": "There's a new until new query that is created which takes into account the knowledge from the from the ontology.",
                    "label": 0
                },
                {
                    "sent": "And then the mappings come into place and then you apply the mappings to the new ontology to the new query.",
                    "label": 0
                },
                {
                    "sent": "Sorry, and you generate a SQL query which is now evaluated directly on the database.",
                    "label": 0
                },
                {
                    "sent": "So the problem here is that you're actually querying the data live, so if the data gets updated, you're always going to get current results, but there is an overhead in the rewriting process, and in this Community alot has been studying on the query writing.",
                    "label": 0
                }
            ]
        },
        "clip_8": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "There's a lot of work, but very little work has considered the mapping part.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "OK.",
                    "label": 0
                }
            ]
        },
        "clip_9": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So what our approach here is to have a hybrid.",
                    "label": 0
                },
                {
                    "sent": "Backward chaining approach where mappings play a key role.",
                    "label": 0
                },
                {
                    "sent": "Additionally, we want to take advantage of the SQL optimizer of features that the SQL Optimizer has that we can reuse.",
                    "label": 1
                },
                {
                    "sent": "As for reasoning in particular, views, materialized views and also recursion.",
                    "label": 0
                },
                {
                    "sent": "Finally, we are considering at the moment ontologies that have inheritance, subclasses, and transitivity of properties.",
                    "label": 0
                },
                {
                    "sent": "So, for example ancestor.",
                    "label": 0
                }
            ]
        },
        "clip_10": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So consider this the query rewriting approach.",
                    "label": 0
                },
                {
                    "sent": "What we're proposing is to have a hybrid approach where.",
                    "label": 0
                },
                {
                    "sent": "We have a compiler step that takes as input the ontology and the mappings, not the data, not the query, but the mappings.",
                    "label": 0
                },
                {
                    "sent": "And we process these two things together and we generate what we call the saturated mappings.",
                    "label": 0
                },
                {
                    "sent": "The saturated mappings now taken account the knowledge from the ontology.",
                    "label": 0
                },
                {
                    "sent": "So let me give a little bit more detail about the mappings an what happens inside of this compiler.",
                    "label": 0
                },
                {
                    "sent": "What is the behavior of this compiler?",
                    "label": 0
                },
                {
                    "sent": "So this is.",
                    "label": 0
                }
            ]
        },
        "clip_11": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "The mappings is a set of rules an in these rules you can see that the head of the rule will generate a triple, the RDF triple the body of the rule is a query over the database in the assignments of what the subject predicate in the object should be.",
                    "label": 0
                },
                {
                    "sent": "So in this example we have a query over the employee database that says return everybody who does Java.",
                    "label": 0
                },
                {
                    "sent": "the ID attribute is assigned to the subject of the triple.",
                    "label": 0
                },
                {
                    "sent": "We're assigning the predicate RDF type and the object will be programmer.",
                    "label": 0
                },
                {
                    "sent": "So if I were to run apply this rule over my database.",
                    "label": 0
                },
                {
                    "sent": "The resulting already of triple is the one we see at the far right.",
                    "label": 0
                }
            ]
        },
        "clip_12": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So the behavior of the compiler is.",
                    "label": 0
                },
                {
                    "sent": "Is that is a set of inference rules, so here's an example inference rule for RDF subclass.",
                    "label": 0
                },
                {
                    "sent": "So if I say a programmer is a subclass of an IT employee, and I know that X is a type of programmer, I can refer them to.",
                    "label": 0
                },
                {
                    "sent": "The X is a type of IT employee.",
                    "label": 0
                },
                {
                    "sent": "The idea here is to.",
                    "label": 0
                }
            ]
        },
        "clip_13": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Alter these inference rules to support these relational database to RDF mapping rules.",
                    "label": 0
                },
                {
                    "sent": "So how do we do this?",
                    "label": 0
                },
                {
                    "sent": "First, we're going to keep the same.",
                    "label": 0
                },
                {
                    "sent": "Ontological triple The programmer subclass of IT employee.",
                    "label": 0
                },
                {
                    "sent": "But now where we have this triple it says if X is a type of programmer so it's talking about the facts that are about programmers.",
                    "label": 0
                },
                {
                    "sent": "We're going to substitute that.",
                    "label": 0
                },
                {
                    "sent": "With a mapping that talks about programmers.",
                    "label": 0
                },
                {
                    "sent": "So instead of saying if X is a type of programmer who is saying well for anything that is anything from the relational database that is mapped to programmer.",
                    "label": 0
                },
                {
                    "sent": "And then, as you can imagine, the following the X type of employee.",
                    "label": 1
                },
                {
                    "sent": "We do the same thing we generate now and you mapping rule that says well for anybody who's who was before a programmer just going to now say it's also 90 employee.",
                    "label": 0
                },
                {
                    "sent": "So for the bottom for the bottom one says anybody who does Java is going to be a programmer and now we can say anybody who's going to Java is also going to be a Knight employee.",
                    "label": 0
                },
                {
                    "sent": "Now.",
                    "label": 0
                }
            ]
        },
        "clip_14": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "This approach can also support creativity and why?",
                    "label": 0
                },
                {
                    "sent": "Because relational databases, relational databases today support SQL Recursion, so this is something that we should take in account and we should take advantage of.",
                    "label": 0
                },
                {
                    "sent": "So the expressivity that we've considered we know this Venn diagram.",
                    "label": 0
                },
                {
                    "sent": "Are these nine different acts.",
                    "label": 0
                }
            ]
        },
        "clip_15": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So we have minimal are DFS plus inverse property symmetric property and the transitive property, and you can check the paper for all the night inference rules.",
                    "label": 0
                }
            ]
        },
        "clip_16": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So I do need to note some things.",
                    "label": 0
                },
                {
                    "sent": "First of all, we call this saturated mappings because it's inspired by the the step in the Requiem algorithm from FPS, Tina and in Oregon for small talk they have a step in their algorithm called the saturated set.",
                    "label": 0
                },
                {
                    "sent": "So that's where we that's what we call.",
                    "label": 0
                },
                {
                    "sent": "This is saturated mapping.",
                    "label": 0
                },
                {
                    "sent": "And then I realized that this idea of saturated mappings are similar to the idea of T mappings that Mariano Rodriguez model, which was around presented last year and.",
                    "label": 0
                },
                {
                    "sent": "We talked and we realized that we independently came to the same result.",
                    "label": 0
                },
                {
                    "sent": "Now how can we do the saturation?",
                    "label": 0
                },
                {
                    "sent": "It can be performed exhaustively till you hit fixed points and you play all the inference rules.",
                    "label": 0
                },
                {
                    "sent": "So in the paper we also present a linear time algorithm based by.",
                    "label": 0
                },
                {
                    "sent": "We represent everything in Datalog, we run the program and so you can check the paper for details on that.",
                    "label": 0
                },
                {
                    "sent": "So now.",
                    "label": 0
                }
            ]
        },
        "clip_17": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Grounded in our previous work of Ultra, where we represented mappings as views, we said, well, we can.",
                    "label": 0
                },
                {
                    "sent": "Represent the saturated mappings as views too, so the idea is to how can we generate?",
                    "label": 0
                },
                {
                    "sent": "How can we represent these mappings as SQL views?",
                    "label": 0
                }
            ]
        },
        "clip_18": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So from a saturated mappings to SQL views, here we have a mapping which is set up.",
                    "label": 0
                },
                {
                    "sent": "These two rules for every rule.",
                    "label": 0
                },
                {
                    "sent": "We will create a SQL query that will output triples.",
                    "label": 0
                },
                {
                    "sent": "So if you look at the select clause it says S piano and the rest of the query the from where from job from employer job equals Java is the rest of the query.",
                    "label": 0
                },
                {
                    "sent": "Now that we have every rule as a query.",
                    "label": 0
                },
                {
                    "sent": "We can unify them where they share the same class with a Mr property.",
                    "label": 0
                },
                {
                    "sent": "So in this case both of these queries talk about mapping things to the class employee, so I can put 'em all in the same view.",
                    "label": 0
                }
            ]
        },
        "clip_19": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And as you can imagine this view, the SQL view Now models the data as a table with three columns.",
                    "label": 0
                },
                {
                    "sent": "So everything I've talked to up to now has happened, happens in a compile step in an offline step, so you can do this independently of any query execution.",
                    "label": 0
                },
                {
                    "sent": "So let's right now forget about this and let's focus on the database.",
                    "label": 0
                },
                {
                    "sent": "So now we have our data which is in relational database.",
                    "label": 0
                },
                {
                    "sent": "We have the mappings as SQL views, but we still have our queries in sparkle.",
                    "label": 0
                },
                {
                    "sent": "But recall that these views model the table as three columns, so we can do a syntactic translation from a sparkle query to a SQL query.",
                    "label": 0
                },
                {
                    "sent": "In terms of this view.",
                    "label": 0
                },
                {
                    "sent": "And now we have our queries in terms of the views we have our mappings, views.",
                    "label": 0
                },
                {
                    "sent": "We have our data in the relational database, so we can evaluate the query.",
                    "label": 0
                },
                {
                    "sent": "So one question you may be asking is, is every sparkle query rewritable to SQL under the context of mappings the answer is yes and you can check the paper for the proof.",
                    "label": 0
                },
                {
                    "sent": "But now you may also be thinking, is this going to work as this is going to be efficient.",
                    "label": 0
                },
                {
                    "sent": "So a common.",
                    "label": 0
                }
            ]
        },
        "clip_20": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Approach for query optimization when you have use system materialism.",
                    "label": 0
                },
                {
                    "sent": "So if I materialized, if I materialized nothing, I'm not going to consume any extra space, but I'm going to have the worst query time goes.",
                    "label": 0
                },
                {
                    "sent": "I'm accessing the raw data tables.",
                    "label": 0
                },
                {
                    "sent": "If I materialize everything, I'm having the best query response time but not consuming the most amount of space.",
                    "label": 0
                },
                {
                    "sent": "So you really want to find some sweet spot somewhere, and we believe that this can be done with the hybrid approach.",
                    "label": 0
                },
                {
                    "sent": "Now this is not a new problem.",
                    "label": 0
                },
                {
                    "sent": "Figuring out which views to materialize has been well studied.",
                    "label": 0
                },
                {
                    "sent": "The database literature, especially in the areas of data cubes and an old lap and star schemas.",
                    "label": 0
                },
                {
                    "sent": "So we divide the cost model.",
                    "label": 0
                }
            ]
        },
        "clip_21": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "And I'm not going to go through it all in detail, but so we have a cost model.",
                    "label": 0
                },
                {
                    "sent": "Few materialized.",
                    "label": 0
                },
                {
                    "sent": "Nothing materialized everything.",
                    "label": 0
                },
                {
                    "sent": "But we have a hypothesis after a lot of observations, my hypothesis was.",
                    "label": 0
                },
                {
                    "sent": "If a relational database is capable of rewriting a query in terms of materialized views, then.",
                    "label": 0
                },
                {
                    "sent": "Only materialized views that represents mappings to the leaf classes of an ontology.",
                    "label": 0
                },
                {
                    "sent": "So if you have a subclass, you have mappings.",
                    "label": 0
                },
                {
                    "sent": "You just want to materialize views of represent mappings to the leaf classes.",
                    "label": 1
                },
                {
                    "sent": "Now we've also provides the query cost here, but what I want to note is that the query cost for hypothesis an for materialized everything.",
                    "label": 0
                },
                {
                    "sent": "Is the same 0.",
                    "label": 0
                },
                {
                    "sent": "For this analysis, we said well they should have.",
                    "label": 1
                },
                {
                    "sent": "If I materialize everything and we only want to realize the leaf classes, the execution time should be the same.",
                    "label": 0
                },
                {
                    "sent": "So you can check the paper for details on this cost model.",
                    "label": 0
                },
                {
                    "sent": "But in order to evaluate them to find evidence that supports this, we created what we call the tech.",
                    "label": 0
                }
            ]
        },
        "clip_22": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "This benchmark, which is first grounded, started off from the Wisconsin benchmark.",
                    "label": 0
                },
                {
                    "sent": "A famous benchmarking databases where you have large table with different attributes with different selectivities for attribute and we have ontologies we're considering now subclasses in this experiment with different depths and the goal of this benchmark is to understand the behavior when you're querying instance of classes, But when you're varying the depth and the selectivity.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                }
            ]
        },
        "clip_23": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Are the results that I'm showing you in the form of a heat map?",
                    "label": 0
                },
                {
                    "sent": "Darker colors are better on the far right.",
                    "label": 0
                },
                {
                    "sent": "You have all materialization, so this is our baseline and next to it.",
                    "label": 0
                },
                {
                    "sent": "When you see top says Union leaves.",
                    "label": 0
                },
                {
                    "sent": "This was our approach of our hypothesis and as you can see there are very similar.",
                    "label": 0
                },
                {
                    "sent": "The colors, I mean the the time is there is very compatible is not equal.",
                    "label": 0
                },
                {
                    "sent": "Sometimes the following are other approaches that we considered.",
                    "label": 0
                },
                {
                    "sent": "If we did it.",
                    "label": 0
                },
                {
                    "sent": "Actually if we didn't materialize and we use indices and the far left is a competing system we compared to.",
                    "label": 0
                },
                {
                    "sent": "What I want to know.",
                    "label": 0
                },
                {
                    "sent": "We tested on Oracle and on the right there is.",
                    "label": 0
                },
                {
                    "sent": "This is a query plan and you can see that there was actually materialized view rewrite access operator.",
                    "label": 0
                },
                {
                    "sent": "This is in Oracle and if you look in the documentation DB two and SQL Server also has this.",
                    "label": 0
                },
                {
                    "sent": "So in order to evaluate transitivity we extended the Berlin benchmark because if.",
                    "label": 0
                }
            ]
        },
        "clip_24": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Brooklyn Bridge work has this workload on ecommerce and they have a table called product type.",
                    "label": 0
                },
                {
                    "sent": "As a parent child relationship.",
                    "label": 0
                },
                {
                    "sent": "So we said, oh there's a type ancestor relationship there and we tested three queries.",
                    "label": 0
                },
                {
                    "sent": "Three types of queries, a simple queries, returning all the ancestors, and then we're adding more joints to them.",
                    "label": 0
                },
                {
                    "sent": "So at the moment of writing the.",
                    "label": 0
                },
                {
                    "sent": "No system we can compare to, so we just compare what happens when you materialize or you don't materialize views.",
                    "label": 0
                }
            ]
        },
        "clip_25": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And as you would expect, if you materialized views, you get much better results.",
                    "label": 0
                },
                {
                    "sent": "So the just to see what happened.",
                    "label": 0
                },
                {
                    "sent": "This is just a view.",
                    "label": 0
                }
            ]
        },
        "clip_26": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "The relational database can actually do the recursion an if you materialize the cost is much lower.",
                    "label": 0
                },
                {
                    "sent": "So if you're interested, we have this up obd-benchmark.org we really I would really love to find people who want to collaborate on this.",
                    "label": 0
                },
                {
                    "sent": "I think it's very important to have benchmarks for OBD where you're actually having mappings.",
                    "label": 0
                },
                {
                    "sent": "So to conclude we.",
                    "label": 0
                }
            ]
        },
        "clip_27": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Isn't Ultra OBD, which is an extension of our previous work which takes advantage of query writing using materialized views and recursion which exists in relational databases?",
                    "label": 0
                },
                {
                    "sent": "So in the paper you will find an efficient algorithm to generate these saturated Mac means a proof that sparkle is SQL rideable under mappings, a cost model to determine which views to materialize, and experiential experiments which suggests that commercial relational databases we evaluated.",
                    "label": 0
                }
            ]
        },
        "clip_28": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Oracle will includes features for Obediente with subclass Intransitivity ontologies.",
                    "label": 0
                },
                {
                    "sent": "So we.",
                    "label": 0
                }
            ]
        },
        "clip_29": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Are we today?",
                    "label": 0
                },
                {
                    "sent": "This is the expressivity I considered and.",
                    "label": 0
                }
            ]
        },
        "clip_30": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "I'm going to be bold and say I'm going to name this profile owl SQL.",
                    "label": 0
                },
                {
                    "sent": "This is where we have evidence that the relational database can act as a reasoner.",
                    "label": 0
                },
                {
                    "sent": "Now the question is, can we make that bigger?",
                    "label": 0
                },
                {
                    "sent": "Thank you.",
                    "label": 0
                }
            ]
        },
        "clip_31": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Best new speaker.",
                    "label": 0
                },
                {
                    "sent": "So we have time for questions I remember some years ago there.",
                    "label": 0
                },
                {
                    "sent": "Some people said that on commercial databases the recursive views were not really implemented efficiently, so that might have changed.",
                    "label": 0
                },
                {
                    "sent": "So the what they did back there.",
                    "label": 0
                },
                {
                    "sent": "These were people from deductive databases which said that more or less stimulative evaluation implemented natively work better than evaluating the stuff on commercial systems with recursive views.",
                    "label": 0
                },
                {
                    "sent": "So is there anything you could?",
                    "label": 0
                },
                {
                    "sent": "Comment on that.",
                    "label": 0
                },
                {
                    "sent": "Maybe it has improved over the last years.",
                    "label": 0
                },
                {
                    "sent": "Yes, great question.",
                    "label": 0
                },
                {
                    "sent": "So we just evaluated what we have with Oracle right now, and I think there's an opportunity to keep evaluating more and we have to do this evaluation today again, I believe and personally this is something I call the tipping point problem that if I start from a relational database and I want to be able to take advantage of these features from the semantic web, such as reasoning.",
                    "label": 0
                },
                {
                    "sent": "How much can I subsume with the relational database technology to the point that it tips over and I said, you know what?",
                    "label": 0
                },
                {
                    "sent": "You gotta move to relate to an RDF triplestores other thing and that tipping point.",
                    "label": 0
                },
                {
                    "sent": "I don't think we understand where it is and there's different features to consider and think transitivity is one of 'em, so an experiment that we should do is let's have for this obedient benchmark is let's have our data.",
                    "label": 0
                },
                {
                    "sent": "We have our mappings.",
                    "label": 0
                },
                {
                    "sent": "We have our queries.",
                    "label": 0
                },
                {
                    "sent": "Let's put him in the relational database and let's compare it to what our triple Store materialized backward chaining and and see what happens.",
                    "label": 0
                },
                {
                    "sent": "I don't think we have done that so.",
                    "label": 0
                },
                {
                    "sent": "That's why I don't have an answer to your question at the moment, but I think it's open thing.",
                    "label": 0
                },
                {
                    "sent": "I really think as a community, if we're interested in advancing this and understanding these systems, we need to focus on benchmarks and have a systematic way of understanding these particular details, not just the query workload, But what happens with transitivity, for example.",
                    "label": 0
                }
            ]
        }
    }
}