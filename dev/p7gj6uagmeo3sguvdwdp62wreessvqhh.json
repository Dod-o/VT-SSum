{
    "id": "p7gj6uagmeo3sguvdwdp62wreessvqhh",
    "title": "MPI & OpenMP (Part 2)",
    "info": {
        "author": [
            "David Henty, EPCC, University of Edinburgh"
        ],
        "published": "Sept. 19, 2016",
        "recorded": "June 2016",
        "category": [
            "Top->Computer Science",
            "Top->Computers->Programming"
        ]
    },
    "url": "http://videolectures.net/ihpcss2016_henty_MPI_openMP_part2/",
    "segmentation": [
        [
            "Refers to other communication, synchronous or asynchronous.",
            "All the communications mode there's a thing called the communications form which is blocking or nonblocking, which I'll cover later.",
            "So."
        ],
        [
            "So this lecture will cover explanation of MPI modes.",
            "SNB send and send, and I'm not.",
            "I'm not cover the tags in the communicators, but they're all commonly misunderstood, and it's essential for all programmers to understand modes, because this is the source of a lot of incorrect or suboptimal programming."
        ],
        [
            "So the modes MPI S send is synchronous and it's guaranteed to be synchronous.",
            "That's like making a phone call.",
            "The routine will not return to the messages being delivered, so if you saw the pie program, I was doing synchronous end, so you were just trying to send the message and you wouldn't.",
            "You would sit there until it had been delivered, so that's fine.",
            "Be send is buffered, sent.",
            "It's guaranteed to be asynchronous, but MPI calls it buffered send to counter Hammer home.",
            "The fact that this requires a copy of the message, but but it's a slightly same truck, strange terminology.",
            "But NPI be said is guaranteed to be asynchronous.",
            "The routine returns with before the message is delivered.",
            "So you say be sent?",
            "Yeah, OK, fine, the beast end is complete, but the system copies data buffer and sends it later on.",
            "Which is fair enough, MPI send, which is the standard send, which probably you will seen used may be implemented the synchronous or asynchronous, and this causes a lot of confusion.",
            "So this this lecture is just trying to cover."
        ],
        [
            "So let's just stand it off, standards you got processed."
        ],
        [
            "In process B."
        ],
        [
            "Process A says I want to send this abbreviated syntax.",
            "I want to send.",
            "Data X to B and at that point."
        ],
        [
            "Process B is running some other now."
        ],
        [
            "MPI code so as it stands, process a."
        ],
        [
            "Weights."
        ],
        [
            "Yes, and it's on the phone OK?",
            "And so this could happen forever.",
            "But if you've written a correct, if you've written a correct MPI program at some point."
        ],
        [
            "Process B will do a receive.",
            "I want to receive data from a.",
            "And I will receive into why?",
            "And it's called synchronous send because, well, the date."
        ],
        [
            "The transfer happens at this point because when you make a phone call, the data transfer happens.",
            "When you're both on the phone at the same time.",
            "That's why it's called synchronous end.",
            "There's a synchronization in time.",
            "You're both in.",
            "You're both executing the message passing operation at the same time the data transfer happens."
        ],
        [
            "From X to Y and my battery is running out next to Y."
        ],
        [
            "It's called synchronous and because there's a synchronization in time and then."
        ],
        [
            "The Ascend returns in the Recv returns, so this could be so the S10 returns.",
            "What does that mean?",
            "You know that the data has been transferred from X to Y, but it may not be obvious, but actually you don't really care.",
            "I don't care what's going on over here, I only care about myself.",
            "What you really care about is can I reuse X.",
            "And yes, you can reuse X because the data is transfers, happens OS."
        ],
        [
            "And returns."
        ],
        [
            "X can be overwritten by a.",
            "And the receive returns.",
            "That means that.",
            "Why cannot be read by B so that you've achieved everything you want?",
            "So that's fine.",
            "That's quite quite straightforward.",
            "I could have done the case where process A was ahead of process.",
            "Be sorry where process B was running quickly and issued the receive first, but that's not interesting because then if the receivers issued in advance if this received was issued in advance, it would wait in the receive until the send happened.",
            "But that's the less interesting case for this example."
        ],
        [
            "What happens if I do an asynchronous sense?",
            "It starts off exactly the same process a."
        ],
        [
            "To be sent."
        ],
        [
            "Process B."
        ],
        [
            "He is running some other non MPI code but this is where it differs.",
            "Be send is like posting a letter.",
            "It happens immediately and."
        ],
        [
            "What happens is the system takes a copy."
        ],
        [
            "Somewhere.",
            "Uvex"
        ],
        [
            "Can it be send returned and when it's when the send operation is complete you can overwrite the database and returns X can be overwritten by a because it's been copied it hasn't been delivered, but I don't care and then."
        ],
        [
            "I just carry on.",
            "And then some."
        ],
        [
            "So the receivers issued by B that data is then is copied across, which is.",
            "My battery is not red."
        ],
        [
            "There is no synchronization in time between them."
        ],
        [
            "This storage is presumably presumably freed up."
        ],
        [
            "They receive returns and."
        ],
        [
            "Why could not be read by beat?",
            "So this looks much better.",
            "You've achieved the same thing.",
            "The data has gone from A to B, but you don't have all this horrible dead time which you had would you had previously this waiting about which you have in the."
        ],
        [
            "Here this that you don't have this weight OK.",
            "So you think, well, OK, NPI should implement all sends as be send.",
            "It's obvious, isn't it better?",
            "Well, unfortunately the problem is.",
            "Where does this data come?",
            "Where does this?"
        ],
        [
            "Where does this storage come from?",
            "K How much storage would MPI reserved for messages?",
            "OK, what happens if it's not available?",
            "So that's the problem you're in.",
            "This kind of catch 22 that MPI be send mandates says this will be an asynchronous send.",
            "That means there has to be a copy.",
            "But what happens here?",
            "Out of memory and on message passing systems?",
            "Well, it was true when it when they were designed in the 90s, memory was very tight and memory is now tight again.",
            "'cause we have so many cores.",
            "So what MPI says is, let's get this recap."
        ],
        [
            "Receive is always synchronous.",
            "If process B should receive before the be sent from process A, the two diagrams would look the same, so I won't really care about that.",
            "Where does the buffer space come from?",
            "The MPI says OK if you want to do buffered sends asynchronous sense, you have to tell me you have to give me the storage space is up to you.",
            "OK, could you be a bit cheesed off if you ran out of memory until Wi-Fi?",
            "Random memory OMP I was reserving 2 gigabytes for buffered sends, you know, but I don't use buffered sense.",
            "OK so the user provides a large single block of memory.",
            "This routine called.",
            "NPI buffer attach where you Malik you, Alex and memory.",
            "A GB or MB and you say look at MPI.",
            "When you do buffered sense ticket here and it's all about hockey 'cause if you know you're going to GB you need a GB and a bit because there's this metadata and it's all a bit horrible.",
            "But you can kind of work it out.",
            "But then the problem is in certain situations."
        ],
        [
            "It's not possible."
        ],
        [
            "Easily bound because what could what?",
            "What could process they have done again now.",
            "What could it have done next thing?",
            "And so it's not necessary possible to bound the amount of storage space you need.",
            "Yeah, could do another be sent.",
            "It could do an infinite number of B, sends an IF process B is a bit lazy.",
            "They're all stacking up that in most real calculations you can bound it.",
            "You have some regular, you have some regular communications pattern where you know that the the maximum number of outstanding messages, four or six or something like that, but it is.",
            "It's not obvious, so it's up to you to make that calculation and if you get it wrong then there's a problem.",
            "Becausw whoops, you've given MPI this much buffer space OK?"
        ],
        [
            "Normally everything is happy but one day.",
            "Process B is really, really slow, so you start sending multiple messages.",
            "You run out of buffer space and be sent fails be sender saying I mandate I demand that you give me a buffered send and if you run out of buffering then it will fail.",
            "It will crash so you can have a program that runs most of the time and then every now and again crashes then that's not always true but also it's kind of horrible so.",
            "NP."
        ],
        [
            "Guys rationalis.",
            "That MPI decide what the best is thing is to do.",
            "You do MPI send.",
            "MPI will decide if it does it synchronously or asynchronously.",
            "That problem is SN runs the risk of deadlock SN.",
            "It's very easy to write a program which deadlock for their send because the program won't continue to the messages being received.",
            "Be said this less like to deadlock.",
            "Your code may run faster because of this.",
            "Not lack of waiting, but the user must apply the buffer space.",
            "The routine will fail if this buffer is exhausted, so MPI send tries to solve these problems.",
            "The buffer space is provided by the system, so the system is not the same as MPI.",
            "The system will have some default amount of buffer space.",
            "A MB I don't know what it is.",
            "It varies.",
            "Send will normally be asynchronous like be sent, so for small messages empowers them to our buffer buffer buffer.",
            "It that's fine, but if you try and send a lot of messages or a big message, MPI will say, oh, I don't have enough space to buffer, so I'll go synchronous.",
            "I won't buffer all user sync or use synchronous send, so SN will normally be asynchronous like be sent if the buffer is full, send becomes synchronous.",
            "So MPI Center is unlikely to fail, but could cause your program to deadlock if the buffering runs out and you don't know how much buffering there is that system specific.",
            "You may be able to tweak it with.",
            "With environment variables, but you know.",
            "Correct MPI code should run all the time.",
            "It shouldn't run.",
            "Oh only if export MPI buffer size equals 32 MB.",
            "Or some rubbish like that, you know so."
        ],
        [
            "Very important to realize that this code is not guaranteed, so imagine these were S send.",
            "Imagine process a dozen S send of X to be, and process B doesn't S send of white a OK process.",
            "A issues S&A to B and process be issues Ness end of white A what happens in that case?",
            "Sorry.",
            "Yes, so process a cannot proceed and so this is.",
            "If these were SN, they're not here, but if they were, SN process A cannot perceive until process be issued the receive but process be can't proceed until it process areas.",
            "If you receive it's a classic deadlock, OK?",
            "So, so if it's S send, this code is guaranteed to deadlock.",
            "OK, which is a problem.",
            "What a lot of people right?",
            "As they write this send XP send why a?",
            "It's probably a small message, it's probably buffered.",
            "It's probably asynchronous.",
            "This code probably works, but this is incorrect.",
            "It may not work.",
            "OK, so this may run on system A and you ported to system B and it doesn't work even worse.",
            "The system buffering the classic thing you get is people run a program on their local cluster.",
            "It runs they port to a national supercomputer.",
            "They say your MPI is broken.",
            "My code deadlocks on your computer.",
            "Well, the reason it deadlocks is now running on on many, many more processors they're running on 10s of thousands of processors when previously around on hundreds, the more processes you run on the less buffering space you can afford.",
            "You probably have a buffer for an outgoing message to every destination.",
            "OK, the more processes you have, the smaller your buffer space.",
            "Is going to be so that's the classic thing.",
            "Suddenly you run in your in a regime you're running on hundreds of thousands of processes.",
            "The system doesn't have very much buffer space at all.",
            "It decides to this is this is incorrect.",
            "It probably runs, but it's incorrect, and it's the it's the horrible bug.",
            "It's like not initializing a variable in C or Fortran in I integer.",
            "I well, it might be set to 0, but it's not guaranteed, and these things can come back and and really bite you.",
            "This code is not guaranteed to work because send Beacon.",
            "We could become synchronous.",
            "It's guaranteed to deadlock if you send so correct program.",
            "Should work with all sends replaced by S sends, so that's always a good.",
            "If your program runs on your laptop but not on a supercomputer.",
            "Replace all the sense on your laptop with S ends and see if it still runs and if it doesn't.",
            "If it doesn't, you have an incorrect program you need to go and fix it.",
            "What's the obvious way of fixing this?",
            "This very simple case?",
            "Yeah, so so.",
            "Process A sends and receives and process B receives then sends.",
            "So for simple cases you can fix the deadlock by construction, but in general the correct way of fixing this is something called nonblocking communications, which I'll cover in the next lecture, but MPI send is useful but you have to assume the worst case you have to assume the MPI send could be synchronous, and in this case this is an incorrect program.",
            "So avoid."
        ],
        [
            "Deadlock either match sends and receives explicitly.",
            "A ping pong is a B.",
            "It's like playing.",
            "Yeah, playing ping pong table tennis you somebody serves and somebody returns.",
            "But for more general solution use nonblocking communications.",
            "This is not relevant because we're not doing the exercises I normally use, but I say when you're developing a program, develop your program with us, send.",
            "So if you make a mistake, your program will deadlock, which is what you want.",
            "You want correct programs to fail.",
            "You don't want correct program if you want incorrect programs to fail.",
            "You do not want incorrect programs to run.",
            "That's a disaster.",
            "And then converted to set tech.",
            "Took any program written with MPI send.",
            "Should work with MPs.",
            "Send because MPI send is allowed to be MPs and you can write programs that.",
            "That stopped working when you convert SN to send, but you have to do very weird things so so so really my my my my.",
            "Advice is developed with us send to you right correct programs and then when you finished it or convert them all to send so the code will go faster and the yeah.",
            "Sorry.",
            "Well, that's why that's why that's why you let MPI decide.",
            "Yes, so for very large messages it won't buffer because it's so important point about synchronous send is that this trans."
        ],
        [
            "How far can be done with zero copy?",
            "You're both on the line at the same time as it.",
            "Alright, you gotta MB put it there bang, it's all done.",
            "No no copying.",
            "So for large messages MPI will tend to become synchronous for two reasons.",
            "One is it may not be able to afford the buffer space, but Secondly it may be able to do it with zero copy, so it will decide that the mantra is let MPI decide what that threshold is.",
            "It's typically of the order of.",
            "5K10K bytes, that's the kind of order of magnitude afew 1000.",
            "Integers or reals.",
            "That's normally that the where the threshold is, but it's not defined.",
            "That's an implementation issue, but it's useful to know it's kind of so, so small messages are always buffered.",
            "In fact, small messages don't have any data on them at all, because I mean.",
            "NPI will send when you send the message in.",
            "MPI sends a little protocol messages or header saying look, I'm going to send you a message.",
            "Are you ready?",
            "OK, but if you're sending one byte, it's like sending a postcard rather than let's just stick it there, you know?",
            "So it's like text messages.",
            "Text messages are heard the story before text messages are header.",
            "For the protocol, when your mobile phone is continually pinging to some base station to find out where it is, which it does all the time, the protocol messages of 256 bytes long OK, and it's doing that all the time for free, you don't get charged by the by the phone company for finding out which your nearest base station is, your phone just does it all the time.",
            "Then someone spotted that 140 characters that were unused.",
            "Oh, we can put text.",
            "That's why text messages, 140 characters long.",
            "And it's also why Twitter 140 characters on 'cause there's 140 bytes free in the header message.",
            "So they had to send this header message anyways.",
            "They just charge you for if you send a text message.",
            "But it's the same thing.",
            "At MPI, when you send the protocol message, if you can stick the data on the protocol messages for free, but that's that's something of a.",
            "And I city so so M small messages will be buffered.",
            "Large messages will.",
            "Not be buffered is that is there.",
            "Is the so I think that was the end of the talk."
        ],
        [
            "Yeah.",
            "No, because in fact.",
            "You should you should develop with synchronous sense, so if you make a programming error then the code fails, which is what you want, but send will be faster and in fact.",
            "It's difficult to explain, but.",
            "You think?",
            "You think it makes you gives you a nice feeling that you think I do a synchronous send.",
            "I send the data OK, it's been received OK in practice.",
            "Doesn't really, it doesn't actually matter.",
            "It doesn't really matter.",
            "Because.",
            "Like it's hard to explain, but you need to look at a few real problems in practice.",
            "It might make you feel a bit a bit happier that you know that it's been received, but in practice, as long as it is received, you don't care when it happens.",
            "So no, it's very rare you need to use synchronous end for correctness.",
            "Such.",
            "Yeah, I think that's it's it's it's.",
            "It's a subtle point, but.",
            "It just depends on what you're writing.",
            "OK, So what I want to go into now is the.",
            "What I'll do?"
        ],
        [
            "That is all, I think probably the best thing to do is to talk about the traffic model.",
            "Then you can download and run the code and then I'll talk about non blocking communications and then will be will be will be done so the traffic model is what I'm going to.",
            "Is my the example that I really like?",
            "I don't think other people like it, but it's a very very simple.",
            "Where is it?",
            "Traffic, no traffic solution, parallel traffic."
        ],
        [
            "OK.",
            "So this the animations here won't work, but so."
        ],
        [
            "Normally I get choose to think about this, but I'll just explain the solution straight away just But anyway."
        ],
        [
            "So we want to predict traffic flow.",
            "These were animations, they don't work at the moment for."
        ],
        [
            "Two reasons, one is in like it's like weather forecasting.",
            "Is it going to rain this afternoon?",
            "Yeah, is there going to be a traffic jam this afternoon?",
            "Do I need to change the lights?",
            "Change the priorities so to look for effects such as congestion?",
            "And this was a video of the traffic, the terrible traffic in Bangkok or.",
            "Yes, I knew this would happen."
        ],
        [
            "Oh it's OK. OK, sorry, or for more longer term things like.",
            "In the UK, we love roundabouts and we love traffic lights or even put traffic lights on roundabouts.",
            "So this was a project to optimize the traffic light sequence on a roundabout.",
            "Or we did this on the PC in many years ago.",
            "You might say, I think that the traffic between London and.",
            "And Manchester is is too congested.",
            "If I built another motorway would it help?",
            "So that's more like climate forecasting you you say you know what if you know happens so weather traffic modeling is quite quite important, but we're going."
        ],
        [
            "The simplest model.",
            "So we're going to divide the road just here, so we're going to do the simplest thing you're going to do, which is a 1D seller automaton.",
            "It's about the simplest thing you can possibly imagine, so you may be familiar with the standard 2D cellular automaton.",
            "Is the game of life.",
            "I don't know.",
            "People played with the game of Life, Conway's Game of Life, but this is even simpler.",
            "We divide the road into series of cell."
        ],
        [
            "They are either occupied or unoccupied."
        ],
        [
            "And we have an update rule where each step, so we're going through a step in time one second, 2 seconds, 3 seconds.",
            "The cars move forward if the space ahead is empty and not if they don't, and it's an instantaneous update.",
            "You don't say or that guy can move on.",
            "Now that guy, can you say you just look at?",
            "You said that guy can move that guy can't and that guy can.",
            "And then you move them so it's an instantaneous update.",
            "It's it doesn't depend on the order.",
            "OK, so in that case."
        ],
        [
            "They do that, then we obviously do."
        ],
        [
            "Guy can move and this guy can move and then when you get gap car gap car they can all move at the same time.",
            "And."
        ],
        [
            "You could so this talk actually comes from a public understanding of science talk.",
            "I gave Science Festival quite a long time ago, so there's some very bad attempts at humor in the thing, so I apologize, but you could do this by moving pawns on a chess board.",
            "So you're simulating this.",
            "You have a chess board and you're moving the pawns.",
            "OK, so porn is a car, so."
        ],
        [
            "So I think that particular interesting features at traffic."
        ],
        [
            "Make sure you get the right behave."
        ],
        [
            "Yeah, so the car was the Carter altogether at the traffic lights and then they."
        ],
        [
            "Lights go green and everyone moves away.",
            "You know traffic doesn't move off in a block.",
            "You get this.",
            "You get this.",
            "And in fact, if you plot a graph."
        ],
        [
            "Of the.",
            "Average speed this is the asymptotic average B.",
            "This is having run the model for a long time against density of cars below 50% density.",
            "Eventually the cars go gargot car gap car gap so below 50% density you get a velocity of 1.",
            "The cars move every iteration 100% dense to the cars don't move at all and in fact congestion sets on at 50% and it.",
            "So this is all looks very impressive, but actually it's completely trivial becausw.",
            "If you got a physics background and you do semiconductor stuff at less than half, filling the cars moved to the right with velocity one more than half filling the holes move to the major situation we had all cars and one gap.",
            "What happens is the gap moves to the left.",
            "So if I plotted the number of cars that move, it's just up and down.",
            "But if you put it this way, it looks more interesting.",
            "But anyway, it's actually it is a completely trivial, but it's even on Wikipedia it's called the 192 model, other one the 128 model.",
            "Order something with them so so the seller automaton.",
            "The state of a saddle depends on itself and its two neighbors.",
            "So you have.",
            "You have 8 possible States and for each of those you have, you have two.",
            "You have 8 possible states of two cars and for each of those you have a different rule.",
            "So there are two to the eight possible one descender automata of which most are really boring.",
            "But this one is called.",
            "I think it's the 190.",
            "I didn't know that.",
            "I mean I came up with it as an idea, but it's not original so."
        ],
        [
            "Question is.",
            "So yeah, you use more company.",
            "You can have multiple lanes and multiple cars were going."
        ],
        [
            "The simple thing, so I'm not going to go through this stuff.",
            "This was it, this is."
        ],
        [
            "This is this is."
        ],
        [
            "Traffic in terms with."
        ],
        [
            "Are automatons."
        ],
        [
            "I'm gonna go through this stuff."
        ],
        [
            "And.",
            "I think I did a stupid thing.",
            "I'll come back to this later so."
        ],
        [
            "I haven't.",
            "I've tried to rearrange these.",
            "I've put that slide in the wrong place, so.",
            "So the question is, how fast can we run the model?",
            "We measure the speeding car operations per second.",
            "This is the bad slide which was supposed to be funny."
        ],
        [
            "That's cops, OK?"
        ],
        [
            "So this is Bobby Fischer who was a slightly eccentric chess champion in the 70s.",
            "This is when the USA and Russia used to fight by playing chess instead of the option.",
            "Another option which was throwing bombs at each other.",
            "So it was preferable to play hockey against each other or ice hockey or chess as a as a surrogate for a war.",
            "But anyway, Bobby Fischer was American chess champion.",
            "I reckon he could update the model at."
        ],
        [
            "Two car operations per second.",
            "I think if you."
        ],
        [
            "Pawns on a chess board."
        ],
        [
            "Or you could update the Model 2 cars per second.",
            "OK to cops.",
            "But I'm not concerned about that, I'm concerned."
        ],
        [
            "If I've got 3 Bobby Fishers.",
            "Can 3 Bobby Fishers?"
        ],
        [
            "26 cops so we look at the water."
        ],
        [
            "You are going to message passing model distributed map.",
            "So I rode is of length 15.",
            "We have three people there in different offices.",
            "They have a white border.",
            "Their whiteboard just has five cells on it.",
            "And, um.",
            "And we want to up so this is the same Rd, but split up we want to update this so want to update the road OK and immediately you see a problem.",
            "That person a.",
            "Doesn't know if his car can move 'cause he doesn't know if there's a car here or not and person B doesn't know if they've moved their car.",
            "And actually I can't fly through a person.",
            "See, doesn't know if there should be a car there because they don't know if there's a car there so you can update if you have a link.",
            "If you have locally a Rd of length N, you can update the N -- 2 interior cells.",
            "This one this one, this one, this one, this one this one.",
            "But you can't update the exterior ones.",
            "So the only thing to do is to communicate so you have to."
        ],
        [
            "Speak to each other you."
        ],
        [
            "To do boundary swap and you have to tell each other what the states of your endpoints are and the."
        ],
        [
            "Same with B&C."
        ],
        [
            "And once they know what the states of the endpoints are, not not the interior points, there are just the end points, so it's a limited.",
            "It's abounded communication.",
            "Then you can update the road.",
            "So then you can update the road.",
            "Then you do the same thing again, you communicate.",
            "You communicate.",
            "And then you calculate and this is exactly the same as this HPC challenge code, which we're going to give to you.",
            "I'll probably put up overnight where you have.",
            "You basically have to communicate boundary information called Halo swapping, and then you can so you can.",
            "Then you can.",
            "Then you can calculate.",
            "So it's exactly the same structure.",
            "So.",
            "If I just go through the solution to that.",
            "The serial code.",
            "If so.",
            "This is where my rearrangement, the slides, kind of."
        ],
        [
            "The model considerable then sales, but we're going to make traffic on a roundabout.",
            "'cause we love roundabouts in the UK, which is just periodic boundary conditions around about is just a Rd wrapped around on itself, so if a car moves off the right it reappears on the left so we identify cell N plus one with cell one and cell zero with cell N OK. And this is the code the pseudocode."
        ],
        [
            "So the way I'm going to implement these periodic boundary conditions is I'm not going to have special code.",
            "I'm not going to have special update rules for the Edge.",
            "I'm going to have, even in the serial code I'm going to have the road to be bigger than it needs.",
            "I'm going to have explicitly called Ghost cells at the end so I only have N cells.",
            "One to end.",
            "This is just some pseudo language, but my arrays go from one nought to N + 1, and these are the boundary conditions.",
            "I will just make sure that implement periodic boundary conditions, so initialize the road randomly to get some initial distribution.",
            "I loop of the iterations of my time step.",
            "This is the periodic boundary conditions.",
            "I said old of North equals older then, so I look to the left of sale one.",
            "I pick up cell 0 but sell 0 is equal to all and that's fine.",
            "So I should say I have an old road in a new road each time step I have an old road which is time T and a new road which is time T + 1 and to set the other one old N + 1.",
            "If I look at the right hand side of the NTH cell that's equal to the first cell.",
            "Here having done that, this is the update loop.",
            "This is just you.",
            "Just set the new value versus the old value.",
            "You may not think there's enough rules here.",
            "You think there's eight cases, but it's degenerate because if your full your state only depends on the state of your upwards neighbor and if your empty your state only depends on the state of your downward neighbor.",
            "So in principle there's 8 rules.",
            "Only four of them are relevant 'cause it's such a simple model, so this is the code we're going to parallelize.",
            "And what we're going to do?",
            "I won't go through the dumb solutions in MPI."
        ],
        [
            "'cause I've already talked about them essentially just get."
        ],
        [
            "So.",
            "But we just we distribute the data between the two processes.",
            "And the internal sales could be updated independently.",
            "We must communicate with neighboring processes, update the edge selves, and we sum the local number, which prosecutors number of moves each iteration.",
            "We need to know how many cars have moved each process, and he knows how many cars have moved locali.",
            "And.",
            "We do that with these these Halo cells.",
            "And so the Halo cells."
        ],
        [
            "Are very simple load balancers and issue.",
            "The same calculation appears everywhere, so we just do a simple thing like we did with pie.",
            "Example, split the array up into into equal size slices for each piece.",
            "The end over P -- 2 interior cells can be updated independently, where P is the number of processes the edge sales were updated by other processors.",
            "On communications is required, but the important point about this code is."
        ],
        [
            "At.",
            "In the serial code.",
            "The boundary conditions are updated by a copy in the parallel code.",
            "It's exactly the same thing.",
            "You update your boundary conditions, but you do them by message passing.",
            "You set your extreme value to be the value of the guy next to you in each direction.",
            "That's the communication.",
            "OK, so if you write your serial code in this way, the parallel code is is is conceptually the same, it's just that the boundary setting requires communication.",
            "That's the only difference, so I think there's instructions on the I think would be quite good to do is to just download and run.",
            "The traffic model just to check that it works correctly and then we can.",
            "But see if so on the it's this, it's this thing he actually I should go back to the right place which is the X.",
            "If it's the exercise sheet.",
            "Talks about how to.",
            "To run it.",
            "And there's the source code to the exercise sheet, which is just link from the wiki.",
            "The XL sheet is all about the traffic model and you should be able to follow the instructions to is basically to run.",
            "I would run the MPI version and I would just run it out the box and just check that you get the right answer.",
            "So it just to check that this works.",
            "I haven't screwed up.",
            "You will probably have to update the reservation thing that we had to do.",
            "You'll need to put that Hash S batch minus minus res equals IHPCSS or something.",
            "If you want to do that, but could people just check, I'll leave that on the screen actually.",
            "So I would just really just check that it runs and it should just run out the box and give you some some some statistics.",
            "So I'll maybe do it if I just.",
            "Check that it works.",
            "So where is my British?",
            "So actually the version is called CMP.",
            "I simple or CCM of F MPI simple.",
            "It's called simple because I've simplified it.",
            "It's not a, but if I should just be able to make it and I and I can just run it locally actually.",
            "So it works for me.",
            "And I should be able to if I do, if I copy what's it called MPI Batch Dot job to traffic dot job?",
            "What was it?",
            "Hash S batch?",
            "Minus minus res equals.",
            "OK, seems to be working.",
            "So what it prints out is a. Mega Cops rating, which is a million car of millions of car operation per second.",
            "So if out the box if I run it on on on bridges I get 2.6 giga cops, 2.6 billion car operations per second.",
            "If I maybe I want to run on more.",
            "On more.",
            "Sorry, not on.",
            "If I want to run on more processes, I have to I have to edit traffic dot job.",
            "And I would just update here end task per node.",
            "That could be a maximum of 28.",
            "So for example.",
            "So if I then cusub that.",
            "So I've used seven times as many processes started up with four time using 7.",
            "Um?",
            "And how did it so?",
            "If I tailed this first 1157991 it did 2.6 giga cops and if I do the next 1158 it did.",
            "Nine points, it was, so I multiply the number of processes by factor of seven and it went four times as fast.",
            "Which isn't brilliant, but there's two reasons why it doesn't go the default Rd size is very small.",
            "It's like 10,000 cells, which is almost, which is tiny.",
            "What?",
            "Why does this code go faster if you have more cells?",
            "That's the.",
            "That's the that's the other.",
            "So this code illustrates both.",
            "If you've done any parallel scaling Amdahl's law and and.",
            "Gustafson's law."
        ],
        [
            "Why does this?",
            "Why does this program so?",
            "If I each iteration OK in the serial model I have 15.",
            "I have 15 cells.",
            "What was my update rate in Serial?",
            "I guessed it as how many, how many cars per second?",
            "Doing it by hand on a chess board.",
            "Two, so how long does 15 S take?",
            "The 7 1/2 seconds.",
            "OK, so how long does it take for each person to update their five cells now?",
            "Nitration 53 times as fast.",
            "Oh, but I forgot they've got to phone each other.",
            "How long does it take to phone two people?",
            "Talk to each other.",
            "A minute or something, so you've taken the calculation which is 7 1/2 seconds and now it takes 62 1/2 seconds.",
            "Well done, you OK. What happens if this is 15,000 cells OK?",
            "Then it takes 7 and a half 1000 seconds in parallel in serial 15,000 cells, this takes.",
            "Except it takes 5000 seconds in parallel in parallel.",
            "How much does the times the communications type take exactly the same?",
            "That's the point.",
            "The communications is the same.",
            "You have to communicate up and down with your neighbor and you have to exchange 1 boundary element and that's an extreme example.",
            "But it's true in most situations that the communications cost grows slope more slowly in a well written algorithm or just the communications cost gross.",
            "More slowly than the than the the calculation cost, so this shows you hear that this.",
            "Is is worth, you know if the time to calculate is bigger than the time to communicate, which you can ensure about running bigger models then, then then the program will will scale.",
            "So if you if you run, if you run the traffic model on larger number of cells you should see that it scales better, but I just wanted to finish off very quickly.",
            "Talking bout did did anyone get back to run?",
            "They don't have any problems.",
            "It was all OK right?",
            "So I've read me well package so I'll just very.",
            "Quickly.",
            "Talk about.",
            "Non blocking, so it's slightly rushed.",
            "Apologies for that but.",
            "Non blocking unblocking.",
            "So the problem."
        ],
        [
            "Is that?",
            "We want the communications path where everyone talks the neighbor.",
            "So you talk to him.",
            "You talk to him.",
            "You talk to him.",
            "You talk to me, talk to him and then you talk to him.",
            "OK, 'cause it's around about OK, what happens if you do synchronous send?",
            "So.",
            "What are well?",
            "Everybody is trying to phone their neighbor.",
            "Nobody is responding 'cause he's trying to phone him.",
            "Who's trying?",
            "So it deadlocks there is this if you don't have periodic boundary conditions more complicated with periodic boundary conditions.",
            "Every is trying to phone their neighbor and nobody is picking up the phone, so you cannot do this with synchronous send.",
            "Now you could pair them into odd even pairs.",
            "That's when the exercises you send them.",
            "The odd guy sent 1st and receive.",
            "Secondly even guy, but that's not a general solution, so the general solution to this kind of communication is pattern.",
            "Wherever these talk to everybody else at the same time is nonblocking communication."
        ],
        [
            "So this is this is illustrating this message around a ring.",
            "Everyone trying to communicate with their neighbor.",
            "This deadlocks with synchronous sent and therefore could potentially deadlock if use MPI send standard sound."
        ],
        [
            "So the mode of communication determines when it's consistent.",
            "Operations complete synchronous, asynchronous, but for each mode MPI is multiple forms.",
            "The form of an operation determines when the procedure implementing the operation will return when control is returned to the user program.",
            "So what this says is when you do a nonblocking operation.",
            "So when you do a standard blocking operates a standard function was a blocking operation.",
            "MPI Send is a blocking Operation Npis there's a blocking operation.",
            "Says that routine will return control to you when the operation is completed.",
            "Now what the operation completing means means different things for S send, it means the message is being delivered for be send.",
            "It means it's been buffered, but that's irrelevant and it returns control to you when the operation is completed.",
            "Nonblocking operations return control to you immediately.",
            "Now some people would call that asynchronous, but the MPI.",
            "It uses different terminology.",
            "And they carry on magically in the background.",
            "OK. And then later on you say, and then you can do something else.",
            "That's why you break the deadlock.",
            "You can initiate something.",
            "Then you can do something more useful.",
            "And later on you can come back and say, by the way, remember, I'll issue that send has it been delivered.",
            "So the analogy I use is.",
            "Tracking a parcel with the Courier.",
            "If you want to send a partial to your relative in Australia, you give it to a Courier, UPS or DHL or something and you say please.",
            "Could you deliver that parcel.",
            "So in that sense it's it's asynchronous.",
            "It happens in the background, but it's actually it's actually it's actually a synchronous operation because you get information about when it's delivered because you can track it online so you know you've delegated delivering the message to a third party, but you can track it 'cause you can say.",
            "You know, has that parcel arrived to the important point is when you give a partial to DHL other than money you given partial, they give you something back.",
            "What do they give you?",
            "Sorry.",
            "A tracking number, a receipt and ID, and you have to remember that.",
            "So that's the that's the important part about nonblocking operations operations, which happen magically in the background.",
            "You have, you get a receipt so."
        ],
        [
            "Blocking operations relate to when the operation is completed and you've used S send and receive.",
            "That's the ones I've talked about.",
            "I've talked about be sound as well."
        ],
        [
            "Anne.",
            "The whole point is that non blocking of his return straight away another subprogram to continue to perform other work at some later time.",
            "The subprogram this is kind of old fashion contest await the completion of nonblocking operations, so when we send a fax which was this synchronous operation, what we did first is we.",
            "We put the facts in the machine and we waited there till it went beep and then we left.",
            "But in a nonblocking operation you start sending the fax or you ask the Courier to send you your partial you then you go away and do something else like pull a lever and then you come back later and wait for it to complete.",
            "OK, so there's three phases initiation completion and this stuff.",
            "You have to do in the middle, and it turns out that to break the deadlock that what you actually do is you don't do work in the middle and you do another communication.",
            "This allows you to have more than one communication outstanding at once, even if they're synchronous, 'cause you can issue them and then you get control immediately again.",
            "So this is how you can break the deadlock.",
            "You can have an outstanding send, an outstanding receive active at the same time."
        ],
        [
            "So nonblocking operation should have matching wait resource is some systems cannot free resources and a normal operation immediately followed by matching weight is equivalent to a blocking operation.",
            "Some people think think nonblocking operations are magic OK, so they don't.",
            "There's not magic.",
            "All they do is they split initiation and completion, but if you initiate something then complete it.",
            "You've achieved nothing.",
            "OK, you have to pull them apart.",
            "And stick some code in the middle to do so."
        ],
        [
            "Thing else, there's nothing magic about not non blocking operations give you the the ability to exploit this to do something useful, but there's nothing magic about them."
        ],
        [
            "So, um.",
            "You see as many codes with deadlock problems that people have written with nonblocking operations is not because they haven't understood what they're doing."
        ],
        [
            "So we separate the communication to three phases, initiate the nonblocking communication, wait for it to complete, but in the middle do some work, and in fact in reality what you tend to do is you tend to do communications there, not.",
            "Not what you think?",
            "Oh, that means that I can.",
            "I can overlap communications and calculation.",
            "And so you work for months and months and months to redesign your code.",
            "So you send a message.",
            "Then you do calculation, then you test it.",
            "And of course it doesn't go any faster.",
            "So you just anyway so.",
            "Communicate overlapping communication computation is very, very difficult to do because in our model we have this magic.",
            "I had this postmaster OK's MPI process, I mean so.",
            "But in fact, somebody has to deliver the message you say, and so all that happens is that at some point when the message needs to be transferred, your user processes the schedules and the process has to run some operating system process to to transfer the message.",
            "Unless you have some additional hardware, a smart network that can actively transfer messages and there are few and far between.",
            "In fact the processor is doing all the work.",
            "So overlapping communications calculation is actually very very difficult.",
            "But"
        ],
        [
            "I'll come back so a nonblocking send is a bit like having an outbox.",
            "It's not, but what you do is, you say, rather than saying.",
            "I want to send this message synchronously.",
            "I'm going to be synchronous, send you guys and you just wait.",
            "What you do is you put it in an outbox.",
            "You say right?",
            "Could you deliver that message, please?",
            "OK, I'll come back later.",
            "Let's see if it's gone.",
            "I really good."
        ],
        [
            "Nonblocking receive is like an inbox that's actually much nicely, rather than standing there forever and waiting for a receive.",
            "You say, like I want to receive a message when it comes in, put it there and then you can come back later and see if it's arrived.",
            "So the syntax is relatively."
        ],
        [
            "So I have really talked about syntax before so well I'll try and keep this quite low, but it's."
        ],
        [
            "What we have is MPI send.",
            "You would just specify your buffer, your send buffer, the count.",
            "The data type which might be into just the destination where it's going.",
            "This tag, which I have not really talked about.",
            "At NPR, you can tag messages.",
            "It's like having red, blue green envelopes.",
            "You can have messages of tag one packet.",
            "It allows you to put some extra metadata on the message that not that useful in practice.",
            "In my wow they don't use them a lot, and this communicator, but you get back a request.",
            "This is returned to you.",
            "Remember when you send a parcel by DHL you don't send.",
            "Please send this person.",
            "I wanted to be message 57832.",
            "No, they tell you the ticket number.",
            "OK so you say in MPI.",
            "Order request, but I think of it as being a ticket.",
            "This is returned to you, which is why it's a pointer.",
            "In C you initiate.",
            "You have to remember that if you know the biggest mistake people make is the initial another nonblocking operation, and they reuse the same request, it's like losing your library ticket.",
            "You know you've just forgotten the number.",
            "If you know if you have more than one nonblocking operation outstanding at once, you need to have you need to remember multiple requests.",
            "It's up to you to do that.",
            "And then you could wait on it.",
            "And this says wait until that request has finished.",
            "So as written, this is identical to a blocking MPI send you initiated it and then immediately wait on it because they're separate routines.",
            "You can put some code in here.",
            "And So what you could put in there as a receive.",
            "So you could say, right, please send this message to my neighbor.",
            "Oh, but not while that's happening, I can then do a receive and that will match their send and the deadlock is all broken OK?",
            "Yeah.",
            "Yeah.",
            "You have to worry about gathering up the buffer and this is the right, so MPI, nonblocking operations at least a guaranteed not to buffer.",
            "So that means that in between here and here you know when the wait is complete, that the that the centers completed, but you don't know when it happens, so you must not touch the buffer you've asked for this buffer to be sent.",
            "OK, it's like asking somebody to photocopy a document.",
            "Could you please forward that document for me and then coming scribbling on it later on?",
            "You like when you don't?",
            "After that, but I don't know, so you must not.",
            "You must not.",
            "So this is the one of the few times you get subtle bugs in MPI programs is if people mess around with send buffers when they've been issued in a non blocking way.",
            "So sometimes the sometimes it will have been sent and you'll send the old data.",
            "Sometimes it won't have been sent and you'll send the new data.",
            "So that is that is.",
            "So you have to be careful but in practice.",
            "You tend to do this in fatty constrained pieces of code.",
            "You have a Halo swap routine and you should be able to work it all out.",
            "In general, it's a very difficult problem, but in practice 'cause you localize the communications, it's track.",
            "It's tractable, but that is very important.",
            "You must not touch that buffer.",
            "You must not write to that buffer until you've completed the weight."
        ],
        [
            "Nonblocking receive is the same.",
            "It's like, you know when the message comes in.",
            "Put it here.",
            "I reserved this much space.",
            "I want it to come from here and and you have a request.",
            "And again, NPI has had the same type for MPI remembers if they're send request or receive requests, but they're they're just stored in a request, so it's just a ticket and MPI will remember if it's a send request received request.",
            "There's something missing here though that you get in a normal receive.",
            "This is extra 'cause in the normal receive you don't get a request.",
            "But there's something missing.",
            "There might not be obvious, but.",
            "No, I said when you do receive after specify 2.",
            "Two data regions.",
            "One is the receive buffer and the other is the.",
            "So he said it the status.",
            "You can't specify it here, 'cause the status tells you.",
            "Information on the actual message that was received, and so that's deferred till the weight the weight.",
            "It's only after the weight is complete that the status can be filmed in so so for nonblocking receive the status is pushed down to the Yep.",
            "So.",
            "So so you can cancel you can cancel request, but it's a horrible way of programming that if there's one thing that MPI library writers would like to get rid from, the standard is the ability to cancel messages, because it means they have to remember everything about a message you know, even when it's sent, if you haven't.",
            "Waited on it, they have to remember it 'cause you might want to cancel.",
            "So counseling messages are horrible programming style, but.",
            "So, so that's very you might ask, why is there a status in the wait?",
            "If it's a send that meaningless, well actually.",
            "If you issue this, send and then cancelled it, I think I think I'm right in saying that there's that there's a status there is something in the status which tells you it's finished, but it wasn't delivered.",
            "It was actually cancelled, but I would really say if you're canceling messages, you're not.",
            "You're not writing MPI, you, so there are lots of situation what you want.",
            "More dynamic MPI is very bad at dynamic.",
            "Unexpected messages if I said I want to send you a message, there you are unless you expected it then.",
            "So MPI is bad for that.",
            "So I would if you.",
            "Other than you get yourself a real Hola, I would not recommend counseling messages.",
            "It's really a nasty thing to do.",
            "But yes, it isn't the standard.",
            "I've never used it, but it's there, it's there.",
            "And MPI developers hate it.",
            "I have not done the four times, just the same.",
            "Um?"
        ],
        [
            "So.",
            "Send and receive can be blocking or non blocking and blocking centerpiece with unblocking received.",
            "It doesn't really matters once it's sent a message is just to send.",
            "It's like it's like sending an email.",
            "If you send an email with a Microsoft client or a.",
            "Or Thunderbird or the email client, but once it's it said it's just a message, so you can you can you can receive a buffered send with a nonblocking receive or you know that they will all this match.",
            "Um?"
        ],
        [
            "So, um.",
            "Synchronous end is MPI.",
            "I stands for immediate.",
            "It's supposed to tell you controllers returned to you immediately.",
            "That that's what the I stands for, so.",
            "I haven't talked about all these things.",
            "I said I'm putting together lectures but but synchronous end if you use MPI S send you worry about deadlock.",
            "So you often use MPI ISN to break the deadlock if you standard send you have to worry that Standard said might be synchronous so you have to use MPI send to break the deadlock and receive is you often have to use nonblocking receive.",
            "There's no point using MPI be send 'cause if you use be send you have no problem with with deadlock anyway I be send is it has a technical meaning, but it's it's.",
            "When I be send returns it can return before the message is being Comcast being copied into the buffer.",
            "Technically, because in practice it's just ready so they haven't talked about.",
            "You should never use it, but ready send is like ready send, send a message and if the receive isn't posted the message disappears.",
            "It's complete madness and nobody ever uses it.",
            "It's their historical reasons you never ever ever use ready sent.",
            "'cause it only works if the receivers posted the whole point of MPI.",
            "The reason that MPI programs work is it doesn't matter if they receive is already posted, 'cause if it is, it'll it'll match.",
            "If it isn't, then it waits everybody always waits for each other.",
            "Ready send is actually.",
            "It's a historical quirk.",
            "Nobody uses it anymore."
        ],
        [
            "Control.",
            "Well, what what happens is you know you could do a nonblocking send, then you get back.",
            "You can carry on doing what you want.",
            "Some time later you want to check that message is being delivered, then you'd wait on the nonblocking send at that point if you have not arranged for there to be a receive, it will sit forever in the weight, so that's what happens because you have to test because you don't know if you're allowed to be used that data.",
            "Some point you're going to use that buffer that you know that's that array or whatever, and you need to check that it's been delivered.",
            "You can test.",
            "I want you can test.",
            "You can actually come back and say has a message arrived and you get a yes or no flag.",
            "So that's when you can do this kind of more sort of interrupt driven.",
            "It's not really interrupt.",
            "What you'd like is a system where a message comes in and when it arrives it triggers an action.",
            "It has some callback function, but that isn't what happens if it MPI.",
            "You have to manually check you have to say when a message comes in.",
            "Put it there and you can come back and say has a message arrived with MPI test but that it's not.",
            "You would like it when it comes into automatically kick off some routine and flag you, but that's not how MPI works.",
            "MPI doesn't have.",
            "Interrupts or flagging or anything like that.",
            "You can test."
        ],
        [
            "You can test or wait for lots of messages or messages."
        ],
        [
            "As things like 'cause you could have multiple you could have.",
            "I could have 100 nonblocking receives outstanding.",
            "I can have one not blocking receive every one of you guys waiting to send me something and I want to say give tell me which one is received.",
            "I want to wait for them all to finish.",
            "Tell me if any of them are finished.",
            "Tell me which ones the prototypes get rather horrible."
        ],
        [
            "So This is why I mentioned this.",
            "For very simple cases like this point to point Halo swapping like we have in this traffic model, you can there is a routine called MPI send receive where all it is is the send routine and the receive routine stuck together.",
            "So send has send buffs 10 count data type.",
            "Destination tag receive has received, Buff received count, received source tag their oldest stuck together in the same routine on MPI just says.",
            "This will work.",
            "Don't Bury up, don't worry about.",
            "That law the law happen at the same time it will be OK.",
            "So some people use this a lot and it's a perfectly safe way of program.",
            "But it doesn't work in the general case.",
            "It only works for Simple Point to point exchanges in a more general case it doesn't work.",
            "So and if you look at the source code this is just implemented as a non blocking sender, nonblocking receiving a wait.",
            "So it's nothing you couldn't do yourself.",
            "So that so that's really so.",
            "So the X is a really.",
            "All I did was give you.",
            "The traffic model is meant to just be a sort of a code that works, and the idea was you would then have I got the sheet here.",
            "You would then work with it and just try different things.",
            "There's a whole bunch of things I really left it quite open.",
            "As to what you might want to do.",
            "You know you might want to look at scaling and how it scales with short and long roads.",
            "I've talked about reductions, I'm not giving you the syntax, but the reduction there you'll see actually that it's it's done too many times.",
            "This is the first real coding example.",
            "Replace MPI send receive with several CMP.",
            "I send them receive.",
            "OK, so this is technically incorrect, but it'll probably work because there's more messages.",
            "So that let's just say fix it without even pairs.",
            "Then I'm saying so using nonblocking operations, you can do it multiple ways.",
            "You could do a nonblocking send in a blocking receive.",
            "You could do a non blocking receiver blocking send, so there's there's what you can do here is you could do.",
            "You could issue a nonblocking send to the right and say right, deliver that to my neighbor.",
            "Then you could do a blocking received to the left.",
            "You could wait for that message to come in when it's come in you then go back and check that's being delivered.",
            "Or you could do the opposite.",
            "You could issue a nonblocking send to the left.",
            "Then you issue you're you're blocking sent to the right, which matches.",
            "He's not.",
            "Then you check the receive or you can issue them both at once.",
            "You could say send and receive, wait for them both to finish.",
            "OK, well done.",
            "So there's three ways at least three ways of doing it.",
            "There's some hints there.",
            "What else have I said?",
            "Persist that this is the classic thing.",
            "People you see in MPI programs equivalent in the traffic model is you'll see a comment.",
            "Don't go on to the next iteration of the traffic model, so everyone is finished, so they'll do a barrier which is, which is a global synchronization.",
            "OK, you do not need that, so you think about it.",
            "If somebody races ahead, somebody can be an iteration N plus one with somebody in iteration N. But whenever the important point comes from the communication comes, they'll have to wait and then all they will match up again.",
            "You almost never need barriers for correctness at MPI codes.",
            "You can come up with contrived examples where barriers are needed.",
            "Very contrived, but it's I mean it's not an obvious but.",
            "99.9% of the time you can take barriers out of MPI cut 'cause they're not needed for correctness.",
            "People think they are 'cause they don't understand MPI.",
            "There's a few cases to do with file IO where you might need them.",
            "But if all your communications between processes happening in MPI, it is almost impossible to come up with an example where MPI barrier realistic example, not one that's completely contrived where MPI barrier is needed for correctness just the way MPI is designed.",
            "It all just works out.",
            "Then try to have lots of the communication.",
            "Could you say?",
            "Well, actually, while while I'm waiting for these messages to happen, I can update the N -- 2.",
            "I can update the end minus two internal cells.",
            "I can actually do that update and then I can wait for the communications to complete and then finish the update for the edge cells.",
            "Not something you can play around with.",
            "You can say.",
            "Well if I swap not just the edge cells but a double buffer, I can then do two iterations before I need to communicate.",
            "So rather than test sending.",
            "One small message.",
            "Every iteration you send a slightly bigger message.",
            "Every other iteration is probably quicker.",
            "And then if you really if you.",
            "If you do this, then you're really this is.",
            "This is really, really challenging.",
            "And then I've got some other stuff here to do it, but this was just for fun.",
            "I think I can't.",
            "This is all MPI stuff, but it's really just there to sort of, you know.",
            "You would be surprised how good a model of a real scientific code this this traffic model is so good, although it's almost trivial, the general high level structure of communication phase, calculation phase, global operation is is is is really quite representative of real codes, so that was really the idea was just to play around with that until the end.",
            "Does anyone have any questions so I didn't.",
            "I did a bit more lecture than I expected that anyone have any question anything at all?",
            "Yep.",
            "So.",
            "Yeah.",
            "Yes, right, so very good question.",
            "So if I had if I had 80 exercises too late, I didn't print out the exercise sheets, right?",
            "Find 80 exercise sheets here if I do it point point, I give one to U-1 to U-1 to U-1, to U-1 to you.",
            "Once you, what's a better way of doing it?",
            "Put 10 on each of each row and then tell you to pass it along OK, so that's that's much much quicker because it happens.",
            "I run up here, then all this happens in parallel.",
            "So so naive or reduce will be linear in time.",
            "What was a good or reduce will be log arhythmic 'cause you can come up with tree based methods or hypercube methods.",
            "So on a million process on 1000 processors log based algorithms 10 times faster than a linear albums two to the 10 is 1000 or but you know you get to.",
            "You know you should never ever program these things up yourself because they can be so because the the collective operation will be written really well and you can get factors ten 2000 times faster and in fact.",
            "And all reduce might not even be written in MPI.",
            "Some networks have hardware functionality to do or to do global sums in hardware you don't have access to that, but they all reduce.",
            "Will say oh cool special Cray function, double_double_something else goes really fast, so there's two reasons even if it's implemented with point to point, it will be implemented in a good way.",
            "Typically using some.",
            "Algorithm scales as log P rather than the naive one which scales is P, and in fact in some cases it may not use MPI at all.",
            "It may do some very oh an all reduce on on a node or reduced for you shared memory in the MPI library.",
            "It won't use point to point communication on a node, it will do some clever shared memory stuff, so it won't even be log people be log P over.",
            "You know log of a smaller value of P so you win everywhere.",
            "So yes, you must you never if you.",
            "If there's a collective user.",
            "Having said that, startup and shutdown broadcast that takes no time, but if it's in your main loop.",
            "Having said that, if you got a broadcast in your main loop, then yeah.",
            "You got no chance anyway, but anyway, that's why that's not quite true.",
            "But you need to be careful, but yes, you should always use them.",
            "They can be faster for any number of reasons.",
            "So.",
            "People spend their lives writing optimized collectives.",
            "Fun thing to do?",
            "So OK, so that's really gonna be here till you can play around with that.",
            "If you want more goods, tomorrow is just go on to open MP.",
            "I'll introduce open MP again.",
            "I'll just do some.",
            "I'll go through the pie example, but I'll do it on the board because the proper open MP is the solution is is deceptively simple.",
            "Well written open MP is.",
            "Is almost two concise means you, so it's actually good to do it by hands in a stupid way and it shows you what's happening.",
            "So I'll go through the pie example on the board tomorrow and open MP trying explain what's going on, and then I'll finish up by talking about hybrid MPI Open MP.",
            "All these will do in the traffic model.",
            "OK. OK. OK fine so.",
            "The traffic will should be reproducible, so although it's initialized randomly, I initialize it on one processor and then I scatter it out to make sure that we have the same is very hard to parallelize random number generators and get the same answer when it is possible, but it's more effort than it's worth, so I only time the core loop.",
            "I only time the update loop.",
            "I don't time startup and shutdown time.",
            "I think my timing is round the core, the core update loop and if you see barriers in my code, the barriers are only there for timing.",
            "Barriers are useful for timing.",
            "Say look everyone line up on the start line at the same time like go.",
            "That's useful when your timing code, but it has zero effect on the correctness in almost all cases it will not have an effect on the correctness of your code.",
            "It's not obvious, but it is a.",
            "That is true.",
            "Which isn't true in other programming models and open MP P gas such as UPC query, Fortran barriers are absolutely essential for correctness.",
            "Actually essential to the whole correctness of the model.",
            "In MPI there they're not, because receivers synchronous the receiver always has control over what's happening, and that turns out to be the critical.",
            "My opinion, the critical sort of issue.",
            "So OK, so you can do what you like.",
            "So sorry, play around with examples.",
            "Nice if somebody could run the traffic model on more than one node because.",
            "I think I think you do minus N bigger than one.",
            "I would do minus minus tasks per node equals 28.",
            "That means you'll get if you do minus minus big N = 4 and task per node equals 28.",
            "You'll get four nodes, so you'll get.",
            "112 cores doesn't like that, but just check that it works on more than one node.",
            "I haven't, I think as as as as distributed the batch script only runs on four cores.",
            "She's only on the signal, so I would try to change play around with them to try and get more than one note just to do something something useful.",
            "OK."
        ]
    ],
    "summarization": {
        "clip_0": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Refers to other communication, synchronous or asynchronous.",
                    "label": 0
                },
                {
                    "sent": "All the communications mode there's a thing called the communications form which is blocking or nonblocking, which I'll cover later.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                }
            ]
        },
        "clip_1": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So this lecture will cover explanation of MPI modes.",
                    "label": 1
                },
                {
                    "sent": "SNB send and send, and I'm not.",
                    "label": 1
                },
                {
                    "sent": "I'm not cover the tags in the communicators, but they're all commonly misunderstood, and it's essential for all programmers to understand modes, because this is the source of a lot of incorrect or suboptimal programming.",
                    "label": 0
                }
            ]
        },
        "clip_2": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So the modes MPI S send is synchronous and it's guaranteed to be synchronous.",
                    "label": 1
                },
                {
                    "sent": "That's like making a phone call.",
                    "label": 0
                },
                {
                    "sent": "The routine will not return to the messages being delivered, so if you saw the pie program, I was doing synchronous end, so you were just trying to send the message and you wouldn't.",
                    "label": 0
                },
                {
                    "sent": "You would sit there until it had been delivered, so that's fine.",
                    "label": 0
                },
                {
                    "sent": "Be send is buffered, sent.",
                    "label": 0
                },
                {
                    "sent": "It's guaranteed to be asynchronous, but MPI calls it buffered send to counter Hammer home.",
                    "label": 0
                },
                {
                    "sent": "The fact that this requires a copy of the message, but but it's a slightly same truck, strange terminology.",
                    "label": 0
                },
                {
                    "sent": "But NPI be said is guaranteed to be asynchronous.",
                    "label": 1
                },
                {
                    "sent": "The routine returns with before the message is delivered.",
                    "label": 1
                },
                {
                    "sent": "So you say be sent?",
                    "label": 0
                },
                {
                    "sent": "Yeah, OK, fine, the beast end is complete, but the system copies data buffer and sends it later on.",
                    "label": 1
                },
                {
                    "sent": "Which is fair enough, MPI send, which is the standard send, which probably you will seen used may be implemented the synchronous or asynchronous, and this causes a lot of confusion.",
                    "label": 1
                },
                {
                    "sent": "So this this lecture is just trying to cover.",
                    "label": 0
                }
            ]
        },
        "clip_3": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So let's just stand it off, standards you got processed.",
                    "label": 0
                }
            ]
        },
        "clip_4": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "In process B.",
                    "label": 0
                }
            ]
        },
        "clip_5": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Process A says I want to send this abbreviated syntax.",
                    "label": 1
                },
                {
                    "sent": "I want to send.",
                    "label": 0
                },
                {
                    "sent": "Data X to B and at that point.",
                    "label": 0
                }
            ]
        },
        "clip_6": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Process B is running some other now.",
                    "label": 0
                }
            ]
        },
        "clip_7": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "MPI code so as it stands, process a.",
                    "label": 0
                }
            ]
        },
        "clip_8": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Weights.",
                    "label": 0
                }
            ]
        },
        "clip_9": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Yes, and it's on the phone OK?",
                    "label": 0
                },
                {
                    "sent": "And so this could happen forever.",
                    "label": 0
                },
                {
                    "sent": "But if you've written a correct, if you've written a correct MPI program at some point.",
                    "label": 0
                }
            ]
        },
        "clip_10": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Process B will do a receive.",
                    "label": 1
                },
                {
                    "sent": "I want to receive data from a.",
                    "label": 0
                },
                {
                    "sent": "And I will receive into why?",
                    "label": 0
                },
                {
                    "sent": "And it's called synchronous send because, well, the date.",
                    "label": 0
                }
            ]
        },
        "clip_11": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "The transfer happens at this point because when you make a phone call, the data transfer happens.",
                    "label": 0
                },
                {
                    "sent": "When you're both on the phone at the same time.",
                    "label": 0
                },
                {
                    "sent": "That's why it's called synchronous end.",
                    "label": 0
                },
                {
                    "sent": "There's a synchronization in time.",
                    "label": 0
                },
                {
                    "sent": "You're both in.",
                    "label": 0
                },
                {
                    "sent": "You're both executing the message passing operation at the same time the data transfer happens.",
                    "label": 1
                }
            ]
        },
        "clip_12": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "From X to Y and my battery is running out next to Y.",
                    "label": 0
                }
            ]
        },
        "clip_13": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "It's called synchronous and because there's a synchronization in time and then.",
                    "label": 0
                }
            ]
        },
        "clip_14": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "The Ascend returns in the Recv returns, so this could be so the S10 returns.",
                    "label": 0
                },
                {
                    "sent": "What does that mean?",
                    "label": 0
                },
                {
                    "sent": "You know that the data has been transferred from X to Y, but it may not be obvious, but actually you don't really care.",
                    "label": 0
                },
                {
                    "sent": "I don't care what's going on over here, I only care about myself.",
                    "label": 0
                },
                {
                    "sent": "What you really care about is can I reuse X.",
                    "label": 0
                },
                {
                    "sent": "And yes, you can reuse X because the data is transfers, happens OS.",
                    "label": 0
                }
            ]
        },
        "clip_15": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And returns.",
                    "label": 0
                }
            ]
        },
        "clip_16": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "X can be overwritten by a.",
                    "label": 1
                },
                {
                    "sent": "And the receive returns.",
                    "label": 0
                },
                {
                    "sent": "That means that.",
                    "label": 1
                },
                {
                    "sent": "Why cannot be read by B so that you've achieved everything you want?",
                    "label": 0
                },
                {
                    "sent": "So that's fine.",
                    "label": 0
                },
                {
                    "sent": "That's quite quite straightforward.",
                    "label": 0
                },
                {
                    "sent": "I could have done the case where process A was ahead of process.",
                    "label": 0
                },
                {
                    "sent": "Be sorry where process B was running quickly and issued the receive first, but that's not interesting because then if the receivers issued in advance if this received was issued in advance, it would wait in the receive until the send happened.",
                    "label": 0
                },
                {
                    "sent": "But that's the less interesting case for this example.",
                    "label": 0
                }
            ]
        },
        "clip_17": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "What happens if I do an asynchronous sense?",
                    "label": 0
                },
                {
                    "sent": "It starts off exactly the same process a.",
                    "label": 0
                }
            ]
        },
        "clip_18": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "To be sent.",
                    "label": 0
                }
            ]
        },
        "clip_19": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Process B.",
                    "label": 0
                }
            ]
        },
        "clip_20": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "He is running some other non MPI code but this is where it differs.",
                    "label": 0
                },
                {
                    "sent": "Be send is like posting a letter.",
                    "label": 0
                },
                {
                    "sent": "It happens immediately and.",
                    "label": 0
                }
            ]
        },
        "clip_21": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "What happens is the system takes a copy.",
                    "label": 0
                }
            ]
        },
        "clip_22": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Somewhere.",
                    "label": 0
                },
                {
                    "sent": "Uvex",
                    "label": 0
                }
            ]
        },
        "clip_23": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Can it be send returned and when it's when the send operation is complete you can overwrite the database and returns X can be overwritten by a because it's been copied it hasn't been delivered, but I don't care and then.",
                    "label": 0
                }
            ]
        },
        "clip_24": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "I just carry on.",
                    "label": 0
                },
                {
                    "sent": "And then some.",
                    "label": 0
                }
            ]
        },
        "clip_25": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So the receivers issued by B that data is then is copied across, which is.",
                    "label": 0
                },
                {
                    "sent": "My battery is not red.",
                    "label": 0
                }
            ]
        },
        "clip_26": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "There is no synchronization in time between them.",
                    "label": 0
                }
            ]
        },
        "clip_27": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "This storage is presumably presumably freed up.",
                    "label": 0
                }
            ]
        },
        "clip_28": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "They receive returns and.",
                    "label": 0
                }
            ]
        },
        "clip_29": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Why could not be read by beat?",
                    "label": 0
                },
                {
                    "sent": "So this looks much better.",
                    "label": 0
                },
                {
                    "sent": "You've achieved the same thing.",
                    "label": 0
                },
                {
                    "sent": "The data has gone from A to B, but you don't have all this horrible dead time which you had would you had previously this waiting about which you have in the.",
                    "label": 0
                }
            ]
        },
        "clip_30": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Here this that you don't have this weight OK.",
                    "label": 0
                },
                {
                    "sent": "So you think, well, OK, NPI should implement all sends as be send.",
                    "label": 0
                },
                {
                    "sent": "It's obvious, isn't it better?",
                    "label": 0
                },
                {
                    "sent": "Well, unfortunately the problem is.",
                    "label": 0
                },
                {
                    "sent": "Where does this data come?",
                    "label": 0
                },
                {
                    "sent": "Where does this?",
                    "label": 0
                }
            ]
        },
        "clip_31": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Where does this storage come from?",
                    "label": 0
                },
                {
                    "sent": "K How much storage would MPI reserved for messages?",
                    "label": 0
                },
                {
                    "sent": "OK, what happens if it's not available?",
                    "label": 0
                },
                {
                    "sent": "So that's the problem you're in.",
                    "label": 0
                },
                {
                    "sent": "This kind of catch 22 that MPI be send mandates says this will be an asynchronous send.",
                    "label": 0
                },
                {
                    "sent": "That means there has to be a copy.",
                    "label": 0
                },
                {
                    "sent": "But what happens here?",
                    "label": 0
                },
                {
                    "sent": "Out of memory and on message passing systems?",
                    "label": 0
                },
                {
                    "sent": "Well, it was true when it when they were designed in the 90s, memory was very tight and memory is now tight again.",
                    "label": 0
                },
                {
                    "sent": "'cause we have so many cores.",
                    "label": 0
                },
                {
                    "sent": "So what MPI says is, let's get this recap.",
                    "label": 0
                }
            ]
        },
        "clip_32": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Receive is always synchronous.",
                    "label": 0
                },
                {
                    "sent": "If process B should receive before the be sent from process A, the two diagrams would look the same, so I won't really care about that.",
                    "label": 1
                },
                {
                    "sent": "Where does the buffer space come from?",
                    "label": 0
                },
                {
                    "sent": "The MPI says OK if you want to do buffered sends asynchronous sense, you have to tell me you have to give me the storage space is up to you.",
                    "label": 0
                },
                {
                    "sent": "OK, could you be a bit cheesed off if you ran out of memory until Wi-Fi?",
                    "label": 0
                },
                {
                    "sent": "Random memory OMP I was reserving 2 gigabytes for buffered sends, you know, but I don't use buffered sense.",
                    "label": 0
                },
                {
                    "sent": "OK so the user provides a large single block of memory.",
                    "label": 0
                },
                {
                    "sent": "This routine called.",
                    "label": 0
                },
                {
                    "sent": "NPI buffer attach where you Malik you, Alex and memory.",
                    "label": 0
                },
                {
                    "sent": "A GB or MB and you say look at MPI.",
                    "label": 0
                },
                {
                    "sent": "When you do buffered sense ticket here and it's all about hockey 'cause if you know you're going to GB you need a GB and a bit because there's this metadata and it's all a bit horrible.",
                    "label": 0
                },
                {
                    "sent": "But you can kind of work it out.",
                    "label": 0
                },
                {
                    "sent": "But then the problem is in certain situations.",
                    "label": 0
                }
            ]
        },
        "clip_33": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "It's not possible.",
                    "label": 0
                }
            ]
        },
        "clip_34": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Easily bound because what could what?",
                    "label": 0
                },
                {
                    "sent": "What could process they have done again now.",
                    "label": 0
                },
                {
                    "sent": "What could it have done next thing?",
                    "label": 0
                },
                {
                    "sent": "And so it's not necessary possible to bound the amount of storage space you need.",
                    "label": 0
                },
                {
                    "sent": "Yeah, could do another be sent.",
                    "label": 0
                },
                {
                    "sent": "It could do an infinite number of B, sends an IF process B is a bit lazy.",
                    "label": 1
                },
                {
                    "sent": "They're all stacking up that in most real calculations you can bound it.",
                    "label": 0
                },
                {
                    "sent": "You have some regular, you have some regular communications pattern where you know that the the maximum number of outstanding messages, four or six or something like that, but it is.",
                    "label": 0
                },
                {
                    "sent": "It's not obvious, so it's up to you to make that calculation and if you get it wrong then there's a problem.",
                    "label": 0
                },
                {
                    "sent": "Becausw whoops, you've given MPI this much buffer space OK?",
                    "label": 0
                }
            ]
        },
        "clip_35": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Normally everything is happy but one day.",
                    "label": 0
                },
                {
                    "sent": "Process B is really, really slow, so you start sending multiple messages.",
                    "label": 0
                },
                {
                    "sent": "You run out of buffer space and be sent fails be sender saying I mandate I demand that you give me a buffered send and if you run out of buffering then it will fail.",
                    "label": 0
                },
                {
                    "sent": "It will crash so you can have a program that runs most of the time and then every now and again crashes then that's not always true but also it's kind of horrible so.",
                    "label": 0
                },
                {
                    "sent": "NP.",
                    "label": 0
                }
            ]
        },
        "clip_36": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Guys rationalis.",
                    "label": 0
                },
                {
                    "sent": "That MPI decide what the best is thing is to do.",
                    "label": 0
                },
                {
                    "sent": "You do MPI send.",
                    "label": 0
                },
                {
                    "sent": "MPI will decide if it does it synchronously or asynchronously.",
                    "label": 0
                },
                {
                    "sent": "That problem is SN runs the risk of deadlock SN.",
                    "label": 0
                },
                {
                    "sent": "It's very easy to write a program which deadlock for their send because the program won't continue to the messages being received.",
                    "label": 0
                },
                {
                    "sent": "Be said this less like to deadlock.",
                    "label": 0
                },
                {
                    "sent": "Your code may run faster because of this.",
                    "label": 0
                },
                {
                    "sent": "Not lack of waiting, but the user must apply the buffer space.",
                    "label": 0
                },
                {
                    "sent": "The routine will fail if this buffer is exhausted, so MPI send tries to solve these problems.",
                    "label": 0
                },
                {
                    "sent": "The buffer space is provided by the system, so the system is not the same as MPI.",
                    "label": 0
                },
                {
                    "sent": "The system will have some default amount of buffer space.",
                    "label": 0
                },
                {
                    "sent": "A MB I don't know what it is.",
                    "label": 0
                },
                {
                    "sent": "It varies.",
                    "label": 0
                },
                {
                    "sent": "Send will normally be asynchronous like be sent, so for small messages empowers them to our buffer buffer buffer.",
                    "label": 0
                },
                {
                    "sent": "It that's fine, but if you try and send a lot of messages or a big message, MPI will say, oh, I don't have enough space to buffer, so I'll go synchronous.",
                    "label": 0
                },
                {
                    "sent": "I won't buffer all user sync or use synchronous send, so SN will normally be asynchronous like be sent if the buffer is full, send becomes synchronous.",
                    "label": 0
                },
                {
                    "sent": "So MPI Center is unlikely to fail, but could cause your program to deadlock if the buffering runs out and you don't know how much buffering there is that system specific.",
                    "label": 0
                },
                {
                    "sent": "You may be able to tweak it with.",
                    "label": 0
                },
                {
                    "sent": "With environment variables, but you know.",
                    "label": 0
                },
                {
                    "sent": "Correct MPI code should run all the time.",
                    "label": 0
                },
                {
                    "sent": "It shouldn't run.",
                    "label": 0
                },
                {
                    "sent": "Oh only if export MPI buffer size equals 32 MB.",
                    "label": 0
                },
                {
                    "sent": "Or some rubbish like that, you know so.",
                    "label": 0
                }
            ]
        },
        "clip_37": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Very important to realize that this code is not guaranteed, so imagine these were S send.",
                    "label": 0
                },
                {
                    "sent": "Imagine process a dozen S send of X to be, and process B doesn't S send of white a OK process.",
                    "label": 0
                },
                {
                    "sent": "A issues S&A to B and process be issues Ness end of white A what happens in that case?",
                    "label": 0
                },
                {
                    "sent": "Sorry.",
                    "label": 0
                },
                {
                    "sent": "Yes, so process a cannot proceed and so this is.",
                    "label": 0
                },
                {
                    "sent": "If these were SN, they're not here, but if they were, SN process A cannot perceive until process be issued the receive but process be can't proceed until it process areas.",
                    "label": 0
                },
                {
                    "sent": "If you receive it's a classic deadlock, OK?",
                    "label": 0
                },
                {
                    "sent": "So, so if it's S send, this code is guaranteed to deadlock.",
                    "label": 0
                },
                {
                    "sent": "OK, which is a problem.",
                    "label": 0
                },
                {
                    "sent": "What a lot of people right?",
                    "label": 0
                },
                {
                    "sent": "As they write this send XP send why a?",
                    "label": 0
                },
                {
                    "sent": "It's probably a small message, it's probably buffered.",
                    "label": 0
                },
                {
                    "sent": "It's probably asynchronous.",
                    "label": 0
                },
                {
                    "sent": "This code probably works, but this is incorrect.",
                    "label": 0
                },
                {
                    "sent": "It may not work.",
                    "label": 0
                },
                {
                    "sent": "OK, so this may run on system A and you ported to system B and it doesn't work even worse.",
                    "label": 0
                },
                {
                    "sent": "The system buffering the classic thing you get is people run a program on their local cluster.",
                    "label": 0
                },
                {
                    "sent": "It runs they port to a national supercomputer.",
                    "label": 0
                },
                {
                    "sent": "They say your MPI is broken.",
                    "label": 0
                },
                {
                    "sent": "My code deadlocks on your computer.",
                    "label": 0
                },
                {
                    "sent": "Well, the reason it deadlocks is now running on on many, many more processors they're running on 10s of thousands of processors when previously around on hundreds, the more processes you run on the less buffering space you can afford.",
                    "label": 0
                },
                {
                    "sent": "You probably have a buffer for an outgoing message to every destination.",
                    "label": 0
                },
                {
                    "sent": "OK, the more processes you have, the smaller your buffer space.",
                    "label": 0
                },
                {
                    "sent": "Is going to be so that's the classic thing.",
                    "label": 0
                },
                {
                    "sent": "Suddenly you run in your in a regime you're running on hundreds of thousands of processes.",
                    "label": 0
                },
                {
                    "sent": "The system doesn't have very much buffer space at all.",
                    "label": 0
                },
                {
                    "sent": "It decides to this is this is incorrect.",
                    "label": 0
                },
                {
                    "sent": "It probably runs, but it's incorrect, and it's the it's the horrible bug.",
                    "label": 0
                },
                {
                    "sent": "It's like not initializing a variable in C or Fortran in I integer.",
                    "label": 0
                },
                {
                    "sent": "I well, it might be set to 0, but it's not guaranteed, and these things can come back and and really bite you.",
                    "label": 0
                },
                {
                    "sent": "This code is not guaranteed to work because send Beacon.",
                    "label": 0
                },
                {
                    "sent": "We could become synchronous.",
                    "label": 0
                },
                {
                    "sent": "It's guaranteed to deadlock if you send so correct program.",
                    "label": 0
                },
                {
                    "sent": "Should work with all sends replaced by S sends, so that's always a good.",
                    "label": 0
                },
                {
                    "sent": "If your program runs on your laptop but not on a supercomputer.",
                    "label": 0
                },
                {
                    "sent": "Replace all the sense on your laptop with S ends and see if it still runs and if it doesn't.",
                    "label": 0
                },
                {
                    "sent": "If it doesn't, you have an incorrect program you need to go and fix it.",
                    "label": 0
                },
                {
                    "sent": "What's the obvious way of fixing this?",
                    "label": 0
                },
                {
                    "sent": "This very simple case?",
                    "label": 0
                },
                {
                    "sent": "Yeah, so so.",
                    "label": 0
                },
                {
                    "sent": "Process A sends and receives and process B receives then sends.",
                    "label": 1
                },
                {
                    "sent": "So for simple cases you can fix the deadlock by construction, but in general the correct way of fixing this is something called nonblocking communications, which I'll cover in the next lecture, but MPI send is useful but you have to assume the worst case you have to assume the MPI send could be synchronous, and in this case this is an incorrect program.",
                    "label": 0
                },
                {
                    "sent": "So avoid.",
                    "label": 0
                }
            ]
        },
        "clip_38": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Deadlock either match sends and receives explicitly.",
                    "label": 0
                },
                {
                    "sent": "A ping pong is a B.",
                    "label": 0
                },
                {
                    "sent": "It's like playing.",
                    "label": 0
                },
                {
                    "sent": "Yeah, playing ping pong table tennis you somebody serves and somebody returns.",
                    "label": 0
                },
                {
                    "sent": "But for more general solution use nonblocking communications.",
                    "label": 0
                },
                {
                    "sent": "This is not relevant because we're not doing the exercises I normally use, but I say when you're developing a program, develop your program with us, send.",
                    "label": 0
                },
                {
                    "sent": "So if you make a mistake, your program will deadlock, which is what you want.",
                    "label": 0
                },
                {
                    "sent": "You want correct programs to fail.",
                    "label": 0
                },
                {
                    "sent": "You don't want correct program if you want incorrect programs to fail.",
                    "label": 0
                },
                {
                    "sent": "You do not want incorrect programs to run.",
                    "label": 0
                },
                {
                    "sent": "That's a disaster.",
                    "label": 0
                },
                {
                    "sent": "And then converted to set tech.",
                    "label": 0
                },
                {
                    "sent": "Took any program written with MPI send.",
                    "label": 0
                },
                {
                    "sent": "Should work with MPs.",
                    "label": 0
                },
                {
                    "sent": "Send because MPI send is allowed to be MPs and you can write programs that.",
                    "label": 0
                },
                {
                    "sent": "That stopped working when you convert SN to send, but you have to do very weird things so so so really my my my my.",
                    "label": 0
                },
                {
                    "sent": "Advice is developed with us send to you right correct programs and then when you finished it or convert them all to send so the code will go faster and the yeah.",
                    "label": 0
                },
                {
                    "sent": "Sorry.",
                    "label": 0
                },
                {
                    "sent": "Well, that's why that's why that's why you let MPI decide.",
                    "label": 0
                },
                {
                    "sent": "Yes, so for very large messages it won't buffer because it's so important point about synchronous send is that this trans.",
                    "label": 0
                }
            ]
        },
        "clip_39": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "How far can be done with zero copy?",
                    "label": 0
                },
                {
                    "sent": "You're both on the line at the same time as it.",
                    "label": 0
                },
                {
                    "sent": "Alright, you gotta MB put it there bang, it's all done.",
                    "label": 0
                },
                {
                    "sent": "No no copying.",
                    "label": 0
                },
                {
                    "sent": "So for large messages MPI will tend to become synchronous for two reasons.",
                    "label": 0
                },
                {
                    "sent": "One is it may not be able to afford the buffer space, but Secondly it may be able to do it with zero copy, so it will decide that the mantra is let MPI decide what that threshold is.",
                    "label": 0
                },
                {
                    "sent": "It's typically of the order of.",
                    "label": 0
                },
                {
                    "sent": "5K10K bytes, that's the kind of order of magnitude afew 1000.",
                    "label": 0
                },
                {
                    "sent": "Integers or reals.",
                    "label": 0
                },
                {
                    "sent": "That's normally that the where the threshold is, but it's not defined.",
                    "label": 0
                },
                {
                    "sent": "That's an implementation issue, but it's useful to know it's kind of so, so small messages are always buffered.",
                    "label": 0
                },
                {
                    "sent": "In fact, small messages don't have any data on them at all, because I mean.",
                    "label": 0
                },
                {
                    "sent": "NPI will send when you send the message in.",
                    "label": 0
                },
                {
                    "sent": "MPI sends a little protocol messages or header saying look, I'm going to send you a message.",
                    "label": 0
                },
                {
                    "sent": "Are you ready?",
                    "label": 0
                },
                {
                    "sent": "OK, but if you're sending one byte, it's like sending a postcard rather than let's just stick it there, you know?",
                    "label": 0
                },
                {
                    "sent": "So it's like text messages.",
                    "label": 0
                },
                {
                    "sent": "Text messages are heard the story before text messages are header.",
                    "label": 0
                },
                {
                    "sent": "For the protocol, when your mobile phone is continually pinging to some base station to find out where it is, which it does all the time, the protocol messages of 256 bytes long OK, and it's doing that all the time for free, you don't get charged by the by the phone company for finding out which your nearest base station is, your phone just does it all the time.",
                    "label": 0
                },
                {
                    "sent": "Then someone spotted that 140 characters that were unused.",
                    "label": 0
                },
                {
                    "sent": "Oh, we can put text.",
                    "label": 0
                },
                {
                    "sent": "That's why text messages, 140 characters long.",
                    "label": 0
                },
                {
                    "sent": "And it's also why Twitter 140 characters on 'cause there's 140 bytes free in the header message.",
                    "label": 0
                },
                {
                    "sent": "So they had to send this header message anyways.",
                    "label": 0
                },
                {
                    "sent": "They just charge you for if you send a text message.",
                    "label": 0
                },
                {
                    "sent": "But it's the same thing.",
                    "label": 0
                },
                {
                    "sent": "At MPI, when you send the protocol message, if you can stick the data on the protocol messages for free, but that's that's something of a.",
                    "label": 0
                },
                {
                    "sent": "And I city so so M small messages will be buffered.",
                    "label": 0
                },
                {
                    "sent": "Large messages will.",
                    "label": 0
                },
                {
                    "sent": "Not be buffered is that is there.",
                    "label": 0
                },
                {
                    "sent": "Is the so I think that was the end of the talk.",
                    "label": 0
                }
            ]
        },
        "clip_40": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Yeah.",
                    "label": 0
                },
                {
                    "sent": "No, because in fact.",
                    "label": 0
                },
                {
                    "sent": "You should you should develop with synchronous sense, so if you make a programming error then the code fails, which is what you want, but send will be faster and in fact.",
                    "label": 0
                },
                {
                    "sent": "It's difficult to explain, but.",
                    "label": 0
                },
                {
                    "sent": "You think?",
                    "label": 0
                },
                {
                    "sent": "You think it makes you gives you a nice feeling that you think I do a synchronous send.",
                    "label": 0
                },
                {
                    "sent": "I send the data OK, it's been received OK in practice.",
                    "label": 0
                },
                {
                    "sent": "Doesn't really, it doesn't actually matter.",
                    "label": 0
                },
                {
                    "sent": "It doesn't really matter.",
                    "label": 0
                },
                {
                    "sent": "Because.",
                    "label": 0
                },
                {
                    "sent": "Like it's hard to explain, but you need to look at a few real problems in practice.",
                    "label": 0
                },
                {
                    "sent": "It might make you feel a bit a bit happier that you know that it's been received, but in practice, as long as it is received, you don't care when it happens.",
                    "label": 0
                },
                {
                    "sent": "So no, it's very rare you need to use synchronous end for correctness.",
                    "label": 0
                },
                {
                    "sent": "Such.",
                    "label": 0
                },
                {
                    "sent": "Yeah, I think that's it's it's it's.",
                    "label": 0
                },
                {
                    "sent": "It's a subtle point, but.",
                    "label": 0
                },
                {
                    "sent": "It just depends on what you're writing.",
                    "label": 0
                },
                {
                    "sent": "OK, So what I want to go into now is the.",
                    "label": 0
                },
                {
                    "sent": "What I'll do?",
                    "label": 0
                }
            ]
        },
        "clip_41": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "That is all, I think probably the best thing to do is to talk about the traffic model.",
                    "label": 0
                },
                {
                    "sent": "Then you can download and run the code and then I'll talk about non blocking communications and then will be will be will be done so the traffic model is what I'm going to.",
                    "label": 0
                },
                {
                    "sent": "Is my the example that I really like?",
                    "label": 0
                },
                {
                    "sent": "I don't think other people like it, but it's a very very simple.",
                    "label": 0
                },
                {
                    "sent": "Where is it?",
                    "label": 0
                },
                {
                    "sent": "Traffic, no traffic solution, parallel traffic.",
                    "label": 0
                }
            ]
        },
        "clip_42": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "OK.",
                    "label": 0
                },
                {
                    "sent": "So this the animations here won't work, but so.",
                    "label": 0
                }
            ]
        },
        "clip_43": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Normally I get choose to think about this, but I'll just explain the solution straight away just But anyway.",
                    "label": 0
                }
            ]
        },
        "clip_44": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So we want to predict traffic flow.",
                    "label": 0
                },
                {
                    "sent": "These were animations, they don't work at the moment for.",
                    "label": 0
                }
            ]
        },
        "clip_45": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Two reasons, one is in like it's like weather forecasting.",
                    "label": 0
                },
                {
                    "sent": "Is it going to rain this afternoon?",
                    "label": 0
                },
                {
                    "sent": "Yeah, is there going to be a traffic jam this afternoon?",
                    "label": 0
                },
                {
                    "sent": "Do I need to change the lights?",
                    "label": 0
                },
                {
                    "sent": "Change the priorities so to look for effects such as congestion?",
                    "label": 0
                },
                {
                    "sent": "And this was a video of the traffic, the terrible traffic in Bangkok or.",
                    "label": 0
                },
                {
                    "sent": "Yes, I knew this would happen.",
                    "label": 0
                }
            ]
        },
        "clip_46": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Oh it's OK. OK, sorry, or for more longer term things like.",
                    "label": 0
                },
                {
                    "sent": "In the UK, we love roundabouts and we love traffic lights or even put traffic lights on roundabouts.",
                    "label": 0
                },
                {
                    "sent": "So this was a project to optimize the traffic light sequence on a roundabout.",
                    "label": 0
                },
                {
                    "sent": "Or we did this on the PC in many years ago.",
                    "label": 0
                },
                {
                    "sent": "You might say, I think that the traffic between London and.",
                    "label": 0
                },
                {
                    "sent": "And Manchester is is too congested.",
                    "label": 0
                },
                {
                    "sent": "If I built another motorway would it help?",
                    "label": 0
                },
                {
                    "sent": "So that's more like climate forecasting you you say you know what if you know happens so weather traffic modeling is quite quite important, but we're going.",
                    "label": 0
                }
            ]
        },
        "clip_47": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "The simplest model.",
                    "label": 0
                },
                {
                    "sent": "So we're going to divide the road just here, so we're going to do the simplest thing you're going to do, which is a 1D seller automaton.",
                    "label": 0
                },
                {
                    "sent": "It's about the simplest thing you can possibly imagine, so you may be familiar with the standard 2D cellular automaton.",
                    "label": 0
                },
                {
                    "sent": "Is the game of life.",
                    "label": 0
                },
                {
                    "sent": "I don't know.",
                    "label": 0
                },
                {
                    "sent": "People played with the game of Life, Conway's Game of Life, but this is even simpler.",
                    "label": 0
                },
                {
                    "sent": "We divide the road into series of cell.",
                    "label": 0
                }
            ]
        },
        "clip_48": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "They are either occupied or unoccupied.",
                    "label": 0
                }
            ]
        },
        "clip_49": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And we have an update rule where each step, so we're going through a step in time one second, 2 seconds, 3 seconds.",
                    "label": 0
                },
                {
                    "sent": "The cars move forward if the space ahead is empty and not if they don't, and it's an instantaneous update.",
                    "label": 0
                },
                {
                    "sent": "You don't say or that guy can move on.",
                    "label": 0
                },
                {
                    "sent": "Now that guy, can you say you just look at?",
                    "label": 0
                },
                {
                    "sent": "You said that guy can move that guy can't and that guy can.",
                    "label": 0
                },
                {
                    "sent": "And then you move them so it's an instantaneous update.",
                    "label": 0
                },
                {
                    "sent": "It's it doesn't depend on the order.",
                    "label": 0
                },
                {
                    "sent": "OK, so in that case.",
                    "label": 0
                }
            ]
        },
        "clip_50": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "They do that, then we obviously do.",
                    "label": 0
                }
            ]
        },
        "clip_51": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Guy can move and this guy can move and then when you get gap car gap car they can all move at the same time.",
                    "label": 0
                },
                {
                    "sent": "And.",
                    "label": 0
                }
            ]
        },
        "clip_52": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "You could so this talk actually comes from a public understanding of science talk.",
                    "label": 0
                },
                {
                    "sent": "I gave Science Festival quite a long time ago, so there's some very bad attempts at humor in the thing, so I apologize, but you could do this by moving pawns on a chess board.",
                    "label": 0
                },
                {
                    "sent": "So you're simulating this.",
                    "label": 0
                },
                {
                    "sent": "You have a chess board and you're moving the pawns.",
                    "label": 0
                },
                {
                    "sent": "OK, so porn is a car, so.",
                    "label": 0
                }
            ]
        },
        "clip_53": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So I think that particular interesting features at traffic.",
                    "label": 0
                }
            ]
        },
        "clip_54": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Make sure you get the right behave.",
                    "label": 0
                }
            ]
        },
        "clip_55": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Yeah, so the car was the Carter altogether at the traffic lights and then they.",
                    "label": 0
                }
            ]
        },
        "clip_56": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Lights go green and everyone moves away.",
                    "label": 0
                },
                {
                    "sent": "You know traffic doesn't move off in a block.",
                    "label": 0
                },
                {
                    "sent": "You get this.",
                    "label": 0
                },
                {
                    "sent": "You get this.",
                    "label": 0
                },
                {
                    "sent": "And in fact, if you plot a graph.",
                    "label": 0
                }
            ]
        },
        "clip_57": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Of the.",
                    "label": 0
                },
                {
                    "sent": "Average speed this is the asymptotic average B.",
                    "label": 0
                },
                {
                    "sent": "This is having run the model for a long time against density of cars below 50% density.",
                    "label": 0
                },
                {
                    "sent": "Eventually the cars go gargot car gap car gap so below 50% density you get a velocity of 1.",
                    "label": 0
                },
                {
                    "sent": "The cars move every iteration 100% dense to the cars don't move at all and in fact congestion sets on at 50% and it.",
                    "label": 0
                },
                {
                    "sent": "So this is all looks very impressive, but actually it's completely trivial becausw.",
                    "label": 0
                },
                {
                    "sent": "If you got a physics background and you do semiconductor stuff at less than half, filling the cars moved to the right with velocity one more than half filling the holes move to the major situation we had all cars and one gap.",
                    "label": 0
                },
                {
                    "sent": "What happens is the gap moves to the left.",
                    "label": 0
                },
                {
                    "sent": "So if I plotted the number of cars that move, it's just up and down.",
                    "label": 1
                },
                {
                    "sent": "But if you put it this way, it looks more interesting.",
                    "label": 0
                },
                {
                    "sent": "But anyway, it's actually it is a completely trivial, but it's even on Wikipedia it's called the 192 model, other one the 128 model.",
                    "label": 0
                },
                {
                    "sent": "Order something with them so so the seller automaton.",
                    "label": 0
                },
                {
                    "sent": "The state of a saddle depends on itself and its two neighbors.",
                    "label": 0
                },
                {
                    "sent": "So you have.",
                    "label": 0
                },
                {
                    "sent": "You have 8 possible States and for each of those you have, you have two.",
                    "label": 0
                },
                {
                    "sent": "You have 8 possible states of two cars and for each of those you have a different rule.",
                    "label": 0
                },
                {
                    "sent": "So there are two to the eight possible one descender automata of which most are really boring.",
                    "label": 0
                },
                {
                    "sent": "But this one is called.",
                    "label": 0
                },
                {
                    "sent": "I think it's the 190.",
                    "label": 0
                },
                {
                    "sent": "I didn't know that.",
                    "label": 0
                },
                {
                    "sent": "I mean I came up with it as an idea, but it's not original so.",
                    "label": 0
                }
            ]
        },
        "clip_58": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Question is.",
                    "label": 0
                },
                {
                    "sent": "So yeah, you use more company.",
                    "label": 0
                },
                {
                    "sent": "You can have multiple lanes and multiple cars were going.",
                    "label": 0
                }
            ]
        },
        "clip_59": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "The simple thing, so I'm not going to go through this stuff.",
                    "label": 0
                },
                {
                    "sent": "This was it, this is.",
                    "label": 0
                }
            ]
        },
        "clip_60": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "This is this is.",
                    "label": 0
                }
            ]
        },
        "clip_61": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Traffic in terms with.",
                    "label": 0
                }
            ]
        },
        "clip_62": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Are automatons.",
                    "label": 0
                }
            ]
        },
        "clip_63": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "I'm gonna go through this stuff.",
                    "label": 0
                }
            ]
        },
        "clip_64": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And.",
                    "label": 0
                },
                {
                    "sent": "I think I did a stupid thing.",
                    "label": 0
                },
                {
                    "sent": "I'll come back to this later so.",
                    "label": 0
                }
            ]
        },
        "clip_65": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "I haven't.",
                    "label": 0
                },
                {
                    "sent": "I've tried to rearrange these.",
                    "label": 0
                },
                {
                    "sent": "I've put that slide in the wrong place, so.",
                    "label": 0
                },
                {
                    "sent": "So the question is, how fast can we run the model?",
                    "label": 0
                },
                {
                    "sent": "We measure the speeding car operations per second.",
                    "label": 0
                },
                {
                    "sent": "This is the bad slide which was supposed to be funny.",
                    "label": 0
                }
            ]
        },
        "clip_66": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "That's cops, OK?",
                    "label": 0
                }
            ]
        },
        "clip_67": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So this is Bobby Fischer who was a slightly eccentric chess champion in the 70s.",
                    "label": 0
                },
                {
                    "sent": "This is when the USA and Russia used to fight by playing chess instead of the option.",
                    "label": 0
                },
                {
                    "sent": "Another option which was throwing bombs at each other.",
                    "label": 0
                },
                {
                    "sent": "So it was preferable to play hockey against each other or ice hockey or chess as a as a surrogate for a war.",
                    "label": 0
                },
                {
                    "sent": "But anyway, Bobby Fischer was American chess champion.",
                    "label": 0
                },
                {
                    "sent": "I reckon he could update the model at.",
                    "label": 0
                }
            ]
        },
        "clip_68": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Two car operations per second.",
                    "label": 0
                },
                {
                    "sent": "I think if you.",
                    "label": 0
                }
            ]
        },
        "clip_69": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Pawns on a chess board.",
                    "label": 0
                }
            ]
        },
        "clip_70": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Or you could update the Model 2 cars per second.",
                    "label": 1
                },
                {
                    "sent": "OK to cops.",
                    "label": 0
                },
                {
                    "sent": "But I'm not concerned about that, I'm concerned.",
                    "label": 0
                }
            ]
        },
        "clip_71": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "If I've got 3 Bobby Fishers.",
                    "label": 0
                },
                {
                    "sent": "Can 3 Bobby Fishers?",
                    "label": 0
                }
            ]
        },
        "clip_72": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "26 cops so we look at the water.",
                    "label": 0
                }
            ]
        },
        "clip_73": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "You are going to message passing model distributed map.",
                    "label": 0
                },
                {
                    "sent": "So I rode is of length 15.",
                    "label": 0
                },
                {
                    "sent": "We have three people there in different offices.",
                    "label": 0
                },
                {
                    "sent": "They have a white border.",
                    "label": 0
                },
                {
                    "sent": "Their whiteboard just has five cells on it.",
                    "label": 0
                },
                {
                    "sent": "And, um.",
                    "label": 0
                },
                {
                    "sent": "And we want to up so this is the same Rd, but split up we want to update this so want to update the road OK and immediately you see a problem.",
                    "label": 0
                },
                {
                    "sent": "That person a.",
                    "label": 0
                },
                {
                    "sent": "Doesn't know if his car can move 'cause he doesn't know if there's a car here or not and person B doesn't know if they've moved their car.",
                    "label": 0
                },
                {
                    "sent": "And actually I can't fly through a person.",
                    "label": 0
                },
                {
                    "sent": "See, doesn't know if there should be a car there because they don't know if there's a car there so you can update if you have a link.",
                    "label": 0
                },
                {
                    "sent": "If you have locally a Rd of length N, you can update the N -- 2 interior cells.",
                    "label": 0
                },
                {
                    "sent": "This one this one, this one, this one, this one this one.",
                    "label": 0
                },
                {
                    "sent": "But you can't update the exterior ones.",
                    "label": 0
                },
                {
                    "sent": "So the only thing to do is to communicate so you have to.",
                    "label": 0
                }
            ]
        },
        "clip_74": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Speak to each other you.",
                    "label": 0
                }
            ]
        },
        "clip_75": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "To do boundary swap and you have to tell each other what the states of your endpoints are and the.",
                    "label": 0
                }
            ]
        },
        "clip_76": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Same with B&C.",
                    "label": 0
                }
            ]
        },
        "clip_77": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And once they know what the states of the endpoints are, not not the interior points, there are just the end points, so it's a limited.",
                    "label": 0
                },
                {
                    "sent": "It's abounded communication.",
                    "label": 0
                },
                {
                    "sent": "Then you can update the road.",
                    "label": 0
                },
                {
                    "sent": "So then you can update the road.",
                    "label": 0
                },
                {
                    "sent": "Then you do the same thing again, you communicate.",
                    "label": 0
                },
                {
                    "sent": "You communicate.",
                    "label": 0
                },
                {
                    "sent": "And then you calculate and this is exactly the same as this HPC challenge code, which we're going to give to you.",
                    "label": 0
                },
                {
                    "sent": "I'll probably put up overnight where you have.",
                    "label": 0
                },
                {
                    "sent": "You basically have to communicate boundary information called Halo swapping, and then you can so you can.",
                    "label": 0
                },
                {
                    "sent": "Then you can.",
                    "label": 0
                },
                {
                    "sent": "Then you can calculate.",
                    "label": 0
                },
                {
                    "sent": "So it's exactly the same structure.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "If I just go through the solution to that.",
                    "label": 0
                },
                {
                    "sent": "The serial code.",
                    "label": 0
                },
                {
                    "sent": "If so.",
                    "label": 0
                },
                {
                    "sent": "This is where my rearrangement, the slides, kind of.",
                    "label": 0
                }
            ]
        },
        "clip_78": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "The model considerable then sales, but we're going to make traffic on a roundabout.",
                    "label": 0
                },
                {
                    "sent": "'cause we love roundabouts in the UK, which is just periodic boundary conditions around about is just a Rd wrapped around on itself, so if a car moves off the right it reappears on the left so we identify cell N plus one with cell one and cell zero with cell N OK. And this is the code the pseudocode.",
                    "label": 0
                }
            ]
        },
        "clip_79": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So the way I'm going to implement these periodic boundary conditions is I'm not going to have special code.",
                    "label": 0
                },
                {
                    "sent": "I'm not going to have special update rules for the Edge.",
                    "label": 0
                },
                {
                    "sent": "I'm going to have, even in the serial code I'm going to have the road to be bigger than it needs.",
                    "label": 0
                },
                {
                    "sent": "I'm going to have explicitly called Ghost cells at the end so I only have N cells.",
                    "label": 0
                },
                {
                    "sent": "One to end.",
                    "label": 0
                },
                {
                    "sent": "This is just some pseudo language, but my arrays go from one nought to N + 1, and these are the boundary conditions.",
                    "label": 0
                },
                {
                    "sent": "I will just make sure that implement periodic boundary conditions, so initialize the road randomly to get some initial distribution.",
                    "label": 0
                },
                {
                    "sent": "I loop of the iterations of my time step.",
                    "label": 0
                },
                {
                    "sent": "This is the periodic boundary conditions.",
                    "label": 0
                },
                {
                    "sent": "I said old of North equals older then, so I look to the left of sale one.",
                    "label": 0
                },
                {
                    "sent": "I pick up cell 0 but sell 0 is equal to all and that's fine.",
                    "label": 0
                },
                {
                    "sent": "So I should say I have an old road in a new road each time step I have an old road which is time T and a new road which is time T + 1 and to set the other one old N + 1.",
                    "label": 0
                },
                {
                    "sent": "If I look at the right hand side of the NTH cell that's equal to the first cell.",
                    "label": 0
                },
                {
                    "sent": "Here having done that, this is the update loop.",
                    "label": 0
                },
                {
                    "sent": "This is just you.",
                    "label": 0
                },
                {
                    "sent": "Just set the new value versus the old value.",
                    "label": 0
                },
                {
                    "sent": "You may not think there's enough rules here.",
                    "label": 0
                },
                {
                    "sent": "You think there's eight cases, but it's degenerate because if your full your state only depends on the state of your upwards neighbor and if your empty your state only depends on the state of your downward neighbor.",
                    "label": 0
                },
                {
                    "sent": "So in principle there's 8 rules.",
                    "label": 0
                },
                {
                    "sent": "Only four of them are relevant 'cause it's such a simple model, so this is the code we're going to parallelize.",
                    "label": 0
                },
                {
                    "sent": "And what we're going to do?",
                    "label": 0
                },
                {
                    "sent": "I won't go through the dumb solutions in MPI.",
                    "label": 0
                }
            ]
        },
        "clip_80": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "'cause I've already talked about them essentially just get.",
                    "label": 0
                }
            ]
        },
        "clip_81": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "But we just we distribute the data between the two processes.",
                    "label": 0
                },
                {
                    "sent": "And the internal sales could be updated independently.",
                    "label": 0
                },
                {
                    "sent": "We must communicate with neighboring processes, update the edge selves, and we sum the local number, which prosecutors number of moves each iteration.",
                    "label": 0
                },
                {
                    "sent": "We need to know how many cars have moved each process, and he knows how many cars have moved locali.",
                    "label": 0
                },
                {
                    "sent": "And.",
                    "label": 0
                },
                {
                    "sent": "We do that with these these Halo cells.",
                    "label": 0
                },
                {
                    "sent": "And so the Halo cells.",
                    "label": 0
                }
            ]
        },
        "clip_82": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Are very simple load balancers and issue.",
                    "label": 0
                },
                {
                    "sent": "The same calculation appears everywhere, so we just do a simple thing like we did with pie.",
                    "label": 0
                },
                {
                    "sent": "Example, split the array up into into equal size slices for each piece.",
                    "label": 0
                },
                {
                    "sent": "The end over P -- 2 interior cells can be updated independently, where P is the number of processes the edge sales were updated by other processors.",
                    "label": 0
                },
                {
                    "sent": "On communications is required, but the important point about this code is.",
                    "label": 0
                }
            ]
        },
        "clip_83": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "At.",
                    "label": 0
                },
                {
                    "sent": "In the serial code.",
                    "label": 0
                },
                {
                    "sent": "The boundary conditions are updated by a copy in the parallel code.",
                    "label": 0
                },
                {
                    "sent": "It's exactly the same thing.",
                    "label": 0
                },
                {
                    "sent": "You update your boundary conditions, but you do them by message passing.",
                    "label": 0
                },
                {
                    "sent": "You set your extreme value to be the value of the guy next to you in each direction.",
                    "label": 0
                },
                {
                    "sent": "That's the communication.",
                    "label": 0
                },
                {
                    "sent": "OK, so if you write your serial code in this way, the parallel code is is is conceptually the same, it's just that the boundary setting requires communication.",
                    "label": 0
                },
                {
                    "sent": "That's the only difference, so I think there's instructions on the I think would be quite good to do is to just download and run.",
                    "label": 0
                },
                {
                    "sent": "The traffic model just to check that it works correctly and then we can.",
                    "label": 0
                },
                {
                    "sent": "But see if so on the it's this, it's this thing he actually I should go back to the right place which is the X.",
                    "label": 0
                },
                {
                    "sent": "If it's the exercise sheet.",
                    "label": 0
                },
                {
                    "sent": "Talks about how to.",
                    "label": 0
                },
                {
                    "sent": "To run it.",
                    "label": 0
                },
                {
                    "sent": "And there's the source code to the exercise sheet, which is just link from the wiki.",
                    "label": 0
                },
                {
                    "sent": "The XL sheet is all about the traffic model and you should be able to follow the instructions to is basically to run.",
                    "label": 0
                },
                {
                    "sent": "I would run the MPI version and I would just run it out the box and just check that you get the right answer.",
                    "label": 0
                },
                {
                    "sent": "So it just to check that this works.",
                    "label": 0
                },
                {
                    "sent": "I haven't screwed up.",
                    "label": 0
                },
                {
                    "sent": "You will probably have to update the reservation thing that we had to do.",
                    "label": 0
                },
                {
                    "sent": "You'll need to put that Hash S batch minus minus res equals IHPCSS or something.",
                    "label": 0
                },
                {
                    "sent": "If you want to do that, but could people just check, I'll leave that on the screen actually.",
                    "label": 0
                },
                {
                    "sent": "So I would just really just check that it runs and it should just run out the box and give you some some some statistics.",
                    "label": 0
                },
                {
                    "sent": "So I'll maybe do it if I just.",
                    "label": 0
                },
                {
                    "sent": "Check that it works.",
                    "label": 0
                },
                {
                    "sent": "So where is my British?",
                    "label": 0
                },
                {
                    "sent": "So actually the version is called CMP.",
                    "label": 0
                },
                {
                    "sent": "I simple or CCM of F MPI simple.",
                    "label": 0
                },
                {
                    "sent": "It's called simple because I've simplified it.",
                    "label": 0
                },
                {
                    "sent": "It's not a, but if I should just be able to make it and I and I can just run it locally actually.",
                    "label": 0
                },
                {
                    "sent": "So it works for me.",
                    "label": 0
                },
                {
                    "sent": "And I should be able to if I do, if I copy what's it called MPI Batch Dot job to traffic dot job?",
                    "label": 0
                },
                {
                    "sent": "What was it?",
                    "label": 0
                },
                {
                    "sent": "Hash S batch?",
                    "label": 0
                },
                {
                    "sent": "Minus minus res equals.",
                    "label": 0
                },
                {
                    "sent": "OK, seems to be working.",
                    "label": 0
                },
                {
                    "sent": "So what it prints out is a. Mega Cops rating, which is a million car of millions of car operation per second.",
                    "label": 0
                },
                {
                    "sent": "So if out the box if I run it on on on bridges I get 2.6 giga cops, 2.6 billion car operations per second.",
                    "label": 0
                },
                {
                    "sent": "If I maybe I want to run on more.",
                    "label": 0
                },
                {
                    "sent": "On more.",
                    "label": 0
                },
                {
                    "sent": "Sorry, not on.",
                    "label": 0
                },
                {
                    "sent": "If I want to run on more processes, I have to I have to edit traffic dot job.",
                    "label": 0
                },
                {
                    "sent": "And I would just update here end task per node.",
                    "label": 0
                },
                {
                    "sent": "That could be a maximum of 28.",
                    "label": 0
                },
                {
                    "sent": "So for example.",
                    "label": 0
                },
                {
                    "sent": "So if I then cusub that.",
                    "label": 0
                },
                {
                    "sent": "So I've used seven times as many processes started up with four time using 7.",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "And how did it so?",
                    "label": 0
                },
                {
                    "sent": "If I tailed this first 1157991 it did 2.6 giga cops and if I do the next 1158 it did.",
                    "label": 0
                },
                {
                    "sent": "Nine points, it was, so I multiply the number of processes by factor of seven and it went four times as fast.",
                    "label": 0
                },
                {
                    "sent": "Which isn't brilliant, but there's two reasons why it doesn't go the default Rd size is very small.",
                    "label": 0
                },
                {
                    "sent": "It's like 10,000 cells, which is almost, which is tiny.",
                    "label": 0
                },
                {
                    "sent": "What?",
                    "label": 0
                },
                {
                    "sent": "Why does this code go faster if you have more cells?",
                    "label": 0
                },
                {
                    "sent": "That's the.",
                    "label": 0
                },
                {
                    "sent": "That's the that's the other.",
                    "label": 0
                },
                {
                    "sent": "So this code illustrates both.",
                    "label": 0
                },
                {
                    "sent": "If you've done any parallel scaling Amdahl's law and and.",
                    "label": 0
                },
                {
                    "sent": "Gustafson's law.",
                    "label": 0
                }
            ]
        },
        "clip_84": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Why does this?",
                    "label": 0
                },
                {
                    "sent": "Why does this program so?",
                    "label": 0
                },
                {
                    "sent": "If I each iteration OK in the serial model I have 15.",
                    "label": 0
                },
                {
                    "sent": "I have 15 cells.",
                    "label": 0
                },
                {
                    "sent": "What was my update rate in Serial?",
                    "label": 0
                },
                {
                    "sent": "I guessed it as how many, how many cars per second?",
                    "label": 0
                },
                {
                    "sent": "Doing it by hand on a chess board.",
                    "label": 0
                },
                {
                    "sent": "Two, so how long does 15 S take?",
                    "label": 0
                },
                {
                    "sent": "The 7 1/2 seconds.",
                    "label": 0
                },
                {
                    "sent": "OK, so how long does it take for each person to update their five cells now?",
                    "label": 0
                },
                {
                    "sent": "Nitration 53 times as fast.",
                    "label": 0
                },
                {
                    "sent": "Oh, but I forgot they've got to phone each other.",
                    "label": 0
                },
                {
                    "sent": "How long does it take to phone two people?",
                    "label": 0
                },
                {
                    "sent": "Talk to each other.",
                    "label": 0
                },
                {
                    "sent": "A minute or something, so you've taken the calculation which is 7 1/2 seconds and now it takes 62 1/2 seconds.",
                    "label": 0
                },
                {
                    "sent": "Well done, you OK. What happens if this is 15,000 cells OK?",
                    "label": 0
                },
                {
                    "sent": "Then it takes 7 and a half 1000 seconds in parallel in serial 15,000 cells, this takes.",
                    "label": 0
                },
                {
                    "sent": "Except it takes 5000 seconds in parallel in parallel.",
                    "label": 0
                },
                {
                    "sent": "How much does the times the communications type take exactly the same?",
                    "label": 0
                },
                {
                    "sent": "That's the point.",
                    "label": 0
                },
                {
                    "sent": "The communications is the same.",
                    "label": 0
                },
                {
                    "sent": "You have to communicate up and down with your neighbor and you have to exchange 1 boundary element and that's an extreme example.",
                    "label": 0
                },
                {
                    "sent": "But it's true in most situations that the communications cost grows slope more slowly in a well written algorithm or just the communications cost gross.",
                    "label": 0
                },
                {
                    "sent": "More slowly than the than the the calculation cost, so this shows you hear that this.",
                    "label": 0
                },
                {
                    "sent": "Is is worth, you know if the time to calculate is bigger than the time to communicate, which you can ensure about running bigger models then, then then the program will will scale.",
                    "label": 0
                },
                {
                    "sent": "So if you if you run, if you run the traffic model on larger number of cells you should see that it scales better, but I just wanted to finish off very quickly.",
                    "label": 0
                },
                {
                    "sent": "Talking bout did did anyone get back to run?",
                    "label": 0
                },
                {
                    "sent": "They don't have any problems.",
                    "label": 0
                },
                {
                    "sent": "It was all OK right?",
                    "label": 0
                },
                {
                    "sent": "So I've read me well package so I'll just very.",
                    "label": 0
                },
                {
                    "sent": "Quickly.",
                    "label": 0
                },
                {
                    "sent": "Talk about.",
                    "label": 0
                },
                {
                    "sent": "Non blocking, so it's slightly rushed.",
                    "label": 0
                },
                {
                    "sent": "Apologies for that but.",
                    "label": 0
                },
                {
                    "sent": "Non blocking unblocking.",
                    "label": 0
                },
                {
                    "sent": "So the problem.",
                    "label": 0
                }
            ]
        },
        "clip_85": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Is that?",
                    "label": 0
                },
                {
                    "sent": "We want the communications path where everyone talks the neighbor.",
                    "label": 0
                },
                {
                    "sent": "So you talk to him.",
                    "label": 0
                },
                {
                    "sent": "You talk to him.",
                    "label": 0
                },
                {
                    "sent": "You talk to him.",
                    "label": 0
                },
                {
                    "sent": "You talk to me, talk to him and then you talk to him.",
                    "label": 0
                },
                {
                    "sent": "OK, 'cause it's around about OK, what happens if you do synchronous send?",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "What are well?",
                    "label": 0
                },
                {
                    "sent": "Everybody is trying to phone their neighbor.",
                    "label": 0
                },
                {
                    "sent": "Nobody is responding 'cause he's trying to phone him.",
                    "label": 0
                },
                {
                    "sent": "Who's trying?",
                    "label": 0
                },
                {
                    "sent": "So it deadlocks there is this if you don't have periodic boundary conditions more complicated with periodic boundary conditions.",
                    "label": 0
                },
                {
                    "sent": "Every is trying to phone their neighbor and nobody is picking up the phone, so you cannot do this with synchronous send.",
                    "label": 0
                },
                {
                    "sent": "Now you could pair them into odd even pairs.",
                    "label": 0
                },
                {
                    "sent": "That's when the exercises you send them.",
                    "label": 0
                },
                {
                    "sent": "The odd guy sent 1st and receive.",
                    "label": 0
                },
                {
                    "sent": "Secondly even guy, but that's not a general solution, so the general solution to this kind of communication is pattern.",
                    "label": 0
                },
                {
                    "sent": "Wherever these talk to everybody else at the same time is nonblocking communication.",
                    "label": 0
                }
            ]
        },
        "clip_86": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So this is this is illustrating this message around a ring.",
                    "label": 0
                },
                {
                    "sent": "Everyone trying to communicate with their neighbor.",
                    "label": 0
                },
                {
                    "sent": "This deadlocks with synchronous sent and therefore could potentially deadlock if use MPI send standard sound.",
                    "label": 0
                }
            ]
        },
        "clip_87": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So the mode of communication determines when it's consistent.",
                    "label": 0
                },
                {
                    "sent": "Operations complete synchronous, asynchronous, but for each mode MPI is multiple forms.",
                    "label": 0
                },
                {
                    "sent": "The form of an operation determines when the procedure implementing the operation will return when control is returned to the user program.",
                    "label": 0
                },
                {
                    "sent": "So what this says is when you do a nonblocking operation.",
                    "label": 0
                },
                {
                    "sent": "So when you do a standard blocking operates a standard function was a blocking operation.",
                    "label": 0
                },
                {
                    "sent": "MPI Send is a blocking Operation Npis there's a blocking operation.",
                    "label": 0
                },
                {
                    "sent": "Says that routine will return control to you when the operation is completed.",
                    "label": 0
                },
                {
                    "sent": "Now what the operation completing means means different things for S send, it means the message is being delivered for be send.",
                    "label": 0
                },
                {
                    "sent": "It means it's been buffered, but that's irrelevant and it returns control to you when the operation is completed.",
                    "label": 0
                },
                {
                    "sent": "Nonblocking operations return control to you immediately.",
                    "label": 0
                },
                {
                    "sent": "Now some people would call that asynchronous, but the MPI.",
                    "label": 0
                },
                {
                    "sent": "It uses different terminology.",
                    "label": 0
                },
                {
                    "sent": "And they carry on magically in the background.",
                    "label": 0
                },
                {
                    "sent": "OK. And then later on you say, and then you can do something else.",
                    "label": 0
                },
                {
                    "sent": "That's why you break the deadlock.",
                    "label": 0
                },
                {
                    "sent": "You can initiate something.",
                    "label": 0
                },
                {
                    "sent": "Then you can do something more useful.",
                    "label": 0
                },
                {
                    "sent": "And later on you can come back and say, by the way, remember, I'll issue that send has it been delivered.",
                    "label": 0
                },
                {
                    "sent": "So the analogy I use is.",
                    "label": 0
                },
                {
                    "sent": "Tracking a parcel with the Courier.",
                    "label": 0
                },
                {
                    "sent": "If you want to send a partial to your relative in Australia, you give it to a Courier, UPS or DHL or something and you say please.",
                    "label": 0
                },
                {
                    "sent": "Could you deliver that parcel.",
                    "label": 0
                },
                {
                    "sent": "So in that sense it's it's asynchronous.",
                    "label": 0
                },
                {
                    "sent": "It happens in the background, but it's actually it's actually it's actually a synchronous operation because you get information about when it's delivered because you can track it online so you know you've delegated delivering the message to a third party, but you can track it 'cause you can say.",
                    "label": 0
                },
                {
                    "sent": "You know, has that parcel arrived to the important point is when you give a partial to DHL other than money you given partial, they give you something back.",
                    "label": 0
                },
                {
                    "sent": "What do they give you?",
                    "label": 0
                },
                {
                    "sent": "Sorry.",
                    "label": 0
                },
                {
                    "sent": "A tracking number, a receipt and ID, and you have to remember that.",
                    "label": 0
                },
                {
                    "sent": "So that's the that's the important part about nonblocking operations operations, which happen magically in the background.",
                    "label": 0
                },
                {
                    "sent": "You have, you get a receipt so.",
                    "label": 0
                }
            ]
        },
        "clip_88": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Blocking operations relate to when the operation is completed and you've used S send and receive.",
                    "label": 0
                },
                {
                    "sent": "That's the ones I've talked about.",
                    "label": 0
                },
                {
                    "sent": "I've talked about be sound as well.",
                    "label": 0
                }
            ]
        },
        "clip_89": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Anne.",
                    "label": 0
                },
                {
                    "sent": "The whole point is that non blocking of his return straight away another subprogram to continue to perform other work at some later time.",
                    "label": 0
                },
                {
                    "sent": "The subprogram this is kind of old fashion contest await the completion of nonblocking operations, so when we send a fax which was this synchronous operation, what we did first is we.",
                    "label": 0
                },
                {
                    "sent": "We put the facts in the machine and we waited there till it went beep and then we left.",
                    "label": 0
                },
                {
                    "sent": "But in a nonblocking operation you start sending the fax or you ask the Courier to send you your partial you then you go away and do something else like pull a lever and then you come back later and wait for it to complete.",
                    "label": 0
                },
                {
                    "sent": "OK, so there's three phases initiation completion and this stuff.",
                    "label": 0
                },
                {
                    "sent": "You have to do in the middle, and it turns out that to break the deadlock that what you actually do is you don't do work in the middle and you do another communication.",
                    "label": 0
                },
                {
                    "sent": "This allows you to have more than one communication outstanding at once, even if they're synchronous, 'cause you can issue them and then you get control immediately again.",
                    "label": 0
                },
                {
                    "sent": "So this is how you can break the deadlock.",
                    "label": 0
                },
                {
                    "sent": "You can have an outstanding send, an outstanding receive active at the same time.",
                    "label": 0
                }
            ]
        },
        "clip_90": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So nonblocking operation should have matching wait resource is some systems cannot free resources and a normal operation immediately followed by matching weight is equivalent to a blocking operation.",
                    "label": 0
                },
                {
                    "sent": "Some people think think nonblocking operations are magic OK, so they don't.",
                    "label": 0
                },
                {
                    "sent": "There's not magic.",
                    "label": 0
                },
                {
                    "sent": "All they do is they split initiation and completion, but if you initiate something then complete it.",
                    "label": 0
                },
                {
                    "sent": "You've achieved nothing.",
                    "label": 0
                },
                {
                    "sent": "OK, you have to pull them apart.",
                    "label": 0
                },
                {
                    "sent": "And stick some code in the middle to do so.",
                    "label": 0
                }
            ]
        },
        "clip_91": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Thing else, there's nothing magic about not non blocking operations give you the the ability to exploit this to do something useful, but there's nothing magic about them.",
                    "label": 0
                }
            ]
        },
        "clip_92": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So, um.",
                    "label": 0
                },
                {
                    "sent": "You see as many codes with deadlock problems that people have written with nonblocking operations is not because they haven't understood what they're doing.",
                    "label": 0
                }
            ]
        },
        "clip_93": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So we separate the communication to three phases, initiate the nonblocking communication, wait for it to complete, but in the middle do some work, and in fact in reality what you tend to do is you tend to do communications there, not.",
                    "label": 0
                },
                {
                    "sent": "Not what you think?",
                    "label": 0
                },
                {
                    "sent": "Oh, that means that I can.",
                    "label": 0
                },
                {
                    "sent": "I can overlap communications and calculation.",
                    "label": 0
                },
                {
                    "sent": "And so you work for months and months and months to redesign your code.",
                    "label": 0
                },
                {
                    "sent": "So you send a message.",
                    "label": 0
                },
                {
                    "sent": "Then you do calculation, then you test it.",
                    "label": 0
                },
                {
                    "sent": "And of course it doesn't go any faster.",
                    "label": 0
                },
                {
                    "sent": "So you just anyway so.",
                    "label": 0
                },
                {
                    "sent": "Communicate overlapping communication computation is very, very difficult to do because in our model we have this magic.",
                    "label": 0
                },
                {
                    "sent": "I had this postmaster OK's MPI process, I mean so.",
                    "label": 0
                },
                {
                    "sent": "But in fact, somebody has to deliver the message you say, and so all that happens is that at some point when the message needs to be transferred, your user processes the schedules and the process has to run some operating system process to to transfer the message.",
                    "label": 0
                },
                {
                    "sent": "Unless you have some additional hardware, a smart network that can actively transfer messages and there are few and far between.",
                    "label": 0
                },
                {
                    "sent": "In fact the processor is doing all the work.",
                    "label": 0
                },
                {
                    "sent": "So overlapping communications calculation is actually very very difficult.",
                    "label": 0
                },
                {
                    "sent": "But",
                    "label": 0
                }
            ]
        },
        "clip_94": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "I'll come back so a nonblocking send is a bit like having an outbox.",
                    "label": 0
                },
                {
                    "sent": "It's not, but what you do is, you say, rather than saying.",
                    "label": 0
                },
                {
                    "sent": "I want to send this message synchronously.",
                    "label": 0
                },
                {
                    "sent": "I'm going to be synchronous, send you guys and you just wait.",
                    "label": 0
                },
                {
                    "sent": "What you do is you put it in an outbox.",
                    "label": 0
                },
                {
                    "sent": "You say right?",
                    "label": 0
                },
                {
                    "sent": "Could you deliver that message, please?",
                    "label": 0
                },
                {
                    "sent": "OK, I'll come back later.",
                    "label": 0
                },
                {
                    "sent": "Let's see if it's gone.",
                    "label": 0
                },
                {
                    "sent": "I really good.",
                    "label": 0
                }
            ]
        },
        "clip_95": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Nonblocking receive is like an inbox that's actually much nicely, rather than standing there forever and waiting for a receive.",
                    "label": 0
                },
                {
                    "sent": "You say, like I want to receive a message when it comes in, put it there and then you can come back later and see if it's arrived.",
                    "label": 0
                },
                {
                    "sent": "So the syntax is relatively.",
                    "label": 0
                }
            ]
        },
        "clip_96": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So I have really talked about syntax before so well I'll try and keep this quite low, but it's.",
                    "label": 0
                }
            ]
        },
        "clip_97": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "What we have is MPI send.",
                    "label": 0
                },
                {
                    "sent": "You would just specify your buffer, your send buffer, the count.",
                    "label": 0
                },
                {
                    "sent": "The data type which might be into just the destination where it's going.",
                    "label": 0
                },
                {
                    "sent": "This tag, which I have not really talked about.",
                    "label": 0
                },
                {
                    "sent": "At NPR, you can tag messages.",
                    "label": 0
                },
                {
                    "sent": "It's like having red, blue green envelopes.",
                    "label": 0
                },
                {
                    "sent": "You can have messages of tag one packet.",
                    "label": 0
                },
                {
                    "sent": "It allows you to put some extra metadata on the message that not that useful in practice.",
                    "label": 0
                },
                {
                    "sent": "In my wow they don't use them a lot, and this communicator, but you get back a request.",
                    "label": 0
                },
                {
                    "sent": "This is returned to you.",
                    "label": 0
                },
                {
                    "sent": "Remember when you send a parcel by DHL you don't send.",
                    "label": 0
                },
                {
                    "sent": "Please send this person.",
                    "label": 0
                },
                {
                    "sent": "I wanted to be message 57832.",
                    "label": 0
                },
                {
                    "sent": "No, they tell you the ticket number.",
                    "label": 0
                },
                {
                    "sent": "OK so you say in MPI.",
                    "label": 0
                },
                {
                    "sent": "Order request, but I think of it as being a ticket.",
                    "label": 0
                },
                {
                    "sent": "This is returned to you, which is why it's a pointer.",
                    "label": 0
                },
                {
                    "sent": "In C you initiate.",
                    "label": 0
                },
                {
                    "sent": "You have to remember that if you know the biggest mistake people make is the initial another nonblocking operation, and they reuse the same request, it's like losing your library ticket.",
                    "label": 0
                },
                {
                    "sent": "You know you've just forgotten the number.",
                    "label": 0
                },
                {
                    "sent": "If you know if you have more than one nonblocking operation outstanding at once, you need to have you need to remember multiple requests.",
                    "label": 1
                },
                {
                    "sent": "It's up to you to do that.",
                    "label": 0
                },
                {
                    "sent": "And then you could wait on it.",
                    "label": 0
                },
                {
                    "sent": "And this says wait until that request has finished.",
                    "label": 0
                },
                {
                    "sent": "So as written, this is identical to a blocking MPI send you initiated it and then immediately wait on it because they're separate routines.",
                    "label": 0
                },
                {
                    "sent": "You can put some code in here.",
                    "label": 0
                },
                {
                    "sent": "And So what you could put in there as a receive.",
                    "label": 0
                },
                {
                    "sent": "So you could say, right, please send this message to my neighbor.",
                    "label": 0
                },
                {
                    "sent": "Oh, but not while that's happening, I can then do a receive and that will match their send and the deadlock is all broken OK?",
                    "label": 0
                },
                {
                    "sent": "Yeah.",
                    "label": 0
                },
                {
                    "sent": "Yeah.",
                    "label": 1
                },
                {
                    "sent": "You have to worry about gathering up the buffer and this is the right, so MPI, nonblocking operations at least a guaranteed not to buffer.",
                    "label": 0
                },
                {
                    "sent": "So that means that in between here and here you know when the wait is complete, that the that the centers completed, but you don't know when it happens, so you must not touch the buffer you've asked for this buffer to be sent.",
                    "label": 0
                },
                {
                    "sent": "OK, it's like asking somebody to photocopy a document.",
                    "label": 0
                },
                {
                    "sent": "Could you please forward that document for me and then coming scribbling on it later on?",
                    "label": 0
                },
                {
                    "sent": "You like when you don't?",
                    "label": 0
                },
                {
                    "sent": "After that, but I don't know, so you must not.",
                    "label": 1
                },
                {
                    "sent": "You must not.",
                    "label": 0
                },
                {
                    "sent": "So this is the one of the few times you get subtle bugs in MPI programs is if people mess around with send buffers when they've been issued in a non blocking way.",
                    "label": 0
                },
                {
                    "sent": "So sometimes the sometimes it will have been sent and you'll send the old data.",
                    "label": 0
                },
                {
                    "sent": "Sometimes it won't have been sent and you'll send the new data.",
                    "label": 0
                },
                {
                    "sent": "So that is that is.",
                    "label": 0
                },
                {
                    "sent": "So you have to be careful but in practice.",
                    "label": 0
                },
                {
                    "sent": "You tend to do this in fatty constrained pieces of code.",
                    "label": 0
                },
                {
                    "sent": "You have a Halo swap routine and you should be able to work it all out.",
                    "label": 0
                },
                {
                    "sent": "In general, it's a very difficult problem, but in practice 'cause you localize the communications, it's track.",
                    "label": 0
                },
                {
                    "sent": "It's tractable, but that is very important.",
                    "label": 0
                },
                {
                    "sent": "You must not touch that buffer.",
                    "label": 0
                },
                {
                    "sent": "You must not write to that buffer until you've completed the weight.",
                    "label": 0
                }
            ]
        },
        "clip_98": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Nonblocking receive is the same.",
                    "label": 0
                },
                {
                    "sent": "It's like, you know when the message comes in.",
                    "label": 0
                },
                {
                    "sent": "Put it here.",
                    "label": 0
                },
                {
                    "sent": "I reserved this much space.",
                    "label": 0
                },
                {
                    "sent": "I want it to come from here and and you have a request.",
                    "label": 0
                },
                {
                    "sent": "And again, NPI has had the same type for MPI remembers if they're send request or receive requests, but they're they're just stored in a request, so it's just a ticket and MPI will remember if it's a send request received request.",
                    "label": 0
                },
                {
                    "sent": "There's something missing here though that you get in a normal receive.",
                    "label": 0
                },
                {
                    "sent": "This is extra 'cause in the normal receive you don't get a request.",
                    "label": 0
                },
                {
                    "sent": "But there's something missing.",
                    "label": 0
                },
                {
                    "sent": "There might not be obvious, but.",
                    "label": 0
                },
                {
                    "sent": "No, I said when you do receive after specify 2.",
                    "label": 0
                },
                {
                    "sent": "Two data regions.",
                    "label": 0
                },
                {
                    "sent": "One is the receive buffer and the other is the.",
                    "label": 0
                },
                {
                    "sent": "So he said it the status.",
                    "label": 0
                },
                {
                    "sent": "You can't specify it here, 'cause the status tells you.",
                    "label": 0
                },
                {
                    "sent": "Information on the actual message that was received, and so that's deferred till the weight the weight.",
                    "label": 0
                },
                {
                    "sent": "It's only after the weight is complete that the status can be filmed in so so for nonblocking receive the status is pushed down to the Yep.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "So so you can cancel you can cancel request, but it's a horrible way of programming that if there's one thing that MPI library writers would like to get rid from, the standard is the ability to cancel messages, because it means they have to remember everything about a message you know, even when it's sent, if you haven't.",
                    "label": 0
                },
                {
                    "sent": "Waited on it, they have to remember it 'cause you might want to cancel.",
                    "label": 0
                },
                {
                    "sent": "So counseling messages are horrible programming style, but.",
                    "label": 0
                },
                {
                    "sent": "So, so that's very you might ask, why is there a status in the wait?",
                    "label": 0
                },
                {
                    "sent": "If it's a send that meaningless, well actually.",
                    "label": 0
                },
                {
                    "sent": "If you issue this, send and then cancelled it, I think I think I'm right in saying that there's that there's a status there is something in the status which tells you it's finished, but it wasn't delivered.",
                    "label": 0
                },
                {
                    "sent": "It was actually cancelled, but I would really say if you're canceling messages, you're not.",
                    "label": 0
                },
                {
                    "sent": "You're not writing MPI, you, so there are lots of situation what you want.",
                    "label": 0
                },
                {
                    "sent": "More dynamic MPI is very bad at dynamic.",
                    "label": 0
                },
                {
                    "sent": "Unexpected messages if I said I want to send you a message, there you are unless you expected it then.",
                    "label": 0
                },
                {
                    "sent": "So MPI is bad for that.",
                    "label": 0
                },
                {
                    "sent": "So I would if you.",
                    "label": 0
                },
                {
                    "sent": "Other than you get yourself a real Hola, I would not recommend counseling messages.",
                    "label": 0
                },
                {
                    "sent": "It's really a nasty thing to do.",
                    "label": 0
                },
                {
                    "sent": "But yes, it isn't the standard.",
                    "label": 0
                },
                {
                    "sent": "I've never used it, but it's there, it's there.",
                    "label": 0
                },
                {
                    "sent": "And MPI developers hate it.",
                    "label": 0
                },
                {
                    "sent": "I have not done the four times, just the same.",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 0
                }
            ]
        },
        "clip_99": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "Send and receive can be blocking or non blocking and blocking centerpiece with unblocking received.",
                    "label": 0
                },
                {
                    "sent": "It doesn't really matters once it's sent a message is just to send.",
                    "label": 0
                },
                {
                    "sent": "It's like it's like sending an email.",
                    "label": 0
                },
                {
                    "sent": "If you send an email with a Microsoft client or a.",
                    "label": 0
                },
                {
                    "sent": "Or Thunderbird or the email client, but once it's it said it's just a message, so you can you can you can receive a buffered send with a nonblocking receive or you know that they will all this match.",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 0
                }
            ]
        },
        "clip_100": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So, um.",
                    "label": 0
                },
                {
                    "sent": "Synchronous end is MPI.",
                    "label": 0
                },
                {
                    "sent": "I stands for immediate.",
                    "label": 0
                },
                {
                    "sent": "It's supposed to tell you controllers returned to you immediately.",
                    "label": 0
                },
                {
                    "sent": "That that's what the I stands for, so.",
                    "label": 0
                },
                {
                    "sent": "I haven't talked about all these things.",
                    "label": 0
                },
                {
                    "sent": "I said I'm putting together lectures but but synchronous end if you use MPI S send you worry about deadlock.",
                    "label": 0
                },
                {
                    "sent": "So you often use MPI ISN to break the deadlock if you standard send you have to worry that Standard said might be synchronous so you have to use MPI send to break the deadlock and receive is you often have to use nonblocking receive.",
                    "label": 0
                },
                {
                    "sent": "There's no point using MPI be send 'cause if you use be send you have no problem with with deadlock anyway I be send is it has a technical meaning, but it's it's.",
                    "label": 0
                },
                {
                    "sent": "When I be send returns it can return before the message is being Comcast being copied into the buffer.",
                    "label": 0
                },
                {
                    "sent": "Technically, because in practice it's just ready so they haven't talked about.",
                    "label": 0
                },
                {
                    "sent": "You should never use it, but ready send is like ready send, send a message and if the receive isn't posted the message disappears.",
                    "label": 0
                },
                {
                    "sent": "It's complete madness and nobody ever uses it.",
                    "label": 0
                },
                {
                    "sent": "It's their historical reasons you never ever ever use ready sent.",
                    "label": 0
                },
                {
                    "sent": "'cause it only works if the receivers posted the whole point of MPI.",
                    "label": 0
                },
                {
                    "sent": "The reason that MPI programs work is it doesn't matter if they receive is already posted, 'cause if it is, it'll it'll match.",
                    "label": 0
                },
                {
                    "sent": "If it isn't, then it waits everybody always waits for each other.",
                    "label": 0
                },
                {
                    "sent": "Ready send is actually.",
                    "label": 0
                },
                {
                    "sent": "It's a historical quirk.",
                    "label": 0
                },
                {
                    "sent": "Nobody uses it anymore.",
                    "label": 0
                }
            ]
        },
        "clip_101": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Control.",
                    "label": 0
                },
                {
                    "sent": "Well, what what happens is you know you could do a nonblocking send, then you get back.",
                    "label": 0
                },
                {
                    "sent": "You can carry on doing what you want.",
                    "label": 0
                },
                {
                    "sent": "Some time later you want to check that message is being delivered, then you'd wait on the nonblocking send at that point if you have not arranged for there to be a receive, it will sit forever in the weight, so that's what happens because you have to test because you don't know if you're allowed to be used that data.",
                    "label": 0
                },
                {
                    "sent": "Some point you're going to use that buffer that you know that's that array or whatever, and you need to check that it's been delivered.",
                    "label": 0
                },
                {
                    "sent": "You can test.",
                    "label": 0
                },
                {
                    "sent": "I want you can test.",
                    "label": 0
                },
                {
                    "sent": "You can actually come back and say has a message arrived and you get a yes or no flag.",
                    "label": 0
                },
                {
                    "sent": "So that's when you can do this kind of more sort of interrupt driven.",
                    "label": 0
                },
                {
                    "sent": "It's not really interrupt.",
                    "label": 0
                },
                {
                    "sent": "What you'd like is a system where a message comes in and when it arrives it triggers an action.",
                    "label": 0
                },
                {
                    "sent": "It has some callback function, but that isn't what happens if it MPI.",
                    "label": 0
                },
                {
                    "sent": "You have to manually check you have to say when a message comes in.",
                    "label": 0
                },
                {
                    "sent": "Put it there and you can come back and say has a message arrived with MPI test but that it's not.",
                    "label": 0
                },
                {
                    "sent": "You would like it when it comes into automatically kick off some routine and flag you, but that's not how MPI works.",
                    "label": 0
                },
                {
                    "sent": "MPI doesn't have.",
                    "label": 0
                },
                {
                    "sent": "Interrupts or flagging or anything like that.",
                    "label": 0
                },
                {
                    "sent": "You can test.",
                    "label": 0
                }
            ]
        },
        "clip_102": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "You can test or wait for lots of messages or messages.",
                    "label": 0
                }
            ]
        },
        "clip_103": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "As things like 'cause you could have multiple you could have.",
                    "label": 0
                },
                {
                    "sent": "I could have 100 nonblocking receives outstanding.",
                    "label": 0
                },
                {
                    "sent": "I can have one not blocking receive every one of you guys waiting to send me something and I want to say give tell me which one is received.",
                    "label": 0
                },
                {
                    "sent": "I want to wait for them all to finish.",
                    "label": 0
                },
                {
                    "sent": "Tell me if any of them are finished.",
                    "label": 0
                },
                {
                    "sent": "Tell me which ones the prototypes get rather horrible.",
                    "label": 0
                }
            ]
        },
        "clip_104": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So This is why I mentioned this.",
                    "label": 0
                },
                {
                    "sent": "For very simple cases like this point to point Halo swapping like we have in this traffic model, you can there is a routine called MPI send receive where all it is is the send routine and the receive routine stuck together.",
                    "label": 0
                },
                {
                    "sent": "So send has send buffs 10 count data type.",
                    "label": 0
                },
                {
                    "sent": "Destination tag receive has received, Buff received count, received source tag their oldest stuck together in the same routine on MPI just says.",
                    "label": 0
                },
                {
                    "sent": "This will work.",
                    "label": 0
                },
                {
                    "sent": "Don't Bury up, don't worry about.",
                    "label": 0
                },
                {
                    "sent": "That law the law happen at the same time it will be OK.",
                    "label": 0
                },
                {
                    "sent": "So some people use this a lot and it's a perfectly safe way of program.",
                    "label": 0
                },
                {
                    "sent": "But it doesn't work in the general case.",
                    "label": 0
                },
                {
                    "sent": "It only works for Simple Point to point exchanges in a more general case it doesn't work.",
                    "label": 0
                },
                {
                    "sent": "So and if you look at the source code this is just implemented as a non blocking sender, nonblocking receiving a wait.",
                    "label": 0
                },
                {
                    "sent": "So it's nothing you couldn't do yourself.",
                    "label": 0
                },
                {
                    "sent": "So that so that's really so.",
                    "label": 0
                },
                {
                    "sent": "So the X is a really.",
                    "label": 0
                },
                {
                    "sent": "All I did was give you.",
                    "label": 0
                },
                {
                    "sent": "The traffic model is meant to just be a sort of a code that works, and the idea was you would then have I got the sheet here.",
                    "label": 0
                },
                {
                    "sent": "You would then work with it and just try different things.",
                    "label": 0
                },
                {
                    "sent": "There's a whole bunch of things I really left it quite open.",
                    "label": 0
                },
                {
                    "sent": "As to what you might want to do.",
                    "label": 0
                },
                {
                    "sent": "You know you might want to look at scaling and how it scales with short and long roads.",
                    "label": 0
                },
                {
                    "sent": "I've talked about reductions, I'm not giving you the syntax, but the reduction there you'll see actually that it's it's done too many times.",
                    "label": 0
                },
                {
                    "sent": "This is the first real coding example.",
                    "label": 0
                },
                {
                    "sent": "Replace MPI send receive with several CMP.",
                    "label": 0
                },
                {
                    "sent": "I send them receive.",
                    "label": 0
                },
                {
                    "sent": "OK, so this is technically incorrect, but it'll probably work because there's more messages.",
                    "label": 0
                },
                {
                    "sent": "So that let's just say fix it without even pairs.",
                    "label": 0
                },
                {
                    "sent": "Then I'm saying so using nonblocking operations, you can do it multiple ways.",
                    "label": 0
                },
                {
                    "sent": "You could do a nonblocking send in a blocking receive.",
                    "label": 0
                },
                {
                    "sent": "You could do a non blocking receiver blocking send, so there's there's what you can do here is you could do.",
                    "label": 0
                },
                {
                    "sent": "You could issue a nonblocking send to the right and say right, deliver that to my neighbor.",
                    "label": 0
                },
                {
                    "sent": "Then you could do a blocking received to the left.",
                    "label": 0
                },
                {
                    "sent": "You could wait for that message to come in when it's come in you then go back and check that's being delivered.",
                    "label": 0
                },
                {
                    "sent": "Or you could do the opposite.",
                    "label": 0
                },
                {
                    "sent": "You could issue a nonblocking send to the left.",
                    "label": 0
                },
                {
                    "sent": "Then you issue you're you're blocking sent to the right, which matches.",
                    "label": 0
                },
                {
                    "sent": "He's not.",
                    "label": 0
                },
                {
                    "sent": "Then you check the receive or you can issue them both at once.",
                    "label": 0
                },
                {
                    "sent": "You could say send and receive, wait for them both to finish.",
                    "label": 0
                },
                {
                    "sent": "OK, well done.",
                    "label": 0
                },
                {
                    "sent": "So there's three ways at least three ways of doing it.",
                    "label": 0
                },
                {
                    "sent": "There's some hints there.",
                    "label": 0
                },
                {
                    "sent": "What else have I said?",
                    "label": 0
                },
                {
                    "sent": "Persist that this is the classic thing.",
                    "label": 0
                },
                {
                    "sent": "People you see in MPI programs equivalent in the traffic model is you'll see a comment.",
                    "label": 0
                },
                {
                    "sent": "Don't go on to the next iteration of the traffic model, so everyone is finished, so they'll do a barrier which is, which is a global synchronization.",
                    "label": 0
                },
                {
                    "sent": "OK, you do not need that, so you think about it.",
                    "label": 0
                },
                {
                    "sent": "If somebody races ahead, somebody can be an iteration N plus one with somebody in iteration N. But whenever the important point comes from the communication comes, they'll have to wait and then all they will match up again.",
                    "label": 0
                },
                {
                    "sent": "You almost never need barriers for correctness at MPI codes.",
                    "label": 0
                },
                {
                    "sent": "You can come up with contrived examples where barriers are needed.",
                    "label": 0
                },
                {
                    "sent": "Very contrived, but it's I mean it's not an obvious but.",
                    "label": 0
                },
                {
                    "sent": "99.9% of the time you can take barriers out of MPI cut 'cause they're not needed for correctness.",
                    "label": 0
                },
                {
                    "sent": "People think they are 'cause they don't understand MPI.",
                    "label": 0
                },
                {
                    "sent": "There's a few cases to do with file IO where you might need them.",
                    "label": 0
                },
                {
                    "sent": "But if all your communications between processes happening in MPI, it is almost impossible to come up with an example where MPI barrier realistic example, not one that's completely contrived where MPI barrier is needed for correctness just the way MPI is designed.",
                    "label": 0
                },
                {
                    "sent": "It all just works out.",
                    "label": 0
                },
                {
                    "sent": "Then try to have lots of the communication.",
                    "label": 0
                },
                {
                    "sent": "Could you say?",
                    "label": 0
                },
                {
                    "sent": "Well, actually, while while I'm waiting for these messages to happen, I can update the N -- 2.",
                    "label": 0
                },
                {
                    "sent": "I can update the end minus two internal cells.",
                    "label": 0
                },
                {
                    "sent": "I can actually do that update and then I can wait for the communications to complete and then finish the update for the edge cells.",
                    "label": 0
                },
                {
                    "sent": "Not something you can play around with.",
                    "label": 0
                },
                {
                    "sent": "You can say.",
                    "label": 0
                },
                {
                    "sent": "Well if I swap not just the edge cells but a double buffer, I can then do two iterations before I need to communicate.",
                    "label": 0
                },
                {
                    "sent": "So rather than test sending.",
                    "label": 0
                },
                {
                    "sent": "One small message.",
                    "label": 0
                },
                {
                    "sent": "Every iteration you send a slightly bigger message.",
                    "label": 0
                },
                {
                    "sent": "Every other iteration is probably quicker.",
                    "label": 0
                },
                {
                    "sent": "And then if you really if you.",
                    "label": 0
                },
                {
                    "sent": "If you do this, then you're really this is.",
                    "label": 0
                },
                {
                    "sent": "This is really, really challenging.",
                    "label": 0
                },
                {
                    "sent": "And then I've got some other stuff here to do it, but this was just for fun.",
                    "label": 0
                },
                {
                    "sent": "I think I can't.",
                    "label": 0
                },
                {
                    "sent": "This is all MPI stuff, but it's really just there to sort of, you know.",
                    "label": 0
                },
                {
                    "sent": "You would be surprised how good a model of a real scientific code this this traffic model is so good, although it's almost trivial, the general high level structure of communication phase, calculation phase, global operation is is is is really quite representative of real codes, so that was really the idea was just to play around with that until the end.",
                    "label": 0
                },
                {
                    "sent": "Does anyone have any questions so I didn't.",
                    "label": 0
                },
                {
                    "sent": "I did a bit more lecture than I expected that anyone have any question anything at all?",
                    "label": 0
                },
                {
                    "sent": "Yep.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "Yeah.",
                    "label": 0
                },
                {
                    "sent": "Yes, right, so very good question.",
                    "label": 0
                },
                {
                    "sent": "So if I had if I had 80 exercises too late, I didn't print out the exercise sheets, right?",
                    "label": 0
                },
                {
                    "sent": "Find 80 exercise sheets here if I do it point point, I give one to U-1 to U-1 to U-1, to U-1 to you.",
                    "label": 0
                },
                {
                    "sent": "Once you, what's a better way of doing it?",
                    "label": 0
                },
                {
                    "sent": "Put 10 on each of each row and then tell you to pass it along OK, so that's that's much much quicker because it happens.",
                    "label": 0
                },
                {
                    "sent": "I run up here, then all this happens in parallel.",
                    "label": 0
                },
                {
                    "sent": "So so naive or reduce will be linear in time.",
                    "label": 0
                },
                {
                    "sent": "What was a good or reduce will be log arhythmic 'cause you can come up with tree based methods or hypercube methods.",
                    "label": 0
                },
                {
                    "sent": "So on a million process on 1000 processors log based algorithms 10 times faster than a linear albums two to the 10 is 1000 or but you know you get to.",
                    "label": 0
                },
                {
                    "sent": "You know you should never ever program these things up yourself because they can be so because the the collective operation will be written really well and you can get factors ten 2000 times faster and in fact.",
                    "label": 0
                },
                {
                    "sent": "And all reduce might not even be written in MPI.",
                    "label": 0
                },
                {
                    "sent": "Some networks have hardware functionality to do or to do global sums in hardware you don't have access to that, but they all reduce.",
                    "label": 0
                },
                {
                    "sent": "Will say oh cool special Cray function, double_double_something else goes really fast, so there's two reasons even if it's implemented with point to point, it will be implemented in a good way.",
                    "label": 0
                },
                {
                    "sent": "Typically using some.",
                    "label": 0
                },
                {
                    "sent": "Algorithm scales as log P rather than the naive one which scales is P, and in fact in some cases it may not use MPI at all.",
                    "label": 0
                },
                {
                    "sent": "It may do some very oh an all reduce on on a node or reduced for you shared memory in the MPI library.",
                    "label": 0
                },
                {
                    "sent": "It won't use point to point communication on a node, it will do some clever shared memory stuff, so it won't even be log people be log P over.",
                    "label": 0
                },
                {
                    "sent": "You know log of a smaller value of P so you win everywhere.",
                    "label": 0
                },
                {
                    "sent": "So yes, you must you never if you.",
                    "label": 0
                },
                {
                    "sent": "If there's a collective user.",
                    "label": 0
                },
                {
                    "sent": "Having said that, startup and shutdown broadcast that takes no time, but if it's in your main loop.",
                    "label": 0
                },
                {
                    "sent": "Having said that, if you got a broadcast in your main loop, then yeah.",
                    "label": 0
                },
                {
                    "sent": "You got no chance anyway, but anyway, that's why that's not quite true.",
                    "label": 0
                },
                {
                    "sent": "But you need to be careful, but yes, you should always use them.",
                    "label": 0
                },
                {
                    "sent": "They can be faster for any number of reasons.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "People spend their lives writing optimized collectives.",
                    "label": 0
                },
                {
                    "sent": "Fun thing to do?",
                    "label": 0
                },
                {
                    "sent": "So OK, so that's really gonna be here till you can play around with that.",
                    "label": 0
                },
                {
                    "sent": "If you want more goods, tomorrow is just go on to open MP.",
                    "label": 0
                },
                {
                    "sent": "I'll introduce open MP again.",
                    "label": 0
                },
                {
                    "sent": "I'll just do some.",
                    "label": 0
                },
                {
                    "sent": "I'll go through the pie example, but I'll do it on the board because the proper open MP is the solution is is deceptively simple.",
                    "label": 0
                },
                {
                    "sent": "Well written open MP is.",
                    "label": 0
                },
                {
                    "sent": "Is almost two concise means you, so it's actually good to do it by hands in a stupid way and it shows you what's happening.",
                    "label": 0
                },
                {
                    "sent": "So I'll go through the pie example on the board tomorrow and open MP trying explain what's going on, and then I'll finish up by talking about hybrid MPI Open MP.",
                    "label": 0
                },
                {
                    "sent": "All these will do in the traffic model.",
                    "label": 0
                },
                {
                    "sent": "OK. OK. OK fine so.",
                    "label": 0
                },
                {
                    "sent": "The traffic will should be reproducible, so although it's initialized randomly, I initialize it on one processor and then I scatter it out to make sure that we have the same is very hard to parallelize random number generators and get the same answer when it is possible, but it's more effort than it's worth, so I only time the core loop.",
                    "label": 0
                },
                {
                    "sent": "I only time the update loop.",
                    "label": 0
                },
                {
                    "sent": "I don't time startup and shutdown time.",
                    "label": 0
                },
                {
                    "sent": "I think my timing is round the core, the core update loop and if you see barriers in my code, the barriers are only there for timing.",
                    "label": 0
                },
                {
                    "sent": "Barriers are useful for timing.",
                    "label": 0
                },
                {
                    "sent": "Say look everyone line up on the start line at the same time like go.",
                    "label": 0
                },
                {
                    "sent": "That's useful when your timing code, but it has zero effect on the correctness in almost all cases it will not have an effect on the correctness of your code.",
                    "label": 0
                },
                {
                    "sent": "It's not obvious, but it is a.",
                    "label": 0
                },
                {
                    "sent": "That is true.",
                    "label": 0
                },
                {
                    "sent": "Which isn't true in other programming models and open MP P gas such as UPC query, Fortran barriers are absolutely essential for correctness.",
                    "label": 0
                },
                {
                    "sent": "Actually essential to the whole correctness of the model.",
                    "label": 0
                },
                {
                    "sent": "In MPI there they're not, because receivers synchronous the receiver always has control over what's happening, and that turns out to be the critical.",
                    "label": 0
                },
                {
                    "sent": "My opinion, the critical sort of issue.",
                    "label": 0
                },
                {
                    "sent": "So OK, so you can do what you like.",
                    "label": 0
                },
                {
                    "sent": "So sorry, play around with examples.",
                    "label": 0
                },
                {
                    "sent": "Nice if somebody could run the traffic model on more than one node because.",
                    "label": 0
                },
                {
                    "sent": "I think I think you do minus N bigger than one.",
                    "label": 0
                },
                {
                    "sent": "I would do minus minus tasks per node equals 28.",
                    "label": 0
                },
                {
                    "sent": "That means you'll get if you do minus minus big N = 4 and task per node equals 28.",
                    "label": 0
                },
                {
                    "sent": "You'll get four nodes, so you'll get.",
                    "label": 0
                },
                {
                    "sent": "112 cores doesn't like that, but just check that it works on more than one node.",
                    "label": 0
                },
                {
                    "sent": "I haven't, I think as as as as distributed the batch script only runs on four cores.",
                    "label": 0
                },
                {
                    "sent": "She's only on the signal, so I would try to change play around with them to try and get more than one note just to do something something useful.",
                    "label": 0
                },
                {
                    "sent": "OK.",
                    "label": 0
                }
            ]
        }
    }
}