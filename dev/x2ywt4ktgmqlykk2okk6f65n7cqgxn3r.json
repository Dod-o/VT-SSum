{
    "id": "x2ywt4ktgmqlykk2okk6f65n7cqgxn3r",
    "title": "Linked Data and APIs",
    "info": {
        "author": [
            "Steffen Stadtm\u00fcller, Institute of Applied Informatics and Formal Description Methods (AIFB), Karlsruhe Institute of Technology (KIT)"
        ],
        "published": "Dec. 23, 2011",
        "recorded": "December 2011",
        "category": [
            "Top->Computer Science->Semantic Web"
        ]
    },
    "url": "http://videolectures.net/coinplanetdataschool2011_stadtmueller_data/",
    "segmentation": [
        [
            "So as you might have noticed, the talks from green to me have changed a little bit.",
            "The topic it's called Link data and APIs with node link data and services as in your schedules.",
            "Reason for that is very simple.",
            "We didn't change the schedule, we changed actually the name of the approach.",
            "The reason for this is linked services was a little bit broader term that was associated with a couple of approaches.",
            "They're all related, but Linda API is a little bit more precise of what I'm going to present to you.",
            "So."
        ],
        [
            "Let's start with some attributions.",
            "A couple of slides I'm going to show you have been extracted from a tutorial.",
            "Given that the extended Semantic Web Conference 2011 in Crete and some others are from the IEEE Summer School on Semantic Computing in Berkeley also this year."
        ],
        [
            "Let's see what we're going to do.",
            "First, I'm going to give you a small motivation to show you well what is so important about APIs.",
            "Then we have to go over some preliminaries, especially hypertext transfer protocol and representational state transfer.",
            "Just a couple of slides.",
            "And then we're going to talk about linked API's and what they are.",
            "I'm going to show you design guidelines for linked API's and then we're going to elaborate in detail on this different design guidelines.",
            "Which means we're going to talk about API descriptions, API interaction.",
            "We're going to look at the semantics of linked API's.",
            "How we use them and then I'm going to show you some wrapping techniques and why we need wrapping techniques for linked API's.",
            "And if time permits, I'm going to show you a real world example of an implementation of a linked API.",
            "And I'm trying to reserve at the end a spot for questions, but that doesn't mean that you can ask me questions during the presentation.",
            "So if you don't understand something, some parts are a little bit formal.",
            "Please interrupt me, we can talk about anything."
        ],
        [
            "OK, so why'd we care about APIs?",
            "So what is this about?"
        ],
        [
            "This is the link data cloud Grinter talked about.",
            "It's actually an older version, but you can see is this schematic representation of this huge data set that's already out there on the web.",
            "With Lincoln semantic information.",
            "And it's great.",
            "It's a fancy technology.",
            "It works very well, but it's all static."
        ],
        [
            "Now the web is not only about static data, what we find is that a lot of data actually is created dynamically as a result of calculation carried out over input.",
            "An calculation doesn't necessarily mean mathematical calculations, so think for example of dynamically or constantly changing data.",
            "Data that's dependent on sensor information, weather information or thinking stock quotes you won't find on the web database that holds all the stock quotes for next year.",
            "And if you do give me a call.",
            "Or think about data that is almost infinite in size.",
            "Google Maps doesn't store every shortest route between every two points on this planet.",
            "This cannot work.",
            "So Google has to calculate these shortest routes.",
            "At the moment a user asks for them.",
            "This is a dynamic environment and we can pre materialize it.",
            "Or even if you have a pre materialized data set, you might not be possible.",
            "You might not be able to to publish it completely because you don't want to or you are not even allowed to.",
            "A social network cannot publish all its data openly on the web, so data might be dependent on access rights, user and password information.",
            "Things like that.",
            "This is also input information that has to be processed and this input information influences the output information or the results you get served on the web.",
            "Terms of data.",
            "But it's not."
        ],
        [
            "It's also not only about data, it's also about functionalities.",
            "If you look on the web you find.",
            "I'm incredible amount of service, endpoints, web API's you find.",
            "Web forms, even that the trigger all kinds of functionalities.",
            "In the web itself, and even in the real world.",
            "So for example, you can order a pitzza nowadays on the web this is no problem for you.",
            "This is a complete web based interaction.",
            "You type something on home page and you get information back saying to you your pizza will be delivered to you in 20 minutes and it costs.",
            "I don't know, $10.",
            "And 10 minutes or 20 minutes later some real guy will knock on your door and deliver a pizza to you.",
            "This is a real world side effect and also a dynamic environment because if you do the same process two days later, the same service might say, well, we are close today or your pizza will be delivered in three hours or something like that.",
            "Now if you look at programmableweb.com, that's an aggregator site for Web APIs.",
            "We see there are over 4300 APIs of this kind and other kinds.",
            "I've put some of the logos here.",
            "Some of them are very prominent like Facebook Delicious data Golf is the American government, but there's also a considerable long tail.",
            "So for example, hip digital is, as far as I know, a music library.",
            "Um itsumo W is.",
            "If they serve information about public transportation with buses in a small region in the United Kingdom.",
            "So you see, there's a lot of them out there and they are scoped and small and big in size everything.",
            "But they all have a problem."
        ],
        [
            "They are completely heterogeneous.",
            "Some of them talk Jason, some of them have some arbitrary XML format.",
            "Some of them talk about movies.",
            "The next talks about films and we have no idea if this is the same thing.",
            "And all of this is described on a home page in some text.",
            "This means a developer has actually to read these texts, has to gain a deep understanding of how the API works, how the data looks like to work with it, and this for every API."
        ],
        [
            "And the problem even increases if you try to combine APIs.",
            "If you try to combine functionalities and this is actually what we want to do, because this creates an increased value.",
            "If we can start to take functionality's on the web and just plug them together.",
            "So, for example, imagine you wake up one morning and say today I'm going to write a Facebook application where users can look up the soundtracks of their favorite movies and get additional information about the artists who perform these movies from digital.",
            "If you want to do this, you have to write glue code that puts everything together.",
            "How does this API work?",
            "How does this work?",
            "What data or how does the data look like?",
            "How do I have to transform the data that one API can talk to in the next one, and so on and so forth?",
            "This is an incredible amount of work you have to put in.",
            "And if you decide.",
            "I don't want to use Facebook.",
            "I want to use another social network.",
            "You have to start all over again.",
            "You have to do the complete process again because it's not their API.",
            "Another format, another kind of data.",
            "This is horrible and we don't want it.",
            "So what we actually want structured semantic descriptions of APIs.",
            "This is what linked API's are about.",
            "If we have structured and semantic descriptions.",
            "We could just plug them together, considerably decreasing the effort income in combining the different APIs.",
            "You still have to do some things you still have to write some code that tells everything what's going to happen, but you don't need to look how does everything work.",
            "How do I have transformed data and things like that?",
            "You can even perform some tasks completely automatically like repair or data matching and discovery.",
            "So this is the problem."
        ],
        [
            "Let's see how we can solve it.",
            "First luminaries HTTP and rest.",
            "So going to already talked a little bit about."
        ],
        [
            "HTTP.",
            "I'm just going to go a little bit more into detail on it, so HTTP is a client server protocol according to which all documents on the World Wide Web are served all of them.",
            "It's so every interaction on the web is based on two things and the first is a request.",
            "So request consists out of a method, a Uriah header, and optionally a body.",
            "So there a lot there more.",
            "There are more methods.",
            "I've put just the most important ones here.",
            "There's HTTP get, which is the the one all of you use probably everyday, because it's the one that happens when you type in your eye into your web browser and hit enter.",
            "The intuition because behind HTTP get is retrieve the entity identified by the UI.",
            "And all of you are used to the fact that this entity is a homepage going to show you that this is not necessarily the case.",
            "There's HTTP put which just says please store the entity I deliver in the payload in the body.",
            "Behind the euro.",
            "There is HTTP post which says submit the information in the body as a new sub ordinate of the resource UI.",
            "Sounds strange, right?",
            "But it isn't.",
            "It's actually exactly what Post says.",
            "What you do is you submit the data in your body to the UI and then they get processed.",
            "Whatever that has to happen there happens there.",
            "So for example, you can use HTTP post to post a message in a message board.",
            "Our to submit form data things like that.",
            "Delete that does what it says.",
            "Please delete the entity identified by the UI.",
            "That's that.",
            "So now where some?"
        ],
        [
            "West, there's a response.",
            "So this is what the client does, and if a client performs a request, Sir was going to respond and respond consists out of response code header, and again optionally a body.",
            "So if you do an HTTP get, a server will reply to you and deliver homepage or RDF data set or something else in the body.",
            "Response codes there are many of them, but they all fall into four categories.",
            "Response codes are three digit numbers.",
            "Browsers a couple of years ago even showed them to the users.",
            "They don't do this anymore.",
            "The one starting with the two like 200 say everything is alright.",
            "Your request worked out, the one starting with the three.",
            "Are going to say well I understand your request, but I can serve to you, but I know where I can and it will tell you in the header where you can look up the other information.",
            "The one starting with the four are intuitively mean you made something wrong.",
            "The client made something wrong.",
            "Your request is flawed and the ones starting with the five say.",
            "Well, I made something wrong with server made something wrong.",
            "There's a problem on the server."
        ],
        [
            "So now let's have a closer look at HTTP content negotiation, and together with this the link data your I look up into already explained to you.",
            "So what you can do is you can you can perform an HTTP get on the pedia resource India.",
            "This is an HTTP get method and you can ask in the header for entry format, which is an RDF format.",
            "And the server will reply to you with three or three.",
            "I can't give you.",
            "II is a big country.",
            "A lot of people live there.",
            "Your room isn't big enough.",
            "And it will tell little client.",
            "Maybe you want to look atdp.org/DATA/india Bhutan.",
            "Three so so it will tell the client.",
            "Here's the UI where you can get information that corresponds to the format you actually asked me to give you.",
            "And here's the here's the point where content negotiation sets in.",
            "If the client would."
        ],
        [
            "Ask for HTML.",
            "The web server would have responded differently and points to the webpage's going to show it to you in his example.",
            "So now this is called the negotiation."
        ],
        [
            "But HTTP, which is maintained by the Internet Engineering Task Force, not the W 3C.",
            "It's just one arguably the most important implementation of an architecture style called Rest, Representational State transfer and the rest architecture follows three principles.",
            "The first one saying an application has to be divided into state and functionality, identify resources and these resources have to be uniquely addressable in the web context.",
            "We do this with your eyes.",
            "Every year I identifies a resource and is uniquely addressable or resources share uniform interface consisting of a constraint set of well defined operations.",
            "This constraint set of well defined operations are the methods I've just explained to you.",
            "HTTP get posed, delete and so on.",
            "And the constraints set of content types.",
            "This is what you've seen with congregation's like before that.",
            "So you can ask for N 3 as a content type or HTML as a content type.",
            "Now this is rest and HTTP."
        ],
        [
            "Which would be the point where we go to lettuce linked APIs?",
            "Any questions so far?",
            "Alright."
        ],
        [
            "So Linda APIs aim to promote an efficient style of APIs when efficient means you will see.",
            "By combining restful web architectures, meaning it's resource oriented, we manipulate them with HTTP verbs.",
            "We use content negotiation.",
            "And combining all this with linked data technologies is going to explain them.",
            "So the uniform use of your eyes, the use of RDF, and the use of sparkle.",
            "Linda."
        ],
        [
            "Rice concretely follow a set of design principles and guidelines.",
            "There are four of them describe APIs LD prosumers with input output descriptions as sparkle graph patterns communicate.",
            "RDF by rest for content negotiation.",
            "The output should make explicit relation with the input and then you rap and unlinked API make the lifting public with a sparkle construct query.",
            "Sounds like a lot.",
            "But I'm going to go over these 3 four principles.",
            "And explain them."
        ],
        [
            "So the first one describe API input and output as sparkle graph patterns, so we're going to talk about how to describe an API structured and semantically."
        ],
        [
            "So a link API for us is some kind of web functionality.",
            "Whatever it does, real world side effects, no reward, side effects, whatever, but all of them have one thing in common.",
            "They take RDF as input data in.",
            "Then they perform their functionality, whatever it is according to the input data.",
            "And then they produce RDF as output data, so it's always RDF in RDF out, and RDF is going to explain is a graph model.",
            "Now we want to describe something like that that takes RDF in RDF out.",
            "We want to describe the structure of the RDF.",
            "The API understands.",
            "But we've already seen a formalism to describe the structure, namely the graph patterns of the spot query language.",
            "So what we want to do is to describe the pattern of the models.",
            "The API understands and we do this with sparkle graph patterns."
        ],
        [
            "Let's look at it with an example.",
            "So this is the running example through the whole presentation.",
            "Um?",
            "Imagine a service that delivers you friends of a given person.",
            "A social network could offer such a service, right?",
            "You type in that you type in a person and it replies to you with the friends of this person.",
            "Now this this services API would be identified in our case with the uilabs.org/N/get Friends remember this year I identified the functionality that it identifies the API.",
            "It does not identify a set of data or a homepage, or the social network or something.",
            "It really identifies the functionality.",
            "Now, if you want to describe it, the description."
        ],
        [
            "Might look something like this.",
            "So you can see this is exactly the formalism that's in the where clause of these sparkle queries.",
            "So what we say is, well, this functionality.",
            "This API wants as input.",
            "Well, something an X.",
            "That's a fourth person, which is your eye and this X has to have a social network ID called ID.",
            "So these are variables.",
            "This is.",
            "These are your eyes.",
            "So we described as input.",
            "I want a person and its social network ID.",
            "And as output I will deliver.",
            "X knows some why.",
            "Why is of age, age and you get to pick the picks Y?",
            "Yeah, so we describe here intuitively where you get some somebody that acts knows you get his age and you get a picture of him.",
            "By using a pattern, a graph pattern.",
            "Now, since this is the description of input and output, obviously we want to use this publicly.",
            "So what we?"
        ],
        [
            "You if we embed these graph patterns in an RDF document, don't worry, you don't have to read this RDF documents here.",
            "The important thing is.",
            "What we do is since variables are not in the expressivity of RDF.",
            "What we do is just we encode these very these graph patterns as strings as regular strings and use them in the description.",
            "Just as a string.",
            "And the whole description talks about our get friends service.",
            "So the description as a whole is an RDF document which contains graph patterns describing input and output of the API."
        ],
        [
            "Now obviously we want to make this RDF document publicly available.",
            "So again, there's a UI where you can perform an HTTP get to.",
            "And it's already respond with 200 OK and serve this RDF document.",
            "So this this year I isn't information your identifies a source or a document.",
            "Yeah.",
            "And now everything fits kind of together, because what we can do now if somebody performs an HTTP gets to the UI that identifies the functionality we do.",
            "What we always do with Link data.",
            "We left the server reply, well, three or three.",
            "This is a functionality I can deliver it to you via HTTP get, but you might want to do is you might want to look at this year I.",
            "Which delivers you description of this functionality.",
            "OK, I like questions so far for service descriptions or API descriptions."
        ],
        [
            "Yet, let's see how we interact now with an API."
        ],
        [
            "So we're here again with our friend delivering service.",
            "And as I said.",
            "A linked API.",
            "Takes RDF data as input and RDF data is output.",
            "So what we want to do actually is you want to submit data to the API.",
            "And we've already seen an HP function that exactly fits the bill here.",
            "Name the HTTP post.",
            "So what we do is what we can do is we HTTP post RDF data through the API so we can post data set to it.",
            "For example says which definitely is a person.",
            "And yes, the social network ID ABCD.",
            "And if you post this to the API, it will respond.",
            "For example with well Stefanos Gunter and Gunter is 29 of age, and here's your eye that depicts Gunter.",
            "Also, we have an HTTP post post data as input and the reply of the API will be another RDF data set, and now these datasets exactly match the patterns we have to find this input and output descriptions.",
            "So we set as input.",
            "We want an X that's a fourth person or fourth person and an X, and this X has to have a social network ID.",
            "Here's again a variable Steven social network ID ABCD.",
            "So Steven is bound against X and abcede against ID.",
            "And the same thing happens with the output.",
            "There's definitely schinger X.",
            "Nose awhile and winter is why you see why has to have an age with winter.",
            "Has an age and so forth.",
            "So now also important to know is."
        ],
        [
            "We can submit whole batches of data to this API so we can submit a data set that looks like this and for every hit of this pattern in this data set we perform the functionality.",
            "So if I submit this data set saying definite person definition ID ABCD, and obviously has another ID called 12345.",
            "And Michael Person and my grandson ID XY zed.",
            "The first is the one we've already seen.",
            "This is the hit to description.",
            "These first 2 triples.",
            "But this is also a hit.",
            "Steven Person and Definition ID 12345.",
            "So we performed the functionality for these two triples as well, and the third hit down here for Michael.",
            "As you can see.",
            "A definite person and SN ID XY set is no hit because we've explicitly said one person and one and one social network that it has to be the same thing the X.",
            "And the car."
        ],
        [
            "Only the same thing works for the output, so the output can also have a lot of triple sets matching the description.",
            "So in this case we have more data saying Additionally that Steven is Roland and Myconos Steven for example, I don't know.",
            "Also important.",
            "These"
        ],
        [
            "Graph patterns.",
            "They are constraining but not defining.",
            "So this means if we post like this triple to the API, it won't work because the constraints aren't met.",
            "We said in the input we want to have a person and it's social network ID.",
            "This is just a person, there is no social network ID and it would not answer.",
            "Or even better, it would reply with a 400 because it would say you made something wrong here."
        ],
        [
            "But if you would submit something like this, it would work.",
            "So here we can see definite person and Steven social Network ID is fulfilled as constraints.",
            "So everything works out.",
            "There's another triple, but it doesn't matter.",
            "Because we can find at least one hit from the pattern to the data set.",
            "This is what's meant by constraining but not defining.",
            "But at the same time, it should be as precise as possible.",
            "It doesn't have to be, but it would be."
        ],
        [
            "So for example, if we look at the output, this is what we have already seen as output data matching.",
            "Output the output graph pattern.",
            "But the service could Additionally reply something like this, saying Stefanos Roland, his age.",
            "Here's a picture that depicts him.",
            "And his folks based near Karlsruhe, which means that he lives in culture.",
            "So now this is still a valid description for that, because it's a hit even for that set.",
            "But it's not only 100% precise, So what would better would be something like this.",
            "We could say, well, an optional IDD service will deliver that Y is based near some location.",
            "Just optionally, because it doesn't do it every time and they said it wasn't done every time it wasn't done, but here it was done, so we say, optionally optionally, we can also deliver this.",
            "More precise.",
            "Good.",
            "So a question so far for interaction with linked APIs via HTTP post, Yep.",
            "Yes, sorry.",
            "Just just one question, is this.",
            "This interaction requires the use of post for for accessing the API.",
            "How about get?",
            "Is there any idea of using it?",
            "Because it's a very useful come on the next slide.",
            "OK, very widespread use of.",
            "Yeah, yeah totally, exactly thanks.",
            "She said HTTP get is the more known way of interacting with HTTP, and there's actually another motivation to you."
        ],
        [
            "HTTP get, because what we haven't looked at so far is how do we actually link to the output data?",
            "I showed you how you can link to the functionality.",
            "This has a UI you can you can link to the description and information you are I you can interact with it, but how do you link to the output data?",
            "How can you point to it?",
            "So for example you might want to deal with static data and want to enrich it with dynamic data.",
            "Think of a common thing of data set describing a company and you want to have up-to-date stock information of the company.",
            "In this description, how do you do that?",
            "How do you include dynamic data to static data?",
            "And how do you do it?",
            "Server side and client side so it has to have it has to be possible on the server.",
            "Delivering it to a user, but you but you as user have also have the have to have the possibility to write an application combining static data and dynamic data and linking to each other."
        ],
        [
            "Or a more concrete example.",
            "Think of a customer relations customer relation management software.",
            "Know what you usually should have there.",
            "Is a list of your customers, and obviously I'm one of them.",
            "And this is obviously a fancy application because it's already based on RDF like structured data.",
            "But this is static data.",
            "I mean it changes overtime, but it's still kind of static.",
            "Now you have control over it at least.",
            "But what might be interesting is to show in your customer relationship management software all the person your customers are related to our friends with or at least at least the persons that your customers know.",
            "This might be interesting, So what you could do is you could buy your data from Facebook.",
            "Downside of this, you get a dump of data.",
            "This is up-to-date for maybe a month and then everything has changed and you have to buy a new dump.",
            "Much, much better if you buy a service.",
            "If you buy access to an API for Facebook who deliver you dynamic data.",
            "Every time, constantly.",
            "Whenever you want to see them, you can see them, but how do you connect it?",
            "How do you connect your dynamic data, which is static data?"
        ],
        [
            "So let's see what we can do is what we need to do is to define an HP gettable UI.",
            "And what we do is we have here again the UI identifying our functionality and we extend it with key value pairs to identify an individual service or API call.",
            "And the key value pairs the keys we used to extend it all the keys in the input pattern, so the input pattern had or the variables in the input pattern.",
            "It has two variables X, which was the person and ID which was the social network ID of the person."
        ],
        [
            "And what we do we use these variables as keys behind this UI and as values we use whatever we want to bind against the variables.",
            "So we say here we have this year I will be extended with X is Steven and ideas ABCD.",
            "And now the what the service can do or what the API can do is just automatically take the values and bind them to the according variables.",
            "Or keys respectively."
        ],
        [
            "So.",
            "If if you perform an HTTP get on this year, I what the API does it it's creating its own input data.",
            "And this is the input data we have seen before, so it can use this RDF data as input for itself.",
            "By just performing HTP get over this.",
            "So before I go one step further.",
            "My questions to this, how does this example work for stock quotes?",
            "What if I ask for a stock symbol of X?",
            "How many results will be in the output?",
            "Will I have to define?",
            "A time range or will there be streaming involved?",
            "What is data which incrementally is produced?",
            "It would certainly depend on how your API is defined.",
            "I mean, if your API only gives you the really up-to-date stock information at this point, and the only thing you have to do is I don't know, give some some identifier for the company you want to look up.",
            "For streaming data, things work differently.",
            "This is actually an issue we're looking into right now in research, because this is all based on interactions like request and response.",
            "Always request and response and what we want to do actually is to leave the socket open and get streaming data in that is flowing over the graph patterns, and then we have hits in certain time Windows and reply in according time Windows, but this is actually an issue we look into right now.",
            "OK, thanks other questions."
        ],
        [
            "Good, so another thing.",
            "One observation is that a lot of the data delivering services.",
            "I have one kind of central entity, something input and output is talking about.",
            "So in our case.",
            "Well, the input talks about this guy Steven and it also describes the person that Steven knows.",
            "Yeah, this is obviously the central entity of this service, call here.",
            "So what we can do in this case is we can use this this API call you right, it identifies the API call and build out of it.",
            "Your identifies this central entity."
        ],
        [
            "So what we do is we build a UI that only has a key value pair for ID.",
            "And again, this will be bound against the ID in the input pattern, But what we actually do is.",
            "We use this complete UI to bind X.",
            "Because we say."
        ],
        [
            "If you resolve this year, I.",
            "You get information about this person, so this is likely.",
            "Data works, right?",
            "We have a UI identifier for something and if we resolve it we get information about it.",
            "But we have to keep in mind we can't use this one because this one will deliver information.",
            "This is an information in your eye identifying a source.",
            "So what we do is we extended with the hashtag.",
            "So this year I identifies our person and this year.",
            "I then knows Gunter and Gunter is of age something.",
            "And so on and so on.",
            "So this year I identifies now Steven.",
            "Just identified by this ID ABCD."
        ],
        [
            "Now let's look.",
            "Let's go back to our example.",
            "Having this year I identifying the central entity when done HP get over it, building its own input data and executing the API.",
            "What we can do is we can we can build our static data that looks like this.",
            "So this is our database for a customer relationship management software and it holds obviously information about traffic Miller saying Stephens Person has an ID and he is the same thing.",
            "This UI is the same, identifies the same thing.",
            "As this year I the service your I'll office.org/N/get friends ID ABCD #person.",
            "And then we then we have done it.",
            "Then we have made a link.",
            "We said we have this in our database and this is the same thing as this and we can HTTP get resolve it and the API serves the dynamic data.",
            "This created us the link in our static database to the dynamic database.",
            "Other questions to this?",
            "OK."
        ],
        [
            "So just an additional pointer here.",
            "Going back to the HTTP post method of interacting with an API.",
            "If your API is able to do this to have an HTTP get WI, what you should do is to include it in your output.",
            "So user can see it.",
            "So what you should do is somebody makes an HTTP post to your API like we discussed in the very first slides.",
            "Well, you should include is a triple stating well and definitely same as this year I.",
            "This is no problem in terms of our description, because as I said this is just constraining of defining, so this triple is not really hindering our description.",
            "But you provide the user with the information OK and there is this.",
            "Your eye, which is the same thing as this.",
            "And if you resolve it you would get actually the same data set back."
        ],
        [
            "Alright.",
            "Now, if there are no questions, we would move on and look a little bit into semantics.",
            "So some."
        ],
        [
            "Dicks um, other approaches to semantic web services, especially the early ones, have focused on class based annotations of web web service descriptions.",
            "This is very related to what I've shown to you, but it has some problems.",
            "So what was done in terms of web services was we had this structural descriptions of web services describing a web service in very broad terms, saying things like, well, a web service takes as input a string, and this output.",
            "It provides a string and integer.",
            "This is completely structural.",
            "There was no semantics behind it obviously, and 1st approaches tried to, well to model an ontology saying things like where they are.",
            "Persons, persons have names and ages, persons.",
            "No other persons, things like that and what was done then was this descriptions were mapped to the ontology.",
            "Which would enable some kind of understanding so we could understand what OK as input there's a string in the string is a name, and we knew a name is something that's related to a person and it will output also a name and an integer.",
            "This integer is an aging, and age is also related to a person, so we could understand things like this.",
            "But this is a problem but really didn't understand what does the service do now.",
            "How does how is this related with that?",
            "What name do I get back?",
            "Do I get the same name back?",
            "Is it the name of my brother, my friend?",
            "What's the age I get back?",
            "Is it the age of the person with this name or is it the age of this person?",
            "So we didn't capture the semantics of the dynamic of the service of how input is related with output."
        ],
        [
            "So now we have to to look at questions to see what we want to achieve actually.",
            "So we want to explain the semantics of the calculation that's carried out over the input, right?",
            "We want to see how does the input influence the data functionality.",
            "With that information, is the input going to be enriched and how is this information related to the input?",
            "Like I never get friends example.",
            "Yeah, we enrich information about a person with information about him about his friends.",
            "Or what is the functionality that is triggered by the API and how is this functionality influenced by the input?",
            "How does the stock information influenced by my input?",
            "So my input could say I want the stock information from 3 days ago or the up-to-date information.",
            "What kind of influence does this have?",
            "Or looking at our example here.",
            "Here it's quite clear right over first thing there's a distinction between safe and unsafe variables.",
            "It's actually quite easy.",
            "The safe variables are the variables in the output.",
            "It also appear in the input.",
            "Like decks and the unsafe variables are the variables that don't appear in the input whi age pic.",
            "So this is important because these unsafe variables that are not in the input they are actually bound by the service functionality.",
            "They they basically describe what the service does and the other the safe variables.",
            "They built the bridge to the input, they explain how it is related to the input, so we can."
        ],
        [
            "Perfectly understand just from these two patterns that the API will provide agent picture of someone.",
            "X knows because we say X as described in the input.",
            "And X knows Y, which is someone eggs knows.",
            "And an agent picture."
        ],
        [
            "It would look like this if you would turn winx around.",
            "It would be clear the API would provide agent picture of someone who knows X.",
            "It's the other way around.",
            "Because we switched."
        ],
        [
            "If it would look like this and we had the X here and it would say the API will provide agent picture of X. Asian picture of X.",
            "And someone he knows.",
            "Yeah, because we can't understand the relation between input and output.",
            "We also understand the dynamics of the service of the API.",
            "What does it really do?"
        ],
        [
            "Also.",
            "Um, this graph patterns.",
            "They're not RDF embedded in RDF, but they are not.",
            "But they use your eyes as you have seen.",
            "And so therefore they should not be seen isolated.",
            "We can, we can use the graph patterns and the rise in the graph patterns to gain a better understanding of what the API actually does.",
            "So look at this example.",
            "Consider you have an API that's described instead as output.",
            "You get, well, some X has a movie actor Y.",
            "So intuitively, X might be a movie, but we don't know this.",
            "So X has a movie actor Y and then you have another API saying well as input.",
            "I want the Cuban that's a fourth person.",
            "At first glance, these patterns have don't have anything in common, right?",
            "We wouldn't know how to combine them, but.",
            "This is a UI we can resolve it.",
            "We can do an HTTP get over it to the link data cloud.",
            "And what we will get back is schema information.",
            "Schema information about this movie ontology, obviously, and what we will get back is, among other things, a triple stating.",
            "Well, actor has a range person which intuitively is to say everything that comes behind actor will be a fourth person and if you combine this with that and our engineers can do this very easily then what we understand is well.",
            "If X is movie actor Y, then Y has to be a fourth person and then we can combine these two things because we know whatever is bound against Y can be used to be bound against Q&Q will be a fourth person.",
            "Yeah, so we can.",
            "You can use the link data cloud.",
            "To understand what the API is and gain additional information by just leveraging what's already out there.",
            "And it's a lot.",
            "Are there questions to this?",
            "Yes, how about that for the actor is an animal?",
            "I. Yeah no, yeah I see.",
            "What is the actors animals?",
            "Well then that would be there alright?",
            "I mean if the active would be that involve the actor could be an animal then somebody screwed here up because this information in the link data Cloud specifically stated that why has to be a person.",
            "So if you if there is some, you're identifying an animal an it's it gets delivered by this then there is an error in there.",
            "But then we can detect this error because we might be able to.",
            "The animal will have a UI as well, right?",
            "Then we resolve this and find out that it might not be a person.",
            "And then we see well, but we said it's going to be one.",
            "This is an error we can detect these things with the tools going to describe, but this would be an error.",
            "Is it possible to use output from APIA directly in Apib?",
            "Not with HTTP get.",
            "R. It would be possible, yeah, so not not directly, obviously, but if you get an output that is bound by this so he would be a euro and he would be another UI.",
            "And you would include this triple here and we send these two triples to this API.",
            "It would understand it here because the semantics of this RDS range would be resolved by sparkle engines actually.",
            "So.",
            "Yep.",
            "What if the the binding options are not unique?",
            "What if X&Y are for persons?",
            "Um?",
            "Well, it depends, so if.",
            "X could be a fourth person and now it depends if we resolve movie actor and we get only this triple back then we only know that Y is a person.",
            "Then it wouldn't work.",
            "But assuming we if we know that as if it is the IT is a fact that X would be a fourth person, then it's most likely that the schema information will hold another triple saying movie actor RDF's domain 4th person which has the intuition that everything that is in subject position.",
            "So in the first position in this triple.",
            "Has also to be a fourth person and then X would be bound against Q as well.",
            "But we would have.",
            "We would have to get this information that the first thing is also a focus.",
            "Assuming we have this information, assuming we have that, then it would work just the same way.",
            "OK, so."
        ],
        [
            "Moving on.",
            "Wrapping techniques WHI do we need wrapping techniques?",
            "So make lifting and mapping open with spiky construct queries.",
            "This requires us firstly understand with lifting in.",
            "Mapping is supposed to mean."
        ],
        [
            "Um?",
            "Well, first of all, I've shown to you in the motivation that we have a lot of API's on the web already and it's not really implausible that we give all of them up just because this is a cool technology.",
            "So Furthermore, linked APIs are the adoption of linked APIs, is based on a certain network effect.",
            "The more linked APIs are out there, the more value I can gain from also using linked APIs, because I can connect my stuff to the stuff of other people.",
            "So we have to find out how we can use these API's that are already out there in this linked API context.",
            "Also, if you want to, even if you work with linked APIs, you might want to include in our compositions, legacy APIs, other APIs.",
            "And if we do this well, we are against it.",
            "In the situation that we have to write blue code.",
            "But we can do it intelligently.",
            "We can do it in a way that we have to do it.",
            "Once we write glue code in terms of we wrap the old API.",
            "Use it with our linked APIs and then if you want to use it again with completely different linked APIs, we don't have to write blue code anymore because we already wrapped it.",
            "And even need more if the API we are wrapping is free is freely available.",
            "So if there are no licenses in place or something like that, we can even publish our wrapping for other people to you."
        ],
        [
            "So Linda APIs specifically addressed this problem, so we always have to look of how this works, how we create an environment that looks like this.",
            "Where we can use in linked API UI as described with HTTP get and HTTP post.",
            "And then the function actually comes from somewhere else is performed from from another API from the old API.",
            "But this will be included in the linked API again, and RDF is returned."
        ],
        [
            "So.",
            "Once again, linked APIs can wrap existing web API's.",
            "And therefore they act, they act as some kind of semantic intermediary.",
            "So the first thing we have to do?",
            "We want to have a link API in the end so it has to understand RDF.",
            "RDF will be submitted against this linked API and from this input RDF.",
            "We have to construct the data necessary to invoke and use the legacy API.",
            "The other API, the old API.",
            "And this process is referred to as lowering because what we do is we take semantic information, RDF information.",
            "And transform them, we deconstruct them to some non semantic information to use the older API.",
            "And we do this with Spike and select queries.",
            "So what we leverage here is that.",
            "APIs on the web.",
            "There are some somehow structured they don't follow a global scheme, but they are always somehow structured and we can.",
            "We can put effort into understanding this at least once.",
            "So for example a rest service.",
            "Call might be invoked by something like this, so we have this fixed endpoint saying literacy.org/API.",
            "Get friends.",
            "It always looks like this and then it returns to you information about friends.",
            "For a person that's identified with.",
            "The place where it lives, called slower and some identifier ABCD.",
            "Now you see this is you have to get this somehow.",
            "You have to read the homepage of this API to understand how this thing really works.",
            "It's completely skewed.",
            "But it will be the same thing for all calls here.",
            "So if you exchange the identifier, you get information about another person.",
            "Or if you exchange to.",
            "This thing here that identifies with a person lives.",
            "You get other information back so you can understand this.",
            "So what we need to do is we need to get the place where a person lives and it's social network identifier."
        ],
        [
            "So we could construct our linked API looking like this.",
            "So we understand input information.",
            "For example, Steven is a person is definitely has a social network ID.",
            "And he's based in your Castle, so we understand this.",
            "The pattern would look accordingly for the description.",
            "And now what we want to do is we want to extract Abcede and Carl school.",
            "So you write a Sparky select query.",
            "We say select me location and user where someone is is as in network ID user and this someone is based near location.",
            "So if we execute this select query over this data set, we exactly extract Carl Schueler and ABCD.",
            "This is one hit in here.",
            "And now everything we have to do is this fixed API.",
            "We have seen this this fixed first part of the Legacy API and combine it with these two strings and where we come out is exactly here.",
            "As we have constructed from RDF data from semantic data, valid API call.",
            "Legacy API call.",
            "Of course, we had to put effort in it.",
            "We had to understand it, but it has to be done once and this select query is fixed.",
            "So whatever we send in here.",
            "It will always deliver us these parts of the UI we have to construct to call the Legacy API.",
            "So this is the first part."
        ],
        [
            "The lowering part.",
            "Now we have to build some kind of response.",
            "Now here we can.",
            "We can focus or we can leverage the fact that web API's also deliver structured information.",
            "Usually.",
            "In this structured information, alot of APIs nowadays are based on Jason or some XML format.",
            "So it could look like this.",
            "So this is Jason.",
            "If you've never seen it and this is XML and you see it's what's encoded here is that the response has a person and the person and a person's first name grinter last name last week, age 29 lives cars who.",
            "Now the problem with this is these are just strings for us for a machine, it's just a string we as humans we can read it.",
            "We can somehow make sense of it.",
            "Machine can't, at least not by design.",
            "We have to put effort in this.",
            "And it works the same for the XML structure here.",
            "But what this is both of them them are their trees.",
            "So if you look at this this, this whole thing is the root node.",
            "Then we have two child nodes, two persons and all of them have.",
            "For leaves a first name edge to go into a last name Edulastic H Edge to the leave."
        ],
        [
            "Nine and so on.",
            "So it looks like this.",
            "So there's a root node.",
            "We have two persons going to it's a tree.",
            "But a tree is also a graph.",
            "The special kind of breath, but it's a graph at least.",
            "So what we can do in a first step?"
        ],
        [
            "Is we just transform the serialization we go from Jason or XML to RDF.",
            "By saying OK, this is a tree.",
            "It says there's root.",
            "The route is connected by a person to another node.",
            "This node is connected via first name to go into this node is connected by a last name to logic.",
            "So we just serialize this tree.",
            "And we do it for both persons.",
            "There are two things we have to notice here.",
            "This has completely no semantic, it just it looks like RDF.",
            "It is RDF, but it's just the syntax.",
            "There is no semantics behind it.",
            "What we have done is the edges use some dummy namespace so they are your eyes but they they are most likely not even reasonable.",
            "It just is something we use.",
            "And the objects everything that we found in the values of J of the Jason code.",
            "So go into a lot like 29 and so on.",
            "They're all literals, they're all strings.",
            "This is just.",
            "We transform it just syntactically.",
            "No semantics behind it.",
            "But then what we can do since this is."
        ],
        [
            "RDF again.",
            "We can transform this generically created tree representation in RDF.",
            "Too real semantic data which is format to something with the real meaning with real your eyes that have meaning and this process then is referred to as lifting.",
            "Because what we do is we take the uncemented data that we extracted from our legacy API and we bring them up onto a semantic level.",
            "So we do the lifting.",
            "And what we do here, because we already achieved to have RDF data.",
            "Let me use a construct, query a spot here, construct query to transform this generic created RDF data into real data.",
            "And also we have to think to remember that what we have to do is to make implicit knowledge explicit, which means what we want to do is we want to establish the link between input and output.",
            "So the first thing we do for this generically created RDF, we add the input RDF.",
            "That was submitted to the API in the first place."
        ],
        [
            "So it looked like now it looks like this.",
            "This is the generically created RDF up here the two persons representing a tree and then we add these triples which were the original input.",
            "And then we have a construct query.",
            "And this construct query just move this thing into something real, it just transforms it into what we want to have that X knows Q.",
            "Where X is both person access NID.",
            "So these two things match the input.",
            "So this is the way how we extract the X.",
            "Then we bind it up here and say X both nose Q info for nose is a real UI with meaning and now we have to find something for Q. I.",
            "This is done down here, so I get into that in a second, but this Q has to have a family name FN which is found in the tree and we just mimic the tree structure here with the pattern.",
            "So you don't have to understand it completely.",
            "You have to look into into constructor is very much true.",
            "To get this completely I guess.",
            "But what you have to understand is we use this construct query and again this construct query is static.",
            "Because what we do is we transform the tree that was delivered in Jason to generic RDF.",
            "So what will happen is for every legacy API call we will get something that looks like this and the only thing that will change the objects here.",
            "And that's why this works all the time.",
            "The where clause will match this tree representation all the time, and the input information are.",
            "Defined in the 1st place anyway, so this construct query works.",
            "Works for All Legacy API calls."
        ],
        [
            "So what happens?",
            "I address this other thing as I said, the objects are just strings.",
            "So going to 29 cars so and so on there just strings, but we might want to construct actually your eyes.",
            "But Luckily Sparkle, the newest version of Sparkle 1.1 delivers US functionality is to do so, which is exactly this part.",
            "So how do we construct this Q, which is supposed to be a you Ryan bowstring?",
            "So it looks like this.",
            "And it's not that difficult actually.",
            "So you see, there's three functions.",
            "This this one gets executed first.",
            "It's a concatenation function saying concatenate this string, it's just a string because it has this quote here.",
            "Example of\\ people hashtag and concatenate it with.",
            "This is a variable which we can find in the work laws and if the concert.",
            "Gets executed over our input data it will be bound with Poland and Kendra as strings.",
            "So we concatenate this string with Roland and get that.",
            "And then the next function is your eye, which makes this string to your eyes function, implicitly saying to the Sparkle engine.",
            "Well, this is a string, please interpreted as your eye, and then we have this and the last thing is now please bind this year I took you and queues up here.",
            "So we can also structurally construct your eyes in this process even though we don't get them from Jason."
        ],
        [
            "Alright, and so the result of all this.",
            "Looks like this.",
            "And that's it.",
            "That's semantic.",
            "RDF data constructed out of a Jason API and the only thing we had to do was transformed the syntax and write a query and this query stays the same for all the time.",
            "So we have written clue code.",
            "Once and we can use it for all combinations we want to do in the future because we have done."
        ],
        [
            "It.",
            "Then but since.",
            "This select query and this construct query inherently represents some kind of knowledge because the select query and the construct query which perform lowering and lifting.",
            "They kind of represent the intuition we put into this legacy API, so we looked into it as humans try to understand what it does and then we use this construct queries to deconstruct RDF onto non semantic level and reconstruct non semantic data in the lifting process to real RDF data.",
            "There is knowledge in these two queries so we should publish them.",
            "So again, we have this API.",
            "Or this legacy web service, which performs some function we were interested in, and we constructed a linked API around it and this link.",
            "The API had this lowering and lifting process, which allows us now to post RDF or to HTTP get method is also possible to the linked API.",
            "The data gets lowered, the web service gets executed, function is performed.",
            "Then there is some data Jason XML.",
            "Whatever brought back.",
            "We lift this and construct RDF data as output.",
            "So since this is a valid linked API, we have, so again here is the intuition behind the lowering of lifting.",
            "So the lowering basically answers the questions.",
            "What is the semantic bands the para meters we have to use to call the Legacy API?",
            "Because the electric says I want to have this and this in my RDF graph.",
            "And this represents the input data for the legacy API, so we have to understand it.",
            "And the same thing for the lifting."
        ],
        [
            "To construct.",
            "So now since it is a valid linked API, we also have.",
            "RDF document describing this linked API.",
            "And here again, you can find graph patterns describing the input and graph patterns describing the output.",
            "So now what we do is we simply add two triples to the subscription.",
            "Saying OK and now our linked API get friends service has the lowering schema mapping.",
            "It's called Softail lowering schema mapping.",
            "It's just because this is a you write that already holds this semantics intuition.",
            "And we provided you Ryan behind this year.",
            "I we can find the queries and the same thing for the lifting schema mapping.",
            "So our get friends linked API has a lifting schema mapping and you can say identified with this UI and if we resign."
        ],
        [
            "All of them.",
            "My HP gets we should get these queries to look them up.",
            "To show them to other people.",
            "This allows other people to see.",
            "OK, How did we interpret the original the Legacy API?",
            "And also has another advantage because you have to do this in a certain way.",
            "As you can see here, you publish them on your server, most likely in a file called Something point Sparkle.",
            "And if you program like this you have your sparkle query, the select query and the construct query in separate files.",
            "And you can you can you can implement your link API in that way and this has one significant advantage if your legacy API is changing.",
            "If Facebook once again changes everything or early Twitter API changes everything, the only thing you have to change our your queries.",
            "Because they won't get away from their structured approach to to output data, so they will continue to publish data in Jason format.",
            "Just the formula itself will change, they will.",
            "They will rearrange things, maybe, and then you just have to rearrange your queries and you can even do this during runtime so you don't have to go offline with something you just have to write 2 new queries and replace those and then your wrapping is still valid.",
            "And this is very neat way to Rep services because you again completely decrease the effort.",
            "You have to put into this thing.",
            "Just have to understand what it does and write queries for it.",
            "So, um.",
            "Are there questions for this wrapping techniques?",
            "Are there cases where this transformation does not work for results, or basically other APIs that return results which you can't just transform to generic RDF?",
            "And then puts Parker queries on it.",
            "I mean obviously the whole thing is based on the assumption that the output is somehow structured and I can understand the structure.",
            "So for example, the IMDb API, as far as I know, they deliver really plain text.",
            "What do I do with plain text?",
            "I can't transform this generically, therefore I can't try to construct query to lift it.",
            "This is bad.",
            "Also I showed you the example for Jason.",
            "There things are very easy.",
            "XML is kind of a problem because XML has attributes and things like that it works somehow as long as it's structured it works for eczema usually.",
            "It works.",
            "Also very interesting is the area of when we try to wrap functionality's that are really just served by our web form.",
            "So if you want to lift HTML pages.",
            "The HTML actually should be valid XML.",
            "It should be X HTML, but this is on the web, usually not the case.",
            "And at the point where things are unstructured where they make errors in their web pages and I get problems doing the generic transformation.",
            "Into RDF serialization.",
            "So these are really problems, yeah?",
            "But again, for this HTML part, even if they make errors in their HTML, then you can, as a human look onto these errors and they won't.",
            "They won't change.",
            "You have this error in every API.",
            "You have to write code.",
            "Now you have to write the code and and deal with these errors and if they fix them then you have to rewrite the code.",
            "So there is a problem.",
            "More questions."
        ],
        [
            "OK, so.",
            "Let's look at a real world example.",
            "Um or a couple of them."
        ],
        [
            "So they're all online, so if you are online, you can actually check them out.",
            "There's linked open movies, perhaps postpone com, which is a search API.",
            "It reps functionality from themoviedb.org.",
            "You can use a keyword based querying of movies and then you get RDF data with very rich information about this movies.",
            "And they said it's wrapping service.",
            "There is vocab dot CC vocab dot to see is an RDF vocabulary surge, So what you can do there is you can type in keywords and it replies to you with ontologies on the link data cloud.",
            "This big thing and gives you usage information about classes and properties.",
            "So if you want to know what's the most used property in the link data cloud, you can go to work up CC it's RDF type, obviously.",
            "This one is not a wrapping service, it's made from scratch.",
            "And there is Bing to RDF.",
            "Which is basically a wrapper around the Bing picture search.",
            "So it exactly mimics the functionality of Bing Pictures, so you can just type in a query and you get pictures, but also meta information about these pictures, all in RDF.",
            "Let's look a little bit closer onto this being true RDF."
        ],
        [
            "Thing.",
            "So it looks like this if you go to Bing to RDF punk appspot com com.",
            "This web form, the actual UI that identifies the functionality behind it, is been to RDF, from Keppra com slash billing slash.",
            "Get pictures.",
            "So this is just the homepage and there's a UI that identifies the functionality.",
            "And this form allows you to HTTP post RDF data to this API.",
            "So in this case.",
            "I hope you can see it.",
            "You formalize query that holds a querystring Bunny and another query that holds a querystring dog.",
            "And then you can.",
            "You can hit the commit button and you perform actually in HTTP posts onto this service resource.",
            "But if."
        ],
        [
            "Do this in your browser.",
            "You might be disappointed because it looks like this.",
            "I mean they're cute somehow, but this is not different from what Bing does, right?",
            "I mean, you just get pictures.",
            "Well, the reason for this is simple content negotiation.",
            "Your browser always asks for HTML and this this API can reply to you with HTML and you get in a structured HTML page back with all these neat little pictures, but that's boring.",
            "So what we what we used or what we have to do to see the interesting part is we have to use something that doesn't ask for HTML.",
            "So we could write a complete application that consumes the API.",
            "It would be one way."
        ],
        [
            "Or we use curl.",
            "Gunther had curl as and as a tool on his slides.",
            "Curl is a web browser.",
            "But it's commandline based.",
            "So if you are on Linux or a Mac, you have it automatically.",
            "You can also download it for Windows, it's completely command line based.",
            "In there we can we can specify our header.",
            "We can specify what we actually ask for, so we don't have to build a complete application.",
            "And it works like this.",
            "We say we use curl and we say OK, I want to perform a post to this Uribe into rdfx.com/billing slash get pictures.",
            "I want to post the data in this file data from the RDF for example.",
            "And with the H flag you can set your header and we really say and we want to accept text and three your browser.",
            "At this point your browser says accept text HTML.",
            "You just don't see it.",
            "You browser hisis from you and here you can just set it.",
            "It also would be possible for application XML RDF.",
            "Or you could also ask for HTML here, but then you get the HTML printed in your command."
        ],
        [
            "Fine, so it looks like this.",
            "I don't know if you can see it behind there, but this is exactly the same thing I've just shown to you and you get really a response that is structured RDF data holding various information about the pictures like the URL where it lies, its size, where you can find a thumbnail for it.",
            "What media type it is?",
            "If it is a JPEG or VP, BMP picture or whatever, so you can really RDF data back if you ask for RDF data and this is what we wanted to achieve.",
            "So we have an API and it worked like Link data."
        ],
        [
            "Also the description so you can again go to bin to RDF from Jasper com slash billing slash find pictures you automatically get redirected to slash description.",
            "And again, you've seen HTML representation of this whole thing, so we just get the namespace.",
            "The API operates under and you get the two graph patterns.",
            "In HTML, in an HTML page embedded and you can see this output pattern looks a little bit more complicated than the ones I've shown to you, but that's the way it works.",
            "But you can also go to this to to be into RDF from F open com slash billing slash, get pictures with curl asking for three and it will reply to your name.",
            "Does not work three or three.",
            "This is a functionality.",
            "So what you have to do and it also provides you.",
            "You can see this here.",
            "See other locations into RDF slash description.",
            "And if you resolve this, you are I asking for three, you really get you really get RDF data as the description of this API.",
            "So.",
            "You can try this out.",
            "I don't know if you have questions to this right now or.",
            "OK."
        ],
        [
            "Let's finally have a look at the related work of this area.",
            "As I already mentioned, web services, especially semantic web services.",
            "They are around for quite a while now.",
            "There are several different approaches out there.",
            "This is not a complete list here.",
            "I just want to mention there is all S for example, which is an ontology to describe web services.",
            "It works similar to the way I've shown to you, so you can map message parts of web services to ontologies.",
            "And it also provides a mechanism to model processes and constraints on processes by using rule languages.",
            "There's the also question is web service modeling ontology wizmo?",
            "Which is very similar to all as, but a little bit broader scope.",
            "But it's also ontology based and rule based model process.",
            "There is the minimal service model which is actually one of these approaches that's also associated with linked services.",
            "The original type of presentation.",
            "MSM is a lightweight description that tries to have an homogeneous view over whistle, which is the web service description language.",
            "And web API's.",
            "Um, actually linked APIs use the vocabulary provided by minimal by the minimal service model, but just the vocabulary and.",
            "It's also a need model.",
            "It uses I serve as a centralized service repository.",
            "So if you're familiar with service technologies I service could be compared to UDDI as an approach.",
            "Then there is rest desk.",
            "Rest actually also fall under the category linked API becausw rest desks.",
            "Functional description of rest API's.",
            "What I've shown to you, the only there also graph pattern based the description is the whole description.",
            "Here is in notation three, so the whole service description isn't graph pattern format.",
            "So entry is a super set of RDF.",
            "It also holds some kind of rule semantics.",
            "But apart from that, the approach is very similar.",
            "Then there is a treson essay rest.",
            "So in a nutshell, these are supposed to be class based annotations in HTML pages itself.",
            "So the idea here is to annotate HTML pages and the texts that describe the APIs with structured information in the HTML itself to allow machines to understand these texts better.",
            "And they also provide of course.",
            "The semantics validations.",
            "So."
        ],
        [
            "Let's sum this up again.",
            "Um?",
            "I hope I've shown to you.",
            "The web is not only about static data that he did are important, but it's not everything.",
            "Data is created dynamically in various environments for several reasons.",
            "Functionality's are offered on the web.",
            "You have to describe this functionalities as well.",
            "And there are also dynamic.",
            "And we run into problems if we deal with heterogeneous formats just as we do with heterogeneous formats.",
            "I used for static data.",
            "We have the same problems if he used him for dynamics.",
            "And to overcome this problem is a combination of linked data technologies, RDF and Sparkle and lightweight Restful architecture technologies seem very promising and concretely, the four principles I've gone through three through this presentation.",
            "Provide you with a very lightweight approach to deal with these things.",
            "So describe APIs Elodie prosumers as link data.",
            "Prosumers consumer and producer.",
            "Describe them with graph patterns.",
            "Communicate your RDF with restful content negotiation.",
            "Make explicit the relation between inputs, outputs to really render the semantics of the calculations you do over the input to really render the calculations of the dynamics.",
            "And when you rap and unlinked API, do this with link data technologies like Sparkle queries and public and publish this sparkle queries this construct and lifting queries to make implicit explicit knowledge, which is exactly this relation between input and output.",
            "So in a nutshell that's linked AP."
        ],
        [
            "Ice.",
            "Thank you so far and now we have time for questions."
        ],
        [
            "So let's just go over it quickly.",
            "I mean, 15 minutes are usually not enough to for this whole time."
        ],
        [
            "Um?",
            "OK.",
            "So link APIs I've shown this to you that described with this graph.",
            "Patterns, input and output descriptions and so forth, But the question is now, how can we find linked APIs?",
            "How we can we actually leverage these descriptions we put out on the web?",
            "So the idea is that these descriptions are in the link data cloud.",
            "Because their RDF and they are publishing link data cloud right.",
            "And these descriptions contain these graph patterns.",
            "As literals in the RDF."
        ],
        [
            "So what we can do is we can allow users or agents which can be machines and humans like.",
            "Add to formalize their requirements, so we have to allow agents to somehow write up what they actually want.",
            "What they kept on, what they can do.",
            "So what we do for this, we allow them to formalize API templates.",
            "And these API templates they are.",
            "They are syntactically exactly the same thing as the input and output descriptions of the API, so they are spark graph patterns.",
            "Just the semantics is a little bit different, so it's two sparkle graph patterns.",
            "One describing what input can an agent provide?",
            "For the invocation of a linked API.",
            "So we describe a pattern that basically says I'm an agent and I have this data that I can use.",
            "To interact with an API that looks like this that follows this pattern.",
            "And another pattern that describes and I want to find data.",
            "I want to get data back from the API that follows this other pattern.",
            "So we have an input and output pattern in templates."
        ],
        [
            "And now what we do for discovery is basically a question of graph pattern containment.",
            "So we want to ask.",
            "And we define traditionally a couple of metrics to really make a really fine grained discovery, so we own.",
            "We not only want to find APIs that precisely are what we're looking for, but we also want to be possible to say, well there is an API.",
            "It's not precisely what you are looking for, but it's it's similar to it.",
            "And to do this we define ratios called predicate substrate ratio, which intuitively just means to what degree are the use predicates in one.",
            "Pattern part of the other.",
            "So the question is, to what degree are the patterns?",
            "The predicates in the output pattern of an API part of the template patterns.",
            "And the same thing for the input.",
            "And we do the same thing as resource subset ratio for the eurizon subject and object position.",
            "I will make an example which makes it a little bit clearer.",
            "So these ratios look like this."
        ],
        [
            "I don't go into detail in depth.",
            "So here's an example.",
            "So let's say we have an API description similar to what we have seen so far that says this input.",
            "I want something that's a person and the social network idea of it.",
            "And as output, this API delivers information that this me know something else which is also a person, its name, its age and then open ID.",
            "Now, an agent that wants to look up services might formalize something like this.",
            "An agent might say my have data that describes something that's a person.",
            "And what I'm looking for actually what I want to have is data that describes well that this person knows some other person, and I want the name of the age of this other person.",
            "So again, this is patterns following the same, the same idea.",
            "We use patterns to describe the structure of the things we have and we want.",
            "And what we do is we compare those.",
            "We compare the template input with the description input and the description output with the template output.",
            "And this Canada scenario.",
            "And we calculate these these these metrics for input and output respectively.",
            "So for the input we find out that the predicate subject ratio is only 0.5.",
            "The reason for this is the template actually has only one one predicate in the A.",
            "The description had two A&SNID&SN.",
            "ID wasn't in the template.",
            "So the intuition here is the agent said I have triples looking like this.",
            "Me a fourth person and the API once triples.",
            "That's a mere 4th person and an SN ID, but the SN ID is missing, so this is the reason why it's only 0.5 for the resource subset.",
            "It works out because template only has one resource really used in the object position called 4th person, and this is also used in the template.",
            "And we do the same thing for the output descriptions.",
            "And here we have 0.1 and 0.1 relations, so we actually are here in situation.",
            "We really can say, well, this API is not perfect for what the agent described, because the agent can't invoke.",
            "It's completely.",
            "He's missing one triple, but it provides perfectly what he's looking for.",
            "And even in the input is to 50% already a match, and this is valuable information for us, because we can.",
            "We can say, alright, this API that's described here.",
            "It is what you're looking for, but you're missing something you can.",
            "You're missing the social network ID, and you can write applications that basically returned to the agent and say, could you provide this to me?",
            "Could you look for something else?",
            "Or you could go even one step further and formalizing new template where you say to invoke this I need a social social network ID, so maybe I can find another API that delivers this social network ID for me and then formalizing new template and look for for other APIs."
        ],
        [
            "Gateway.",
            "Um?",
            "So scalability is here a very big issue, because this graph pattern containment relations we calculate here they have to be done for an exponential amount of combinations of templates and APIs.",
            "We've done some experiments in this invite."
        ],
        [
            "I meant with a Hadoop MapReduce technologies which are basically cloud technologies for distributed computing, and what we?"
        ],
        [
            "Found is that.",
            "If you do this in a distributed environment, you can very easily break it up, and if you use several nodes in a cloud, so you several machines at the same time to calculate the these pattern relationships, you really have a nice decrease in."
        ],
        [
            "And reaction time."
        ],
        [
            "And the nice thing is that this increase is not only based on the fact that you use more computational power.",
            "So it's not only because you use more machines that have inherently than more CPUs and more memory, or something like that, you can also very strategically distribute your computations and decrease your time along that line.",
            "So for discovery this works out very very well and I guess.",
            "Now I've used up enough time, so thank you very much and if you have questions to this discovery, of course I'm here.",
            "Maybe it's not about discovery, but something is just a very silly question.",
            "For example, if I have an API which doesn't require any input parameter, you just put an empty graph pattern or something.",
            "For example, if I want the list of all countries, that's my API.",
            "Of.",
            "This sounds more like like like a static data retrieval.",
            "Yeah, yeah, but it could be.",
            "For example, it could be an API that says give me the latest temperature values in this region, but it's kind of fixed.",
            "But then your input will be the region.",
            "OK yeah, but let's say if you're really not in a situation where you don't need an input.",
            "Let's say the list of all countries on this world, then.",
            "You could actually use."
        ],
        [
            "So.",
            "You could use an empty graph pattern, because your API would not be dependent on some kind of input, so you wouldn't have to perform any kind of cancellation and therefore you could use an empty graph pattern and actually it would.",
            "It would fit very well because in this scenario where you extend for an HTTP get your eye, we extend the service UI.",
            "What would happen is that you would."
        ],
        [
            "Come back actually to this delicious APS anyway.",
            "To to your eye without key value pairs, and is linked to your.",
            "I like like all the link data your eyes and you resolve it and you get all all country specs, so it would exactly turned back toward Link data.",
            "Is anyway.",
            "Yeah makes a lot of sense and one other thing, what if I have my sparkle endpoint?",
            "My typical sparkling point?",
            "Does it make any sense for me to to publish us as linked APIs?",
            "What are the benefits?",
            "Just it might so.",
            "What you can do with the sparkle endpoint if you if you expose it as a linked API is you would actually define a pattern and you could describe it so you can post arbitrary queries to sparkle endpoint.",
            "But the linked API would do for you is describe certain patterns that make a lot of sense, so you might have a database about countries and people in it or whatever, and so there's only two things you can query for and it wouldn't make sense to ask this sparkle endpoint.",
            "For anything else, right?",
            "So you you have to have an understanding of what's behind the sparkle endpoint to formalize your queries, and the queries are inherently in the linked API already, so you you take this this burden from the user away to have an understanding of the of the database behind it.",
            "Yeah, it's a very useful thing, because for people who have worked or have been exposed to sparkle endpoints, the problem is that you have the endpoint, but you don't know what to do with it.",
            "Yeah exactly, you have no clue of what date is it there, so you need some kind of description or anything so.",
            "In this case it's yeah, so not the spot itself in the newest version also provides functionalities to write templates, so this is kind of the same thing.",
            "OK, if there are no more questions.",
            "Thanks very much."
        ]
    ],
    "summarization": {
        "clip_0": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So as you might have noticed, the talks from green to me have changed a little bit.",
                    "label": 0
                },
                {
                    "sent": "The topic it's called Link data and APIs with node link data and services as in your schedules.",
                    "label": 1
                },
                {
                    "sent": "Reason for that is very simple.",
                    "label": 0
                },
                {
                    "sent": "We didn't change the schedule, we changed actually the name of the approach.",
                    "label": 0
                },
                {
                    "sent": "The reason for this is linked services was a little bit broader term that was associated with a couple of approaches.",
                    "label": 0
                },
                {
                    "sent": "They're all related, but Linda API is a little bit more precise of what I'm going to present to you.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                }
            ]
        },
        "clip_1": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Let's start with some attributions.",
                    "label": 0
                },
                {
                    "sent": "A couple of slides I'm going to show you have been extracted from a tutorial.",
                    "label": 0
                },
                {
                    "sent": "Given that the extended Semantic Web Conference 2011 in Crete and some others are from the IEEE Summer School on Semantic Computing in Berkeley also this year.",
                    "label": 0
                }
            ]
        },
        "clip_2": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Let's see what we're going to do.",
                    "label": 0
                },
                {
                    "sent": "First, I'm going to give you a small motivation to show you well what is so important about APIs.",
                    "label": 0
                },
                {
                    "sent": "Then we have to go over some preliminaries, especially hypertext transfer protocol and representational state transfer.",
                    "label": 0
                },
                {
                    "sent": "Just a couple of slides.",
                    "label": 0
                },
                {
                    "sent": "And then we're going to talk about linked API's and what they are.",
                    "label": 0
                },
                {
                    "sent": "I'm going to show you design guidelines for linked API's and then we're going to elaborate in detail on this different design guidelines.",
                    "label": 0
                },
                {
                    "sent": "Which means we're going to talk about API descriptions, API interaction.",
                    "label": 1
                },
                {
                    "sent": "We're going to look at the semantics of linked API's.",
                    "label": 0
                },
                {
                    "sent": "How we use them and then I'm going to show you some wrapping techniques and why we need wrapping techniques for linked API's.",
                    "label": 0
                },
                {
                    "sent": "And if time permits, I'm going to show you a real world example of an implementation of a linked API.",
                    "label": 0
                },
                {
                    "sent": "And I'm trying to reserve at the end a spot for questions, but that doesn't mean that you can ask me questions during the presentation.",
                    "label": 0
                },
                {
                    "sent": "So if you don't understand something, some parts are a little bit formal.",
                    "label": 0
                },
                {
                    "sent": "Please interrupt me, we can talk about anything.",
                    "label": 0
                }
            ]
        },
        "clip_3": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "OK, so why'd we care about APIs?",
                    "label": 0
                },
                {
                    "sent": "So what is this about?",
                    "label": 0
                }
            ]
        },
        "clip_4": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "This is the link data cloud Grinter talked about.",
                    "label": 0
                },
                {
                    "sent": "It's actually an older version, but you can see is this schematic representation of this huge data set that's already out there on the web.",
                    "label": 0
                },
                {
                    "sent": "With Lincoln semantic information.",
                    "label": 0
                },
                {
                    "sent": "And it's great.",
                    "label": 0
                },
                {
                    "sent": "It's a fancy technology.",
                    "label": 0
                },
                {
                    "sent": "It works very well, but it's all static.",
                    "label": 0
                }
            ]
        },
        "clip_5": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Now the web is not only about static data, what we find is that a lot of data actually is created dynamically as a result of calculation carried out over input.",
                    "label": 1
                },
                {
                    "sent": "An calculation doesn't necessarily mean mathematical calculations, so think for example of dynamically or constantly changing data.",
                    "label": 0
                },
                {
                    "sent": "Data that's dependent on sensor information, weather information or thinking stock quotes you won't find on the web database that holds all the stock quotes for next year.",
                    "label": 0
                },
                {
                    "sent": "And if you do give me a call.",
                    "label": 0
                },
                {
                    "sent": "Or think about data that is almost infinite in size.",
                    "label": 0
                },
                {
                    "sent": "Google Maps doesn't store every shortest route between every two points on this planet.",
                    "label": 0
                },
                {
                    "sent": "This cannot work.",
                    "label": 0
                },
                {
                    "sent": "So Google has to calculate these shortest routes.",
                    "label": 0
                },
                {
                    "sent": "At the moment a user asks for them.",
                    "label": 0
                },
                {
                    "sent": "This is a dynamic environment and we can pre materialize it.",
                    "label": 0
                },
                {
                    "sent": "Or even if you have a pre materialized data set, you might not be possible.",
                    "label": 0
                },
                {
                    "sent": "You might not be able to to publish it completely because you don't want to or you are not even allowed to.",
                    "label": 0
                },
                {
                    "sent": "A social network cannot publish all its data openly on the web, so data might be dependent on access rights, user and password information.",
                    "label": 0
                },
                {
                    "sent": "Things like that.",
                    "label": 0
                },
                {
                    "sent": "This is also input information that has to be processed and this input information influences the output information or the results you get served on the web.",
                    "label": 0
                },
                {
                    "sent": "Terms of data.",
                    "label": 0
                },
                {
                    "sent": "But it's not.",
                    "label": 0
                }
            ]
        },
        "clip_6": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "It's also not only about data, it's also about functionalities.",
                    "label": 0
                },
                {
                    "sent": "If you look on the web you find.",
                    "label": 1
                },
                {
                    "sent": "I'm incredible amount of service, endpoints, web API's you find.",
                    "label": 0
                },
                {
                    "sent": "Web forms, even that the trigger all kinds of functionalities.",
                    "label": 0
                },
                {
                    "sent": "In the web itself, and even in the real world.",
                    "label": 1
                },
                {
                    "sent": "So for example, you can order a pitzza nowadays on the web this is no problem for you.",
                    "label": 0
                },
                {
                    "sent": "This is a complete web based interaction.",
                    "label": 0
                },
                {
                    "sent": "You type something on home page and you get information back saying to you your pizza will be delivered to you in 20 minutes and it costs.",
                    "label": 0
                },
                {
                    "sent": "I don't know, $10.",
                    "label": 0
                },
                {
                    "sent": "And 10 minutes or 20 minutes later some real guy will knock on your door and deliver a pizza to you.",
                    "label": 0
                },
                {
                    "sent": "This is a real world side effect and also a dynamic environment because if you do the same process two days later, the same service might say, well, we are close today or your pizza will be delivered in three hours or something like that.",
                    "label": 0
                },
                {
                    "sent": "Now if you look at programmableweb.com, that's an aggregator site for Web APIs.",
                    "label": 0
                },
                {
                    "sent": "We see there are over 4300 APIs of this kind and other kinds.",
                    "label": 0
                },
                {
                    "sent": "I've put some of the logos here.",
                    "label": 0
                },
                {
                    "sent": "Some of them are very prominent like Facebook Delicious data Golf is the American government, but there's also a considerable long tail.",
                    "label": 0
                },
                {
                    "sent": "So for example, hip digital is, as far as I know, a music library.",
                    "label": 0
                },
                {
                    "sent": "Um itsumo W is.",
                    "label": 0
                },
                {
                    "sent": "If they serve information about public transportation with buses in a small region in the United Kingdom.",
                    "label": 0
                },
                {
                    "sent": "So you see, there's a lot of them out there and they are scoped and small and big in size everything.",
                    "label": 0
                },
                {
                    "sent": "But they all have a problem.",
                    "label": 0
                }
            ]
        },
        "clip_7": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "They are completely heterogeneous.",
                    "label": 0
                },
                {
                    "sent": "Some of them talk Jason, some of them have some arbitrary XML format.",
                    "label": 0
                },
                {
                    "sent": "Some of them talk about movies.",
                    "label": 0
                },
                {
                    "sent": "The next talks about films and we have no idea if this is the same thing.",
                    "label": 0
                },
                {
                    "sent": "And all of this is described on a home page in some text.",
                    "label": 0
                },
                {
                    "sent": "This means a developer has actually to read these texts, has to gain a deep understanding of how the API works, how the data looks like to work with it, and this for every API.",
                    "label": 1
                }
            ]
        },
        "clip_8": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "And the problem even increases if you try to combine APIs.",
                    "label": 0
                },
                {
                    "sent": "If you try to combine functionalities and this is actually what we want to do, because this creates an increased value.",
                    "label": 1
                },
                {
                    "sent": "If we can start to take functionality's on the web and just plug them together.",
                    "label": 0
                },
                {
                    "sent": "So, for example, imagine you wake up one morning and say today I'm going to write a Facebook application where users can look up the soundtracks of their favorite movies and get additional information about the artists who perform these movies from digital.",
                    "label": 0
                },
                {
                    "sent": "If you want to do this, you have to write glue code that puts everything together.",
                    "label": 0
                },
                {
                    "sent": "How does this API work?",
                    "label": 0
                },
                {
                    "sent": "How does this work?",
                    "label": 0
                },
                {
                    "sent": "What data or how does the data look like?",
                    "label": 0
                },
                {
                    "sent": "How do I have to transform the data that one API can talk to in the next one, and so on and so forth?",
                    "label": 0
                },
                {
                    "sent": "This is an incredible amount of work you have to put in.",
                    "label": 0
                },
                {
                    "sent": "And if you decide.",
                    "label": 0
                },
                {
                    "sent": "I don't want to use Facebook.",
                    "label": 0
                },
                {
                    "sent": "I want to use another social network.",
                    "label": 0
                },
                {
                    "sent": "You have to start all over again.",
                    "label": 0
                },
                {
                    "sent": "You have to do the complete process again because it's not their API.",
                    "label": 0
                },
                {
                    "sent": "Another format, another kind of data.",
                    "label": 0
                },
                {
                    "sent": "This is horrible and we don't want it.",
                    "label": 1
                },
                {
                    "sent": "So what we actually want structured semantic descriptions of APIs.",
                    "label": 1
                },
                {
                    "sent": "This is what linked API's are about.",
                    "label": 0
                },
                {
                    "sent": "If we have structured and semantic descriptions.",
                    "label": 0
                },
                {
                    "sent": "We could just plug them together, considerably decreasing the effort income in combining the different APIs.",
                    "label": 0
                },
                {
                    "sent": "You still have to do some things you still have to write some code that tells everything what's going to happen, but you don't need to look how does everything work.",
                    "label": 0
                },
                {
                    "sent": "How do I have transformed data and things like that?",
                    "label": 0
                },
                {
                    "sent": "You can even perform some tasks completely automatically like repair or data matching and discovery.",
                    "label": 0
                },
                {
                    "sent": "So this is the problem.",
                    "label": 0
                }
            ]
        },
        "clip_9": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Let's see how we can solve it.",
                    "label": 0
                },
                {
                    "sent": "First luminaries HTTP and rest.",
                    "label": 1
                },
                {
                    "sent": "So going to already talked a little bit about.",
                    "label": 0
                }
            ]
        },
        "clip_10": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "HTTP.",
                    "label": 0
                },
                {
                    "sent": "I'm just going to go a little bit more into detail on it, so HTTP is a client server protocol according to which all documents on the World Wide Web are served all of them.",
                    "label": 1
                },
                {
                    "sent": "It's so every interaction on the web is based on two things and the first is a request.",
                    "label": 0
                },
                {
                    "sent": "So request consists out of a method, a Uriah header, and optionally a body.",
                    "label": 0
                },
                {
                    "sent": "So there a lot there more.",
                    "label": 0
                },
                {
                    "sent": "There are more methods.",
                    "label": 0
                },
                {
                    "sent": "I've put just the most important ones here.",
                    "label": 0
                },
                {
                    "sent": "There's HTTP get, which is the the one all of you use probably everyday, because it's the one that happens when you type in your eye into your web browser and hit enter.",
                    "label": 0
                },
                {
                    "sent": "The intuition because behind HTTP get is retrieve the entity identified by the UI.",
                    "label": 0
                },
                {
                    "sent": "And all of you are used to the fact that this entity is a homepage going to show you that this is not necessarily the case.",
                    "label": 0
                },
                {
                    "sent": "There's HTTP put which just says please store the entity I deliver in the payload in the body.",
                    "label": 0
                },
                {
                    "sent": "Behind the euro.",
                    "label": 0
                },
                {
                    "sent": "There is HTTP post which says submit the information in the body as a new sub ordinate of the resource UI.",
                    "label": 1
                },
                {
                    "sent": "Sounds strange, right?",
                    "label": 0
                },
                {
                    "sent": "But it isn't.",
                    "label": 0
                },
                {
                    "sent": "It's actually exactly what Post says.",
                    "label": 0
                },
                {
                    "sent": "What you do is you submit the data in your body to the UI and then they get processed.",
                    "label": 0
                },
                {
                    "sent": "Whatever that has to happen there happens there.",
                    "label": 0
                },
                {
                    "sent": "So for example, you can use HTTP post to post a message in a message board.",
                    "label": 0
                },
                {
                    "sent": "Our to submit form data things like that.",
                    "label": 1
                },
                {
                    "sent": "Delete that does what it says.",
                    "label": 0
                },
                {
                    "sent": "Please delete the entity identified by the UI.",
                    "label": 0
                },
                {
                    "sent": "That's that.",
                    "label": 0
                },
                {
                    "sent": "So now where some?",
                    "label": 0
                }
            ]
        },
        "clip_11": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "West, there's a response.",
                    "label": 0
                },
                {
                    "sent": "So this is what the client does, and if a client performs a request, Sir was going to respond and respond consists out of response code header, and again optionally a body.",
                    "label": 1
                },
                {
                    "sent": "So if you do an HTTP get, a server will reply to you and deliver homepage or RDF data set or something else in the body.",
                    "label": 0
                },
                {
                    "sent": "Response codes there are many of them, but they all fall into four categories.",
                    "label": 0
                },
                {
                    "sent": "Response codes are three digit numbers.",
                    "label": 0
                },
                {
                    "sent": "Browsers a couple of years ago even showed them to the users.",
                    "label": 0
                },
                {
                    "sent": "They don't do this anymore.",
                    "label": 0
                },
                {
                    "sent": "The one starting with the two like 200 say everything is alright.",
                    "label": 0
                },
                {
                    "sent": "Your request worked out, the one starting with the three.",
                    "label": 0
                },
                {
                    "sent": "Are going to say well I understand your request, but I can serve to you, but I know where I can and it will tell you in the header where you can look up the other information.",
                    "label": 0
                },
                {
                    "sent": "The one starting with the four are intuitively mean you made something wrong.",
                    "label": 0
                },
                {
                    "sent": "The client made something wrong.",
                    "label": 0
                },
                {
                    "sent": "Your request is flawed and the ones starting with the five say.",
                    "label": 0
                },
                {
                    "sent": "Well, I made something wrong with server made something wrong.",
                    "label": 1
                },
                {
                    "sent": "There's a problem on the server.",
                    "label": 0
                }
            ]
        },
        "clip_12": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So now let's have a closer look at HTTP content negotiation, and together with this the link data your I look up into already explained to you.",
                    "label": 1
                },
                {
                    "sent": "So what you can do is you can you can perform an HTTP get on the pedia resource India.",
                    "label": 0
                },
                {
                    "sent": "This is an HTTP get method and you can ask in the header for entry format, which is an RDF format.",
                    "label": 1
                },
                {
                    "sent": "And the server will reply to you with three or three.",
                    "label": 0
                },
                {
                    "sent": "I can't give you.",
                    "label": 0
                },
                {
                    "sent": "II is a big country.",
                    "label": 0
                },
                {
                    "sent": "A lot of people live there.",
                    "label": 0
                },
                {
                    "sent": "Your room isn't big enough.",
                    "label": 0
                },
                {
                    "sent": "And it will tell little client.",
                    "label": 0
                },
                {
                    "sent": "Maybe you want to look atdp.org/DATA/india Bhutan.",
                    "label": 0
                },
                {
                    "sent": "Three so so it will tell the client.",
                    "label": 0
                },
                {
                    "sent": "Here's the UI where you can get information that corresponds to the format you actually asked me to give you.",
                    "label": 0
                },
                {
                    "sent": "And here's the here's the point where content negotiation sets in.",
                    "label": 0
                },
                {
                    "sent": "If the client would.",
                    "label": 0
                }
            ]
        },
        "clip_13": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Ask for HTML.",
                    "label": 0
                },
                {
                    "sent": "The web server would have responded differently and points to the webpage's going to show it to you in his example.",
                    "label": 0
                },
                {
                    "sent": "So now this is called the negotiation.",
                    "label": 0
                }
            ]
        },
        "clip_14": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "But HTTP, which is maintained by the Internet Engineering Task Force, not the W 3C.",
                    "label": 0
                },
                {
                    "sent": "It's just one arguably the most important implementation of an architecture style called Rest, Representational State transfer and the rest architecture follows three principles.",
                    "label": 1
                },
                {
                    "sent": "The first one saying an application has to be divided into state and functionality, identify resources and these resources have to be uniquely addressable in the web context.",
                    "label": 0
                },
                {
                    "sent": "We do this with your eyes.",
                    "label": 1
                },
                {
                    "sent": "Every year I identifies a resource and is uniquely addressable or resources share uniform interface consisting of a constraint set of well defined operations.",
                    "label": 0
                },
                {
                    "sent": "This constraint set of well defined operations are the methods I've just explained to you.",
                    "label": 1
                },
                {
                    "sent": "HTTP get posed, delete and so on.",
                    "label": 0
                },
                {
                    "sent": "And the constraints set of content types.",
                    "label": 0
                },
                {
                    "sent": "This is what you've seen with congregation's like before that.",
                    "label": 0
                },
                {
                    "sent": "So you can ask for N 3 as a content type or HTML as a content type.",
                    "label": 0
                },
                {
                    "sent": "Now this is rest and HTTP.",
                    "label": 0
                }
            ]
        },
        "clip_15": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Which would be the point where we go to lettuce linked APIs?",
                    "label": 1
                },
                {
                    "sent": "Any questions so far?",
                    "label": 0
                },
                {
                    "sent": "Alright.",
                    "label": 0
                }
            ]
        },
        "clip_16": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So Linda APIs aim to promote an efficient style of APIs when efficient means you will see.",
                    "label": 1
                },
                {
                    "sent": "By combining restful web architectures, meaning it's resource oriented, we manipulate them with HTTP verbs.",
                    "label": 0
                },
                {
                    "sent": "We use content negotiation.",
                    "label": 0
                },
                {
                    "sent": "And combining all this with linked data technologies is going to explain them.",
                    "label": 0
                },
                {
                    "sent": "So the uniform use of your eyes, the use of RDF, and the use of sparkle.",
                    "label": 1
                },
                {
                    "sent": "Linda.",
                    "label": 0
                }
            ]
        },
        "clip_17": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Rice concretely follow a set of design principles and guidelines.",
                    "label": 0
                },
                {
                    "sent": "There are four of them describe APIs LD prosumers with input output descriptions as sparkle graph patterns communicate.",
                    "label": 1
                },
                {
                    "sent": "RDF by rest for content negotiation.",
                    "label": 0
                },
                {
                    "sent": "The output should make explicit relation with the input and then you rap and unlinked API make the lifting public with a sparkle construct query.",
                    "label": 1
                },
                {
                    "sent": "Sounds like a lot.",
                    "label": 0
                },
                {
                    "sent": "But I'm going to go over these 3 four principles.",
                    "label": 0
                },
                {
                    "sent": "And explain them.",
                    "label": 0
                }
            ]
        },
        "clip_18": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So the first one describe API input and output as sparkle graph patterns, so we're going to talk about how to describe an API structured and semantically.",
                    "label": 0
                }
            ]
        },
        "clip_19": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So a link API for us is some kind of web functionality.",
                    "label": 0
                },
                {
                    "sent": "Whatever it does, real world side effects, no reward, side effects, whatever, but all of them have one thing in common.",
                    "label": 0
                },
                {
                    "sent": "They take RDF as input data in.",
                    "label": 0
                },
                {
                    "sent": "Then they perform their functionality, whatever it is according to the input data.",
                    "label": 0
                },
                {
                    "sent": "And then they produce RDF as output data, so it's always RDF in RDF out, and RDF is going to explain is a graph model.",
                    "label": 1
                },
                {
                    "sent": "Now we want to describe something like that that takes RDF in RDF out.",
                    "label": 0
                },
                {
                    "sent": "We want to describe the structure of the RDF.",
                    "label": 0
                },
                {
                    "sent": "The API understands.",
                    "label": 0
                },
                {
                    "sent": "But we've already seen a formalism to describe the structure, namely the graph patterns of the spot query language.",
                    "label": 0
                },
                {
                    "sent": "So what we want to do is to describe the pattern of the models.",
                    "label": 0
                },
                {
                    "sent": "The API understands and we do this with sparkle graph patterns.",
                    "label": 0
                }
            ]
        },
        "clip_20": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Let's look at it with an example.",
                    "label": 0
                },
                {
                    "sent": "So this is the running example through the whole presentation.",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "Imagine a service that delivers you friends of a given person.",
                    "label": 0
                },
                {
                    "sent": "A social network could offer such a service, right?",
                    "label": 1
                },
                {
                    "sent": "You type in that you type in a person and it replies to you with the friends of this person.",
                    "label": 1
                },
                {
                    "sent": "Now this this services API would be identified in our case with the uilabs.org/N/get Friends remember this year I identified the functionality that it identifies the API.",
                    "label": 0
                },
                {
                    "sent": "It does not identify a set of data or a homepage, or the social network or something.",
                    "label": 0
                },
                {
                    "sent": "It really identifies the functionality.",
                    "label": 0
                },
                {
                    "sent": "Now, if you want to describe it, the description.",
                    "label": 0
                }
            ]
        },
        "clip_21": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Might look something like this.",
                    "label": 0
                },
                {
                    "sent": "So you can see this is exactly the formalism that's in the where clause of these sparkle queries.",
                    "label": 0
                },
                {
                    "sent": "So what we say is, well, this functionality.",
                    "label": 0
                },
                {
                    "sent": "This API wants as input.",
                    "label": 1
                },
                {
                    "sent": "Well, something an X.",
                    "label": 0
                },
                {
                    "sent": "That's a fourth person, which is your eye and this X has to have a social network ID called ID.",
                    "label": 0
                },
                {
                    "sent": "So these are variables.",
                    "label": 0
                },
                {
                    "sent": "This is.",
                    "label": 0
                },
                {
                    "sent": "These are your eyes.",
                    "label": 0
                },
                {
                    "sent": "So we described as input.",
                    "label": 0
                },
                {
                    "sent": "I want a person and its social network ID.",
                    "label": 1
                },
                {
                    "sent": "And as output I will deliver.",
                    "label": 0
                },
                {
                    "sent": "X knows some why.",
                    "label": 0
                },
                {
                    "sent": "Why is of age, age and you get to pick the picks Y?",
                    "label": 0
                },
                {
                    "sent": "Yeah, so we describe here intuitively where you get some somebody that acts knows you get his age and you get a picture of him.",
                    "label": 0
                },
                {
                    "sent": "By using a pattern, a graph pattern.",
                    "label": 1
                },
                {
                    "sent": "Now, since this is the description of input and output, obviously we want to use this publicly.",
                    "label": 0
                },
                {
                    "sent": "So what we?",
                    "label": 0
                }
            ]
        },
        "clip_22": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "You if we embed these graph patterns in an RDF document, don't worry, you don't have to read this RDF documents here.",
                    "label": 0
                },
                {
                    "sent": "The important thing is.",
                    "label": 0
                },
                {
                    "sent": "What we do is since variables are not in the expressivity of RDF.",
                    "label": 0
                },
                {
                    "sent": "What we do is just we encode these very these graph patterns as strings as regular strings and use them in the description.",
                    "label": 0
                },
                {
                    "sent": "Just as a string.",
                    "label": 0
                },
                {
                    "sent": "And the whole description talks about our get friends service.",
                    "label": 0
                },
                {
                    "sent": "So the description as a whole is an RDF document which contains graph patterns describing input and output of the API.",
                    "label": 0
                }
            ]
        },
        "clip_23": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Now obviously we want to make this RDF document publicly available.",
                    "label": 0
                },
                {
                    "sent": "So again, there's a UI where you can perform an HTTP get to.",
                    "label": 0
                },
                {
                    "sent": "And it's already respond with 200 OK and serve this RDF document.",
                    "label": 0
                },
                {
                    "sent": "So this this year I isn't information your identifies a source or a document.",
                    "label": 0
                },
                {
                    "sent": "Yeah.",
                    "label": 0
                },
                {
                    "sent": "And now everything fits kind of together, because what we can do now if somebody performs an HTTP gets to the UI that identifies the functionality we do.",
                    "label": 0
                },
                {
                    "sent": "What we always do with Link data.",
                    "label": 0
                },
                {
                    "sent": "We left the server reply, well, three or three.",
                    "label": 0
                },
                {
                    "sent": "This is a functionality I can deliver it to you via HTTP get, but you might want to do is you might want to look at this year I.",
                    "label": 0
                },
                {
                    "sent": "Which delivers you description of this functionality.",
                    "label": 0
                },
                {
                    "sent": "OK, I like questions so far for service descriptions or API descriptions.",
                    "label": 0
                }
            ]
        },
        "clip_24": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Yet, let's see how we interact now with an API.",
                    "label": 0
                }
            ]
        },
        "clip_25": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So we're here again with our friend delivering service.",
                    "label": 0
                },
                {
                    "sent": "And as I said.",
                    "label": 0
                },
                {
                    "sent": "A linked API.",
                    "label": 0
                },
                {
                    "sent": "Takes RDF data as input and RDF data is output.",
                    "label": 0
                },
                {
                    "sent": "So what we want to do actually is you want to submit data to the API.",
                    "label": 0
                },
                {
                    "sent": "And we've already seen an HP function that exactly fits the bill here.",
                    "label": 0
                },
                {
                    "sent": "Name the HTTP post.",
                    "label": 0
                },
                {
                    "sent": "So what we do is what we can do is we HTTP post RDF data through the API so we can post data set to it.",
                    "label": 1
                },
                {
                    "sent": "For example says which definitely is a person.",
                    "label": 0
                },
                {
                    "sent": "And yes, the social network ID ABCD.",
                    "label": 0
                },
                {
                    "sent": "And if you post this to the API, it will respond.",
                    "label": 0
                },
                {
                    "sent": "For example with well Stefanos Gunter and Gunter is 29 of age, and here's your eye that depicts Gunter.",
                    "label": 0
                },
                {
                    "sent": "Also, we have an HTTP post post data as input and the reply of the API will be another RDF data set, and now these datasets exactly match the patterns we have to find this input and output descriptions.",
                    "label": 0
                },
                {
                    "sent": "So we set as input.",
                    "label": 0
                },
                {
                    "sent": "We want an X that's a fourth person or fourth person and an X, and this X has to have a social network ID.",
                    "label": 0
                },
                {
                    "sent": "Here's again a variable Steven social network ID ABCD.",
                    "label": 0
                },
                {
                    "sent": "So Steven is bound against X and abcede against ID.",
                    "label": 0
                },
                {
                    "sent": "And the same thing happens with the output.",
                    "label": 0
                },
                {
                    "sent": "There's definitely schinger X.",
                    "label": 0
                },
                {
                    "sent": "Nose awhile and winter is why you see why has to have an age with winter.",
                    "label": 0
                },
                {
                    "sent": "Has an age and so forth.",
                    "label": 0
                },
                {
                    "sent": "So now also important to know is.",
                    "label": 0
                }
            ]
        },
        "clip_26": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "We can submit whole batches of data to this API so we can submit a data set that looks like this and for every hit of this pattern in this data set we perform the functionality.",
                    "label": 0
                },
                {
                    "sent": "So if I submit this data set saying definite person definition ID ABCD, and obviously has another ID called 12345.",
                    "label": 0
                },
                {
                    "sent": "And Michael Person and my grandson ID XY zed.",
                    "label": 0
                },
                {
                    "sent": "The first is the one we've already seen.",
                    "label": 0
                },
                {
                    "sent": "This is the hit to description.",
                    "label": 0
                },
                {
                    "sent": "These first 2 triples.",
                    "label": 0
                },
                {
                    "sent": "But this is also a hit.",
                    "label": 0
                },
                {
                    "sent": "Steven Person and Definition ID 12345.",
                    "label": 0
                },
                {
                    "sent": "So we performed the functionality for these two triples as well, and the third hit down here for Michael.",
                    "label": 0
                },
                {
                    "sent": "As you can see.",
                    "label": 0
                },
                {
                    "sent": "A definite person and SN ID XY set is no hit because we've explicitly said one person and one and one social network that it has to be the same thing the X.",
                    "label": 0
                },
                {
                    "sent": "And the car.",
                    "label": 0
                }
            ]
        },
        "clip_27": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Only the same thing works for the output, so the output can also have a lot of triple sets matching the description.",
                    "label": 0
                },
                {
                    "sent": "So in this case we have more data saying Additionally that Steven is Roland and Myconos Steven for example, I don't know.",
                    "label": 0
                },
                {
                    "sent": "Also important.",
                    "label": 0
                },
                {
                    "sent": "These",
                    "label": 0
                }
            ]
        },
        "clip_28": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Graph patterns.",
                    "label": 0
                },
                {
                    "sent": "They are constraining but not defining.",
                    "label": 1
                },
                {
                    "sent": "So this means if we post like this triple to the API, it won't work because the constraints aren't met.",
                    "label": 0
                },
                {
                    "sent": "We said in the input we want to have a person and it's social network ID.",
                    "label": 0
                },
                {
                    "sent": "This is just a person, there is no social network ID and it would not answer.",
                    "label": 0
                },
                {
                    "sent": "Or even better, it would reply with a 400 because it would say you made something wrong here.",
                    "label": 0
                }
            ]
        },
        "clip_29": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "But if you would submit something like this, it would work.",
                    "label": 0
                },
                {
                    "sent": "So here we can see definite person and Steven social Network ID is fulfilled as constraints.",
                    "label": 0
                },
                {
                    "sent": "So everything works out.",
                    "label": 0
                },
                {
                    "sent": "There's another triple, but it doesn't matter.",
                    "label": 0
                },
                {
                    "sent": "Because we can find at least one hit from the pattern to the data set.",
                    "label": 0
                },
                {
                    "sent": "This is what's meant by constraining but not defining.",
                    "label": 1
                },
                {
                    "sent": "But at the same time, it should be as precise as possible.",
                    "label": 0
                },
                {
                    "sent": "It doesn't have to be, but it would be.",
                    "label": 0
                }
            ]
        },
        "clip_30": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So for example, if we look at the output, this is what we have already seen as output data matching.",
                    "label": 0
                },
                {
                    "sent": "Output the output graph pattern.",
                    "label": 0
                },
                {
                    "sent": "But the service could Additionally reply something like this, saying Stefanos Roland, his age.",
                    "label": 0
                },
                {
                    "sent": "Here's a picture that depicts him.",
                    "label": 0
                },
                {
                    "sent": "And his folks based near Karlsruhe, which means that he lives in culture.",
                    "label": 0
                },
                {
                    "sent": "So now this is still a valid description for that, because it's a hit even for that set.",
                    "label": 0
                },
                {
                    "sent": "But it's not only 100% precise, So what would better would be something like this.",
                    "label": 0
                },
                {
                    "sent": "We could say, well, an optional IDD service will deliver that Y is based near some location.",
                    "label": 0
                },
                {
                    "sent": "Just optionally, because it doesn't do it every time and they said it wasn't done every time it wasn't done, but here it was done, so we say, optionally optionally, we can also deliver this.",
                    "label": 0
                },
                {
                    "sent": "More precise.",
                    "label": 0
                },
                {
                    "sent": "Good.",
                    "label": 0
                },
                {
                    "sent": "So a question so far for interaction with linked APIs via HTTP post, Yep.",
                    "label": 0
                },
                {
                    "sent": "Yes, sorry.",
                    "label": 0
                },
                {
                    "sent": "Just just one question, is this.",
                    "label": 0
                },
                {
                    "sent": "This interaction requires the use of post for for accessing the API.",
                    "label": 0
                },
                {
                    "sent": "How about get?",
                    "label": 0
                },
                {
                    "sent": "Is there any idea of using it?",
                    "label": 0
                },
                {
                    "sent": "Because it's a very useful come on the next slide.",
                    "label": 0
                },
                {
                    "sent": "OK, very widespread use of.",
                    "label": 0
                },
                {
                    "sent": "Yeah, yeah totally, exactly thanks.",
                    "label": 0
                },
                {
                    "sent": "She said HTTP get is the more known way of interacting with HTTP, and there's actually another motivation to you.",
                    "label": 0
                }
            ]
        },
        "clip_31": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "HTTP get, because what we haven't looked at so far is how do we actually link to the output data?",
                    "label": 0
                },
                {
                    "sent": "I showed you how you can link to the functionality.",
                    "label": 0
                },
                {
                    "sent": "This has a UI you can you can link to the description and information you are I you can interact with it, but how do you link to the output data?",
                    "label": 0
                },
                {
                    "sent": "How can you point to it?",
                    "label": 0
                },
                {
                    "sent": "So for example you might want to deal with static data and want to enrich it with dynamic data.",
                    "label": 1
                },
                {
                    "sent": "Think of a common thing of data set describing a company and you want to have up-to-date stock information of the company.",
                    "label": 0
                },
                {
                    "sent": "In this description, how do you do that?",
                    "label": 0
                },
                {
                    "sent": "How do you include dynamic data to static data?",
                    "label": 0
                },
                {
                    "sent": "And how do you do it?",
                    "label": 0
                },
                {
                    "sent": "Server side and client side so it has to have it has to be possible on the server.",
                    "label": 0
                },
                {
                    "sent": "Delivering it to a user, but you but you as user have also have the have to have the possibility to write an application combining static data and dynamic data and linking to each other.",
                    "label": 0
                }
            ]
        },
        "clip_32": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Or a more concrete example.",
                    "label": 0
                },
                {
                    "sent": "Think of a customer relations customer relation management software.",
                    "label": 0
                },
                {
                    "sent": "Know what you usually should have there.",
                    "label": 0
                },
                {
                    "sent": "Is a list of your customers, and obviously I'm one of them.",
                    "label": 0
                },
                {
                    "sent": "And this is obviously a fancy application because it's already based on RDF like structured data.",
                    "label": 0
                },
                {
                    "sent": "But this is static data.",
                    "label": 0
                },
                {
                    "sent": "I mean it changes overtime, but it's still kind of static.",
                    "label": 0
                },
                {
                    "sent": "Now you have control over it at least.",
                    "label": 0
                },
                {
                    "sent": "But what might be interesting is to show in your customer relationship management software all the person your customers are related to our friends with or at least at least the persons that your customers know.",
                    "label": 0
                },
                {
                    "sent": "This might be interesting, So what you could do is you could buy your data from Facebook.",
                    "label": 0
                },
                {
                    "sent": "Downside of this, you get a dump of data.",
                    "label": 0
                },
                {
                    "sent": "This is up-to-date for maybe a month and then everything has changed and you have to buy a new dump.",
                    "label": 0
                },
                {
                    "sent": "Much, much better if you buy a service.",
                    "label": 0
                },
                {
                    "sent": "If you buy access to an API for Facebook who deliver you dynamic data.",
                    "label": 0
                },
                {
                    "sent": "Every time, constantly.",
                    "label": 0
                },
                {
                    "sent": "Whenever you want to see them, you can see them, but how do you connect it?",
                    "label": 0
                },
                {
                    "sent": "How do you connect your dynamic data, which is static data?",
                    "label": 1
                }
            ]
        },
        "clip_33": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So let's see what we can do is what we need to do is to define an HP gettable UI.",
                    "label": 0
                },
                {
                    "sent": "And what we do is we have here again the UI identifying our functionality and we extend it with key value pairs to identify an individual service or API call.",
                    "label": 1
                },
                {
                    "sent": "And the key value pairs the keys we used to extend it all the keys in the input pattern, so the input pattern had or the variables in the input pattern.",
                    "label": 0
                },
                {
                    "sent": "It has two variables X, which was the person and ID which was the social network ID of the person.",
                    "label": 0
                }
            ]
        },
        "clip_34": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And what we do we use these variables as keys behind this UI and as values we use whatever we want to bind against the variables.",
                    "label": 0
                },
                {
                    "sent": "So we say here we have this year I will be extended with X is Steven and ideas ABCD.",
                    "label": 0
                },
                {
                    "sent": "And now the what the service can do or what the API can do is just automatically take the values and bind them to the according variables.",
                    "label": 0
                },
                {
                    "sent": "Or keys respectively.",
                    "label": 0
                }
            ]
        },
        "clip_35": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "If if you perform an HTTP get on this year, I what the API does it it's creating its own input data.",
                    "label": 0
                },
                {
                    "sent": "And this is the input data we have seen before, so it can use this RDF data as input for itself.",
                    "label": 0
                },
                {
                    "sent": "By just performing HTP get over this.",
                    "label": 0
                },
                {
                    "sent": "So before I go one step further.",
                    "label": 0
                },
                {
                    "sent": "My questions to this, how does this example work for stock quotes?",
                    "label": 0
                },
                {
                    "sent": "What if I ask for a stock symbol of X?",
                    "label": 0
                },
                {
                    "sent": "How many results will be in the output?",
                    "label": 0
                },
                {
                    "sent": "Will I have to define?",
                    "label": 0
                },
                {
                    "sent": "A time range or will there be streaming involved?",
                    "label": 0
                },
                {
                    "sent": "What is data which incrementally is produced?",
                    "label": 0
                },
                {
                    "sent": "It would certainly depend on how your API is defined.",
                    "label": 0
                },
                {
                    "sent": "I mean, if your API only gives you the really up-to-date stock information at this point, and the only thing you have to do is I don't know, give some some identifier for the company you want to look up.",
                    "label": 0
                },
                {
                    "sent": "For streaming data, things work differently.",
                    "label": 0
                },
                {
                    "sent": "This is actually an issue we're looking into right now in research, because this is all based on interactions like request and response.",
                    "label": 0
                },
                {
                    "sent": "Always request and response and what we want to do actually is to leave the socket open and get streaming data in that is flowing over the graph patterns, and then we have hits in certain time Windows and reply in according time Windows, but this is actually an issue we look into right now.",
                    "label": 0
                },
                {
                    "sent": "OK, thanks other questions.",
                    "label": 0
                }
            ]
        },
        "clip_36": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Good, so another thing.",
                    "label": 0
                },
                {
                    "sent": "One observation is that a lot of the data delivering services.",
                    "label": 0
                },
                {
                    "sent": "I have one kind of central entity, something input and output is talking about.",
                    "label": 0
                },
                {
                    "sent": "So in our case.",
                    "label": 0
                },
                {
                    "sent": "Well, the input talks about this guy Steven and it also describes the person that Steven knows.",
                    "label": 0
                },
                {
                    "sent": "Yeah, this is obviously the central entity of this service, call here.",
                    "label": 0
                },
                {
                    "sent": "So what we can do in this case is we can use this this API call you right, it identifies the API call and build out of it.",
                    "label": 1
                },
                {
                    "sent": "Your identifies this central entity.",
                    "label": 0
                }
            ]
        },
        "clip_37": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So what we do is we build a UI that only has a key value pair for ID.",
                    "label": 0
                },
                {
                    "sent": "And again, this will be bound against the ID in the input pattern, But what we actually do is.",
                    "label": 0
                },
                {
                    "sent": "We use this complete UI to bind X.",
                    "label": 0
                },
                {
                    "sent": "Because we say.",
                    "label": 0
                }
            ]
        },
        "clip_38": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "If you resolve this year, I.",
                    "label": 0
                },
                {
                    "sent": "You get information about this person, so this is likely.",
                    "label": 0
                },
                {
                    "sent": "Data works, right?",
                    "label": 0
                },
                {
                    "sent": "We have a UI identifier for something and if we resolve it we get information about it.",
                    "label": 0
                },
                {
                    "sent": "But we have to keep in mind we can't use this one because this one will deliver information.",
                    "label": 0
                },
                {
                    "sent": "This is an information in your eye identifying a source.",
                    "label": 0
                },
                {
                    "sent": "So what we do is we extended with the hashtag.",
                    "label": 0
                },
                {
                    "sent": "So this year I identifies our person and this year.",
                    "label": 0
                },
                {
                    "sent": "I then knows Gunter and Gunter is of age something.",
                    "label": 0
                },
                {
                    "sent": "And so on and so on.",
                    "label": 0
                },
                {
                    "sent": "So this year I identifies now Steven.",
                    "label": 0
                },
                {
                    "sent": "Just identified by this ID ABCD.",
                    "label": 0
                }
            ]
        },
        "clip_39": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Now let's look.",
                    "label": 0
                },
                {
                    "sent": "Let's go back to our example.",
                    "label": 0
                },
                {
                    "sent": "Having this year I identifying the central entity when done HP get over it, building its own input data and executing the API.",
                    "label": 0
                },
                {
                    "sent": "What we can do is we can we can build our static data that looks like this.",
                    "label": 0
                },
                {
                    "sent": "So this is our database for a customer relationship management software and it holds obviously information about traffic Miller saying Stephens Person has an ID and he is the same thing.",
                    "label": 0
                },
                {
                    "sent": "This UI is the same, identifies the same thing.",
                    "label": 0
                },
                {
                    "sent": "As this year I the service your I'll office.org/N/get friends ID ABCD #person.",
                    "label": 0
                },
                {
                    "sent": "And then we then we have done it.",
                    "label": 0
                },
                {
                    "sent": "Then we have made a link.",
                    "label": 0
                },
                {
                    "sent": "We said we have this in our database and this is the same thing as this and we can HTTP get resolve it and the API serves the dynamic data.",
                    "label": 0
                },
                {
                    "sent": "This created us the link in our static database to the dynamic database.",
                    "label": 0
                },
                {
                    "sent": "Other questions to this?",
                    "label": 0
                },
                {
                    "sent": "OK.",
                    "label": 0
                }
            ]
        },
        "clip_40": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So just an additional pointer here.",
                    "label": 0
                },
                {
                    "sent": "Going back to the HTTP post method of interacting with an API.",
                    "label": 1
                },
                {
                    "sent": "If your API is able to do this to have an HTTP get WI, what you should do is to include it in your output.",
                    "label": 0
                },
                {
                    "sent": "So user can see it.",
                    "label": 0
                },
                {
                    "sent": "So what you should do is somebody makes an HTTP post to your API like we discussed in the very first slides.",
                    "label": 0
                },
                {
                    "sent": "Well, you should include is a triple stating well and definitely same as this year I.",
                    "label": 0
                },
                {
                    "sent": "This is no problem in terms of our description, because as I said this is just constraining of defining, so this triple is not really hindering our description.",
                    "label": 0
                },
                {
                    "sent": "But you provide the user with the information OK and there is this.",
                    "label": 0
                },
                {
                    "sent": "Your eye, which is the same thing as this.",
                    "label": 0
                },
                {
                    "sent": "And if you resolve it you would get actually the same data set back.",
                    "label": 0
                }
            ]
        },
        "clip_41": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Alright.",
                    "label": 0
                },
                {
                    "sent": "Now, if there are no questions, we would move on and look a little bit into semantics.",
                    "label": 0
                },
                {
                    "sent": "So some.",
                    "label": 0
                }
            ]
        },
        "clip_42": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Dicks um, other approaches to semantic web services, especially the early ones, have focused on class based annotations of web web service descriptions.",
                    "label": 1
                },
                {
                    "sent": "This is very related to what I've shown to you, but it has some problems.",
                    "label": 0
                },
                {
                    "sent": "So what was done in terms of web services was we had this structural descriptions of web services describing a web service in very broad terms, saying things like, well, a web service takes as input a string, and this output.",
                    "label": 0
                },
                {
                    "sent": "It provides a string and integer.",
                    "label": 0
                },
                {
                    "sent": "This is completely structural.",
                    "label": 0
                },
                {
                    "sent": "There was no semantics behind it obviously, and 1st approaches tried to, well to model an ontology saying things like where they are.",
                    "label": 0
                },
                {
                    "sent": "Persons, persons have names and ages, persons.",
                    "label": 0
                },
                {
                    "sent": "No other persons, things like that and what was done then was this descriptions were mapped to the ontology.",
                    "label": 0
                },
                {
                    "sent": "Which would enable some kind of understanding so we could understand what OK as input there's a string in the string is a name, and we knew a name is something that's related to a person and it will output also a name and an integer.",
                    "label": 0
                },
                {
                    "sent": "This integer is an aging, and age is also related to a person, so we could understand things like this.",
                    "label": 1
                },
                {
                    "sent": "But this is a problem but really didn't understand what does the service do now.",
                    "label": 0
                },
                {
                    "sent": "How does how is this related with that?",
                    "label": 0
                },
                {
                    "sent": "What name do I get back?",
                    "label": 0
                },
                {
                    "sent": "Do I get the same name back?",
                    "label": 0
                },
                {
                    "sent": "Is it the name of my brother, my friend?",
                    "label": 0
                },
                {
                    "sent": "What's the age I get back?",
                    "label": 0
                },
                {
                    "sent": "Is it the age of the person with this name or is it the age of this person?",
                    "label": 0
                },
                {
                    "sent": "So we didn't capture the semantics of the dynamic of the service of how input is related with output.",
                    "label": 0
                }
            ]
        },
        "clip_43": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So now we have to to look at questions to see what we want to achieve actually.",
                    "label": 0
                },
                {
                    "sent": "So we want to explain the semantics of the calculation that's carried out over the input, right?",
                    "label": 1
                },
                {
                    "sent": "We want to see how does the input influence the data functionality.",
                    "label": 1
                },
                {
                    "sent": "With that information, is the input going to be enriched and how is this information related to the input?",
                    "label": 0
                },
                {
                    "sent": "Like I never get friends example.",
                    "label": 0
                },
                {
                    "sent": "Yeah, we enrich information about a person with information about him about his friends.",
                    "label": 0
                },
                {
                    "sent": "Or what is the functionality that is triggered by the API and how is this functionality influenced by the input?",
                    "label": 0
                },
                {
                    "sent": "How does the stock information influenced by my input?",
                    "label": 1
                },
                {
                    "sent": "So my input could say I want the stock information from 3 days ago or the up-to-date information.",
                    "label": 0
                },
                {
                    "sent": "What kind of influence does this have?",
                    "label": 0
                },
                {
                    "sent": "Or looking at our example here.",
                    "label": 0
                },
                {
                    "sent": "Here it's quite clear right over first thing there's a distinction between safe and unsafe variables.",
                    "label": 1
                },
                {
                    "sent": "It's actually quite easy.",
                    "label": 0
                },
                {
                    "sent": "The safe variables are the variables in the output.",
                    "label": 0
                },
                {
                    "sent": "It also appear in the input.",
                    "label": 0
                },
                {
                    "sent": "Like decks and the unsafe variables are the variables that don't appear in the input whi age pic.",
                    "label": 0
                },
                {
                    "sent": "So this is important because these unsafe variables that are not in the input they are actually bound by the service functionality.",
                    "label": 0
                },
                {
                    "sent": "They they basically describe what the service does and the other the safe variables.",
                    "label": 0
                },
                {
                    "sent": "They built the bridge to the input, they explain how it is related to the input, so we can.",
                    "label": 0
                }
            ]
        },
        "clip_44": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Perfectly understand just from these two patterns that the API will provide agent picture of someone.",
                    "label": 1
                },
                {
                    "sent": "X knows because we say X as described in the input.",
                    "label": 0
                },
                {
                    "sent": "And X knows Y, which is someone eggs knows.",
                    "label": 0
                },
                {
                    "sent": "And an agent picture.",
                    "label": 0
                }
            ]
        },
        "clip_45": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "It would look like this if you would turn winx around.",
                    "label": 0
                },
                {
                    "sent": "It would be clear the API would provide agent picture of someone who knows X.",
                    "label": 1
                },
                {
                    "sent": "It's the other way around.",
                    "label": 0
                },
                {
                    "sent": "Because we switched.",
                    "label": 0
                }
            ]
        },
        "clip_46": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "If it would look like this and we had the X here and it would say the API will provide agent picture of X. Asian picture of X.",
                    "label": 1
                },
                {
                    "sent": "And someone he knows.",
                    "label": 0
                },
                {
                    "sent": "Yeah, because we can't understand the relation between input and output.",
                    "label": 1
                },
                {
                    "sent": "We also understand the dynamics of the service of the API.",
                    "label": 0
                },
                {
                    "sent": "What does it really do?",
                    "label": 0
                }
            ]
        },
        "clip_47": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Also.",
                    "label": 0
                },
                {
                    "sent": "Um, this graph patterns.",
                    "label": 0
                },
                {
                    "sent": "They're not RDF embedded in RDF, but they are not.",
                    "label": 0
                },
                {
                    "sent": "But they use your eyes as you have seen.",
                    "label": 0
                },
                {
                    "sent": "And so therefore they should not be seen isolated.",
                    "label": 1
                },
                {
                    "sent": "We can, we can use the graph patterns and the rise in the graph patterns to gain a better understanding of what the API actually does.",
                    "label": 1
                },
                {
                    "sent": "So look at this example.",
                    "label": 0
                },
                {
                    "sent": "Consider you have an API that's described instead as output.",
                    "label": 0
                },
                {
                    "sent": "You get, well, some X has a movie actor Y.",
                    "label": 0
                },
                {
                    "sent": "So intuitively, X might be a movie, but we don't know this.",
                    "label": 0
                },
                {
                    "sent": "So X has a movie actor Y and then you have another API saying well as input.",
                    "label": 0
                },
                {
                    "sent": "I want the Cuban that's a fourth person.",
                    "label": 0
                },
                {
                    "sent": "At first glance, these patterns have don't have anything in common, right?",
                    "label": 0
                },
                {
                    "sent": "We wouldn't know how to combine them, but.",
                    "label": 0
                },
                {
                    "sent": "This is a UI we can resolve it.",
                    "label": 0
                },
                {
                    "sent": "We can do an HTTP get over it to the link data cloud.",
                    "label": 0
                },
                {
                    "sent": "And what we will get back is schema information.",
                    "label": 0
                },
                {
                    "sent": "Schema information about this movie ontology, obviously, and what we will get back is, among other things, a triple stating.",
                    "label": 0
                },
                {
                    "sent": "Well, actor has a range person which intuitively is to say everything that comes behind actor will be a fourth person and if you combine this with that and our engineers can do this very easily then what we understand is well.",
                    "label": 0
                },
                {
                    "sent": "If X is movie actor Y, then Y has to be a fourth person and then we can combine these two things because we know whatever is bound against Y can be used to be bound against Q&Q will be a fourth person.",
                    "label": 0
                },
                {
                    "sent": "Yeah, so we can.",
                    "label": 1
                },
                {
                    "sent": "You can use the link data cloud.",
                    "label": 0
                },
                {
                    "sent": "To understand what the API is and gain additional information by just leveraging what's already out there.",
                    "label": 0
                },
                {
                    "sent": "And it's a lot.",
                    "label": 0
                },
                {
                    "sent": "Are there questions to this?",
                    "label": 0
                },
                {
                    "sent": "Yes, how about that for the actor is an animal?",
                    "label": 0
                },
                {
                    "sent": "I. Yeah no, yeah I see.",
                    "label": 0
                },
                {
                    "sent": "What is the actors animals?",
                    "label": 0
                },
                {
                    "sent": "Well then that would be there alright?",
                    "label": 0
                },
                {
                    "sent": "I mean if the active would be that involve the actor could be an animal then somebody screwed here up because this information in the link data Cloud specifically stated that why has to be a person.",
                    "label": 0
                },
                {
                    "sent": "So if you if there is some, you're identifying an animal an it's it gets delivered by this then there is an error in there.",
                    "label": 0
                },
                {
                    "sent": "But then we can detect this error because we might be able to.",
                    "label": 0
                },
                {
                    "sent": "The animal will have a UI as well, right?",
                    "label": 0
                },
                {
                    "sent": "Then we resolve this and find out that it might not be a person.",
                    "label": 0
                },
                {
                    "sent": "And then we see well, but we said it's going to be one.",
                    "label": 0
                },
                {
                    "sent": "This is an error we can detect these things with the tools going to describe, but this would be an error.",
                    "label": 0
                },
                {
                    "sent": "Is it possible to use output from APIA directly in Apib?",
                    "label": 0
                },
                {
                    "sent": "Not with HTTP get.",
                    "label": 0
                },
                {
                    "sent": "R. It would be possible, yeah, so not not directly, obviously, but if you get an output that is bound by this so he would be a euro and he would be another UI.",
                    "label": 0
                },
                {
                    "sent": "And you would include this triple here and we send these two triples to this API.",
                    "label": 0
                },
                {
                    "sent": "It would understand it here because the semantics of this RDS range would be resolved by sparkle engines actually.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "Yep.",
                    "label": 0
                },
                {
                    "sent": "What if the the binding options are not unique?",
                    "label": 0
                },
                {
                    "sent": "What if X&Y are for persons?",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "Well, it depends, so if.",
                    "label": 0
                },
                {
                    "sent": "X could be a fourth person and now it depends if we resolve movie actor and we get only this triple back then we only know that Y is a person.",
                    "label": 0
                },
                {
                    "sent": "Then it wouldn't work.",
                    "label": 0
                },
                {
                    "sent": "But assuming we if we know that as if it is the IT is a fact that X would be a fourth person, then it's most likely that the schema information will hold another triple saying movie actor RDF's domain 4th person which has the intuition that everything that is in subject position.",
                    "label": 0
                },
                {
                    "sent": "So in the first position in this triple.",
                    "label": 0
                },
                {
                    "sent": "Has also to be a fourth person and then X would be bound against Q as well.",
                    "label": 0
                },
                {
                    "sent": "But we would have.",
                    "label": 0
                },
                {
                    "sent": "We would have to get this information that the first thing is also a focus.",
                    "label": 0
                },
                {
                    "sent": "Assuming we have this information, assuming we have that, then it would work just the same way.",
                    "label": 0
                },
                {
                    "sent": "OK, so.",
                    "label": 0
                }
            ]
        },
        "clip_48": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Moving on.",
                    "label": 0
                },
                {
                    "sent": "Wrapping techniques WHI do we need wrapping techniques?",
                    "label": 1
                },
                {
                    "sent": "So make lifting and mapping open with spiky construct queries.",
                    "label": 0
                },
                {
                    "sent": "This requires us firstly understand with lifting in.",
                    "label": 0
                },
                {
                    "sent": "Mapping is supposed to mean.",
                    "label": 0
                }
            ]
        },
        "clip_49": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "Well, first of all, I've shown to you in the motivation that we have a lot of API's on the web already and it's not really implausible that we give all of them up just because this is a cool technology.",
                    "label": 0
                },
                {
                    "sent": "So Furthermore, linked APIs are the adoption of linked APIs, is based on a certain network effect.",
                    "label": 1
                },
                {
                    "sent": "The more linked APIs are out there, the more value I can gain from also using linked APIs, because I can connect my stuff to the stuff of other people.",
                    "label": 0
                },
                {
                    "sent": "So we have to find out how we can use these API's that are already out there in this linked API context.",
                    "label": 0
                },
                {
                    "sent": "Also, if you want to, even if you work with linked APIs, you might want to include in our compositions, legacy APIs, other APIs.",
                    "label": 0
                },
                {
                    "sent": "And if we do this well, we are against it.",
                    "label": 0
                },
                {
                    "sent": "In the situation that we have to write blue code.",
                    "label": 0
                },
                {
                    "sent": "But we can do it intelligently.",
                    "label": 0
                },
                {
                    "sent": "We can do it in a way that we have to do it.",
                    "label": 0
                },
                {
                    "sent": "Once we write glue code in terms of we wrap the old API.",
                    "label": 0
                },
                {
                    "sent": "Use it with our linked APIs and then if you want to use it again with completely different linked APIs, we don't have to write blue code anymore because we already wrapped it.",
                    "label": 0
                },
                {
                    "sent": "And even need more if the API we are wrapping is free is freely available.",
                    "label": 0
                },
                {
                    "sent": "So if there are no licenses in place or something like that, we can even publish our wrapping for other people to you.",
                    "label": 0
                }
            ]
        },
        "clip_50": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So Linda APIs specifically addressed this problem, so we always have to look of how this works, how we create an environment that looks like this.",
                    "label": 0
                },
                {
                    "sent": "Where we can use in linked API UI as described with HTTP get and HTTP post.",
                    "label": 0
                },
                {
                    "sent": "And then the function actually comes from somewhere else is performed from from another API from the old API.",
                    "label": 0
                },
                {
                    "sent": "But this will be included in the linked API again, and RDF is returned.",
                    "label": 0
                }
            ]
        },
        "clip_51": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "Once again, linked APIs can wrap existing web API's.",
                    "label": 1
                },
                {
                    "sent": "And therefore they act, they act as some kind of semantic intermediary.",
                    "label": 0
                },
                {
                    "sent": "So the first thing we have to do?",
                    "label": 0
                },
                {
                    "sent": "We want to have a link API in the end so it has to understand RDF.",
                    "label": 0
                },
                {
                    "sent": "RDF will be submitted against this linked API and from this input RDF.",
                    "label": 1
                },
                {
                    "sent": "We have to construct the data necessary to invoke and use the legacy API.",
                    "label": 0
                },
                {
                    "sent": "The other API, the old API.",
                    "label": 0
                },
                {
                    "sent": "And this process is referred to as lowering because what we do is we take semantic information, RDF information.",
                    "label": 1
                },
                {
                    "sent": "And transform them, we deconstruct them to some non semantic information to use the older API.",
                    "label": 0
                },
                {
                    "sent": "And we do this with Spike and select queries.",
                    "label": 0
                },
                {
                    "sent": "So what we leverage here is that.",
                    "label": 0
                },
                {
                    "sent": "APIs on the web.",
                    "label": 0
                },
                {
                    "sent": "There are some somehow structured they don't follow a global scheme, but they are always somehow structured and we can.",
                    "label": 0
                },
                {
                    "sent": "We can put effort into understanding this at least once.",
                    "label": 0
                },
                {
                    "sent": "So for example a rest service.",
                    "label": 0
                },
                {
                    "sent": "Call might be invoked by something like this, so we have this fixed endpoint saying literacy.org/API.",
                    "label": 0
                },
                {
                    "sent": "Get friends.",
                    "label": 0
                },
                {
                    "sent": "It always looks like this and then it returns to you information about friends.",
                    "label": 0
                },
                {
                    "sent": "For a person that's identified with.",
                    "label": 0
                },
                {
                    "sent": "The place where it lives, called slower and some identifier ABCD.",
                    "label": 0
                },
                {
                    "sent": "Now you see this is you have to get this somehow.",
                    "label": 0
                },
                {
                    "sent": "You have to read the homepage of this API to understand how this thing really works.",
                    "label": 0
                },
                {
                    "sent": "It's completely skewed.",
                    "label": 0
                },
                {
                    "sent": "But it will be the same thing for all calls here.",
                    "label": 0
                },
                {
                    "sent": "So if you exchange the identifier, you get information about another person.",
                    "label": 0
                },
                {
                    "sent": "Or if you exchange to.",
                    "label": 0
                },
                {
                    "sent": "This thing here that identifies with a person lives.",
                    "label": 0
                },
                {
                    "sent": "You get other information back so you can understand this.",
                    "label": 0
                },
                {
                    "sent": "So what we need to do is we need to get the place where a person lives and it's social network identifier.",
                    "label": 0
                }
            ]
        },
        "clip_52": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So we could construct our linked API looking like this.",
                    "label": 0
                },
                {
                    "sent": "So we understand input information.",
                    "label": 0
                },
                {
                    "sent": "For example, Steven is a person is definitely has a social network ID.",
                    "label": 0
                },
                {
                    "sent": "And he's based in your Castle, so we understand this.",
                    "label": 0
                },
                {
                    "sent": "The pattern would look accordingly for the description.",
                    "label": 0
                },
                {
                    "sent": "And now what we want to do is we want to extract Abcede and Carl school.",
                    "label": 0
                },
                {
                    "sent": "So you write a Sparky select query.",
                    "label": 0
                },
                {
                    "sent": "We say select me location and user where someone is is as in network ID user and this someone is based near location.",
                    "label": 0
                },
                {
                    "sent": "So if we execute this select query over this data set, we exactly extract Carl Schueler and ABCD.",
                    "label": 0
                },
                {
                    "sent": "This is one hit in here.",
                    "label": 0
                },
                {
                    "sent": "And now everything we have to do is this fixed API.",
                    "label": 0
                },
                {
                    "sent": "We have seen this this fixed first part of the Legacy API and combine it with these two strings and where we come out is exactly here.",
                    "label": 0
                },
                {
                    "sent": "As we have constructed from RDF data from semantic data, valid API call.",
                    "label": 0
                },
                {
                    "sent": "Legacy API call.",
                    "label": 0
                },
                {
                    "sent": "Of course, we had to put effort in it.",
                    "label": 0
                },
                {
                    "sent": "We had to understand it, but it has to be done once and this select query is fixed.",
                    "label": 0
                },
                {
                    "sent": "So whatever we send in here.",
                    "label": 0
                },
                {
                    "sent": "It will always deliver us these parts of the UI we have to construct to call the Legacy API.",
                    "label": 1
                },
                {
                    "sent": "So this is the first part.",
                    "label": 0
                }
            ]
        },
        "clip_53": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "The lowering part.",
                    "label": 0
                },
                {
                    "sent": "Now we have to build some kind of response.",
                    "label": 0
                },
                {
                    "sent": "Now here we can.",
                    "label": 0
                },
                {
                    "sent": "We can focus or we can leverage the fact that web API's also deliver structured information.",
                    "label": 1
                },
                {
                    "sent": "Usually.",
                    "label": 0
                },
                {
                    "sent": "In this structured information, alot of APIs nowadays are based on Jason or some XML format.",
                    "label": 0
                },
                {
                    "sent": "So it could look like this.",
                    "label": 0
                },
                {
                    "sent": "So this is Jason.",
                    "label": 0
                },
                {
                    "sent": "If you've never seen it and this is XML and you see it's what's encoded here is that the response has a person and the person and a person's first name grinter last name last week, age 29 lives cars who.",
                    "label": 1
                },
                {
                    "sent": "Now the problem with this is these are just strings for us for a machine, it's just a string we as humans we can read it.",
                    "label": 0
                },
                {
                    "sent": "We can somehow make sense of it.",
                    "label": 0
                },
                {
                    "sent": "Machine can't, at least not by design.",
                    "label": 0
                },
                {
                    "sent": "We have to put effort in this.",
                    "label": 0
                },
                {
                    "sent": "And it works the same for the XML structure here.",
                    "label": 0
                },
                {
                    "sent": "But what this is both of them them are their trees.",
                    "label": 0
                },
                {
                    "sent": "So if you look at this this, this whole thing is the root node.",
                    "label": 0
                },
                {
                    "sent": "Then we have two child nodes, two persons and all of them have.",
                    "label": 0
                },
                {
                    "sent": "For leaves a first name edge to go into a last name Edulastic H Edge to the leave.",
                    "label": 0
                }
            ]
        },
        "clip_54": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Nine and so on.",
                    "label": 0
                },
                {
                    "sent": "So it looks like this.",
                    "label": 0
                },
                {
                    "sent": "So there's a root node.",
                    "label": 0
                },
                {
                    "sent": "We have two persons going to it's a tree.",
                    "label": 1
                },
                {
                    "sent": "But a tree is also a graph.",
                    "label": 1
                },
                {
                    "sent": "The special kind of breath, but it's a graph at least.",
                    "label": 0
                },
                {
                    "sent": "So what we can do in a first step?",
                    "label": 0
                }
            ]
        },
        "clip_55": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Is we just transform the serialization we go from Jason or XML to RDF.",
                    "label": 0
                },
                {
                    "sent": "By saying OK, this is a tree.",
                    "label": 0
                },
                {
                    "sent": "It says there's root.",
                    "label": 0
                },
                {
                    "sent": "The route is connected by a person to another node.",
                    "label": 0
                },
                {
                    "sent": "This node is connected via first name to go into this node is connected by a last name to logic.",
                    "label": 0
                },
                {
                    "sent": "So we just serialize this tree.",
                    "label": 0
                },
                {
                    "sent": "And we do it for both persons.",
                    "label": 0
                },
                {
                    "sent": "There are two things we have to notice here.",
                    "label": 0
                },
                {
                    "sent": "This has completely no semantic, it just it looks like RDF.",
                    "label": 0
                },
                {
                    "sent": "It is RDF, but it's just the syntax.",
                    "label": 0
                },
                {
                    "sent": "There is no semantics behind it.",
                    "label": 0
                },
                {
                    "sent": "What we have done is the edges use some dummy namespace so they are your eyes but they they are most likely not even reasonable.",
                    "label": 0
                },
                {
                    "sent": "It just is something we use.",
                    "label": 0
                },
                {
                    "sent": "And the objects everything that we found in the values of J of the Jason code.",
                    "label": 0
                },
                {
                    "sent": "So go into a lot like 29 and so on.",
                    "label": 0
                },
                {
                    "sent": "They're all literals, they're all strings.",
                    "label": 0
                },
                {
                    "sent": "This is just.",
                    "label": 0
                },
                {
                    "sent": "We transform it just syntactically.",
                    "label": 0
                },
                {
                    "sent": "No semantics behind it.",
                    "label": 0
                },
                {
                    "sent": "But then what we can do since this is.",
                    "label": 0
                }
            ]
        },
        "clip_56": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "RDF again.",
                    "label": 0
                },
                {
                    "sent": "We can transform this generically created tree representation in RDF.",
                    "label": 0
                },
                {
                    "sent": "Too real semantic data which is format to something with the real meaning with real your eyes that have meaning and this process then is referred to as lifting.",
                    "label": 1
                },
                {
                    "sent": "Because what we do is we take the uncemented data that we extracted from our legacy API and we bring them up onto a semantic level.",
                    "label": 0
                },
                {
                    "sent": "So we do the lifting.",
                    "label": 0
                },
                {
                    "sent": "And what we do here, because we already achieved to have RDF data.",
                    "label": 1
                },
                {
                    "sent": "Let me use a construct, query a spot here, construct query to transform this generic created RDF data into real data.",
                    "label": 1
                },
                {
                    "sent": "And also we have to think to remember that what we have to do is to make implicit knowledge explicit, which means what we want to do is we want to establish the link between input and output.",
                    "label": 0
                },
                {
                    "sent": "So the first thing we do for this generically created RDF, we add the input RDF.",
                    "label": 0
                },
                {
                    "sent": "That was submitted to the API in the first place.",
                    "label": 0
                }
            ]
        },
        "clip_57": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So it looked like now it looks like this.",
                    "label": 0
                },
                {
                    "sent": "This is the generically created RDF up here the two persons representing a tree and then we add these triples which were the original input.",
                    "label": 0
                },
                {
                    "sent": "And then we have a construct query.",
                    "label": 0
                },
                {
                    "sent": "And this construct query just move this thing into something real, it just transforms it into what we want to have that X knows Q.",
                    "label": 0
                },
                {
                    "sent": "Where X is both person access NID.",
                    "label": 0
                },
                {
                    "sent": "So these two things match the input.",
                    "label": 0
                },
                {
                    "sent": "So this is the way how we extract the X.",
                    "label": 0
                },
                {
                    "sent": "Then we bind it up here and say X both nose Q info for nose is a real UI with meaning and now we have to find something for Q. I.",
                    "label": 0
                },
                {
                    "sent": "This is done down here, so I get into that in a second, but this Q has to have a family name FN which is found in the tree and we just mimic the tree structure here with the pattern.",
                    "label": 0
                },
                {
                    "sent": "So you don't have to understand it completely.",
                    "label": 0
                },
                {
                    "sent": "You have to look into into constructor is very much true.",
                    "label": 0
                },
                {
                    "sent": "To get this completely I guess.",
                    "label": 0
                },
                {
                    "sent": "But what you have to understand is we use this construct query and again this construct query is static.",
                    "label": 0
                },
                {
                    "sent": "Because what we do is we transform the tree that was delivered in Jason to generic RDF.",
                    "label": 0
                },
                {
                    "sent": "So what will happen is for every legacy API call we will get something that looks like this and the only thing that will change the objects here.",
                    "label": 0
                },
                {
                    "sent": "And that's why this works all the time.",
                    "label": 0
                },
                {
                    "sent": "The where clause will match this tree representation all the time, and the input information are.",
                    "label": 0
                },
                {
                    "sent": "Defined in the 1st place anyway, so this construct query works.",
                    "label": 0
                },
                {
                    "sent": "Works for All Legacy API calls.",
                    "label": 0
                }
            ]
        },
        "clip_58": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So what happens?",
                    "label": 0
                },
                {
                    "sent": "I address this other thing as I said, the objects are just strings.",
                    "label": 0
                },
                {
                    "sent": "So going to 29 cars so and so on there just strings, but we might want to construct actually your eyes.",
                    "label": 0
                },
                {
                    "sent": "But Luckily Sparkle, the newest version of Sparkle 1.1 delivers US functionality is to do so, which is exactly this part.",
                    "label": 0
                },
                {
                    "sent": "So how do we construct this Q, which is supposed to be a you Ryan bowstring?",
                    "label": 0
                },
                {
                    "sent": "So it looks like this.",
                    "label": 0
                },
                {
                    "sent": "And it's not that difficult actually.",
                    "label": 0
                },
                {
                    "sent": "So you see, there's three functions.",
                    "label": 0
                },
                {
                    "sent": "This this one gets executed first.",
                    "label": 0
                },
                {
                    "sent": "It's a concatenation function saying concatenate this string, it's just a string because it has this quote here.",
                    "label": 0
                },
                {
                    "sent": "Example of\\ people hashtag and concatenate it with.",
                    "label": 0
                },
                {
                    "sent": "This is a variable which we can find in the work laws and if the concert.",
                    "label": 0
                },
                {
                    "sent": "Gets executed over our input data it will be bound with Poland and Kendra as strings.",
                    "label": 0
                },
                {
                    "sent": "So we concatenate this string with Roland and get that.",
                    "label": 0
                },
                {
                    "sent": "And then the next function is your eye, which makes this string to your eyes function, implicitly saying to the Sparkle engine.",
                    "label": 0
                },
                {
                    "sent": "Well, this is a string, please interpreted as your eye, and then we have this and the last thing is now please bind this year I took you and queues up here.",
                    "label": 0
                },
                {
                    "sent": "So we can also structurally construct your eyes in this process even though we don't get them from Jason.",
                    "label": 0
                }
            ]
        },
        "clip_59": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Alright, and so the result of all this.",
                    "label": 0
                },
                {
                    "sent": "Looks like this.",
                    "label": 0
                },
                {
                    "sent": "And that's it.",
                    "label": 0
                },
                {
                    "sent": "That's semantic.",
                    "label": 0
                },
                {
                    "sent": "RDF data constructed out of a Jason API and the only thing we had to do was transformed the syntax and write a query and this query stays the same for all the time.",
                    "label": 0
                },
                {
                    "sent": "So we have written clue code.",
                    "label": 0
                },
                {
                    "sent": "Once and we can use it for all combinations we want to do in the future because we have done.",
                    "label": 0
                }
            ]
        },
        "clip_60": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "It.",
                    "label": 0
                },
                {
                    "sent": "Then but since.",
                    "label": 0
                },
                {
                    "sent": "This select query and this construct query inherently represents some kind of knowledge because the select query and the construct query which perform lowering and lifting.",
                    "label": 1
                },
                {
                    "sent": "They kind of represent the intuition we put into this legacy API, so we looked into it as humans try to understand what it does and then we use this construct queries to deconstruct RDF onto non semantic level and reconstruct non semantic data in the lifting process to real RDF data.",
                    "label": 0
                },
                {
                    "sent": "There is knowledge in these two queries so we should publish them.",
                    "label": 0
                },
                {
                    "sent": "So again, we have this API.",
                    "label": 0
                },
                {
                    "sent": "Or this legacy web service, which performs some function we were interested in, and we constructed a linked API around it and this link.",
                    "label": 0
                },
                {
                    "sent": "The API had this lowering and lifting process, which allows us now to post RDF or to HTTP get method is also possible to the linked API.",
                    "label": 1
                },
                {
                    "sent": "The data gets lowered, the web service gets executed, function is performed.",
                    "label": 0
                },
                {
                    "sent": "Then there is some data Jason XML.",
                    "label": 0
                },
                {
                    "sent": "Whatever brought back.",
                    "label": 0
                },
                {
                    "sent": "We lift this and construct RDF data as output.",
                    "label": 0
                },
                {
                    "sent": "So since this is a valid linked API, we have, so again here is the intuition behind the lowering of lifting.",
                    "label": 1
                },
                {
                    "sent": "So the lowering basically answers the questions.",
                    "label": 0
                },
                {
                    "sent": "What is the semantic bands the para meters we have to use to call the Legacy API?",
                    "label": 1
                },
                {
                    "sent": "Because the electric says I want to have this and this in my RDF graph.",
                    "label": 0
                },
                {
                    "sent": "And this represents the input data for the legacy API, so we have to understand it.",
                    "label": 0
                },
                {
                    "sent": "And the same thing for the lifting.",
                    "label": 0
                }
            ]
        },
        "clip_61": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "To construct.",
                    "label": 0
                },
                {
                    "sent": "So now since it is a valid linked API, we also have.",
                    "label": 0
                },
                {
                    "sent": "RDF document describing this linked API.",
                    "label": 0
                },
                {
                    "sent": "And here again, you can find graph patterns describing the input and graph patterns describing the output.",
                    "label": 0
                },
                {
                    "sent": "So now what we do is we simply add two triples to the subscription.",
                    "label": 0
                },
                {
                    "sent": "Saying OK and now our linked API get friends service has the lowering schema mapping.",
                    "label": 1
                },
                {
                    "sent": "It's called Softail lowering schema mapping.",
                    "label": 0
                },
                {
                    "sent": "It's just because this is a you write that already holds this semantics intuition.",
                    "label": 0
                },
                {
                    "sent": "And we provided you Ryan behind this year.",
                    "label": 0
                },
                {
                    "sent": "I we can find the queries and the same thing for the lifting schema mapping.",
                    "label": 1
                },
                {
                    "sent": "So our get friends linked API has a lifting schema mapping and you can say identified with this UI and if we resign.",
                    "label": 0
                }
            ]
        },
        "clip_62": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "All of them.",
                    "label": 0
                },
                {
                    "sent": "My HP gets we should get these queries to look them up.",
                    "label": 0
                },
                {
                    "sent": "To show them to other people.",
                    "label": 0
                },
                {
                    "sent": "This allows other people to see.",
                    "label": 0
                },
                {
                    "sent": "OK, How did we interpret the original the Legacy API?",
                    "label": 0
                },
                {
                    "sent": "And also has another advantage because you have to do this in a certain way.",
                    "label": 0
                },
                {
                    "sent": "As you can see here, you publish them on your server, most likely in a file called Something point Sparkle.",
                    "label": 0
                },
                {
                    "sent": "And if you program like this you have your sparkle query, the select query and the construct query in separate files.",
                    "label": 0
                },
                {
                    "sent": "And you can you can you can implement your link API in that way and this has one significant advantage if your legacy API is changing.",
                    "label": 0
                },
                {
                    "sent": "If Facebook once again changes everything or early Twitter API changes everything, the only thing you have to change our your queries.",
                    "label": 0
                },
                {
                    "sent": "Because they won't get away from their structured approach to to output data, so they will continue to publish data in Jason format.",
                    "label": 0
                },
                {
                    "sent": "Just the formula itself will change, they will.",
                    "label": 0
                },
                {
                    "sent": "They will rearrange things, maybe, and then you just have to rearrange your queries and you can even do this during runtime so you don't have to go offline with something you just have to write 2 new queries and replace those and then your wrapping is still valid.",
                    "label": 0
                },
                {
                    "sent": "And this is very neat way to Rep services because you again completely decrease the effort.",
                    "label": 0
                },
                {
                    "sent": "You have to put into this thing.",
                    "label": 0
                },
                {
                    "sent": "Just have to understand what it does and write queries for it.",
                    "label": 0
                },
                {
                    "sent": "So, um.",
                    "label": 0
                },
                {
                    "sent": "Are there questions for this wrapping techniques?",
                    "label": 0
                },
                {
                    "sent": "Are there cases where this transformation does not work for results, or basically other APIs that return results which you can't just transform to generic RDF?",
                    "label": 0
                },
                {
                    "sent": "And then puts Parker queries on it.",
                    "label": 0
                },
                {
                    "sent": "I mean obviously the whole thing is based on the assumption that the output is somehow structured and I can understand the structure.",
                    "label": 0
                },
                {
                    "sent": "So for example, the IMDb API, as far as I know, they deliver really plain text.",
                    "label": 0
                },
                {
                    "sent": "What do I do with plain text?",
                    "label": 0
                },
                {
                    "sent": "I can't transform this generically, therefore I can't try to construct query to lift it.",
                    "label": 0
                },
                {
                    "sent": "This is bad.",
                    "label": 0
                },
                {
                    "sent": "Also I showed you the example for Jason.",
                    "label": 0
                },
                {
                    "sent": "There things are very easy.",
                    "label": 0
                },
                {
                    "sent": "XML is kind of a problem because XML has attributes and things like that it works somehow as long as it's structured it works for eczema usually.",
                    "label": 0
                },
                {
                    "sent": "It works.",
                    "label": 0
                },
                {
                    "sent": "Also very interesting is the area of when we try to wrap functionality's that are really just served by our web form.",
                    "label": 0
                },
                {
                    "sent": "So if you want to lift HTML pages.",
                    "label": 0
                },
                {
                    "sent": "The HTML actually should be valid XML.",
                    "label": 0
                },
                {
                    "sent": "It should be X HTML, but this is on the web, usually not the case.",
                    "label": 0
                },
                {
                    "sent": "And at the point where things are unstructured where they make errors in their web pages and I get problems doing the generic transformation.",
                    "label": 0
                },
                {
                    "sent": "Into RDF serialization.",
                    "label": 0
                },
                {
                    "sent": "So these are really problems, yeah?",
                    "label": 0
                },
                {
                    "sent": "But again, for this HTML part, even if they make errors in their HTML, then you can, as a human look onto these errors and they won't.",
                    "label": 0
                },
                {
                    "sent": "They won't change.",
                    "label": 0
                },
                {
                    "sent": "You have this error in every API.",
                    "label": 0
                },
                {
                    "sent": "You have to write code.",
                    "label": 0
                },
                {
                    "sent": "Now you have to write the code and and deal with these errors and if they fix them then you have to rewrite the code.",
                    "label": 0
                },
                {
                    "sent": "So there is a problem.",
                    "label": 0
                },
                {
                    "sent": "More questions.",
                    "label": 0
                }
            ]
        },
        "clip_63": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "OK, so.",
                    "label": 0
                },
                {
                    "sent": "Let's look at a real world example.",
                    "label": 1
                },
                {
                    "sent": "Um or a couple of them.",
                    "label": 0
                }
            ]
        },
        "clip_64": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So they're all online, so if you are online, you can actually check them out.",
                    "label": 0
                },
                {
                    "sent": "There's linked open movies, perhaps postpone com, which is a search API.",
                    "label": 1
                },
                {
                    "sent": "It reps functionality from themoviedb.org.",
                    "label": 1
                },
                {
                    "sent": "You can use a keyword based querying of movies and then you get RDF data with very rich information about this movies.",
                    "label": 0
                },
                {
                    "sent": "And they said it's wrapping service.",
                    "label": 0
                },
                {
                    "sent": "There is vocab dot CC vocab dot to see is an RDF vocabulary surge, So what you can do there is you can type in keywords and it replies to you with ontologies on the link data cloud.",
                    "label": 0
                },
                {
                    "sent": "This big thing and gives you usage information about classes and properties.",
                    "label": 1
                },
                {
                    "sent": "So if you want to know what's the most used property in the link data cloud, you can go to work up CC it's RDF type, obviously.",
                    "label": 0
                },
                {
                    "sent": "This one is not a wrapping service, it's made from scratch.",
                    "label": 0
                },
                {
                    "sent": "And there is Bing to RDF.",
                    "label": 0
                },
                {
                    "sent": "Which is basically a wrapper around the Bing picture search.",
                    "label": 0
                },
                {
                    "sent": "So it exactly mimics the functionality of Bing Pictures, so you can just type in a query and you get pictures, but also meta information about these pictures, all in RDF.",
                    "label": 0
                },
                {
                    "sent": "Let's look a little bit closer onto this being true RDF.",
                    "label": 0
                }
            ]
        },
        "clip_65": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Thing.",
                    "label": 0
                },
                {
                    "sent": "So it looks like this if you go to Bing to RDF punk appspot com com.",
                    "label": 0
                },
                {
                    "sent": "This web form, the actual UI that identifies the functionality behind it, is been to RDF, from Keppra com slash billing slash.",
                    "label": 0
                },
                {
                    "sent": "Get pictures.",
                    "label": 0
                },
                {
                    "sent": "So this is just the homepage and there's a UI that identifies the functionality.",
                    "label": 0
                },
                {
                    "sent": "And this form allows you to HTTP post RDF data to this API.",
                    "label": 1
                },
                {
                    "sent": "So in this case.",
                    "label": 0
                },
                {
                    "sent": "I hope you can see it.",
                    "label": 0
                },
                {
                    "sent": "You formalize query that holds a querystring Bunny and another query that holds a querystring dog.",
                    "label": 0
                },
                {
                    "sent": "And then you can.",
                    "label": 0
                },
                {
                    "sent": "You can hit the commit button and you perform actually in HTTP posts onto this service resource.",
                    "label": 0
                },
                {
                    "sent": "But if.",
                    "label": 0
                }
            ]
        },
        "clip_66": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Do this in your browser.",
                    "label": 0
                },
                {
                    "sent": "You might be disappointed because it looks like this.",
                    "label": 0
                },
                {
                    "sent": "I mean they're cute somehow, but this is not different from what Bing does, right?",
                    "label": 0
                },
                {
                    "sent": "I mean, you just get pictures.",
                    "label": 0
                },
                {
                    "sent": "Well, the reason for this is simple content negotiation.",
                    "label": 0
                },
                {
                    "sent": "Your browser always asks for HTML and this this API can reply to you with HTML and you get in a structured HTML page back with all these neat little pictures, but that's boring.",
                    "label": 1
                },
                {
                    "sent": "So what we what we used or what we have to do to see the interesting part is we have to use something that doesn't ask for HTML.",
                    "label": 0
                },
                {
                    "sent": "So we could write a complete application that consumes the API.",
                    "label": 0
                },
                {
                    "sent": "It would be one way.",
                    "label": 0
                }
            ]
        },
        "clip_67": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Or we use curl.",
                    "label": 0
                },
                {
                    "sent": "Gunther had curl as and as a tool on his slides.",
                    "label": 0
                },
                {
                    "sent": "Curl is a web browser.",
                    "label": 0
                },
                {
                    "sent": "But it's commandline based.",
                    "label": 0
                },
                {
                    "sent": "So if you are on Linux or a Mac, you have it automatically.",
                    "label": 0
                },
                {
                    "sent": "You can also download it for Windows, it's completely command line based.",
                    "label": 0
                },
                {
                    "sent": "In there we can we can specify our header.",
                    "label": 0
                },
                {
                    "sent": "We can specify what we actually ask for, so we don't have to build a complete application.",
                    "label": 0
                },
                {
                    "sent": "And it works like this.",
                    "label": 0
                },
                {
                    "sent": "We say we use curl and we say OK, I want to perform a post to this Uribe into rdfx.com/billing slash get pictures.",
                    "label": 0
                },
                {
                    "sent": "I want to post the data in this file data from the RDF for example.",
                    "label": 0
                },
                {
                    "sent": "And with the H flag you can set your header and we really say and we want to accept text and three your browser.",
                    "label": 0
                },
                {
                    "sent": "At this point your browser says accept text HTML.",
                    "label": 0
                },
                {
                    "sent": "You just don't see it.",
                    "label": 0
                },
                {
                    "sent": "You browser hisis from you and here you can just set it.",
                    "label": 0
                },
                {
                    "sent": "It also would be possible for application XML RDF.",
                    "label": 0
                },
                {
                    "sent": "Or you could also ask for HTML here, but then you get the HTML printed in your command.",
                    "label": 0
                }
            ]
        },
        "clip_68": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Fine, so it looks like this.",
                    "label": 0
                },
                {
                    "sent": "I don't know if you can see it behind there, but this is exactly the same thing I've just shown to you and you get really a response that is structured RDF data holding various information about the pictures like the URL where it lies, its size, where you can find a thumbnail for it.",
                    "label": 0
                },
                {
                    "sent": "What media type it is?",
                    "label": 0
                },
                {
                    "sent": "If it is a JPEG or VP, BMP picture or whatever, so you can really RDF data back if you ask for RDF data and this is what we wanted to achieve.",
                    "label": 0
                },
                {
                    "sent": "So we have an API and it worked like Link data.",
                    "label": 0
                }
            ]
        },
        "clip_69": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Also the description so you can again go to bin to RDF from Jasper com slash billing slash find pictures you automatically get redirected to slash description.",
                    "label": 0
                },
                {
                    "sent": "And again, you've seen HTML representation of this whole thing, so we just get the namespace.",
                    "label": 0
                },
                {
                    "sent": "The API operates under and you get the two graph patterns.",
                    "label": 0
                },
                {
                    "sent": "In HTML, in an HTML page embedded and you can see this output pattern looks a little bit more complicated than the ones I've shown to you, but that's the way it works.",
                    "label": 0
                },
                {
                    "sent": "But you can also go to this to to be into RDF from F open com slash billing slash, get pictures with curl asking for three and it will reply to your name.",
                    "label": 0
                },
                {
                    "sent": "Does not work three or three.",
                    "label": 0
                },
                {
                    "sent": "This is a functionality.",
                    "label": 0
                },
                {
                    "sent": "So what you have to do and it also provides you.",
                    "label": 0
                },
                {
                    "sent": "You can see this here.",
                    "label": 0
                },
                {
                    "sent": "See other locations into RDF slash description.",
                    "label": 0
                },
                {
                    "sent": "And if you resolve this, you are I asking for three, you really get you really get RDF data as the description of this API.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "You can try this out.",
                    "label": 0
                },
                {
                    "sent": "I don't know if you have questions to this right now or.",
                    "label": 0
                },
                {
                    "sent": "OK.",
                    "label": 0
                }
            ]
        },
        "clip_70": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Let's finally have a look at the related work of this area.",
                    "label": 0
                },
                {
                    "sent": "As I already mentioned, web services, especially semantic web services.",
                    "label": 0
                },
                {
                    "sent": "They are around for quite a while now.",
                    "label": 0
                },
                {
                    "sent": "There are several different approaches out there.",
                    "label": 0
                },
                {
                    "sent": "This is not a complete list here.",
                    "label": 0
                },
                {
                    "sent": "I just want to mention there is all S for example, which is an ontology to describe web services.",
                    "label": 1
                },
                {
                    "sent": "It works similar to the way I've shown to you, so you can map message parts of web services to ontologies.",
                    "label": 0
                },
                {
                    "sent": "And it also provides a mechanism to model processes and constraints on processes by using rule languages.",
                    "label": 1
                },
                {
                    "sent": "There's the also question is web service modeling ontology wizmo?",
                    "label": 0
                },
                {
                    "sent": "Which is very similar to all as, but a little bit broader scope.",
                    "label": 0
                },
                {
                    "sent": "But it's also ontology based and rule based model process.",
                    "label": 0
                },
                {
                    "sent": "There is the minimal service model which is actually one of these approaches that's also associated with linked services.",
                    "label": 0
                },
                {
                    "sent": "The original type of presentation.",
                    "label": 0
                },
                {
                    "sent": "MSM is a lightweight description that tries to have an homogeneous view over whistle, which is the web service description language.",
                    "label": 1
                },
                {
                    "sent": "And web API's.",
                    "label": 1
                },
                {
                    "sent": "Um, actually linked APIs use the vocabulary provided by minimal by the minimal service model, but just the vocabulary and.",
                    "label": 0
                },
                {
                    "sent": "It's also a need model.",
                    "label": 0
                },
                {
                    "sent": "It uses I serve as a centralized service repository.",
                    "label": 0
                },
                {
                    "sent": "So if you're familiar with service technologies I service could be compared to UDDI as an approach.",
                    "label": 0
                },
                {
                    "sent": "Then there is rest desk.",
                    "label": 1
                },
                {
                    "sent": "Rest actually also fall under the category linked API becausw rest desks.",
                    "label": 0
                },
                {
                    "sent": "Functional description of rest API's.",
                    "label": 1
                },
                {
                    "sent": "What I've shown to you, the only there also graph pattern based the description is the whole description.",
                    "label": 0
                },
                {
                    "sent": "Here is in notation three, so the whole service description isn't graph pattern format.",
                    "label": 0
                },
                {
                    "sent": "So entry is a super set of RDF.",
                    "label": 0
                },
                {
                    "sent": "It also holds some kind of rule semantics.",
                    "label": 0
                },
                {
                    "sent": "But apart from that, the approach is very similar.",
                    "label": 0
                },
                {
                    "sent": "Then there is a treson essay rest.",
                    "label": 0
                },
                {
                    "sent": "So in a nutshell, these are supposed to be class based annotations in HTML pages itself.",
                    "label": 0
                },
                {
                    "sent": "So the idea here is to annotate HTML pages and the texts that describe the APIs with structured information in the HTML itself to allow machines to understand these texts better.",
                    "label": 0
                },
                {
                    "sent": "And they also provide of course.",
                    "label": 0
                },
                {
                    "sent": "The semantics validations.",
                    "label": 0
                },
                {
                    "sent": "So.",
                    "label": 0
                }
            ]
        },
        "clip_71": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Let's sum this up again.",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "I hope I've shown to you.",
                    "label": 0
                },
                {
                    "sent": "The web is not only about static data that he did are important, but it's not everything.",
                    "label": 1
                },
                {
                    "sent": "Data is created dynamically in various environments for several reasons.",
                    "label": 0
                },
                {
                    "sent": "Functionality's are offered on the web.",
                    "label": 0
                },
                {
                    "sent": "You have to describe this functionalities as well.",
                    "label": 0
                },
                {
                    "sent": "And there are also dynamic.",
                    "label": 0
                },
                {
                    "sent": "And we run into problems if we deal with heterogeneous formats just as we do with heterogeneous formats.",
                    "label": 0
                },
                {
                    "sent": "I used for static data.",
                    "label": 0
                },
                {
                    "sent": "We have the same problems if he used him for dynamics.",
                    "label": 1
                },
                {
                    "sent": "And to overcome this problem is a combination of linked data technologies, RDF and Sparkle and lightweight Restful architecture technologies seem very promising and concretely, the four principles I've gone through three through this presentation.",
                    "label": 0
                },
                {
                    "sent": "Provide you with a very lightweight approach to deal with these things.",
                    "label": 0
                },
                {
                    "sent": "So describe APIs Elodie prosumers as link data.",
                    "label": 0
                },
                {
                    "sent": "Prosumers consumer and producer.",
                    "label": 0
                },
                {
                    "sent": "Describe them with graph patterns.",
                    "label": 0
                },
                {
                    "sent": "Communicate your RDF with restful content negotiation.",
                    "label": 0
                },
                {
                    "sent": "Make explicit the relation between inputs, outputs to really render the semantics of the calculations you do over the input to really render the calculations of the dynamics.",
                    "label": 0
                },
                {
                    "sent": "And when you rap and unlinked API, do this with link data technologies like Sparkle queries and public and publish this sparkle queries this construct and lifting queries to make implicit explicit knowledge, which is exactly this relation between input and output.",
                    "label": 0
                },
                {
                    "sent": "So in a nutshell that's linked AP.",
                    "label": 0
                }
            ]
        },
        "clip_72": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Ice.",
                    "label": 0
                },
                {
                    "sent": "Thank you so far and now we have time for questions.",
                    "label": 0
                }
            ]
        },
        "clip_73": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So let's just go over it quickly.",
                    "label": 0
                },
                {
                    "sent": "I mean, 15 minutes are usually not enough to for this whole time.",
                    "label": 0
                }
            ]
        },
        "clip_74": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "OK.",
                    "label": 0
                },
                {
                    "sent": "So link APIs I've shown this to you that described with this graph.",
                    "label": 0
                },
                {
                    "sent": "Patterns, input and output descriptions and so forth, But the question is now, how can we find linked APIs?",
                    "label": 0
                },
                {
                    "sent": "How we can we actually leverage these descriptions we put out on the web?",
                    "label": 0
                },
                {
                    "sent": "So the idea is that these descriptions are in the link data cloud.",
                    "label": 1
                },
                {
                    "sent": "Because their RDF and they are publishing link data cloud right.",
                    "label": 1
                },
                {
                    "sent": "And these descriptions contain these graph patterns.",
                    "label": 1
                },
                {
                    "sent": "As literals in the RDF.",
                    "label": 0
                }
            ]
        },
        "clip_75": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "So what we can do is we can allow users or agents which can be machines and humans like.",
                    "label": 0
                },
                {
                    "sent": "Add to formalize their requirements, so we have to allow agents to somehow write up what they actually want.",
                    "label": 0
                },
                {
                    "sent": "What they kept on, what they can do.",
                    "label": 0
                },
                {
                    "sent": "So what we do for this, we allow them to formalize API templates.",
                    "label": 0
                },
                {
                    "sent": "And these API templates they are.",
                    "label": 1
                },
                {
                    "sent": "They are syntactically exactly the same thing as the input and output descriptions of the API, so they are spark graph patterns.",
                    "label": 0
                },
                {
                    "sent": "Just the semantics is a little bit different, so it's two sparkle graph patterns.",
                    "label": 0
                },
                {
                    "sent": "One describing what input can an agent provide?",
                    "label": 1
                },
                {
                    "sent": "For the invocation of a linked API.",
                    "label": 0
                },
                {
                    "sent": "So we describe a pattern that basically says I'm an agent and I have this data that I can use.",
                    "label": 0
                },
                {
                    "sent": "To interact with an API that looks like this that follows this pattern.",
                    "label": 0
                },
                {
                    "sent": "And another pattern that describes and I want to find data.",
                    "label": 0
                },
                {
                    "sent": "I want to get data back from the API that follows this other pattern.",
                    "label": 0
                },
                {
                    "sent": "So we have an input and output pattern in templates.",
                    "label": 0
                }
            ]
        },
        "clip_76": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "And now what we do for discovery is basically a question of graph pattern containment.",
                    "label": 1
                },
                {
                    "sent": "So we want to ask.",
                    "label": 1
                },
                {
                    "sent": "And we define traditionally a couple of metrics to really make a really fine grained discovery, so we own.",
                    "label": 0
                },
                {
                    "sent": "We not only want to find APIs that precisely are what we're looking for, but we also want to be possible to say, well there is an API.",
                    "label": 0
                },
                {
                    "sent": "It's not precisely what you are looking for, but it's it's similar to it.",
                    "label": 0
                },
                {
                    "sent": "And to do this we define ratios called predicate substrate ratio, which intuitively just means to what degree are the use predicates in one.",
                    "label": 1
                },
                {
                    "sent": "Pattern part of the other.",
                    "label": 1
                },
                {
                    "sent": "So the question is, to what degree are the patterns?",
                    "label": 1
                },
                {
                    "sent": "The predicates in the output pattern of an API part of the template patterns.",
                    "label": 0
                },
                {
                    "sent": "And the same thing for the input.",
                    "label": 0
                },
                {
                    "sent": "And we do the same thing as resource subset ratio for the eurizon subject and object position.",
                    "label": 0
                },
                {
                    "sent": "I will make an example which makes it a little bit clearer.",
                    "label": 0
                },
                {
                    "sent": "So these ratios look like this.",
                    "label": 0
                }
            ]
        },
        "clip_77": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "I don't go into detail in depth.",
                    "label": 0
                },
                {
                    "sent": "So here's an example.",
                    "label": 0
                },
                {
                    "sent": "So let's say we have an API description similar to what we have seen so far that says this input.",
                    "label": 0
                },
                {
                    "sent": "I want something that's a person and the social network idea of it.",
                    "label": 0
                },
                {
                    "sent": "And as output, this API delivers information that this me know something else which is also a person, its name, its age and then open ID.",
                    "label": 0
                },
                {
                    "sent": "Now, an agent that wants to look up services might formalize something like this.",
                    "label": 0
                },
                {
                    "sent": "An agent might say my have data that describes something that's a person.",
                    "label": 0
                },
                {
                    "sent": "And what I'm looking for actually what I want to have is data that describes well that this person knows some other person, and I want the name of the age of this other person.",
                    "label": 0
                },
                {
                    "sent": "So again, this is patterns following the same, the same idea.",
                    "label": 0
                },
                {
                    "sent": "We use patterns to describe the structure of the things we have and we want.",
                    "label": 0
                },
                {
                    "sent": "And what we do is we compare those.",
                    "label": 0
                },
                {
                    "sent": "We compare the template input with the description input and the description output with the template output.",
                    "label": 0
                },
                {
                    "sent": "And this Canada scenario.",
                    "label": 0
                },
                {
                    "sent": "And we calculate these these these metrics for input and output respectively.",
                    "label": 0
                },
                {
                    "sent": "So for the input we find out that the predicate subject ratio is only 0.5.",
                    "label": 0
                },
                {
                    "sent": "The reason for this is the template actually has only one one predicate in the A.",
                    "label": 0
                },
                {
                    "sent": "The description had two A&SNID&SN.",
                    "label": 0
                },
                {
                    "sent": "ID wasn't in the template.",
                    "label": 0
                },
                {
                    "sent": "So the intuition here is the agent said I have triples looking like this.",
                    "label": 0
                },
                {
                    "sent": "Me a fourth person and the API once triples.",
                    "label": 0
                },
                {
                    "sent": "That's a mere 4th person and an SN ID, but the SN ID is missing, so this is the reason why it's only 0.5 for the resource subset.",
                    "label": 0
                },
                {
                    "sent": "It works out because template only has one resource really used in the object position called 4th person, and this is also used in the template.",
                    "label": 0
                },
                {
                    "sent": "And we do the same thing for the output descriptions.",
                    "label": 0
                },
                {
                    "sent": "And here we have 0.1 and 0.1 relations, so we actually are here in situation.",
                    "label": 0
                },
                {
                    "sent": "We really can say, well, this API is not perfect for what the agent described, because the agent can't invoke.",
                    "label": 0
                },
                {
                    "sent": "It's completely.",
                    "label": 0
                },
                {
                    "sent": "He's missing one triple, but it provides perfectly what he's looking for.",
                    "label": 0
                },
                {
                    "sent": "And even in the input is to 50% already a match, and this is valuable information for us, because we can.",
                    "label": 0
                },
                {
                    "sent": "We can say, alright, this API that's described here.",
                    "label": 0
                },
                {
                    "sent": "It is what you're looking for, but you're missing something you can.",
                    "label": 0
                },
                {
                    "sent": "You're missing the social network ID, and you can write applications that basically returned to the agent and say, could you provide this to me?",
                    "label": 0
                },
                {
                    "sent": "Could you look for something else?",
                    "label": 0
                },
                {
                    "sent": "Or you could go even one step further and formalizing new template where you say to invoke this I need a social social network ID, so maybe I can find another API that delivers this social network ID for me and then formalizing new template and look for for other APIs.",
                    "label": 0
                }
            ]
        },
        "clip_78": {
            "is_summarization_sample": true,
            "summarization_data": [
                {
                    "sent": "Gateway.",
                    "label": 0
                },
                {
                    "sent": "Um?",
                    "label": 0
                },
                {
                    "sent": "So scalability is here a very big issue, because this graph pattern containment relations we calculate here they have to be done for an exponential amount of combinations of templates and APIs.",
                    "label": 1
                },
                {
                    "sent": "We've done some experiments in this invite.",
                    "label": 0
                }
            ]
        },
        "clip_79": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "I meant with a Hadoop MapReduce technologies which are basically cloud technologies for distributed computing, and what we?",
                    "label": 0
                }
            ]
        },
        "clip_80": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Found is that.",
                    "label": 0
                },
                {
                    "sent": "If you do this in a distributed environment, you can very easily break it up, and if you use several nodes in a cloud, so you several machines at the same time to calculate the these pattern relationships, you really have a nice decrease in.",
                    "label": 0
                }
            ]
        },
        "clip_81": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And reaction time.",
                    "label": 0
                }
            ]
        },
        "clip_82": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "And the nice thing is that this increase is not only based on the fact that you use more computational power.",
                    "label": 0
                },
                {
                    "sent": "So it's not only because you use more machines that have inherently than more CPUs and more memory, or something like that, you can also very strategically distribute your computations and decrease your time along that line.",
                    "label": 0
                },
                {
                    "sent": "So for discovery this works out very very well and I guess.",
                    "label": 0
                },
                {
                    "sent": "Now I've used up enough time, so thank you very much and if you have questions to this discovery, of course I'm here.",
                    "label": 0
                },
                {
                    "sent": "Maybe it's not about discovery, but something is just a very silly question.",
                    "label": 0
                },
                {
                    "sent": "For example, if I have an API which doesn't require any input parameter, you just put an empty graph pattern or something.",
                    "label": 0
                },
                {
                    "sent": "For example, if I want the list of all countries, that's my API.",
                    "label": 0
                },
                {
                    "sent": "Of.",
                    "label": 0
                },
                {
                    "sent": "This sounds more like like like a static data retrieval.",
                    "label": 0
                },
                {
                    "sent": "Yeah, yeah, but it could be.",
                    "label": 0
                },
                {
                    "sent": "For example, it could be an API that says give me the latest temperature values in this region, but it's kind of fixed.",
                    "label": 0
                },
                {
                    "sent": "But then your input will be the region.",
                    "label": 0
                },
                {
                    "sent": "OK yeah, but let's say if you're really not in a situation where you don't need an input.",
                    "label": 0
                },
                {
                    "sent": "Let's say the list of all countries on this world, then.",
                    "label": 0
                },
                {
                    "sent": "You could actually use.",
                    "label": 0
                }
            ]
        },
        "clip_83": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "So.",
                    "label": 0
                },
                {
                    "sent": "You could use an empty graph pattern, because your API would not be dependent on some kind of input, so you wouldn't have to perform any kind of cancellation and therefore you could use an empty graph pattern and actually it would.",
                    "label": 0
                },
                {
                    "sent": "It would fit very well because in this scenario where you extend for an HTTP get your eye, we extend the service UI.",
                    "label": 0
                },
                {
                    "sent": "What would happen is that you would.",
                    "label": 0
                }
            ]
        },
        "clip_84": {
            "is_summarization_sample": false,
            "summarization_data": [
                {
                    "sent": "Come back actually to this delicious APS anyway.",
                    "label": 0
                },
                {
                    "sent": "To to your eye without key value pairs, and is linked to your.",
                    "label": 0
                },
                {
                    "sent": "I like like all the link data your eyes and you resolve it and you get all all country specs, so it would exactly turned back toward Link data.",
                    "label": 0
                },
                {
                    "sent": "Is anyway.",
                    "label": 0
                },
                {
                    "sent": "Yeah makes a lot of sense and one other thing, what if I have my sparkle endpoint?",
                    "label": 0
                },
                {
                    "sent": "My typical sparkling point?",
                    "label": 0
                },
                {
                    "sent": "Does it make any sense for me to to publish us as linked APIs?",
                    "label": 0
                },
                {
                    "sent": "What are the benefits?",
                    "label": 0
                },
                {
                    "sent": "Just it might so.",
                    "label": 0
                },
                {
                    "sent": "What you can do with the sparkle endpoint if you if you expose it as a linked API is you would actually define a pattern and you could describe it so you can post arbitrary queries to sparkle endpoint.",
                    "label": 0
                },
                {
                    "sent": "But the linked API would do for you is describe certain patterns that make a lot of sense, so you might have a database about countries and people in it or whatever, and so there's only two things you can query for and it wouldn't make sense to ask this sparkle endpoint.",
                    "label": 0
                },
                {
                    "sent": "For anything else, right?",
                    "label": 0
                },
                {
                    "sent": "So you you have to have an understanding of what's behind the sparkle endpoint to formalize your queries, and the queries are inherently in the linked API already, so you you take this this burden from the user away to have an understanding of the of the database behind it.",
                    "label": 0
                },
                {
                    "sent": "Yeah, it's a very useful thing, because for people who have worked or have been exposed to sparkle endpoints, the problem is that you have the endpoint, but you don't know what to do with it.",
                    "label": 0
                },
                {
                    "sent": "Yeah exactly, you have no clue of what date is it there, so you need some kind of description or anything so.",
                    "label": 0
                },
                {
                    "sent": "In this case it's yeah, so not the spot itself in the newest version also provides functionalities to write templates, so this is kind of the same thing.",
                    "label": 0
                },
                {
                    "sent": "OK, if there are no more questions.",
                    "label": 0
                },
                {
                    "sent": "Thanks very much.",
                    "label": 0
                }
            ]
        }
    }
}